
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bfc  08004bfc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004bfc  08004bfc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bfc  08004bfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08004c74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004c74  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e9c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de6  00000000  00000000  00028f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002ad20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c81e  00000000  00000000  0002bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa55  00000000  00000000  000486c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4a8d  00000000  00000000  0005311b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107ba8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002490  00000000  00000000  00107bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004a9c 	.word	0x08004a9c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08004a9c 	.word	0x08004a9c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_f2uiz>:
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	b510      	push	{r4, lr}
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	1c04      	adds	r4, r0, #0
 8000238:	f000 fc90 	bl	8000b5c <__aeabi_fcmpge>
 800023c:	2800      	cmp	r0, #0
 800023e:	d103      	bne.n	8000248 <__aeabi_f2uiz+0x18>
 8000240:	1c20      	adds	r0, r4, #0
 8000242:	f000 fbf9 	bl	8000a38 <__aeabi_f2iz>
 8000246:	bd10      	pop	{r4, pc}
 8000248:	219e      	movs	r1, #158	; 0x9e
 800024a:	1c20      	adds	r0, r4, #0
 800024c:	05c9      	lsls	r1, r1, #23
 800024e:	f000 fa45 	bl	80006dc <__aeabi_fsub>
 8000252:	f000 fbf1 	bl	8000a38 <__aeabi_f2iz>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	061b      	lsls	r3, r3, #24
 800025a:	469c      	mov	ip, r3
 800025c:	4460      	add	r0, ip
 800025e:	e7f2      	b.n	8000246 <__aeabi_f2uiz+0x16>

08000260 <__aeabi_fdiv>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	0245      	lsls	r5, r0, #9
 800026a:	b5c0      	push	{r6, r7, lr}
 800026c:	0047      	lsls	r7, r0, #1
 800026e:	1c0c      	adds	r4, r1, #0
 8000270:	0a6d      	lsrs	r5, r5, #9
 8000272:	0e3f      	lsrs	r7, r7, #24
 8000274:	0fc6      	lsrs	r6, r0, #31
 8000276:	2f00      	cmp	r7, #0
 8000278:	d100      	bne.n	800027c <__aeabi_fdiv+0x1c>
 800027a:	e070      	b.n	800035e <__aeabi_fdiv+0xfe>
 800027c:	2fff      	cmp	r7, #255	; 0xff
 800027e:	d100      	bne.n	8000282 <__aeabi_fdiv+0x22>
 8000280:	e075      	b.n	800036e <__aeabi_fdiv+0x10e>
 8000282:	00eb      	lsls	r3, r5, #3
 8000284:	2580      	movs	r5, #128	; 0x80
 8000286:	04ed      	lsls	r5, r5, #19
 8000288:	431d      	orrs	r5, r3
 800028a:	2300      	movs	r3, #0
 800028c:	4699      	mov	r9, r3
 800028e:	469a      	mov	sl, r3
 8000290:	3f7f      	subs	r7, #127	; 0x7f
 8000292:	0260      	lsls	r0, r4, #9
 8000294:	0a43      	lsrs	r3, r0, #9
 8000296:	4698      	mov	r8, r3
 8000298:	0063      	lsls	r3, r4, #1
 800029a:	0e1b      	lsrs	r3, r3, #24
 800029c:	0fe4      	lsrs	r4, r4, #31
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d04e      	beq.n	8000340 <__aeabi_fdiv+0xe0>
 80002a2:	2bff      	cmp	r3, #255	; 0xff
 80002a4:	d046      	beq.n	8000334 <__aeabi_fdiv+0xd4>
 80002a6:	4642      	mov	r2, r8
 80002a8:	00d0      	lsls	r0, r2, #3
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	04d2      	lsls	r2, r2, #19
 80002ae:	4302      	orrs	r2, r0
 80002b0:	4690      	mov	r8, r2
 80002b2:	2200      	movs	r2, #0
 80002b4:	3b7f      	subs	r3, #127	; 0x7f
 80002b6:	0031      	movs	r1, r6
 80002b8:	1aff      	subs	r7, r7, r3
 80002ba:	464b      	mov	r3, r9
 80002bc:	4061      	eors	r1, r4
 80002be:	b2c9      	uxtb	r1, r1
 80002c0:	4313      	orrs	r3, r2
 80002c2:	2b0f      	cmp	r3, #15
 80002c4:	d900      	bls.n	80002c8 <__aeabi_fdiv+0x68>
 80002c6:	e0b5      	b.n	8000434 <__aeabi_fdiv+0x1d4>
 80002c8:	486e      	ldr	r0, [pc, #440]	; (8000484 <__aeabi_fdiv+0x224>)
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	58c3      	ldr	r3, [r0, r3]
 80002ce:	469f      	mov	pc, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	4698      	mov	r8, r3
 80002d4:	0026      	movs	r6, r4
 80002d6:	4645      	mov	r5, r8
 80002d8:	4692      	mov	sl, r2
 80002da:	4653      	mov	r3, sl
 80002dc:	2b02      	cmp	r3, #2
 80002de:	d100      	bne.n	80002e2 <__aeabi_fdiv+0x82>
 80002e0:	e089      	b.n	80003f6 <__aeabi_fdiv+0x196>
 80002e2:	2b03      	cmp	r3, #3
 80002e4:	d100      	bne.n	80002e8 <__aeabi_fdiv+0x88>
 80002e6:	e09e      	b.n	8000426 <__aeabi_fdiv+0x1c6>
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d018      	beq.n	800031e <__aeabi_fdiv+0xbe>
 80002ec:	003b      	movs	r3, r7
 80002ee:	337f      	adds	r3, #127	; 0x7f
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	dd69      	ble.n	80003c8 <__aeabi_fdiv+0x168>
 80002f4:	076a      	lsls	r2, r5, #29
 80002f6:	d004      	beq.n	8000302 <__aeabi_fdiv+0xa2>
 80002f8:	220f      	movs	r2, #15
 80002fa:	402a      	ands	r2, r5
 80002fc:	2a04      	cmp	r2, #4
 80002fe:	d000      	beq.n	8000302 <__aeabi_fdiv+0xa2>
 8000300:	3504      	adds	r5, #4
 8000302:	012a      	lsls	r2, r5, #4
 8000304:	d503      	bpl.n	800030e <__aeabi_fdiv+0xae>
 8000306:	4b60      	ldr	r3, [pc, #384]	; (8000488 <__aeabi_fdiv+0x228>)
 8000308:	401d      	ands	r5, r3
 800030a:	003b      	movs	r3, r7
 800030c:	3380      	adds	r3, #128	; 0x80
 800030e:	2bfe      	cmp	r3, #254	; 0xfe
 8000310:	dd00      	ble.n	8000314 <__aeabi_fdiv+0xb4>
 8000312:	e070      	b.n	80003f6 <__aeabi_fdiv+0x196>
 8000314:	01ad      	lsls	r5, r5, #6
 8000316:	0a6d      	lsrs	r5, r5, #9
 8000318:	b2d8      	uxtb	r0, r3
 800031a:	e002      	b.n	8000322 <__aeabi_fdiv+0xc2>
 800031c:	000e      	movs	r6, r1
 800031e:	2000      	movs	r0, #0
 8000320:	2500      	movs	r5, #0
 8000322:	05c0      	lsls	r0, r0, #23
 8000324:	4328      	orrs	r0, r5
 8000326:	07f6      	lsls	r6, r6, #31
 8000328:	4330      	orrs	r0, r6
 800032a:	bce0      	pop	{r5, r6, r7}
 800032c:	46ba      	mov	sl, r7
 800032e:	46b1      	mov	r9, r6
 8000330:	46a8      	mov	r8, r5
 8000332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000334:	4643      	mov	r3, r8
 8000336:	2b00      	cmp	r3, #0
 8000338:	d13f      	bne.n	80003ba <__aeabi_fdiv+0x15a>
 800033a:	2202      	movs	r2, #2
 800033c:	3fff      	subs	r7, #255	; 0xff
 800033e:	e003      	b.n	8000348 <__aeabi_fdiv+0xe8>
 8000340:	4643      	mov	r3, r8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d12d      	bne.n	80003a2 <__aeabi_fdiv+0x142>
 8000346:	2201      	movs	r2, #1
 8000348:	0031      	movs	r1, r6
 800034a:	464b      	mov	r3, r9
 800034c:	4061      	eors	r1, r4
 800034e:	b2c9      	uxtb	r1, r1
 8000350:	4313      	orrs	r3, r2
 8000352:	2b0f      	cmp	r3, #15
 8000354:	d834      	bhi.n	80003c0 <__aeabi_fdiv+0x160>
 8000356:	484d      	ldr	r0, [pc, #308]	; (800048c <__aeabi_fdiv+0x22c>)
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	58c3      	ldr	r3, [r0, r3]
 800035c:	469f      	mov	pc, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d113      	bne.n	800038a <__aeabi_fdiv+0x12a>
 8000362:	2304      	movs	r3, #4
 8000364:	4699      	mov	r9, r3
 8000366:	3b03      	subs	r3, #3
 8000368:	2700      	movs	r7, #0
 800036a:	469a      	mov	sl, r3
 800036c:	e791      	b.n	8000292 <__aeabi_fdiv+0x32>
 800036e:	2d00      	cmp	r5, #0
 8000370:	d105      	bne.n	800037e <__aeabi_fdiv+0x11e>
 8000372:	2308      	movs	r3, #8
 8000374:	4699      	mov	r9, r3
 8000376:	3b06      	subs	r3, #6
 8000378:	27ff      	movs	r7, #255	; 0xff
 800037a:	469a      	mov	sl, r3
 800037c:	e789      	b.n	8000292 <__aeabi_fdiv+0x32>
 800037e:	230c      	movs	r3, #12
 8000380:	4699      	mov	r9, r3
 8000382:	3b09      	subs	r3, #9
 8000384:	27ff      	movs	r7, #255	; 0xff
 8000386:	469a      	mov	sl, r3
 8000388:	e783      	b.n	8000292 <__aeabi_fdiv+0x32>
 800038a:	0028      	movs	r0, r5
 800038c:	f000 fbf0 	bl	8000b70 <__clzsi2>
 8000390:	2776      	movs	r7, #118	; 0x76
 8000392:	1f43      	subs	r3, r0, #5
 8000394:	409d      	lsls	r5, r3
 8000396:	2300      	movs	r3, #0
 8000398:	427f      	negs	r7, r7
 800039a:	4699      	mov	r9, r3
 800039c:	469a      	mov	sl, r3
 800039e:	1a3f      	subs	r7, r7, r0
 80003a0:	e777      	b.n	8000292 <__aeabi_fdiv+0x32>
 80003a2:	4640      	mov	r0, r8
 80003a4:	f000 fbe4 	bl	8000b70 <__clzsi2>
 80003a8:	4642      	mov	r2, r8
 80003aa:	1f43      	subs	r3, r0, #5
 80003ac:	409a      	lsls	r2, r3
 80003ae:	2376      	movs	r3, #118	; 0x76
 80003b0:	425b      	negs	r3, r3
 80003b2:	4690      	mov	r8, r2
 80003b4:	1a1b      	subs	r3, r3, r0
 80003b6:	2200      	movs	r2, #0
 80003b8:	e77d      	b.n	80002b6 <__aeabi_fdiv+0x56>
 80003ba:	23ff      	movs	r3, #255	; 0xff
 80003bc:	2203      	movs	r2, #3
 80003be:	e77a      	b.n	80002b6 <__aeabi_fdiv+0x56>
 80003c0:	000e      	movs	r6, r1
 80003c2:	20ff      	movs	r0, #255	; 0xff
 80003c4:	2500      	movs	r5, #0
 80003c6:	e7ac      	b.n	8000322 <__aeabi_fdiv+0xc2>
 80003c8:	2001      	movs	r0, #1
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	281b      	cmp	r0, #27
 80003ce:	dca6      	bgt.n	800031e <__aeabi_fdiv+0xbe>
 80003d0:	379e      	adds	r7, #158	; 0x9e
 80003d2:	002a      	movs	r2, r5
 80003d4:	40bd      	lsls	r5, r7
 80003d6:	40c2      	lsrs	r2, r0
 80003d8:	1e6b      	subs	r3, r5, #1
 80003da:	419d      	sbcs	r5, r3
 80003dc:	4315      	orrs	r5, r2
 80003de:	076b      	lsls	r3, r5, #29
 80003e0:	d004      	beq.n	80003ec <__aeabi_fdiv+0x18c>
 80003e2:	230f      	movs	r3, #15
 80003e4:	402b      	ands	r3, r5
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	d000      	beq.n	80003ec <__aeabi_fdiv+0x18c>
 80003ea:	3504      	adds	r5, #4
 80003ec:	016b      	lsls	r3, r5, #5
 80003ee:	d544      	bpl.n	800047a <__aeabi_fdiv+0x21a>
 80003f0:	2001      	movs	r0, #1
 80003f2:	2500      	movs	r5, #0
 80003f4:	e795      	b.n	8000322 <__aeabi_fdiv+0xc2>
 80003f6:	20ff      	movs	r0, #255	; 0xff
 80003f8:	2500      	movs	r5, #0
 80003fa:	e792      	b.n	8000322 <__aeabi_fdiv+0xc2>
 80003fc:	2580      	movs	r5, #128	; 0x80
 80003fe:	2600      	movs	r6, #0
 8000400:	20ff      	movs	r0, #255	; 0xff
 8000402:	03ed      	lsls	r5, r5, #15
 8000404:	e78d      	b.n	8000322 <__aeabi_fdiv+0xc2>
 8000406:	2300      	movs	r3, #0
 8000408:	4698      	mov	r8, r3
 800040a:	2080      	movs	r0, #128	; 0x80
 800040c:	03c0      	lsls	r0, r0, #15
 800040e:	4205      	tst	r5, r0
 8000410:	d009      	beq.n	8000426 <__aeabi_fdiv+0x1c6>
 8000412:	4643      	mov	r3, r8
 8000414:	4203      	tst	r3, r0
 8000416:	d106      	bne.n	8000426 <__aeabi_fdiv+0x1c6>
 8000418:	4645      	mov	r5, r8
 800041a:	4305      	orrs	r5, r0
 800041c:	026d      	lsls	r5, r5, #9
 800041e:	0026      	movs	r6, r4
 8000420:	20ff      	movs	r0, #255	; 0xff
 8000422:	0a6d      	lsrs	r5, r5, #9
 8000424:	e77d      	b.n	8000322 <__aeabi_fdiv+0xc2>
 8000426:	2080      	movs	r0, #128	; 0x80
 8000428:	03c0      	lsls	r0, r0, #15
 800042a:	4305      	orrs	r5, r0
 800042c:	026d      	lsls	r5, r5, #9
 800042e:	20ff      	movs	r0, #255	; 0xff
 8000430:	0a6d      	lsrs	r5, r5, #9
 8000432:	e776      	b.n	8000322 <__aeabi_fdiv+0xc2>
 8000434:	4642      	mov	r2, r8
 8000436:	016b      	lsls	r3, r5, #5
 8000438:	0150      	lsls	r0, r2, #5
 800043a:	4283      	cmp	r3, r0
 800043c:	d219      	bcs.n	8000472 <__aeabi_fdiv+0x212>
 800043e:	221b      	movs	r2, #27
 8000440:	2500      	movs	r5, #0
 8000442:	3f01      	subs	r7, #1
 8000444:	2601      	movs	r6, #1
 8000446:	001c      	movs	r4, r3
 8000448:	006d      	lsls	r5, r5, #1
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	2c00      	cmp	r4, #0
 800044e:	db01      	blt.n	8000454 <__aeabi_fdiv+0x1f4>
 8000450:	4298      	cmp	r0, r3
 8000452:	d801      	bhi.n	8000458 <__aeabi_fdiv+0x1f8>
 8000454:	1a1b      	subs	r3, r3, r0
 8000456:	4335      	orrs	r5, r6
 8000458:	3a01      	subs	r2, #1
 800045a:	2a00      	cmp	r2, #0
 800045c:	d1f3      	bne.n	8000446 <__aeabi_fdiv+0x1e6>
 800045e:	1e5a      	subs	r2, r3, #1
 8000460:	4193      	sbcs	r3, r2
 8000462:	431d      	orrs	r5, r3
 8000464:	003b      	movs	r3, r7
 8000466:	337f      	adds	r3, #127	; 0x7f
 8000468:	000e      	movs	r6, r1
 800046a:	2b00      	cmp	r3, #0
 800046c:	dd00      	ble.n	8000470 <__aeabi_fdiv+0x210>
 800046e:	e741      	b.n	80002f4 <__aeabi_fdiv+0x94>
 8000470:	e7aa      	b.n	80003c8 <__aeabi_fdiv+0x168>
 8000472:	221a      	movs	r2, #26
 8000474:	2501      	movs	r5, #1
 8000476:	1a1b      	subs	r3, r3, r0
 8000478:	e7e4      	b.n	8000444 <__aeabi_fdiv+0x1e4>
 800047a:	01ad      	lsls	r5, r5, #6
 800047c:	2000      	movs	r0, #0
 800047e:	0a6d      	lsrs	r5, r5, #9
 8000480:	e74f      	b.n	8000322 <__aeabi_fdiv+0xc2>
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	08004ac8 	.word	0x08004ac8
 8000488:	f7ffffff 	.word	0xf7ffffff
 800048c:	08004b08 	.word	0x08004b08

08000490 <__aeabi_fmul>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	464f      	mov	r7, r9
 8000494:	4646      	mov	r6, r8
 8000496:	46d6      	mov	lr, sl
 8000498:	0244      	lsls	r4, r0, #9
 800049a:	0045      	lsls	r5, r0, #1
 800049c:	b5c0      	push	{r6, r7, lr}
 800049e:	0a64      	lsrs	r4, r4, #9
 80004a0:	1c0f      	adds	r7, r1, #0
 80004a2:	0e2d      	lsrs	r5, r5, #24
 80004a4:	0fc6      	lsrs	r6, r0, #31
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d100      	bne.n	80004ac <__aeabi_fmul+0x1c>
 80004aa:	e08d      	b.n	80005c8 <__aeabi_fmul+0x138>
 80004ac:	2dff      	cmp	r5, #255	; 0xff
 80004ae:	d100      	bne.n	80004b2 <__aeabi_fmul+0x22>
 80004b0:	e092      	b.n	80005d8 <__aeabi_fmul+0x148>
 80004b2:	2300      	movs	r3, #0
 80004b4:	2080      	movs	r0, #128	; 0x80
 80004b6:	4699      	mov	r9, r3
 80004b8:	469a      	mov	sl, r3
 80004ba:	00e4      	lsls	r4, r4, #3
 80004bc:	04c0      	lsls	r0, r0, #19
 80004be:	4304      	orrs	r4, r0
 80004c0:	3d7f      	subs	r5, #127	; 0x7f
 80004c2:	0278      	lsls	r0, r7, #9
 80004c4:	0a43      	lsrs	r3, r0, #9
 80004c6:	4698      	mov	r8, r3
 80004c8:	007b      	lsls	r3, r7, #1
 80004ca:	0e1b      	lsrs	r3, r3, #24
 80004cc:	0fff      	lsrs	r7, r7, #31
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fmul+0x44>
 80004d2:	e070      	b.n	80005b6 <__aeabi_fmul+0x126>
 80004d4:	2bff      	cmp	r3, #255	; 0xff
 80004d6:	d100      	bne.n	80004da <__aeabi_fmul+0x4a>
 80004d8:	e086      	b.n	80005e8 <__aeabi_fmul+0x158>
 80004da:	4642      	mov	r2, r8
 80004dc:	00d0      	lsls	r0, r2, #3
 80004de:	2280      	movs	r2, #128	; 0x80
 80004e0:	3b7f      	subs	r3, #127	; 0x7f
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	2300      	movs	r3, #0
 80004e6:	04d2      	lsls	r2, r2, #19
 80004e8:	4302      	orrs	r2, r0
 80004ea:	4690      	mov	r8, r2
 80004ec:	469c      	mov	ip, r3
 80004ee:	0031      	movs	r1, r6
 80004f0:	464b      	mov	r3, r9
 80004f2:	4079      	eors	r1, r7
 80004f4:	1c68      	adds	r0, r5, #1
 80004f6:	2b0f      	cmp	r3, #15
 80004f8:	d81c      	bhi.n	8000534 <__aeabi_fmul+0xa4>
 80004fa:	4a76      	ldr	r2, [pc, #472]	; (80006d4 <__aeabi_fmul+0x244>)
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	58d3      	ldr	r3, [r2, r3]
 8000500:	469f      	mov	pc, r3
 8000502:	0039      	movs	r1, r7
 8000504:	4644      	mov	r4, r8
 8000506:	46e2      	mov	sl, ip
 8000508:	4653      	mov	r3, sl
 800050a:	2b02      	cmp	r3, #2
 800050c:	d00f      	beq.n	800052e <__aeabi_fmul+0x9e>
 800050e:	2b03      	cmp	r3, #3
 8000510:	d100      	bne.n	8000514 <__aeabi_fmul+0x84>
 8000512:	e0d7      	b.n	80006c4 <__aeabi_fmul+0x234>
 8000514:	2b01      	cmp	r3, #1
 8000516:	d137      	bne.n	8000588 <__aeabi_fmul+0xf8>
 8000518:	2000      	movs	r0, #0
 800051a:	2400      	movs	r4, #0
 800051c:	05c0      	lsls	r0, r0, #23
 800051e:	4320      	orrs	r0, r4
 8000520:	07c9      	lsls	r1, r1, #31
 8000522:	4308      	orrs	r0, r1
 8000524:	bce0      	pop	{r5, r6, r7}
 8000526:	46ba      	mov	sl, r7
 8000528:	46b1      	mov	r9, r6
 800052a:	46a8      	mov	r8, r5
 800052c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052e:	20ff      	movs	r0, #255	; 0xff
 8000530:	2400      	movs	r4, #0
 8000532:	e7f3      	b.n	800051c <__aeabi_fmul+0x8c>
 8000534:	0c26      	lsrs	r6, r4, #16
 8000536:	0424      	lsls	r4, r4, #16
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	4644      	mov	r4, r8
 800053c:	0424      	lsls	r4, r4, #16
 800053e:	0c24      	lsrs	r4, r4, #16
 8000540:	4643      	mov	r3, r8
 8000542:	0027      	movs	r7, r4
 8000544:	0c1b      	lsrs	r3, r3, #16
 8000546:	4357      	muls	r7, r2
 8000548:	4374      	muls	r4, r6
 800054a:	435a      	muls	r2, r3
 800054c:	435e      	muls	r6, r3
 800054e:	1912      	adds	r2, r2, r4
 8000550:	0c3b      	lsrs	r3, r7, #16
 8000552:	189b      	adds	r3, r3, r2
 8000554:	429c      	cmp	r4, r3
 8000556:	d903      	bls.n	8000560 <__aeabi_fmul+0xd0>
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	0252      	lsls	r2, r2, #9
 800055c:	4694      	mov	ip, r2
 800055e:	4466      	add	r6, ip
 8000560:	043f      	lsls	r7, r7, #16
 8000562:	041a      	lsls	r2, r3, #16
 8000564:	0c3f      	lsrs	r7, r7, #16
 8000566:	19d2      	adds	r2, r2, r7
 8000568:	0194      	lsls	r4, r2, #6
 800056a:	1e67      	subs	r7, r4, #1
 800056c:	41bc      	sbcs	r4, r7
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	0e92      	lsrs	r2, r2, #26
 8000572:	199b      	adds	r3, r3, r6
 8000574:	4314      	orrs	r4, r2
 8000576:	019b      	lsls	r3, r3, #6
 8000578:	431c      	orrs	r4, r3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	d400      	bmi.n	8000580 <__aeabi_fmul+0xf0>
 800057e:	e09b      	b.n	80006b8 <__aeabi_fmul+0x228>
 8000580:	2301      	movs	r3, #1
 8000582:	0862      	lsrs	r2, r4, #1
 8000584:	401c      	ands	r4, r3
 8000586:	4314      	orrs	r4, r2
 8000588:	0002      	movs	r2, r0
 800058a:	327f      	adds	r2, #127	; 0x7f
 800058c:	2a00      	cmp	r2, #0
 800058e:	dd64      	ble.n	800065a <__aeabi_fmul+0x1ca>
 8000590:	0763      	lsls	r3, r4, #29
 8000592:	d004      	beq.n	800059e <__aeabi_fmul+0x10e>
 8000594:	230f      	movs	r3, #15
 8000596:	4023      	ands	r3, r4
 8000598:	2b04      	cmp	r3, #4
 800059a:	d000      	beq.n	800059e <__aeabi_fmul+0x10e>
 800059c:	3404      	adds	r4, #4
 800059e:	0123      	lsls	r3, r4, #4
 80005a0:	d503      	bpl.n	80005aa <__aeabi_fmul+0x11a>
 80005a2:	0002      	movs	r2, r0
 80005a4:	4b4c      	ldr	r3, [pc, #304]	; (80006d8 <__aeabi_fmul+0x248>)
 80005a6:	3280      	adds	r2, #128	; 0x80
 80005a8:	401c      	ands	r4, r3
 80005aa:	2afe      	cmp	r2, #254	; 0xfe
 80005ac:	dcbf      	bgt.n	800052e <__aeabi_fmul+0x9e>
 80005ae:	01a4      	lsls	r4, r4, #6
 80005b0:	0a64      	lsrs	r4, r4, #9
 80005b2:	b2d0      	uxtb	r0, r2
 80005b4:	e7b2      	b.n	800051c <__aeabi_fmul+0x8c>
 80005b6:	4643      	mov	r3, r8
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d13d      	bne.n	8000638 <__aeabi_fmul+0x1a8>
 80005bc:	464a      	mov	r2, r9
 80005be:	3301      	adds	r3, #1
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4691      	mov	r9, r2
 80005c4:	469c      	mov	ip, r3
 80005c6:	e792      	b.n	80004ee <__aeabi_fmul+0x5e>
 80005c8:	2c00      	cmp	r4, #0
 80005ca:	d129      	bne.n	8000620 <__aeabi_fmul+0x190>
 80005cc:	2304      	movs	r3, #4
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b03      	subs	r3, #3
 80005d2:	2500      	movs	r5, #0
 80005d4:	469a      	mov	sl, r3
 80005d6:	e774      	b.n	80004c2 <__aeabi_fmul+0x32>
 80005d8:	2c00      	cmp	r4, #0
 80005da:	d11b      	bne.n	8000614 <__aeabi_fmul+0x184>
 80005dc:	2308      	movs	r3, #8
 80005de:	4699      	mov	r9, r3
 80005e0:	3b06      	subs	r3, #6
 80005e2:	25ff      	movs	r5, #255	; 0xff
 80005e4:	469a      	mov	sl, r3
 80005e6:	e76c      	b.n	80004c2 <__aeabi_fmul+0x32>
 80005e8:	4643      	mov	r3, r8
 80005ea:	35ff      	adds	r5, #255	; 0xff
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d10b      	bne.n	8000608 <__aeabi_fmul+0x178>
 80005f0:	2302      	movs	r3, #2
 80005f2:	464a      	mov	r2, r9
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4691      	mov	r9, r2
 80005f8:	469c      	mov	ip, r3
 80005fa:	e778      	b.n	80004ee <__aeabi_fmul+0x5e>
 80005fc:	4653      	mov	r3, sl
 80005fe:	0031      	movs	r1, r6
 8000600:	2b02      	cmp	r3, #2
 8000602:	d000      	beq.n	8000606 <__aeabi_fmul+0x176>
 8000604:	e783      	b.n	800050e <__aeabi_fmul+0x7e>
 8000606:	e792      	b.n	800052e <__aeabi_fmul+0x9e>
 8000608:	2303      	movs	r3, #3
 800060a:	464a      	mov	r2, r9
 800060c:	431a      	orrs	r2, r3
 800060e:	4691      	mov	r9, r2
 8000610:	469c      	mov	ip, r3
 8000612:	e76c      	b.n	80004ee <__aeabi_fmul+0x5e>
 8000614:	230c      	movs	r3, #12
 8000616:	4699      	mov	r9, r3
 8000618:	3b09      	subs	r3, #9
 800061a:	25ff      	movs	r5, #255	; 0xff
 800061c:	469a      	mov	sl, r3
 800061e:	e750      	b.n	80004c2 <__aeabi_fmul+0x32>
 8000620:	0020      	movs	r0, r4
 8000622:	f000 faa5 	bl	8000b70 <__clzsi2>
 8000626:	2576      	movs	r5, #118	; 0x76
 8000628:	1f43      	subs	r3, r0, #5
 800062a:	409c      	lsls	r4, r3
 800062c:	2300      	movs	r3, #0
 800062e:	426d      	negs	r5, r5
 8000630:	4699      	mov	r9, r3
 8000632:	469a      	mov	sl, r3
 8000634:	1a2d      	subs	r5, r5, r0
 8000636:	e744      	b.n	80004c2 <__aeabi_fmul+0x32>
 8000638:	4640      	mov	r0, r8
 800063a:	f000 fa99 	bl	8000b70 <__clzsi2>
 800063e:	4642      	mov	r2, r8
 8000640:	1f43      	subs	r3, r0, #5
 8000642:	409a      	lsls	r2, r3
 8000644:	2300      	movs	r3, #0
 8000646:	1a2d      	subs	r5, r5, r0
 8000648:	4690      	mov	r8, r2
 800064a:	469c      	mov	ip, r3
 800064c:	3d76      	subs	r5, #118	; 0x76
 800064e:	e74e      	b.n	80004ee <__aeabi_fmul+0x5e>
 8000650:	2480      	movs	r4, #128	; 0x80
 8000652:	2100      	movs	r1, #0
 8000654:	20ff      	movs	r0, #255	; 0xff
 8000656:	03e4      	lsls	r4, r4, #15
 8000658:	e760      	b.n	800051c <__aeabi_fmul+0x8c>
 800065a:	2301      	movs	r3, #1
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	2b1b      	cmp	r3, #27
 8000660:	dd00      	ble.n	8000664 <__aeabi_fmul+0x1d4>
 8000662:	e759      	b.n	8000518 <__aeabi_fmul+0x88>
 8000664:	0022      	movs	r2, r4
 8000666:	309e      	adds	r0, #158	; 0x9e
 8000668:	40da      	lsrs	r2, r3
 800066a:	4084      	lsls	r4, r0
 800066c:	0013      	movs	r3, r2
 800066e:	1e62      	subs	r2, r4, #1
 8000670:	4194      	sbcs	r4, r2
 8000672:	431c      	orrs	r4, r3
 8000674:	0763      	lsls	r3, r4, #29
 8000676:	d004      	beq.n	8000682 <__aeabi_fmul+0x1f2>
 8000678:	230f      	movs	r3, #15
 800067a:	4023      	ands	r3, r4
 800067c:	2b04      	cmp	r3, #4
 800067e:	d000      	beq.n	8000682 <__aeabi_fmul+0x1f2>
 8000680:	3404      	adds	r4, #4
 8000682:	0163      	lsls	r3, r4, #5
 8000684:	d51a      	bpl.n	80006bc <__aeabi_fmul+0x22c>
 8000686:	2001      	movs	r0, #1
 8000688:	2400      	movs	r4, #0
 800068a:	e747      	b.n	800051c <__aeabi_fmul+0x8c>
 800068c:	2080      	movs	r0, #128	; 0x80
 800068e:	03c0      	lsls	r0, r0, #15
 8000690:	4204      	tst	r4, r0
 8000692:	d009      	beq.n	80006a8 <__aeabi_fmul+0x218>
 8000694:	4643      	mov	r3, r8
 8000696:	4203      	tst	r3, r0
 8000698:	d106      	bne.n	80006a8 <__aeabi_fmul+0x218>
 800069a:	4644      	mov	r4, r8
 800069c:	4304      	orrs	r4, r0
 800069e:	0264      	lsls	r4, r4, #9
 80006a0:	0039      	movs	r1, r7
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	e739      	b.n	800051c <__aeabi_fmul+0x8c>
 80006a8:	2080      	movs	r0, #128	; 0x80
 80006aa:	03c0      	lsls	r0, r0, #15
 80006ac:	4304      	orrs	r4, r0
 80006ae:	0264      	lsls	r4, r4, #9
 80006b0:	0031      	movs	r1, r6
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	0a64      	lsrs	r4, r4, #9
 80006b6:	e731      	b.n	800051c <__aeabi_fmul+0x8c>
 80006b8:	0028      	movs	r0, r5
 80006ba:	e765      	b.n	8000588 <__aeabi_fmul+0xf8>
 80006bc:	01a4      	lsls	r4, r4, #6
 80006be:	2000      	movs	r0, #0
 80006c0:	0a64      	lsrs	r4, r4, #9
 80006c2:	e72b      	b.n	800051c <__aeabi_fmul+0x8c>
 80006c4:	2080      	movs	r0, #128	; 0x80
 80006c6:	03c0      	lsls	r0, r0, #15
 80006c8:	4304      	orrs	r4, r0
 80006ca:	0264      	lsls	r4, r4, #9
 80006cc:	20ff      	movs	r0, #255	; 0xff
 80006ce:	0a64      	lsrs	r4, r4, #9
 80006d0:	e724      	b.n	800051c <__aeabi_fmul+0x8c>
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	08004b48 	.word	0x08004b48
 80006d8:	f7ffffff 	.word	0xf7ffffff

080006dc <__aeabi_fsub>:
 80006dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006de:	46ce      	mov	lr, r9
 80006e0:	4647      	mov	r7, r8
 80006e2:	0243      	lsls	r3, r0, #9
 80006e4:	0a5b      	lsrs	r3, r3, #9
 80006e6:	024e      	lsls	r6, r1, #9
 80006e8:	00da      	lsls	r2, r3, #3
 80006ea:	4694      	mov	ip, r2
 80006ec:	0a72      	lsrs	r2, r6, #9
 80006ee:	4691      	mov	r9, r2
 80006f0:	0045      	lsls	r5, r0, #1
 80006f2:	004a      	lsls	r2, r1, #1
 80006f4:	b580      	push	{r7, lr}
 80006f6:	0e2d      	lsrs	r5, r5, #24
 80006f8:	001f      	movs	r7, r3
 80006fa:	0fc4      	lsrs	r4, r0, #31
 80006fc:	0e12      	lsrs	r2, r2, #24
 80006fe:	0fc9      	lsrs	r1, r1, #31
 8000700:	09b6      	lsrs	r6, r6, #6
 8000702:	2aff      	cmp	r2, #255	; 0xff
 8000704:	d05b      	beq.n	80007be <__aeabi_fsub+0xe2>
 8000706:	2001      	movs	r0, #1
 8000708:	4041      	eors	r1, r0
 800070a:	428c      	cmp	r4, r1
 800070c:	d039      	beq.n	8000782 <__aeabi_fsub+0xa6>
 800070e:	1aa8      	subs	r0, r5, r2
 8000710:	2800      	cmp	r0, #0
 8000712:	dd5a      	ble.n	80007ca <__aeabi_fsub+0xee>
 8000714:	2a00      	cmp	r2, #0
 8000716:	d06a      	beq.n	80007ee <__aeabi_fsub+0x112>
 8000718:	2dff      	cmp	r5, #255	; 0xff
 800071a:	d100      	bne.n	800071e <__aeabi_fsub+0x42>
 800071c:	e0d9      	b.n	80008d2 <__aeabi_fsub+0x1f6>
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	04d2      	lsls	r2, r2, #19
 8000722:	4316      	orrs	r6, r2
 8000724:	281b      	cmp	r0, #27
 8000726:	dc00      	bgt.n	800072a <__aeabi_fsub+0x4e>
 8000728:	e0e9      	b.n	80008fe <__aeabi_fsub+0x222>
 800072a:	2001      	movs	r0, #1
 800072c:	4663      	mov	r3, ip
 800072e:	1a18      	subs	r0, r3, r0
 8000730:	0143      	lsls	r3, r0, #5
 8000732:	d400      	bmi.n	8000736 <__aeabi_fsub+0x5a>
 8000734:	e0b4      	b.n	80008a0 <__aeabi_fsub+0x1c4>
 8000736:	0180      	lsls	r0, r0, #6
 8000738:	0987      	lsrs	r7, r0, #6
 800073a:	0038      	movs	r0, r7
 800073c:	f000 fa18 	bl	8000b70 <__clzsi2>
 8000740:	3805      	subs	r0, #5
 8000742:	4087      	lsls	r7, r0
 8000744:	4285      	cmp	r5, r0
 8000746:	dc00      	bgt.n	800074a <__aeabi_fsub+0x6e>
 8000748:	e0cc      	b.n	80008e4 <__aeabi_fsub+0x208>
 800074a:	1a2d      	subs	r5, r5, r0
 800074c:	48b5      	ldr	r0, [pc, #724]	; (8000a24 <__aeabi_fsub+0x348>)
 800074e:	4038      	ands	r0, r7
 8000750:	0743      	lsls	r3, r0, #29
 8000752:	d004      	beq.n	800075e <__aeabi_fsub+0x82>
 8000754:	230f      	movs	r3, #15
 8000756:	4003      	ands	r3, r0
 8000758:	2b04      	cmp	r3, #4
 800075a:	d000      	beq.n	800075e <__aeabi_fsub+0x82>
 800075c:	3004      	adds	r0, #4
 800075e:	0143      	lsls	r3, r0, #5
 8000760:	d400      	bmi.n	8000764 <__aeabi_fsub+0x88>
 8000762:	e0a0      	b.n	80008a6 <__aeabi_fsub+0x1ca>
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	2dfe      	cmp	r5, #254	; 0xfe
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x90>
 800076a:	e08d      	b.n	8000888 <__aeabi_fsub+0x1ac>
 800076c:	0180      	lsls	r0, r0, #6
 800076e:	0a47      	lsrs	r7, r0, #9
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	05d0      	lsls	r0, r2, #23
 8000774:	4338      	orrs	r0, r7
 8000776:	07e4      	lsls	r4, r4, #31
 8000778:	4320      	orrs	r0, r4
 800077a:	bcc0      	pop	{r6, r7}
 800077c:	46b9      	mov	r9, r7
 800077e:	46b0      	mov	r8, r6
 8000780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000782:	1aa8      	subs	r0, r5, r2
 8000784:	4680      	mov	r8, r0
 8000786:	2800      	cmp	r0, #0
 8000788:	dd45      	ble.n	8000816 <__aeabi_fsub+0x13a>
 800078a:	2a00      	cmp	r2, #0
 800078c:	d070      	beq.n	8000870 <__aeabi_fsub+0x194>
 800078e:	2dff      	cmp	r5, #255	; 0xff
 8000790:	d100      	bne.n	8000794 <__aeabi_fsub+0xb8>
 8000792:	e09e      	b.n	80008d2 <__aeabi_fsub+0x1f6>
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	431e      	orrs	r6, r3
 800079a:	4643      	mov	r3, r8
 800079c:	2b1b      	cmp	r3, #27
 800079e:	dc00      	bgt.n	80007a2 <__aeabi_fsub+0xc6>
 80007a0:	e0d2      	b.n	8000948 <__aeabi_fsub+0x26c>
 80007a2:	2001      	movs	r0, #1
 80007a4:	4460      	add	r0, ip
 80007a6:	0143      	lsls	r3, r0, #5
 80007a8:	d57a      	bpl.n	80008a0 <__aeabi_fsub+0x1c4>
 80007aa:	3501      	adds	r5, #1
 80007ac:	2dff      	cmp	r5, #255	; 0xff
 80007ae:	d06b      	beq.n	8000888 <__aeabi_fsub+0x1ac>
 80007b0:	2301      	movs	r3, #1
 80007b2:	4a9d      	ldr	r2, [pc, #628]	; (8000a28 <__aeabi_fsub+0x34c>)
 80007b4:	4003      	ands	r3, r0
 80007b6:	0840      	lsrs	r0, r0, #1
 80007b8:	4010      	ands	r0, r2
 80007ba:	4318      	orrs	r0, r3
 80007bc:	e7c8      	b.n	8000750 <__aeabi_fsub+0x74>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d020      	beq.n	8000804 <__aeabi_fsub+0x128>
 80007c2:	428c      	cmp	r4, r1
 80007c4:	d023      	beq.n	800080e <__aeabi_fsub+0x132>
 80007c6:	0028      	movs	r0, r5
 80007c8:	38ff      	subs	r0, #255	; 0xff
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d039      	beq.n	8000842 <__aeabi_fsub+0x166>
 80007ce:	1b57      	subs	r7, r2, r5
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_fsub+0xfa>
 80007d4:	e09d      	b.n	8000912 <__aeabi_fsub+0x236>
 80007d6:	4663      	mov	r3, ip
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d100      	bne.n	80007de <__aeabi_fsub+0x102>
 80007dc:	e0db      	b.n	8000996 <__aeabi_fsub+0x2ba>
 80007de:	1e7b      	subs	r3, r7, #1
 80007e0:	2f01      	cmp	r7, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fsub+0x10a>
 80007e4:	e10d      	b.n	8000a02 <__aeabi_fsub+0x326>
 80007e6:	2fff      	cmp	r7, #255	; 0xff
 80007e8:	d071      	beq.n	80008ce <__aeabi_fsub+0x1f2>
 80007ea:	001f      	movs	r7, r3
 80007ec:	e098      	b.n	8000920 <__aeabi_fsub+0x244>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fsub+0x118>
 80007f2:	e0a7      	b.n	8000944 <__aeabi_fsub+0x268>
 80007f4:	1e42      	subs	r2, r0, #1
 80007f6:	2801      	cmp	r0, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fsub+0x120>
 80007fa:	e0e6      	b.n	80009ca <__aeabi_fsub+0x2ee>
 80007fc:	28ff      	cmp	r0, #255	; 0xff
 80007fe:	d068      	beq.n	80008d2 <__aeabi_fsub+0x1f6>
 8000800:	0010      	movs	r0, r2
 8000802:	e78f      	b.n	8000724 <__aeabi_fsub+0x48>
 8000804:	2001      	movs	r0, #1
 8000806:	4041      	eors	r1, r0
 8000808:	42a1      	cmp	r1, r4
 800080a:	d000      	beq.n	800080e <__aeabi_fsub+0x132>
 800080c:	e77f      	b.n	800070e <__aeabi_fsub+0x32>
 800080e:	20ff      	movs	r0, #255	; 0xff
 8000810:	4240      	negs	r0, r0
 8000812:	4680      	mov	r8, r0
 8000814:	44a8      	add	r8, r5
 8000816:	4640      	mov	r0, r8
 8000818:	2800      	cmp	r0, #0
 800081a:	d038      	beq.n	800088e <__aeabi_fsub+0x1b2>
 800081c:	1b51      	subs	r1, r2, r5
 800081e:	2d00      	cmp	r5, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fsub+0x148>
 8000822:	e0ae      	b.n	8000982 <__aeabi_fsub+0x2a6>
 8000824:	2aff      	cmp	r2, #255	; 0xff
 8000826:	d100      	bne.n	800082a <__aeabi_fsub+0x14e>
 8000828:	e0df      	b.n	80009ea <__aeabi_fsub+0x30e>
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	4660      	mov	r0, ip
 800082e:	04db      	lsls	r3, r3, #19
 8000830:	4318      	orrs	r0, r3
 8000832:	4684      	mov	ip, r0
 8000834:	291b      	cmp	r1, #27
 8000836:	dc00      	bgt.n	800083a <__aeabi_fsub+0x15e>
 8000838:	e0d9      	b.n	80009ee <__aeabi_fsub+0x312>
 800083a:	2001      	movs	r0, #1
 800083c:	0015      	movs	r5, r2
 800083e:	1980      	adds	r0, r0, r6
 8000840:	e7b1      	b.n	80007a6 <__aeabi_fsub+0xca>
 8000842:	20fe      	movs	r0, #254	; 0xfe
 8000844:	1c6a      	adds	r2, r5, #1
 8000846:	4210      	tst	r0, r2
 8000848:	d171      	bne.n	800092e <__aeabi_fsub+0x252>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fsub+0x174>
 800084e:	e0a6      	b.n	800099e <__aeabi_fsub+0x2c2>
 8000850:	4663      	mov	r3, ip
 8000852:	2b00      	cmp	r3, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x17c>
 8000856:	e0d9      	b.n	8000a0c <__aeabi_fsub+0x330>
 8000858:	2200      	movs	r2, #0
 800085a:	2e00      	cmp	r6, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x184>
 800085e:	e788      	b.n	8000772 <__aeabi_fsub+0x96>
 8000860:	1b98      	subs	r0, r3, r6
 8000862:	0143      	lsls	r3, r0, #5
 8000864:	d400      	bmi.n	8000868 <__aeabi_fsub+0x18c>
 8000866:	e0e1      	b.n	8000a2c <__aeabi_fsub+0x350>
 8000868:	4663      	mov	r3, ip
 800086a:	000c      	movs	r4, r1
 800086c:	1af0      	subs	r0, r6, r3
 800086e:	e76f      	b.n	8000750 <__aeabi_fsub+0x74>
 8000870:	2e00      	cmp	r6, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fsub+0x19a>
 8000874:	e0b7      	b.n	80009e6 <__aeabi_fsub+0x30a>
 8000876:	0002      	movs	r2, r0
 8000878:	3a01      	subs	r2, #1
 800087a:	2801      	cmp	r0, #1
 800087c:	d100      	bne.n	8000880 <__aeabi_fsub+0x1a4>
 800087e:	e09c      	b.n	80009ba <__aeabi_fsub+0x2de>
 8000880:	28ff      	cmp	r0, #255	; 0xff
 8000882:	d026      	beq.n	80008d2 <__aeabi_fsub+0x1f6>
 8000884:	4690      	mov	r8, r2
 8000886:	e788      	b.n	800079a <__aeabi_fsub+0xbe>
 8000888:	22ff      	movs	r2, #255	; 0xff
 800088a:	2700      	movs	r7, #0
 800088c:	e771      	b.n	8000772 <__aeabi_fsub+0x96>
 800088e:	20fe      	movs	r0, #254	; 0xfe
 8000890:	1c6a      	adds	r2, r5, #1
 8000892:	4210      	tst	r0, r2
 8000894:	d064      	beq.n	8000960 <__aeabi_fsub+0x284>
 8000896:	2aff      	cmp	r2, #255	; 0xff
 8000898:	d0f6      	beq.n	8000888 <__aeabi_fsub+0x1ac>
 800089a:	0015      	movs	r5, r2
 800089c:	4466      	add	r6, ip
 800089e:	0870      	lsrs	r0, r6, #1
 80008a0:	0743      	lsls	r3, r0, #29
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fsub+0x1ca>
 80008a4:	e756      	b.n	8000754 <__aeabi_fsub+0x78>
 80008a6:	08c3      	lsrs	r3, r0, #3
 80008a8:	2dff      	cmp	r5, #255	; 0xff
 80008aa:	d012      	beq.n	80008d2 <__aeabi_fsub+0x1f6>
 80008ac:	025b      	lsls	r3, r3, #9
 80008ae:	0a5f      	lsrs	r7, r3, #9
 80008b0:	b2ea      	uxtb	r2, r5
 80008b2:	e75e      	b.n	8000772 <__aeabi_fsub+0x96>
 80008b4:	4662      	mov	r2, ip
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_fsub+0x1e0>
 80008ba:	e096      	b.n	80009ea <__aeabi_fsub+0x30e>
 80008bc:	2e00      	cmp	r6, #0
 80008be:	d008      	beq.n	80008d2 <__aeabi_fsub+0x1f6>
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	03d2      	lsls	r2, r2, #15
 80008c4:	4213      	tst	r3, r2
 80008c6:	d004      	beq.n	80008d2 <__aeabi_fsub+0x1f6>
 80008c8:	4648      	mov	r0, r9
 80008ca:	4210      	tst	r0, r2
 80008cc:	d101      	bne.n	80008d2 <__aeabi_fsub+0x1f6>
 80008ce:	000c      	movs	r4, r1
 80008d0:	464b      	mov	r3, r9
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0d8      	beq.n	8000888 <__aeabi_fsub+0x1ac>
 80008d6:	2780      	movs	r7, #128	; 0x80
 80008d8:	03ff      	lsls	r7, r7, #15
 80008da:	431f      	orrs	r7, r3
 80008dc:	027f      	lsls	r7, r7, #9
 80008de:	22ff      	movs	r2, #255	; 0xff
 80008e0:	0a7f      	lsrs	r7, r7, #9
 80008e2:	e746      	b.n	8000772 <__aeabi_fsub+0x96>
 80008e4:	2320      	movs	r3, #32
 80008e6:	003a      	movs	r2, r7
 80008e8:	1b45      	subs	r5, r0, r5
 80008ea:	0038      	movs	r0, r7
 80008ec:	3501      	adds	r5, #1
 80008ee:	40ea      	lsrs	r2, r5
 80008f0:	1b5d      	subs	r5, r3, r5
 80008f2:	40a8      	lsls	r0, r5
 80008f4:	1e43      	subs	r3, r0, #1
 80008f6:	4198      	sbcs	r0, r3
 80008f8:	2500      	movs	r5, #0
 80008fa:	4310      	orrs	r0, r2
 80008fc:	e728      	b.n	8000750 <__aeabi_fsub+0x74>
 80008fe:	2320      	movs	r3, #32
 8000900:	1a1b      	subs	r3, r3, r0
 8000902:	0032      	movs	r2, r6
 8000904:	409e      	lsls	r6, r3
 8000906:	40c2      	lsrs	r2, r0
 8000908:	0030      	movs	r0, r6
 800090a:	1e43      	subs	r3, r0, #1
 800090c:	4198      	sbcs	r0, r3
 800090e:	4310      	orrs	r0, r2
 8000910:	e70c      	b.n	800072c <__aeabi_fsub+0x50>
 8000912:	2aff      	cmp	r2, #255	; 0xff
 8000914:	d0db      	beq.n	80008ce <__aeabi_fsub+0x1f2>
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	4660      	mov	r0, ip
 800091a:	04db      	lsls	r3, r3, #19
 800091c:	4318      	orrs	r0, r3
 800091e:	4684      	mov	ip, r0
 8000920:	2f1b      	cmp	r7, #27
 8000922:	dd56      	ble.n	80009d2 <__aeabi_fsub+0x2f6>
 8000924:	2001      	movs	r0, #1
 8000926:	000c      	movs	r4, r1
 8000928:	0015      	movs	r5, r2
 800092a:	1a30      	subs	r0, r6, r0
 800092c:	e700      	b.n	8000730 <__aeabi_fsub+0x54>
 800092e:	4663      	mov	r3, ip
 8000930:	1b9f      	subs	r7, r3, r6
 8000932:	017b      	lsls	r3, r7, #5
 8000934:	d43d      	bmi.n	80009b2 <__aeabi_fsub+0x2d6>
 8000936:	2f00      	cmp	r7, #0
 8000938:	d000      	beq.n	800093c <__aeabi_fsub+0x260>
 800093a:	e6fe      	b.n	800073a <__aeabi_fsub+0x5e>
 800093c:	2400      	movs	r4, #0
 800093e:	2200      	movs	r2, #0
 8000940:	2700      	movs	r7, #0
 8000942:	e716      	b.n	8000772 <__aeabi_fsub+0x96>
 8000944:	0005      	movs	r5, r0
 8000946:	e7af      	b.n	80008a8 <__aeabi_fsub+0x1cc>
 8000948:	0032      	movs	r2, r6
 800094a:	4643      	mov	r3, r8
 800094c:	4641      	mov	r1, r8
 800094e:	40da      	lsrs	r2, r3
 8000950:	2320      	movs	r3, #32
 8000952:	1a5b      	subs	r3, r3, r1
 8000954:	409e      	lsls	r6, r3
 8000956:	0030      	movs	r0, r6
 8000958:	1e43      	subs	r3, r0, #1
 800095a:	4198      	sbcs	r0, r3
 800095c:	4310      	orrs	r0, r2
 800095e:	e721      	b.n	80007a4 <__aeabi_fsub+0xc8>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d1a7      	bne.n	80008b4 <__aeabi_fsub+0x1d8>
 8000964:	4663      	mov	r3, ip
 8000966:	2b00      	cmp	r3, #0
 8000968:	d059      	beq.n	8000a1e <__aeabi_fsub+0x342>
 800096a:	2200      	movs	r2, #0
 800096c:	2e00      	cmp	r6, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0x296>
 8000970:	e6ff      	b.n	8000772 <__aeabi_fsub+0x96>
 8000972:	0030      	movs	r0, r6
 8000974:	4460      	add	r0, ip
 8000976:	0143      	lsls	r3, r0, #5
 8000978:	d592      	bpl.n	80008a0 <__aeabi_fsub+0x1c4>
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <__aeabi_fsub+0x348>)
 800097c:	3501      	adds	r5, #1
 800097e:	4018      	ands	r0, r3
 8000980:	e78e      	b.n	80008a0 <__aeabi_fsub+0x1c4>
 8000982:	4663      	mov	r3, ip
 8000984:	2b00      	cmp	r3, #0
 8000986:	d047      	beq.n	8000a18 <__aeabi_fsub+0x33c>
 8000988:	1e4b      	subs	r3, r1, #1
 800098a:	2901      	cmp	r1, #1
 800098c:	d015      	beq.n	80009ba <__aeabi_fsub+0x2de>
 800098e:	29ff      	cmp	r1, #255	; 0xff
 8000990:	d02b      	beq.n	80009ea <__aeabi_fsub+0x30e>
 8000992:	0019      	movs	r1, r3
 8000994:	e74e      	b.n	8000834 <__aeabi_fsub+0x158>
 8000996:	000c      	movs	r4, r1
 8000998:	464b      	mov	r3, r9
 800099a:	003d      	movs	r5, r7
 800099c:	e784      	b.n	80008a8 <__aeabi_fsub+0x1cc>
 800099e:	4662      	mov	r2, ip
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	d18b      	bne.n	80008bc <__aeabi_fsub+0x1e0>
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d192      	bne.n	80008ce <__aeabi_fsub+0x1f2>
 80009a8:	2780      	movs	r7, #128	; 0x80
 80009aa:	2400      	movs	r4, #0
 80009ac:	22ff      	movs	r2, #255	; 0xff
 80009ae:	03ff      	lsls	r7, r7, #15
 80009b0:	e6df      	b.n	8000772 <__aeabi_fsub+0x96>
 80009b2:	4663      	mov	r3, ip
 80009b4:	000c      	movs	r4, r1
 80009b6:	1af7      	subs	r7, r6, r3
 80009b8:	e6bf      	b.n	800073a <__aeabi_fsub+0x5e>
 80009ba:	0030      	movs	r0, r6
 80009bc:	4460      	add	r0, ip
 80009be:	2501      	movs	r5, #1
 80009c0:	0143      	lsls	r3, r0, #5
 80009c2:	d400      	bmi.n	80009c6 <__aeabi_fsub+0x2ea>
 80009c4:	e76c      	b.n	80008a0 <__aeabi_fsub+0x1c4>
 80009c6:	2502      	movs	r5, #2
 80009c8:	e6f2      	b.n	80007b0 <__aeabi_fsub+0xd4>
 80009ca:	4663      	mov	r3, ip
 80009cc:	2501      	movs	r5, #1
 80009ce:	1b98      	subs	r0, r3, r6
 80009d0:	e6ae      	b.n	8000730 <__aeabi_fsub+0x54>
 80009d2:	2320      	movs	r3, #32
 80009d4:	4664      	mov	r4, ip
 80009d6:	4660      	mov	r0, ip
 80009d8:	40fc      	lsrs	r4, r7
 80009da:	1bdf      	subs	r7, r3, r7
 80009dc:	40b8      	lsls	r0, r7
 80009de:	1e43      	subs	r3, r0, #1
 80009e0:	4198      	sbcs	r0, r3
 80009e2:	4320      	orrs	r0, r4
 80009e4:	e79f      	b.n	8000926 <__aeabi_fsub+0x24a>
 80009e6:	0005      	movs	r5, r0
 80009e8:	e75e      	b.n	80008a8 <__aeabi_fsub+0x1cc>
 80009ea:	464b      	mov	r3, r9
 80009ec:	e771      	b.n	80008d2 <__aeabi_fsub+0x1f6>
 80009ee:	2320      	movs	r3, #32
 80009f0:	4665      	mov	r5, ip
 80009f2:	4660      	mov	r0, ip
 80009f4:	40cd      	lsrs	r5, r1
 80009f6:	1a59      	subs	r1, r3, r1
 80009f8:	4088      	lsls	r0, r1
 80009fa:	1e43      	subs	r3, r0, #1
 80009fc:	4198      	sbcs	r0, r3
 80009fe:	4328      	orrs	r0, r5
 8000a00:	e71c      	b.n	800083c <__aeabi_fsub+0x160>
 8000a02:	4663      	mov	r3, ip
 8000a04:	000c      	movs	r4, r1
 8000a06:	2501      	movs	r5, #1
 8000a08:	1af0      	subs	r0, r6, r3
 8000a0a:	e691      	b.n	8000730 <__aeabi_fsub+0x54>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d095      	beq.n	800093c <__aeabi_fsub+0x260>
 8000a10:	000c      	movs	r4, r1
 8000a12:	464f      	mov	r7, r9
 8000a14:	2200      	movs	r2, #0
 8000a16:	e6ac      	b.n	8000772 <__aeabi_fsub+0x96>
 8000a18:	464b      	mov	r3, r9
 8000a1a:	000d      	movs	r5, r1
 8000a1c:	e744      	b.n	80008a8 <__aeabi_fsub+0x1cc>
 8000a1e:	464f      	mov	r7, r9
 8000a20:	2200      	movs	r2, #0
 8000a22:	e6a6      	b.n	8000772 <__aeabi_fsub+0x96>
 8000a24:	fbffffff 	.word	0xfbffffff
 8000a28:	7dffffff 	.word	0x7dffffff
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_fsub+0x356>
 8000a30:	e736      	b.n	80008a0 <__aeabi_fsub+0x1c4>
 8000a32:	2400      	movs	r4, #0
 8000a34:	2700      	movs	r7, #0
 8000a36:	e69c      	b.n	8000772 <__aeabi_fsub+0x96>

08000a38 <__aeabi_f2iz>:
 8000a38:	0241      	lsls	r1, r0, #9
 8000a3a:	0042      	lsls	r2, r0, #1
 8000a3c:	0fc3      	lsrs	r3, r0, #31
 8000a3e:	0a49      	lsrs	r1, r1, #9
 8000a40:	2000      	movs	r0, #0
 8000a42:	0e12      	lsrs	r2, r2, #24
 8000a44:	2a7e      	cmp	r2, #126	; 0x7e
 8000a46:	dd03      	ble.n	8000a50 <__aeabi_f2iz+0x18>
 8000a48:	2a9d      	cmp	r2, #157	; 0x9d
 8000a4a:	dd02      	ble.n	8000a52 <__aeabi_f2iz+0x1a>
 8000a4c:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <__aeabi_f2iz+0x3c>)
 8000a4e:	1898      	adds	r0, r3, r2
 8000a50:	4770      	bx	lr
 8000a52:	2080      	movs	r0, #128	; 0x80
 8000a54:	0400      	lsls	r0, r0, #16
 8000a56:	4301      	orrs	r1, r0
 8000a58:	2a95      	cmp	r2, #149	; 0x95
 8000a5a:	dc07      	bgt.n	8000a6c <__aeabi_f2iz+0x34>
 8000a5c:	2096      	movs	r0, #150	; 0x96
 8000a5e:	1a82      	subs	r2, r0, r2
 8000a60:	40d1      	lsrs	r1, r2
 8000a62:	4248      	negs	r0, r1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f3      	bne.n	8000a50 <__aeabi_f2iz+0x18>
 8000a68:	0008      	movs	r0, r1
 8000a6a:	e7f1      	b.n	8000a50 <__aeabi_f2iz+0x18>
 8000a6c:	3a96      	subs	r2, #150	; 0x96
 8000a6e:	4091      	lsls	r1, r2
 8000a70:	e7f7      	b.n	8000a62 <__aeabi_f2iz+0x2a>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	7fffffff 	.word	0x7fffffff

08000a78 <__aeabi_ui2f>:
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	1e05      	subs	r5, r0, #0
 8000a7c:	d00e      	beq.n	8000a9c <__aeabi_ui2f+0x24>
 8000a7e:	f000 f877 	bl	8000b70 <__clzsi2>
 8000a82:	239e      	movs	r3, #158	; 0x9e
 8000a84:	0004      	movs	r4, r0
 8000a86:	1a1b      	subs	r3, r3, r0
 8000a88:	2b96      	cmp	r3, #150	; 0x96
 8000a8a:	dc0c      	bgt.n	8000aa6 <__aeabi_ui2f+0x2e>
 8000a8c:	2808      	cmp	r0, #8
 8000a8e:	dd01      	ble.n	8000a94 <__aeabi_ui2f+0x1c>
 8000a90:	3c08      	subs	r4, #8
 8000a92:	40a5      	lsls	r5, r4
 8000a94:	026d      	lsls	r5, r5, #9
 8000a96:	0a6d      	lsrs	r5, r5, #9
 8000a98:	b2d8      	uxtb	r0, r3
 8000a9a:	e001      	b.n	8000aa0 <__aeabi_ui2f+0x28>
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	05c0      	lsls	r0, r0, #23
 8000aa2:	4328      	orrs	r0, r5
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
 8000aa6:	2b99      	cmp	r3, #153	; 0x99
 8000aa8:	dd09      	ble.n	8000abe <__aeabi_ui2f+0x46>
 8000aaa:	0002      	movs	r2, r0
 8000aac:	0029      	movs	r1, r5
 8000aae:	321b      	adds	r2, #27
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	1e4a      	subs	r2, r1, #1
 8000ab4:	4191      	sbcs	r1, r2
 8000ab6:	2205      	movs	r2, #5
 8000ab8:	1a12      	subs	r2, r2, r0
 8000aba:	40d5      	lsrs	r5, r2
 8000abc:	430d      	orrs	r5, r1
 8000abe:	2c05      	cmp	r4, #5
 8000ac0:	dc12      	bgt.n	8000ae8 <__aeabi_ui2f+0x70>
 8000ac2:	0029      	movs	r1, r5
 8000ac4:	4e0c      	ldr	r6, [pc, #48]	; (8000af8 <__aeabi_ui2f+0x80>)
 8000ac6:	4031      	ands	r1, r6
 8000ac8:	076a      	lsls	r2, r5, #29
 8000aca:	d009      	beq.n	8000ae0 <__aeabi_ui2f+0x68>
 8000acc:	200f      	movs	r0, #15
 8000ace:	4028      	ands	r0, r5
 8000ad0:	2804      	cmp	r0, #4
 8000ad2:	d005      	beq.n	8000ae0 <__aeabi_ui2f+0x68>
 8000ad4:	3104      	adds	r1, #4
 8000ad6:	014a      	lsls	r2, r1, #5
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_ui2f+0x68>
 8000ada:	239f      	movs	r3, #159	; 0x9f
 8000adc:	4031      	ands	r1, r6
 8000ade:	1b1b      	subs	r3, r3, r4
 8000ae0:	0189      	lsls	r1, r1, #6
 8000ae2:	0a4d      	lsrs	r5, r1, #9
 8000ae4:	b2d8      	uxtb	r0, r3
 8000ae6:	e7db      	b.n	8000aa0 <__aeabi_ui2f+0x28>
 8000ae8:	1f62      	subs	r2, r4, #5
 8000aea:	4095      	lsls	r5, r2
 8000aec:	0029      	movs	r1, r5
 8000aee:	4e02      	ldr	r6, [pc, #8]	; (8000af8 <__aeabi_ui2f+0x80>)
 8000af0:	4031      	ands	r1, r6
 8000af2:	076a      	lsls	r2, r5, #29
 8000af4:	d0f4      	beq.n	8000ae0 <__aeabi_ui2f+0x68>
 8000af6:	e7e9      	b.n	8000acc <__aeabi_ui2f+0x54>
 8000af8:	fbffffff 	.word	0xfbffffff

08000afc <__aeabi_cfrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	0008      	movs	r0, r1
 8000b00:	4661      	mov	r1, ip
 8000b02:	e7ff      	b.n	8000b04 <__aeabi_cfcmpeq>

08000b04 <__aeabi_cfcmpeq>:
 8000b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b06:	f000 f8bd 	bl	8000c84 <__lesf2>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d401      	bmi.n	8000b12 <__aeabi_cfcmpeq+0xe>
 8000b0e:	2100      	movs	r1, #0
 8000b10:	42c8      	cmn	r0, r1
 8000b12:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000b14 <__aeabi_fcmpeq>:
 8000b14:	b510      	push	{r4, lr}
 8000b16:	f000 f849 	bl	8000bac <__eqsf2>
 8000b1a:	4240      	negs	r0, r0
 8000b1c:	3001      	adds	r0, #1
 8000b1e:	bd10      	pop	{r4, pc}

08000b20 <__aeabi_fcmplt>:
 8000b20:	b510      	push	{r4, lr}
 8000b22:	f000 f8af 	bl	8000c84 <__lesf2>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	db01      	blt.n	8000b2e <__aeabi_fcmplt+0xe>
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	2001      	movs	r0, #1
 8000b30:	bd10      	pop	{r4, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)

08000b34 <__aeabi_fcmple>:
 8000b34:	b510      	push	{r4, lr}
 8000b36:	f000 f8a5 	bl	8000c84 <__lesf2>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	dd01      	ble.n	8000b42 <__aeabi_fcmple+0xe>
 8000b3e:	2000      	movs	r0, #0
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	2001      	movs	r0, #1
 8000b44:	bd10      	pop	{r4, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)

08000b48 <__aeabi_fcmpgt>:
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	f000 f855 	bl	8000bf8 <__gesf2>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	dc01      	bgt.n	8000b56 <__aeabi_fcmpgt+0xe>
 8000b52:	2000      	movs	r0, #0
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	2001      	movs	r0, #1
 8000b58:	bd10      	pop	{r4, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)

08000b5c <__aeabi_fcmpge>:
 8000b5c:	b510      	push	{r4, lr}
 8000b5e:	f000 f84b 	bl	8000bf8 <__gesf2>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	da01      	bge.n	8000b6a <__aeabi_fcmpge+0xe>
 8000b66:	2000      	movs	r0, #0
 8000b68:	bd10      	pop	{r4, pc}
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)

08000b70 <__clzsi2>:
 8000b70:	211c      	movs	r1, #28
 8000b72:	2301      	movs	r3, #1
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	4298      	cmp	r0, r3
 8000b78:	d301      	bcc.n	8000b7e <__clzsi2+0xe>
 8000b7a:	0c00      	lsrs	r0, r0, #16
 8000b7c:	3910      	subs	r1, #16
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	4298      	cmp	r0, r3
 8000b82:	d301      	bcc.n	8000b88 <__clzsi2+0x18>
 8000b84:	0a00      	lsrs	r0, r0, #8
 8000b86:	3908      	subs	r1, #8
 8000b88:	091b      	lsrs	r3, r3, #4
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d301      	bcc.n	8000b92 <__clzsi2+0x22>
 8000b8e:	0900      	lsrs	r0, r0, #4
 8000b90:	3904      	subs	r1, #4
 8000b92:	a202      	add	r2, pc, #8	; (adr r2, 8000b9c <__clzsi2+0x2c>)
 8000b94:	5c10      	ldrb	r0, [r2, r0]
 8000b96:	1840      	adds	r0, r0, r1
 8000b98:	4770      	bx	lr
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	02020304 	.word	0x02020304
 8000ba0:	01010101 	.word	0x01010101
	...

08000bac <__eqsf2>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0042      	lsls	r2, r0, #1
 8000bb0:	0245      	lsls	r5, r0, #9
 8000bb2:	024e      	lsls	r6, r1, #9
 8000bb4:	004c      	lsls	r4, r1, #1
 8000bb6:	0fc3      	lsrs	r3, r0, #31
 8000bb8:	0a6d      	lsrs	r5, r5, #9
 8000bba:	2001      	movs	r0, #1
 8000bbc:	0e12      	lsrs	r2, r2, #24
 8000bbe:	0a76      	lsrs	r6, r6, #9
 8000bc0:	0e24      	lsrs	r4, r4, #24
 8000bc2:	0fc9      	lsrs	r1, r1, #31
 8000bc4:	2aff      	cmp	r2, #255	; 0xff
 8000bc6:	d006      	beq.n	8000bd6 <__eqsf2+0x2a>
 8000bc8:	2cff      	cmp	r4, #255	; 0xff
 8000bca:	d003      	beq.n	8000bd4 <__eqsf2+0x28>
 8000bcc:	42a2      	cmp	r2, r4
 8000bce:	d101      	bne.n	8000bd4 <__eqsf2+0x28>
 8000bd0:	42b5      	cmp	r5, r6
 8000bd2:	d006      	beq.n	8000be2 <__eqsf2+0x36>
 8000bd4:	bd70      	pop	{r4, r5, r6, pc}
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d1fc      	bne.n	8000bd4 <__eqsf2+0x28>
 8000bda:	2cff      	cmp	r4, #255	; 0xff
 8000bdc:	d1fa      	bne.n	8000bd4 <__eqsf2+0x28>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d1f8      	bne.n	8000bd4 <__eqsf2+0x28>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d006      	beq.n	8000bf4 <__eqsf2+0x48>
 8000be6:	2001      	movs	r0, #1
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	d1f3      	bne.n	8000bd4 <__eqsf2+0x28>
 8000bec:	0028      	movs	r0, r5
 8000bee:	1e43      	subs	r3, r0, #1
 8000bf0:	4198      	sbcs	r0, r3
 8000bf2:	e7ef      	b.n	8000bd4 <__eqsf2+0x28>
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	e7ed      	b.n	8000bd4 <__eqsf2+0x28>

08000bf8 <__gesf2>:
 8000bf8:	b570      	push	{r4, r5, r6, lr}
 8000bfa:	0042      	lsls	r2, r0, #1
 8000bfc:	0245      	lsls	r5, r0, #9
 8000bfe:	024e      	lsls	r6, r1, #9
 8000c00:	004c      	lsls	r4, r1, #1
 8000c02:	0fc3      	lsrs	r3, r0, #31
 8000c04:	0a6d      	lsrs	r5, r5, #9
 8000c06:	0e12      	lsrs	r2, r2, #24
 8000c08:	0a76      	lsrs	r6, r6, #9
 8000c0a:	0e24      	lsrs	r4, r4, #24
 8000c0c:	0fc8      	lsrs	r0, r1, #31
 8000c0e:	2aff      	cmp	r2, #255	; 0xff
 8000c10:	d01b      	beq.n	8000c4a <__gesf2+0x52>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d00e      	beq.n	8000c34 <__gesf2+0x3c>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d11b      	bne.n	8000c52 <__gesf2+0x5a>
 8000c1a:	2c00      	cmp	r4, #0
 8000c1c:	d101      	bne.n	8000c22 <__gesf2+0x2a>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d01c      	beq.n	8000c5c <__gesf2+0x64>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d00c      	beq.n	8000c40 <__gesf2+0x48>
 8000c26:	4283      	cmp	r3, r0
 8000c28:	d01c      	beq.n	8000c64 <__gesf2+0x6c>
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	1e58      	subs	r0, r3, #1
 8000c2e:	4008      	ands	r0, r1
 8000c30:	3801      	subs	r0, #1
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d122      	bne.n	8000c7e <__gesf2+0x86>
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	d1f4      	bne.n	8000c26 <__gesf2+0x2e>
 8000c3c:	2d00      	cmp	r5, #0
 8000c3e:	d1f2      	bne.n	8000c26 <__gesf2+0x2e>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d1f6      	bne.n	8000c32 <__gesf2+0x3a>
 8000c44:	2001      	movs	r0, #1
 8000c46:	4240      	negs	r0, r0
 8000c48:	e7f3      	b.n	8000c32 <__gesf2+0x3a>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d117      	bne.n	8000c7e <__gesf2+0x86>
 8000c4e:	2cff      	cmp	r4, #255	; 0xff
 8000c50:	d0f0      	beq.n	8000c34 <__gesf2+0x3c>
 8000c52:	2c00      	cmp	r4, #0
 8000c54:	d1e7      	bne.n	8000c26 <__gesf2+0x2e>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d1e5      	bne.n	8000c26 <__gesf2+0x2e>
 8000c5a:	e7e6      	b.n	8000c2a <__gesf2+0x32>
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e7      	beq.n	8000c32 <__gesf2+0x3a>
 8000c62:	e7e2      	b.n	8000c2a <__gesf2+0x32>
 8000c64:	42a2      	cmp	r2, r4
 8000c66:	dc05      	bgt.n	8000c74 <__gesf2+0x7c>
 8000c68:	dbea      	blt.n	8000c40 <__gesf2+0x48>
 8000c6a:	42b5      	cmp	r5, r6
 8000c6c:	d802      	bhi.n	8000c74 <__gesf2+0x7c>
 8000c6e:	d3e7      	bcc.n	8000c40 <__gesf2+0x48>
 8000c70:	2000      	movs	r0, #0
 8000c72:	e7de      	b.n	8000c32 <__gesf2+0x3a>
 8000c74:	4243      	negs	r3, r0
 8000c76:	4158      	adcs	r0, r3
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	3801      	subs	r0, #1
 8000c7c:	e7d9      	b.n	8000c32 <__gesf2+0x3a>
 8000c7e:	2002      	movs	r0, #2
 8000c80:	4240      	negs	r0, r0
 8000c82:	e7d6      	b.n	8000c32 <__gesf2+0x3a>

08000c84 <__lesf2>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	0042      	lsls	r2, r0, #1
 8000c88:	0245      	lsls	r5, r0, #9
 8000c8a:	024e      	lsls	r6, r1, #9
 8000c8c:	004c      	lsls	r4, r1, #1
 8000c8e:	0fc3      	lsrs	r3, r0, #31
 8000c90:	0a6d      	lsrs	r5, r5, #9
 8000c92:	0e12      	lsrs	r2, r2, #24
 8000c94:	0a76      	lsrs	r6, r6, #9
 8000c96:	0e24      	lsrs	r4, r4, #24
 8000c98:	0fc8      	lsrs	r0, r1, #31
 8000c9a:	2aff      	cmp	r2, #255	; 0xff
 8000c9c:	d00b      	beq.n	8000cb6 <__lesf2+0x32>
 8000c9e:	2cff      	cmp	r4, #255	; 0xff
 8000ca0:	d00d      	beq.n	8000cbe <__lesf2+0x3a>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d11f      	bne.n	8000ce6 <__lesf2+0x62>
 8000ca6:	2c00      	cmp	r4, #0
 8000ca8:	d116      	bne.n	8000cd8 <__lesf2+0x54>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d114      	bne.n	8000cd8 <__lesf2+0x54>
 8000cae:	2000      	movs	r0, #0
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d010      	beq.n	8000cd6 <__lesf2+0x52>
 8000cb4:	e009      	b.n	8000cca <__lesf2+0x46>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d10c      	bne.n	8000cd4 <__lesf2+0x50>
 8000cba:	2cff      	cmp	r4, #255	; 0xff
 8000cbc:	d113      	bne.n	8000ce6 <__lesf2+0x62>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d108      	bne.n	8000cd4 <__lesf2+0x50>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	d008      	beq.n	8000cd8 <__lesf2+0x54>
 8000cc6:	4283      	cmp	r3, r0
 8000cc8:	d012      	beq.n	8000cf0 <__lesf2+0x6c>
 8000cca:	2102      	movs	r1, #2
 8000ccc:	1e58      	subs	r0, r3, #1
 8000cce:	4008      	ands	r0, r1
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e000      	b.n	8000cd6 <__lesf2+0x52>
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d1f4      	bne.n	8000cc6 <__lesf2+0x42>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d1fa      	bne.n	8000cd6 <__lesf2+0x52>
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	e7f7      	b.n	8000cd6 <__lesf2+0x52>
 8000ce6:	2c00      	cmp	r4, #0
 8000ce8:	d1ed      	bne.n	8000cc6 <__lesf2+0x42>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d1eb      	bne.n	8000cc6 <__lesf2+0x42>
 8000cee:	e7ec      	b.n	8000cca <__lesf2+0x46>
 8000cf0:	42a2      	cmp	r2, r4
 8000cf2:	dc05      	bgt.n	8000d00 <__lesf2+0x7c>
 8000cf4:	dbf2      	blt.n	8000cdc <__lesf2+0x58>
 8000cf6:	42b5      	cmp	r5, r6
 8000cf8:	d802      	bhi.n	8000d00 <__lesf2+0x7c>
 8000cfa:	d3ef      	bcc.n	8000cdc <__lesf2+0x58>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	e7ea      	b.n	8000cd6 <__lesf2+0x52>
 8000d00:	4243      	negs	r3, r0
 8000d02:	4158      	adcs	r0, r3
 8000d04:	0040      	lsls	r0, r0, #1
 8000d06:	3801      	subs	r0, #1
 8000d08:	e7e5      	b.n	8000cd6 <__lesf2+0x52>
 8000d0a:	46c0      	nop			; (mov r8, r8)

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fac4 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f85e 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 f940 	bl	8000f9c <MX_GPIO_Init>
  /* Pay attention to this arrangement (ADC and then DMA) this arrangement is very important otherwise the ADC will not work*/
  	MX_DMA_Init();
 8000d1c:	f000 f920 	bl	8000f60 <MX_DMA_Init>
  	MX_ADC1_Init();
 8000d20:	f000 f8b6 	bl	8000e90 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	/*Start calibration for ADC*/
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <main+0xac>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 fb58 	bl	80023dc <HAL_ADCEx_Calibration_Start>
	/*Init ADC with DMA in single conversion mode*/
	HAL_ADC_Start_DMA(&hadc1, &ADC_RES, 1);
 8000d2c:	4923      	ldr	r1, [pc, #140]	; (8000dbc <main+0xb0>)
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <main+0xac>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fee2 	bl	8001afc <HAL_ADC_Start_DMA>
	/*Init LCD*/
	lcd_init();
 8000d38:	f003 f894 	bl	8003e64 <lcd_init>
	/*Welcome screen lcd */
	lcd_puts(0, 2, "ADC DMA");
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <main+0xb4>)
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2102      	movs	r1, #2
 8000d42:	2000      	movs	r0, #0
 8000d44:	f003 f9b6 	bl	80040b4 <lcd_puts>
	HAL_Delay(2000);
 8000d48:	23fa      	movs	r3, #250	; 0xfa
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fb2b 	bl	80013a8 <HAL_Delay>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/* in single conversion mode we should triggered ADC by software starting every while loop*/
		HAL_ADC_Start(&hadc1);
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <main+0xac>)
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fe83 	bl	8001a60 <HAL_ADC_Start>
		// Convert ADC value to temperature in Celsius
		temperature = ((float) ADC_RES / ADC_MAX ) * (ADC_REFERNCE / LM35_GAIN );
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <main+0xb0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fe8a 	bl	8000a78 <__aeabi_ui2f>
 8000d64:	1c03      	adds	r3, r0, #0
 8000d66:	218b      	movs	r1, #139	; 0x8b
 8000d68:	05c9      	lsls	r1, r1, #23
 8000d6a:	1c18      	adds	r0, r3, #0
 8000d6c:	f7ff fa78 	bl	8000260 <__aeabi_fdiv>
 8000d70:	1c03      	adds	r3, r0, #0
 8000d72:	4914      	ldr	r1, [pc, #80]	; (8000dc4 <main+0xb8>)
 8000d74:	1c18      	adds	r0, r3, #0
 8000d76:	f7ff fb8b 	bl	8000490 <__aeabi_fmul>
 8000d7a:	1c03      	adds	r3, r0, #0
 8000d7c:	1c1a      	adds	r2, r3, #0
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <main+0xbc>)
 8000d80:	601a      	str	r2, [r3, #0]
		/*Clear LCD and print a new value*/
		lcd_clear();
 8000d82:	f003 f9e5 	bl	8004150 <lcd_clear>
		sprintf(buff, "temp: %03dC", (uint16_t) temperature);
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <main+0xbc>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1c18      	adds	r0, r3, #0
 8000d8c:	f7ff fa50 	bl	8000230 <__aeabi_f2uiz>
 8000d90:	0003      	movs	r3, r0
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	001a      	movs	r2, r3
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <main+0xc0>)
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <main+0xc4>)
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f003 fa14 	bl	80041c8 <siprintf>
		lcd_puts(0, 0, buff);
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <main+0xc4>)
 8000da2:	001a      	movs	r2, r3
 8000da4:	2100      	movs	r1, #0
 8000da6:	2000      	movs	r0, #0
 8000da8:	f003 f984 	bl	80040b4 <lcd_puts>
		HAL_Delay(500);
 8000dac:	23fa      	movs	r3, #250	; 0xfa
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 faf9 	bl	80013a8 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000db6:	e7cc      	b.n	8000d52 <main+0x46>
 8000db8:	2000008c 	.word	0x2000008c
 8000dbc:	20000150 	.word	0x20000150
 8000dc0:	08004ab4 	.word	0x08004ab4
 8000dc4:	43a50000 	.word	0x43a50000
 8000dc8:	20000154 	.word	0x20000154
 8000dcc:	08004abc 	.word	0x08004abc
 8000dd0:	20000158 	.word	0x20000158

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b095      	sub	sp, #84	; 0x54
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	2414      	movs	r4, #20
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	0018      	movs	r0, r3
 8000de0:	233c      	movs	r3, #60	; 0x3c
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f003 f9e7 	bl	80041b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	0018      	movs	r0, r3
 8000dee:	2310      	movs	r3, #16
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f003 f9e0 	bl	80041b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 f8cb 	bl	8002f98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2202      	movs	r2, #2
 8000e06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	0052      	lsls	r2, r2, #1
 8000e0e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e10:	0021      	movs	r1, r4
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2240      	movs	r2, #64	; 0x40
 8000e1c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2202      	movs	r2, #2
 8000e22:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2202      	movs	r2, #2
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2209      	movs	r2, #9
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0292      	lsls	r2, r2, #10
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	0492      	lsls	r2, r2, #18
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	05d2      	lsls	r2, r2, #23
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	0018      	movs	r0, r3
 8000e52:	f002 f8e1 	bl	8003018 <HAL_RCC_OscConfig>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e5a:	f000 f8d5 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2202      	movs	r2, #2
 8000e68:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2101      	movs	r1, #1
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f002 fc2c 	bl	80036d8 <HAL_RCC_ClockConfig>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e84:	f000 f8c0 	bl	8001008 <Error_Handler>
  }
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b015      	add	sp, #84	; 0x54
 8000e8e:	bd90      	pop	{r4, r7, pc}

08000e90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	0018      	movs	r0, r3
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f003 f98a 	bl	80041b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ea6:	4a2c      	ldr	r2, [pc, #176]	; (8000f58 <MX_ADC1_Init+0xc8>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	05d2      	lsls	r2, r2, #23
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ef0:	222c      	movs	r2, #44	; 0x2c
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000f0a:	223c      	movs	r2, #60	; 0x3c
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 fbf9 	bl	8001710 <HAL_ADC_Init>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d001      	beq.n	8000f26 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000f22:	f000 f871 	bl	8001008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <MX_ADC1_Init+0xcc>)
 8000f2a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	1d3a      	adds	r2, r7, #4
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_ADC1_Init+0xc4>)
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 fe82 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000f48:	f000 f85e 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b004      	add	sp, #16
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000008c 	.word	0x2000008c
 8000f58:	40012400 	.word	0x40012400
 8000f5c:	18000040 	.word	0x18000040

08000f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_DMA_Init+0x38>)
 8000f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_DMA_Init+0x38>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_DMA_Init+0x38>)
 8000f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f76:	2201      	movs	r2, #1
 8000f78:	4013      	ands	r3, r2
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	200b      	movs	r0, #11
 8000f84:	f001 fbac 	bl	80026e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8000f88:	200b      	movs	r0, #11
 8000f8a:	f001 fbbe 	bl	800270a <HAL_NVIC_EnableIRQ>

}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	40021000 	.word	0x40021000

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	2314      	movs	r3, #20
 8000fa8:	001a      	movs	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	f003 f904 	bl	80041b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_GPIO_Init+0x68>)
 8000fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_GPIO_Init+0x68>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_GPIO_Init+0x68>)
 8000fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fc8:	23a0      	movs	r3, #160	; 0xa0
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	2200      	movs	r2, #0
 8000fce:	213f      	movs	r1, #63	; 0x3f
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 ffc3 	bl	8002f5c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	223f      	movs	r2, #63	; 0x3f
 8000fda:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2201      	movs	r2, #1
 8000fe0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	1d3a      	adds	r2, r7, #4
 8000ff0:	23a0      	movs	r3, #160	; 0xa0
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f001 fe44 	bl	8002c84 <HAL_GPIO_Init>

}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b006      	add	sp, #24
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_MspInit+0x58>)
 800101c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_MspInit+0x58>)
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_MspInit+0x58>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2201      	movs	r2, #1
 800102c:	4013      	ands	r3, r2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_MspInit+0x58>)
 8001034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_MspInit+0x58>)
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	0549      	lsls	r1, r1, #21
 800103c:	430a      	orrs	r2, r1
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_MspInit+0x58>)
 8001042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	055b      	lsls	r3, r3, #21
 8001048:	4013      	ands	r3, r2
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800104e:	f000 f9e3 	bl	8001418 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001052:	2002      	movs	r0, #2
 8001054:	f000 f9cc 	bl	80013f0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001058:	23c0      	movs	r3, #192	; 0xc0
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	0018      	movs	r0, r3
 800105e:	f000 f9e9 	bl	8001434 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b09d      	sub	sp, #116	; 0x74
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	235c      	movs	r3, #92	; 0x5c
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	0018      	movs	r0, r3
 800107e:	2314      	movs	r3, #20
 8001080:	001a      	movs	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	f003 f898 	bl	80041b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	2410      	movs	r4, #16
 800108a:	193b      	adds	r3, r7, r4
 800108c:	0018      	movs	r0, r3
 800108e:	234c      	movs	r3, #76	; 0x4c
 8001090:	001a      	movs	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	f003 f890 	bl	80041b8 <memset>
  if(hadc->Instance==ADC1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a36      	ldr	r2, [pc, #216]	; (8001178 <HAL_ADC_MspInit+0x108>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d165      	bne.n	800116e <HAL_ADC_MspInit+0xfe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010a2:	193b      	adds	r3, r7, r4
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	01d2      	lsls	r2, r2, #7
 80010a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	0018      	movs	r0, r3
 80010b4:	f002 fc9a 	bl	80039ec <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	1e03      	subs	r3, r0, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010bc:	f7ff ffa4 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0x10c>)
 80010c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_ADC_MspInit+0x10c>)
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	0349      	lsls	r1, r1, #13
 80010ca:	430a      	orrs	r2, r1
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0x10c>)
 80010d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	035b      	lsls	r3, r3, #13
 80010d6:	4013      	ands	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0x10c>)
 80010de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_ADC_MspInit+0x10c>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	430a      	orrs	r2, r1
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0x10c>)
 80010ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ec:	2201      	movs	r2, #1
 80010ee:	4013      	ands	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f4:	215c      	movs	r1, #92	; 0x5c
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2240      	movs	r2, #64	; 0x40
 80010fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2203      	movs	r2, #3
 8001100:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	187a      	adds	r2, r7, r1
 800110a:	23a0      	movs	r3, #160	; 0xa0
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f001 fdb7 	bl	8002c84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel6;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_ADC_MspInit+0x110>)
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_ADC_MspInit+0x114>)
 800111a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_ADC_MspInit+0x110>)
 800111e:	2205      	movs	r2, #5
 8001120:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_ADC_MspInit+0x110>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_ADC_MspInit+0x110>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_ADC_MspInit+0x110>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_ADC_MspInit+0x110>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	0052      	lsls	r2, r2, #1
 800113a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_ADC_MspInit+0x110>)
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	00d2      	lsls	r2, r2, #3
 8001142:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_ADC_MspInit+0x110>)
 8001146:	2220      	movs	r2, #32
 8001148:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_ADC_MspInit+0x110>)
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	0152      	lsls	r2, r2, #5
 8001150:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_ADC_MspInit+0x110>)
 8001154:	0018      	movs	r0, r3
 8001156:	f001 faf5 	bl	8002744 <HAL_DMA_Init>
 800115a:	1e03      	subs	r3, r0, #0
 800115c:	d001      	beq.n	8001162 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 800115e:	f7ff ff53 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_ADC_MspInit+0x110>)
 8001166:	651a      	str	r2, [r3, #80]	; 0x50
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_ADC_MspInit+0x110>)
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b01d      	add	sp, #116	; 0x74
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	40012400 	.word	0x40012400
 800117c:	40021000 	.word	0x40021000
 8001180:	200000f0 	.word	0x200000f0
 8001184:	4002006c 	.word	0x4002006c

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f8e0 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x14>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f001 fbf2 	bl	80029a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	200000f0 	.word	0x200000f0

080011d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <_sbrk+0x5c>)
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <_sbrk+0x60>)
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <_sbrk+0x64>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <_sbrk+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	18d3      	adds	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001200:	f002 ffb0 	bl	8004164 <__errno>
 8001204:	0003      	movs	r3, r0
 8001206:	220c      	movs	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120a:	2301      	movs	r3, #1
 800120c:	425b      	negs	r3, r3
 800120e:	e009      	b.n	8001224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	18d2      	adds	r2, r2, r3
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <_sbrk+0x64>)
 8001220:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b006      	add	sp, #24
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20024000 	.word	0x20024000
 8001230:	00000400 	.word	0x00000400
 8001234:	20000168 	.word	0x20000168
 8001238:	20000180 	.word	0x20000180

0800123c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800124a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800124c:	f7ff fff6 	bl	800123c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <LoopForever+0x6>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <LoopForever+0xe>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	; (8001294 <LoopForever+0x16>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001276:	f002 ff7b 	bl	8004170 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800127a:	f7ff fd47 	bl	8000d0c <main>

0800127e <LoopForever>:

LoopForever:
  b LoopForever
 800127e:	e7fe      	b.n	800127e <LoopForever>
  ldr   r0, =_estack
 8001280:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800128c:	08004c04 	.word	0x08004c04
  ldr r2, =_sbss
 8001290:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001294:	20000180 	.word	0x20000180

08001298 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC1_COMP_IRQHandler>
	...

0800129c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x3c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Init+0x3c>)
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	0049      	lsls	r1, r1, #1
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b6:	2003      	movs	r0, #3
 80012b8:	f000 f810 	bl	80012dc <HAL_InitTick>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d003      	beq.n	80012c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	e001      	b.n	80012cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f7ff fea4 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	781b      	ldrb	r3, [r3, #0]
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40022000 	.word	0x40022000

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e4:	230f      	movs	r3, #15
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_InitTick+0x88>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02b      	beq.n	800134c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_InitTick+0x8c>)
 80012f6:	681c      	ldr	r4, [r3, #0]
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_InitTick+0x88>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	0019      	movs	r1, r3
 80012fe:	23fa      	movs	r3, #250	; 0xfa
 8001300:	0098      	lsls	r0, r3, #2
 8001302:	f7fe ff09 	bl	8000118 <__udivsi3>
 8001306:	0003      	movs	r3, r0
 8001308:	0019      	movs	r1, r3
 800130a:	0020      	movs	r0, r4
 800130c:	f7fe ff04 	bl	8000118 <__udivsi3>
 8001310:	0003      	movs	r3, r0
 8001312:	0018      	movs	r0, r3
 8001314:	f001 fa09 	bl	800272a <HAL_SYSTICK_Config>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d112      	bne.n	8001342 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d80a      	bhi.n	8001338 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	2301      	movs	r3, #1
 8001326:	425b      	negs	r3, r3
 8001328:	2200      	movs	r2, #0
 800132a:	0018      	movs	r0, r3
 800132c:	f001 f9d8 	bl	80026e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_InitTick+0x90>)
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e00d      	b.n	8001354 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e008      	b.n	8001354 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001342:	230f      	movs	r3, #15
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	e003      	b.n	8001354 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800134c:	230f      	movs	r3, #15
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001354:	230f      	movs	r3, #15
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	781b      	ldrb	r3, [r3, #0]
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b005      	add	sp, #20
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	20000008 	.word	0x20000008
 8001368:	20000000 	.word	0x20000000
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x1c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	001a      	movs	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x20>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	18d2      	adds	r2, r2, r3
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_IncTick+0x20>)
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	20000008 	.word	0x20000008
 8001390:	2000016c 	.word	0x2000016c

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <HAL_GetTick+0x10>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	2000016c 	.word	0x2000016c

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fff0 	bl	8001394 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3301      	adds	r3, #1
 80013c0:	d005      	beq.n	80013ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_Delay+0x44>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	001a      	movs	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	189b      	adds	r3, r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	f7ff ffe0 	bl	8001394 <HAL_GetTick>
 80013d4:	0002      	movs	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f7      	bhi.n	80013d0 <HAL_Delay+0x28>
  {
  }
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	20000008 	.word	0x20000008

080013f0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2202      	movs	r2, #2
 80013fe:	4393      	bics	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	40010030 	.word	0x40010030

08001418 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8001422:	2101      	movs	r1, #1
 8001424:	438a      	bics	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	40010030 	.word	0x40010030

08001434 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001442:	4013      	ands	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	40010000 	.word	0x40010000
 800145c:	fffff9ff 	.word	0xfffff9ff

08001460 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001470:	401a      	ands	r2, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b002      	add	sp, #8
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	fe3fffff 	.word	0xfe3fffff

08001488 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	23e0      	movs	r3, #224	; 0xe0
 8001496:	045b      	lsls	r3, r3, #17
 8001498:	4013      	ands	r3, r2
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	2104      	movs	r1, #4
 80014b6:	400a      	ands	r2, r1
 80014b8:	2107      	movs	r1, #7
 80014ba:	4091      	lsls	r1, r2
 80014bc:	000a      	movs	r2, r1
 80014be:	43d2      	mvns	r2, r2
 80014c0:	401a      	ands	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2104      	movs	r1, #4
 80014c6:	400b      	ands	r3, r1
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4099      	lsls	r1, r3
 80014cc:	000b      	movs	r3, r1
 80014ce:	431a      	orrs	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b004      	add	sp, #16
 80014da:	bd80      	pop	{r7, pc}

080014dc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	2104      	movs	r1, #4
 80014ee:	400a      	ands	r2, r1
 80014f0:	2107      	movs	r1, #7
 80014f2:	4091      	lsls	r1, r2
 80014f4:	000a      	movs	r2, r1
 80014f6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2104      	movs	r1, #4
 80014fc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80014fe:	40da      	lsrs	r2, r3
 8001500:	0013      	movs	r3, r2
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b002      	add	sp, #8
 8001508:	bd80      	pop	{r7, pc}

0800150a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	23c0      	movs	r3, #192	; 0xc0
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4013      	ands	r3, r2
 800151c:	d101      	bne.n	8001522 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}

0800152c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	211f      	movs	r1, #31
 8001540:	400a      	ands	r2, r1
 8001542:	210f      	movs	r1, #15
 8001544:	4091      	lsls	r1, r2
 8001546:	000a      	movs	r2, r1
 8001548:	43d2      	mvns	r2, r2
 800154a:	401a      	ands	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	0e9b      	lsrs	r3, r3, #26
 8001550:	210f      	movs	r1, #15
 8001552:	4019      	ands	r1, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	201f      	movs	r0, #31
 8001558:	4003      	ands	r3, r0
 800155a:	4099      	lsls	r1, r3
 800155c:	000b      	movs	r3, r1
 800155e:	431a      	orrs	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b004      	add	sp, #16
 800156a:	bd80      	pop	{r7, pc}

0800156c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	035b      	lsls	r3, r3, #13
 800157e:	0b5b      	lsrs	r3, r3, #13
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}

0800158e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	0352      	lsls	r2, r2, #13
 80015a0:	0b52      	lsrs	r2, r2, #13
 80015a2:	43d2      	mvns	r2, r2
 80015a4:	401a      	ands	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	0212      	lsls	r2, r2, #8
 80015c8:	43d2      	mvns	r2, r2
 80015ca:	401a      	ands	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	400b      	ands	r3, r1
 80015d4:	4904      	ldr	r1, [pc, #16]	; (80015e8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80015d6:	400b      	ands	r3, r1
 80015d8:	431a      	orrs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b004      	add	sp, #16
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	07ffff00 	.word	0x07ffff00

080015ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <LL_ADC_EnableInternalRegulator+0x24>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	0552      	lsls	r2, r2, #21
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	6fffffe8 	.word	0x6fffffe8

08001614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	055b      	lsls	r3, r3, #21
 8001624:	401a      	ands	r2, r3
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	055b      	lsls	r3, r3, #21
 800162a:	429a      	cmp	r2, r3
 800162c:	d101      	bne.n	8001632 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001632:	2300      	movs	r3, #0
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <LL_ADC_Enable+0x20>)
 800164a:	4013      	ands	r3, r2
 800164c:	2201      	movs	r2, #1
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}
 800165c:	7fffffe8 	.word	0x7fffffe8

08001660 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <LL_ADC_Disable+0x20>)
 800166e:	4013      	ands	r3, r2
 8001670:	2202      	movs	r2, #2
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}
 8001680:	7fffffe8 	.word	0x7fffffe8

08001684 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2201      	movs	r2, #1
 8001692:	4013      	ands	r3, r2
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <LL_ADC_IsEnabled+0x18>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <LL_ADC_IsEnabled+0x1a>
 800169c:	2300      	movs	r3, #0
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d101      	bne.n	80016be <LL_ADC_IsDisableOngoing+0x18>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <LL_ADC_IsDisableOngoing+0x1a>
 80016be:	2300      	movs	r3, #0
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <LL_ADC_REG_StartConversion+0x20>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	2204      	movs	r2, #4
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	7fffffe8 	.word	0x7fffffe8

080016ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2204      	movs	r2, #4
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d101      	bne.n	8001704 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001718:	231f      	movs	r3, #31
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e17f      	b.n	8001a36 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10a      	bne.n	8001754 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff fc95 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2254      	movs	r2, #84	; 0x54
 8001750:	2100      	movs	r1, #0
 8001752:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff ff5b 	bl	8001614 <LL_ADC_IsInternalRegulatorEnabled>
 800175e:	1e03      	subs	r3, r0, #0
 8001760:	d115      	bne.n	800178e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff ff40 	bl	80015ec <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800176c:	4bb4      	ldr	r3, [pc, #720]	; (8001a40 <HAL_ADC_Init+0x330>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	49b4      	ldr	r1, [pc, #720]	; (8001a44 <HAL_ADC_Init+0x334>)
 8001772:	0018      	movs	r0, r3
 8001774:	f7fe fcd0 	bl	8000118 <__udivsi3>
 8001778:	0003      	movs	r3, r0
 800177a:	3301      	adds	r3, #1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001780:	e002      	b.n	8001788 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3b01      	subs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f9      	bne.n	8001782 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff ff3e 	bl	8001614 <LL_ADC_IsInternalRegulatorEnabled>
 8001798:	1e03      	subs	r3, r0, #0
 800179a:	d10f      	bne.n	80017bc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	2210      	movs	r2, #16
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	2201      	movs	r2, #1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017b4:	231f      	movs	r3, #31
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff ff93 	bl	80016ec <LL_ADC_REG_IsConversionOngoing>
 80017c6:	0003      	movs	r3, r0
 80017c8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	2210      	movs	r2, #16
 80017d0:	4013      	ands	r3, r2
 80017d2:	d000      	beq.n	80017d6 <HAL_ADC_Init+0xc6>
 80017d4:	e122      	b.n	8001a1c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d000      	beq.n	80017de <HAL_ADC_Init+0xce>
 80017dc:	e11e      	b.n	8001a1c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	4a99      	ldr	r2, [pc, #612]	; (8001a48 <HAL_ADC_Init+0x338>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	2202      	movs	r2, #2
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff ff46 	bl	8001684 <LL_ADC_IsEnabled>
 80017f8:	1e03      	subs	r3, r0, #0
 80017fa:	d000      	beq.n	80017fe <HAL_ADC_Init+0xee>
 80017fc:	e0ad      	b.n	800195a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7e1b      	ldrb	r3, [r3, #24]
 8001806:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001808:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7e5b      	ldrb	r3, [r3, #25]
 800180e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001810:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7e9b      	ldrb	r3, [r3, #26]
 8001816:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001818:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_ADC_Init+0x118>
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	015b      	lsls	r3, r3, #5
 8001826:	e000      	b.n	800182a <HAL_ADC_Init+0x11a>
 8001828:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800182a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001830:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	da04      	bge.n	8001844 <HAL_ADC_Init+0x134>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	085b      	lsrs	r3, r3, #1
 8001842:	e001      	b.n	8001848 <HAL_ADC_Init+0x138>
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001848:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	212c      	movs	r1, #44	; 0x2c
 800184e:	5c5b      	ldrb	r3, [r3, r1]
 8001850:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001852:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2220      	movs	r2, #32
 800185e:	5c9b      	ldrb	r3, [r3, r2]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d115      	bne.n	8001890 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e9b      	ldrb	r3, [r3, #26]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	0252      	lsls	r2, r2, #9
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	e00b      	b.n	8001890 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	2220      	movs	r2, #32
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001888:	2201      	movs	r2, #1
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00a      	beq.n	80018ae <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189c:	23e0      	movs	r3, #224	; 0xe0
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80018a6:	4313      	orrs	r3, r2
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4a65      	ldr	r2, [pc, #404]	; (8001a4c <HAL_ADC_Init+0x33c>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	0f9b      	lsrs	r3, r3, #30
 80018ca:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018d0:	4313      	orrs	r3, r2
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	223c      	movs	r2, #60	; 0x3c
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d111      	bne.n	8001906 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	0f9b      	lsrs	r3, r3, #30
 80018e8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018ee:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80018f4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80018fa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	4313      	orrs	r3, r2
 8001900:	2201      	movs	r2, #1
 8001902:	4313      	orrs	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	4a50      	ldr	r2, [pc, #320]	; (8001a50 <HAL_ADC_Init+0x340>)
 800190e:	4013      	ands	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	430a      	orrs	r2, r1
 800191a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	23c0      	movs	r3, #192	; 0xc0
 8001922:	061b      	lsls	r3, r3, #24
 8001924:	429a      	cmp	r2, r3
 8001926:	d018      	beq.n	800195a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	05db      	lsls	r3, r3, #23
 8001930:	429a      	cmp	r2, r3
 8001932:	d012      	beq.n	800195a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	061b      	lsls	r3, r3, #24
 800193c:	429a      	cmp	r2, r3
 800193e:	d00c      	beq.n	800195a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001940:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_ADC_Init+0x344>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a44      	ldr	r2, [pc, #272]	; (8001a58 <HAL_ADC_Init+0x348>)
 8001946:	4013      	ands	r3, r2
 8001948:	0019      	movs	r1, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	23f0      	movs	r3, #240	; 0xf0
 8001950:	039b      	lsls	r3, r3, #14
 8001952:	401a      	ands	r2, r3
 8001954:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_ADC_Init+0x344>)
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	001a      	movs	r2, r3
 8001964:	2100      	movs	r1, #0
 8001966:	f7ff fd9c 	bl	80014a2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001972:	493a      	ldr	r1, [pc, #232]	; (8001a5c <HAL_ADC_Init+0x34c>)
 8001974:	001a      	movs	r2, r3
 8001976:	f7ff fd94 	bl	80014a2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2110      	movs	r1, #16
 800198e:	4249      	negs	r1, r1
 8001990:	430a      	orrs	r2, r1
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
 8001994:	e018      	b.n	80019c8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	039b      	lsls	r3, r3, #14
 800199e:	429a      	cmp	r2, r3
 80019a0:	d112      	bne.n	80019c8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	221c      	movs	r2, #28
 80019b2:	4013      	ands	r3, r2
 80019b4:	2210      	movs	r2, #16
 80019b6:	4252      	negs	r2, r2
 80019b8:	409a      	lsls	r2, r3
 80019ba:	0011      	movs	r1, r2
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2100      	movs	r1, #0
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7ff fd84 	bl	80014dc <LL_ADC_GetSamplingTimeCommonChannels>
 80019d4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019da:	429a      	cmp	r2, r3
 80019dc:	d10b      	bne.n	80019f6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	2203      	movs	r2, #3
 80019ea:	4393      	bics	r3, r2
 80019ec:	2201      	movs	r2, #1
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019f4:	e01c      	b.n	8001a30 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	2212      	movs	r2, #18
 80019fc:	4393      	bics	r3, r2
 80019fe:	2210      	movs	r2, #16
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001a12:	231f      	movs	r3, #31
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a1a:	e009      	b.n	8001a30 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	2210      	movs	r2, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a28:	231f      	movs	r3, #31
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001a30:	231f      	movs	r3, #31
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	781b      	ldrb	r3, [r3, #0]
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b008      	add	sp, #32
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	20000000 	.word	0x20000000
 8001a44:	00030d40 	.word	0x00030d40
 8001a48:	fffffefd 	.word	0xfffffefd
 8001a4c:	fffe0201 	.word	0xfffe0201
 8001a50:	1ffffc02 	.word	0x1ffffc02
 8001a54:	40012708 	.word	0x40012708
 8001a58:	ffc3ffff 	.word	0xffc3ffff
 8001a5c:	07ffff04 	.word	0x07ffff04

08001a60 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff fe3d 	bl	80016ec <LL_ADC_REG_IsConversionOngoing>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d135      	bne.n	8001ae2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2254      	movs	r2, #84	; 0x54
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_Start+0x24>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e035      	b.n	8001af0 <HAL_ADC_Start+0x90>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2254      	movs	r2, #84	; 0x54
 8001a88:	2101      	movs	r1, #1
 8001a8a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a8c:	250f      	movs	r5, #15
 8001a8e:	197c      	adds	r4, r7, r5
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 fab0 	bl	8001ff8 <ADC_Enable>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a9c:	197b      	adds	r3, r7, r5
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d119      	bne.n	8001ad8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <HAL_ADC_Start+0x98>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	0052      	lsls	r2, r2, #1
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	221c      	movs	r2, #28
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2254      	movs	r2, #84	; 0x54
 8001ac8:	2100      	movs	r1, #0
 8001aca:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff fdf9 	bl	80016c8 <LL_ADC_REG_StartConversion>
 8001ad6:	e008      	b.n	8001aea <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2254      	movs	r2, #84	; 0x54
 8001adc:	2100      	movs	r1, #0
 8001ade:	5499      	strb	r1, [r3, r2]
 8001ae0:	e003      	b.n	8001aea <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ae2:	230f      	movs	r3, #15
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001aea:	230f      	movs	r3, #15
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	781b      	ldrb	r3, [r3, #0]
}
 8001af0:	0018      	movs	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b004      	add	sp, #16
 8001af6:	bdb0      	pop	{r4, r5, r7, pc}
 8001af8:	fffff0fe 	.word	0xfffff0fe

08001afc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001afc:	b5b0      	push	{r4, r5, r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff fded 	bl	80016ec <LL_ADC_REG_IsConversionOngoing>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d16c      	bne.n	8001bf0 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2254      	movs	r2, #84	; 0x54
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_Start_DMA+0x28>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e06c      	b.n	8001bfe <HAL_ADC_Start_DMA+0x102>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2254      	movs	r2, #84	; 0x54
 8001b28:	2101      	movs	r1, #1
 8001b2a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	4013      	ands	r3, r2
 8001b36:	d113      	bne.n	8001b60 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff fda1 	bl	8001684 <LL_ADC_IsEnabled>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d004      	beq.n	8001b50 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f7ff fd88 	bl	8001660 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b60:	2517      	movs	r5, #23
 8001b62:	197c      	adds	r4, r7, r5
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 fa46 	bl	8001ff8 <ADC_Enable>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b70:	002c      	movs	r4, r5
 8001b72:	193b      	adds	r3, r7, r4
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d13e      	bne.n	8001bf8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <HAL_ADC_Start_DMA+0x10c>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	0052      	lsls	r2, r2, #1
 8001b86:	431a      	orrs	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_ADC_Start_DMA+0x110>)
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_ADC_Start_DMA+0x114>)
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_ADC_Start_DMA+0x118>)
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	221c      	movs	r2, #28
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2254      	movs	r2, #84	; 0x54
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2110      	movs	r1, #16
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3340      	adds	r3, #64	; 0x40
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	193c      	adds	r4, r7, r4
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f000 fe5e 	bl	800289c <HAL_DMA_Start_IT>
 8001be0:	0003      	movs	r3, r0
 8001be2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff fd6d 	bl	80016c8 <LL_ADC_REG_StartConversion>
 8001bee:	e003      	b.n	8001bf8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bf0:	2317      	movs	r3, #23
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001bf8:	2317      	movs	r3, #23
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b006      	add	sp, #24
 8001c04:	bdb0      	pop	{r4, r5, r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	fffff0fe 	.word	0xfffff0fe
 8001c0c:	080021c1 	.word	0x080021c1
 8001c10:	08002289 	.word	0x08002289
 8001c14:	080022a7 	.word	0x080022a7

08001c18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c52:	2317      	movs	r3, #23
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2254      	movs	r2, #84	; 0x54
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x24>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e1c0      	b.n	8001fee <HAL_ADC_ConfigChannel+0x3a6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2254      	movs	r2, #84	; 0x54
 8001c70:	2101      	movs	r1, #1
 8001c72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff fd37 	bl	80016ec <LL_ADC_REG_IsConversionOngoing>
 8001c7e:	1e03      	subs	r3, r0, #0
 8001c80:	d000      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0x3c>
 8001c82:	e1a3      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d100      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x46>
 8001c8c:	e143      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d004      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c9e:	4ac1      	ldr	r2, [pc, #772]	; (8001fa4 <HAL_ADC_ConfigChannel+0x35c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d108      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0019      	movs	r1, r3
 8001cae:	0010      	movs	r0, r2
 8001cb0:	f7ff fc5c 	bl	800156c <LL_ADC_REG_SetSequencerChAdd>
 8001cb4:	e0c9      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	211f      	movs	r1, #31
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	4099      	lsls	r1, r3
 8001cc6:	000b      	movs	r3, r1
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4013      	ands	r3, r2
 8001ccc:	0019      	movs	r1, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	035b      	lsls	r3, r3, #13
 8001cd4:	0b5b      	lsrs	r3, r3, #13
 8001cd6:	d105      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x9c>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	221f      	movs	r2, #31
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	e098      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4013      	ands	r3, r2
 8001cec:	d000      	beq.n	8001cf0 <HAL_ADC_ConfigChannel+0xa8>
 8001cee:	e091      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x1cc>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d000      	beq.n	8001cfc <HAL_ADC_ConfigChannel+0xb4>
 8001cfa:	e089      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x1c8>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2204      	movs	r2, #4
 8001d02:	4013      	ands	r3, r2
 8001d04:	d000      	beq.n	8001d08 <HAL_ADC_ConfigChannel+0xc0>
 8001d06:	e081      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1c4>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d000      	beq.n	8001d14 <HAL_ADC_ConfigChannel+0xcc>
 8001d12:	e079      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x1c0>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2210      	movs	r2, #16
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d000      	beq.n	8001d20 <HAL_ADC_ConfigChannel+0xd8>
 8001d1e:	e071      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x1bc>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2220      	movs	r2, #32
 8001d26:	4013      	ands	r3, r2
 8001d28:	d000      	beq.n	8001d2c <HAL_ADC_ConfigChannel+0xe4>
 8001d2a:	e069      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x1b8>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2240      	movs	r2, #64	; 0x40
 8001d32:	4013      	ands	r3, r2
 8001d34:	d000      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0xf0>
 8001d36:	e061      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x1b4>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d000      	beq.n	8001d44 <HAL_ADC_ConfigChannel+0xfc>
 8001d42:	e059      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x1b0>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d151      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1ac>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d149      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1a8>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4013      	ands	r3, r2
 8001d66:	d141      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1a4>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4013      	ands	r3, r2
 8001d72:	d139      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x1a0>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	015b      	lsls	r3, r3, #5
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d131      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x19c>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	019b      	lsls	r3, r3, #6
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d129      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x198>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	01db      	lsls	r3, r3, #7
 8001d94:	4013      	ands	r3, r2
 8001d96:	d121      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x194>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	4013      	ands	r3, r2
 8001da2:	d119      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x190>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	025b      	lsls	r3, r3, #9
 8001dac:	4013      	ands	r3, r2
 8001dae:	d111      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x18c>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	029b      	lsls	r3, r3, #10
 8001db8:	4013      	ands	r3, r2
 8001dba:	d109      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x188>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	02db      	lsls	r3, r3, #11
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d001      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x184>
 8001dc8:	2312      	movs	r3, #18
 8001dca:	e024      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e022      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001dd0:	2311      	movs	r3, #17
 8001dd2:	e020      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	e01e      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001dd8:	230f      	movs	r3, #15
 8001dda:	e01c      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ddc:	230e      	movs	r3, #14
 8001dde:	e01a      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001de0:	230d      	movs	r3, #13
 8001de2:	e018      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001de4:	230c      	movs	r3, #12
 8001de6:	e016      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001de8:	230b      	movs	r3, #11
 8001dea:	e014      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001dec:	230a      	movs	r3, #10
 8001dee:	e012      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001df0:	2309      	movs	r3, #9
 8001df2:	e010      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001df4:	2308      	movs	r3, #8
 8001df6:	e00e      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001df8:	2307      	movs	r3, #7
 8001dfa:	e00c      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	e00a      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001e00:	2305      	movs	r3, #5
 8001e02:	e008      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e006      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e004      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e002      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1ce>
 8001e14:	2300      	movs	r3, #0
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	6852      	ldr	r2, [r2, #4]
 8001e1a:	201f      	movs	r0, #31
 8001e1c:	4002      	ands	r2, r0
 8001e1e:	4093      	lsls	r3, r2
 8001e20:	000a      	movs	r2, r1
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d808      	bhi.n	8001e4a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	001a      	movs	r2, r3
 8001e46:	f7ff fb71 	bl	800152c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	001a      	movs	r2, r3
 8001e58:	f7ff fbac 	bl	80015b4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db00      	blt.n	8001e66 <HAL_ADC_ConfigChannel+0x21e>
 8001e64:	e0bc      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e66:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_ADC_ConfigChannel+0x360>)
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff fb0d 	bl	8001488 <LL_ADC_GetCommonPathInternalCh>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a4d      	ldr	r2, [pc, #308]	; (8001fac <HAL_ADC_ConfigChannel+0x364>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d122      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e84:	d11d      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0412      	lsls	r2, r2, #16
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	4a46      	ldr	r2, [pc, #280]	; (8001fa8 <HAL_ADC_ConfigChannel+0x360>)
 8001e90:	0019      	movs	r1, r3
 8001e92:	0010      	movs	r0, r2
 8001e94:	f7ff fae4 	bl	8001460 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e98:	4b45      	ldr	r3, [pc, #276]	; (8001fb0 <HAL_ADC_ConfigChannel+0x368>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4945      	ldr	r1, [pc, #276]	; (8001fb4 <HAL_ADC_ConfigChannel+0x36c>)
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7fe f93a 	bl	8000118 <__udivsi3>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	189b      	adds	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001eb2:	e002      	b.n	8001eba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ec0:	e08e      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a3c      	ldr	r2, [pc, #240]	; (8001fb8 <HAL_ADC_ConfigChannel+0x370>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d10e      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x2a2>
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	045b      	lsls	r3, r3, #17
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d109      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	0452      	lsls	r2, r2, #17
 8001edc:	4313      	orrs	r3, r2
 8001ede:	4a32      	ldr	r2, [pc, #200]	; (8001fa8 <HAL_ADC_ConfigChannel+0x360>)
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	f7ff fabc 	bl	8001460 <LL_ADC_SetCommonPathInternalCh>
 8001ee8:	e07a      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a33      	ldr	r2, [pc, #204]	; (8001fbc <HAL_ADC_ConfigChannel+0x374>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d000      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0x2ae>
 8001ef4:	e074      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	03db      	lsls	r3, r3, #15
 8001efc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001efe:	d000      	beq.n	8001f02 <HAL_ADC_ConfigChannel+0x2ba>
 8001f00:	e06e      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	03d2      	lsls	r2, r2, #15
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <HAL_ADC_ConfigChannel+0x360>)
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	0010      	movs	r0, r2
 8001f10:	f7ff faa6 	bl	8001460 <LL_ADC_SetCommonPathInternalCh>
 8001f14:	e064      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d004      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_ADC_ConfigChannel+0x35c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0019      	movs	r1, r3
 8001f36:	0010      	movs	r0, r2
 8001f38:	f7ff fb29 	bl	800158e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da4d      	bge.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_ADC_ConfigChannel+0x360>)
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7ff fa9e 	bl	8001488 <LL_ADC_GetCommonPathInternalCh>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_ADC_ConfigChannel+0x364>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d108      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <HAL_ADC_ConfigChannel+0x378>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <HAL_ADC_ConfigChannel+0x360>)
 8001f62:	0019      	movs	r1, r3
 8001f64:	0010      	movs	r0, r2
 8001f66:	f7ff fa7b 	bl	8001460 <LL_ADC_SetCommonPathInternalCh>
 8001f6a:	e039      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_ADC_ConfigChannel+0x370>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d108      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_ADC_ConfigChannel+0x37c>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_ADC_ConfigChannel+0x360>)
 8001f7e:	0019      	movs	r1, r3
 8001f80:	0010      	movs	r0, r2
 8001f82:	f7ff fa6d 	bl	8001460 <LL_ADC_SetCommonPathInternalCh>
 8001f86:	e02b      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_ADC_ConfigChannel+0x374>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d126      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_ADC_ConfigChannel+0x380>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <HAL_ADC_ConfigChannel+0x360>)
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	f7ff fa5f 	bl	8001460 <LL_ADC_SetCommonPathInternalCh>
 8001fa2:	e01d      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x398>
 8001fa4:	80000004 	.word	0x80000004
 8001fa8:	40012708 	.word	0x40012708
 8001fac:	b0001000 	.word	0xb0001000
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	00030d40 	.word	0x00030d40
 8001fb8:	b8004000 	.word	0xb8004000
 8001fbc:	b4002000 	.word	0xb4002000
 8001fc0:	ff7fffff 	.word	0xff7fffff
 8001fc4:	feffffff 	.word	0xfeffffff
 8001fc8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd8:	2317      	movs	r3, #23
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2254      	movs	r2, #84	; 0x54
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001fe8:	2317      	movs	r3, #23
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	781b      	ldrb	r3, [r3, #0]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b006      	add	sp, #24
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)

08001ff8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff fb3b 	bl	8001684 <LL_ADC_IsEnabled>
 800200e:	1e03      	subs	r3, r0, #0
 8002010:	d000      	beq.n	8002014 <ADC_Enable+0x1c>
 8002012:	e069      	b.n	80020e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	4a36      	ldr	r2, [pc, #216]	; (80020f4 <ADC_Enable+0xfc>)
 800201c:	4013      	ands	r3, r2
 800201e:	d00d      	beq.n	800203c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	2210      	movs	r2, #16
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2201      	movs	r2, #1
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e056      	b.n	80020ea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff fafb 	bl	800163c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <ADC_Enable+0x100>)
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff fa1d 	bl	8001488 <LL_ADC_GetCommonPathInternalCh>
 800204e:	0002      	movs	r2, r0
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	4013      	ands	r3, r2
 8002056:	d00f      	beq.n	8002078 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <ADC_Enable+0x104>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4928      	ldr	r1, [pc, #160]	; (8002100 <ADC_Enable+0x108>)
 800205e:	0018      	movs	r0, r3
 8002060:	f7fe f85a 	bl	8000118 <__udivsi3>
 8002064:	0003      	movs	r3, r0
 8002066:	3301      	adds	r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800206a:	e002      	b.n	8002072 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3b01      	subs	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f9      	bne.n	800206c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7e5b      	ldrb	r3, [r3, #25]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d033      	beq.n	80020e8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002080:	f7ff f988 	bl	8001394 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002088:	e027      	b.n	80020da <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff faf8 	bl	8001684 <LL_ADC_IsEnabled>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d104      	bne.n	80020a2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff facd 	bl	800163c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020a2:	f7ff f977 	bl	8001394 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d914      	bls.n	80020da <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d00d      	beq.n	80020da <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	2210      	movs	r2, #16
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ce:	2201      	movs	r2, #1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e007      	b.n	80020ea <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d1d0      	bne.n	800208a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	80000017 	.word	0x80000017
 80020f8:	40012708 	.word	0x40012708
 80020fc:	20000000 	.word	0x20000000
 8002100:	00030d40 	.word	0x00030d40

08002104 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff fac8 	bl	80016a6 <LL_ADC_IsDisableOngoing>
 8002116:	0003      	movs	r3, r0
 8002118:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0018      	movs	r0, r3
 8002120:	f7ff fab0 	bl	8001684 <LL_ADC_IsEnabled>
 8002124:	1e03      	subs	r3, r0, #0
 8002126:	d046      	beq.n	80021b6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d143      	bne.n	80021b6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2205      	movs	r2, #5
 8002136:	4013      	ands	r3, r2
 8002138:	2b01      	cmp	r3, #1
 800213a:	d10d      	bne.n	8002158 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff fa8d 	bl	8001660 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2203      	movs	r2, #3
 800214c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800214e:	f7ff f921 	bl	8001394 <HAL_GetTick>
 8002152:	0003      	movs	r3, r0
 8002154:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002156:	e028      	b.n	80021aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	2210      	movs	r2, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2201      	movs	r2, #1
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e021      	b.n	80021b8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002174:	f7ff f90e 	bl	8001394 <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d913      	bls.n	80021aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2201      	movs	r2, #1
 800218a:	4013      	ands	r3, r2
 800218c:	d00d      	beq.n	80021aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	2210      	movs	r2, #16
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	2201      	movs	r2, #1
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e006      	b.n	80021b8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	d1de      	bne.n	8002174 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bd80      	pop	{r7, pc}

080021c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	2250      	movs	r2, #80	; 0x50
 80021d4:	4013      	ands	r3, r2
 80021d6:	d141      	bne.n	800225c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff f98d 	bl	800150a <LL_ADC_REG_IsTriggerSourceSWStart>
 80021f0:	1e03      	subs	r3, r0, #0
 80021f2:	d02e      	beq.n	8002252 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	7e9b      	ldrb	r3, [r3, #26]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d12a      	bne.n	8002252 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2208      	movs	r2, #8
 8002204:	4013      	ands	r3, r2
 8002206:	2b08      	cmp	r3, #8
 8002208:	d123      	bne.n	8002252 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0018      	movs	r0, r3
 8002210:	f7ff fa6c 	bl	80016ec <LL_ADC_REG_IsConversionOngoing>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d110      	bne.n	800223a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	210c      	movs	r1, #12
 8002224:	438a      	bics	r2, r1
 8002226:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	4a15      	ldr	r2, [pc, #84]	; (8002284 <ADC_DMAConvCplt+0xc4>)
 800222e:	4013      	ands	r3, r2
 8002230:	2201      	movs	r2, #1
 8002232:	431a      	orrs	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	659a      	str	r2, [r3, #88]	; 0x58
 8002238:	e00b      	b.n	8002252 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	2220      	movs	r2, #32
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2201      	movs	r2, #1
 800224c:	431a      	orrs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fcdf 	bl	8001c18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800225a:	e00f      	b.n	800227c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	2210      	movs	r2, #16
 8002262:	4013      	ands	r3, r2
 8002264:	d004      	beq.n	8002270 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff fce5 	bl	8001c38 <HAL_ADC_ErrorCallback>
}
 800226e:	e005      	b.n	800227c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	0010      	movs	r0, r2
 800227a:	4798      	blx	r3
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b004      	add	sp, #16
 8002282:	bd80      	pop	{r7, pc}
 8002284:	fffffefe 	.word	0xfffffefe

08002288 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff fcc5 	bl	8001c28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b004      	add	sp, #16
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	2240      	movs	r2, #64	; 0x40
 80022ba:	431a      	orrs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	2204      	movs	r2, #4
 80022c6:	431a      	orrs	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7ff fcb2 	bl	8001c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}

080022dc <LL_ADC_SetCalibrationFactor>:
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	22b4      	movs	r2, #180	; 0xb4
 80022ea:	589b      	ldr	r3, [r3, r2]
 80022ec:	227f      	movs	r2, #127	; 0x7f
 80022ee:	4393      	bics	r3, r2
 80022f0:	001a      	movs	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	21b4      	movs	r1, #180	; 0xb4
 80022fa:	505a      	str	r2, [r3, r1]
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}

08002304 <LL_ADC_GetCalibrationFactor>:
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	22b4      	movs	r2, #180	; 0xb4
 8002310:	589b      	ldr	r3, [r3, r2]
 8002312:	227f      	movs	r2, #127	; 0x7f
 8002314:	4013      	ands	r3, r2
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <LL_ADC_Enable>:
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <LL_ADC_Enable+0x20>)
 800232e:	4013      	ands	r3, r2
 8002330:	2201      	movs	r2, #1
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}
 8002340:	7fffffe8 	.word	0x7fffffe8

08002344 <LL_ADC_Disable>:
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <LL_ADC_Disable+0x20>)
 8002352:	4013      	ands	r3, r2
 8002354:	2202      	movs	r2, #2
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}
 8002364:	7fffffe8 	.word	0x7fffffe8

08002368 <LL_ADC_IsEnabled>:
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2201      	movs	r2, #1
 8002376:	4013      	ands	r3, r2
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <LL_ADC_IsEnabled+0x18>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <LL_ADC_IsEnabled+0x1a>
 8002380:	2300      	movs	r3, #0
}
 8002382:	0018      	movs	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	b002      	add	sp, #8
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <LL_ADC_StartCalibration>:
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <LL_ADC_StartCalibration+0x24>)
 800239a:	4013      	ands	r3, r2
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	0612      	lsls	r2, r2, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	609a      	str	r2, [r3, #8]
}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b002      	add	sp, #8
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	7fffffe8 	.word	0x7fffffe8

080023b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	0fdb      	lsrs	r3, r3, #31
 80023c2:	07da      	lsls	r2, r3, #31
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d101      	bne.n	80023d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b002      	add	sp, #8
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2254      	movs	r2, #84	; 0x54
 80023f0:	5c9b      	ldrb	r3, [r3, r2]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_ADCEx_Calibration_Start+0x1e>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e0ba      	b.n	8002570 <HAL_ADCEx_Calibration_Start+0x194>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2254      	movs	r2, #84	; 0x54
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002402:	2317      	movs	r3, #23
 8002404:	18fc      	adds	r4, r7, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f7ff fe7b 	bl	8002104 <ADC_Disable>
 800240e:	0003      	movs	r3, r0
 8002410:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	0018      	movs	r0, r3
 8002418:	f7ff ffa6 	bl	8002368 <LL_ADC_IsEnabled>
 800241c:	1e03      	subs	r3, r0, #0
 800241e:	d000      	beq.n	8002422 <HAL_ADCEx_Calibration_Start+0x46>
 8002420:	e099      	b.n	8002556 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4a54      	ldr	r2, [pc, #336]	; (8002578 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002428:	4013      	ands	r3, r2
 800242a:	2202      	movs	r2, #2
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a50      	ldr	r2, [pc, #320]	; (800257c <HAL_ADCEx_Calibration_Start+0x1a0>)
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	494d      	ldr	r1, [pc, #308]	; (8002580 <HAL_ADCEx_Calibration_Start+0x1a4>)
 800244a:	400a      	ands	r2, r1
 800244c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e02d      	b.n	80024b0 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff ff97 	bl	800238c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800245e:	e014      	b.n	800248a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	3301      	adds	r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4a46      	ldr	r2, [pc, #280]	; (8002584 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d90d      	bls.n	800248a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	2212      	movs	r2, #18
 8002474:	4393      	bics	r3, r2
 8002476:	2210      	movs	r2, #16
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2254      	movs	r2, #84	; 0x54
 8002482:	2100      	movs	r1, #0
 8002484:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e072      	b.n	8002570 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff ff90 	bl	80023b4 <LL_ADC_IsCalibrationOnGoing>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d1e3      	bne.n	8002460 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0018      	movs	r0, r3
 800249e:	f7ff ff31 	bl	8002304 <LL_ADC_GetCalibrationFactor>
 80024a2:	0002      	movs	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	189b      	adds	r3, r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3301      	adds	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b07      	cmp	r3, #7
 80024b4:	d9ce      	bls.n	8002454 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80024b6:	69f9      	ldr	r1, [r7, #28]
 80024b8:	69b8      	ldr	r0, [r7, #24]
 80024ba:	f7fd fe2d 	bl	8000118 <__udivsi3>
 80024be:	0003      	movs	r3, r0
 80024c0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7ff ff2a 	bl	8002320 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff ff01 	bl	80022dc <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff ff30 	bl	8002344 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024e4:	f7fe ff56 	bl	8001394 <HAL_GetTick>
 80024e8:	0003      	movs	r3, r0
 80024ea:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024ec:	e01b      	b.n	8002526 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024ee:	f7fe ff51 	bl	8001394 <HAL_GetTick>
 80024f2:	0002      	movs	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d914      	bls.n	8002526 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff ff31 	bl	8002368 <LL_ADC_IsEnabled>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d00d      	beq.n	8002526 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	2210      	movs	r2, #16
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	2201      	movs	r2, #1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e024      	b.n	8002570 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff ff1c 	bl	8002368 <LL_ADC_IsEnabled>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d1dc      	bne.n	80024ee <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68d9      	ldr	r1, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	2203      	movs	r2, #3
 800254a:	4393      	bics	r3, r2
 800254c:	2201      	movs	r2, #1
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	659a      	str	r2, [r3, #88]	; 0x58
 8002554:	e005      	b.n	8002562 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	2210      	movs	r2, #16
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2254      	movs	r2, #84	; 0x54
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800256a:	2317      	movs	r3, #23
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	781b      	ldrb	r3, [r3, #0]
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b009      	add	sp, #36	; 0x24
 8002576:	bd90      	pop	{r4, r7, pc}
 8002578:	fffffefd 	.word	0xfffffefd
 800257c:	00008003 	.word	0x00008003
 8002580:	ffff7ffc 	.word	0xffff7ffc
 8002584:	0002f1ff 	.word	0x0002f1ff

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	0002      	movs	r2, r0
 8002590:	1dfb      	adds	r3, r7, #7
 8002592:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002594:	1dfb      	adds	r3, r7, #7
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b7f      	cmp	r3, #127	; 0x7f
 800259a:	d809      	bhi.n	80025b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	001a      	movs	r2, r3
 80025a2:	231f      	movs	r3, #31
 80025a4:	401a      	ands	r2, r3
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_EnableIRQ+0x30>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	4091      	lsls	r1, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	0002      	movs	r2, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	1dfb      	adds	r3, r7, #7
 80025c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b7f      	cmp	r3, #127	; 0x7f
 80025d0:	d828      	bhi.n	8002624 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d2:	4a2f      	ldr	r2, [pc, #188]	; (8002690 <__NVIC_SetPriority+0xd4>)
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	33c0      	adds	r3, #192	; 0xc0
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	589b      	ldr	r3, [r3, r2]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	0011      	movs	r1, r2
 80025e8:	2203      	movs	r2, #3
 80025ea:	400a      	ands	r2, r1
 80025ec:	00d2      	lsls	r2, r2, #3
 80025ee:	21ff      	movs	r1, #255	; 0xff
 80025f0:	4091      	lsls	r1, r2
 80025f2:	000a      	movs	r2, r1
 80025f4:	43d2      	mvns	r2, r2
 80025f6:	401a      	ands	r2, r3
 80025f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	019b      	lsls	r3, r3, #6
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	401a      	ands	r2, r3
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	0018      	movs	r0, r3
 8002608:	2303      	movs	r3, #3
 800260a:	4003      	ands	r3, r0
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002610:	481f      	ldr	r0, [pc, #124]	; (8002690 <__NVIC_SetPriority+0xd4>)
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b25b      	sxtb	r3, r3
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	430a      	orrs	r2, r1
 800261c:	33c0      	adds	r3, #192	; 0xc0
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002622:	e031      	b.n	8002688 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <__NVIC_SetPriority+0xd8>)
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	0019      	movs	r1, r3
 800262c:	230f      	movs	r3, #15
 800262e:	400b      	ands	r3, r1
 8002630:	3b08      	subs	r3, #8
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3306      	adds	r3, #6
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	18d3      	adds	r3, r2, r3
 800263a:	3304      	adds	r3, #4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1dfa      	adds	r2, r7, #7
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	0011      	movs	r1, r2
 8002644:	2203      	movs	r2, #3
 8002646:	400a      	ands	r2, r1
 8002648:	00d2      	lsls	r2, r2, #3
 800264a:	21ff      	movs	r1, #255	; 0xff
 800264c:	4091      	lsls	r1, r2
 800264e:	000a      	movs	r2, r1
 8002650:	43d2      	mvns	r2, r2
 8002652:	401a      	ands	r2, r3
 8002654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	019b      	lsls	r3, r3, #6
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	401a      	ands	r2, r3
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	0018      	movs	r0, r3
 8002664:	2303      	movs	r3, #3
 8002666:	4003      	ands	r3, r0
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <__NVIC_SetPriority+0xd8>)
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	001c      	movs	r4, r3
 8002674:	230f      	movs	r3, #15
 8002676:	4023      	ands	r3, r4
 8002678:	3b08      	subs	r3, #8
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	430a      	orrs	r2, r1
 800267e:	3306      	adds	r3, #6
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	18c3      	adds	r3, r0, r3
 8002684:	3304      	adds	r3, #4
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b003      	add	sp, #12
 800268e:	bd90      	pop	{r4, r7, pc}
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	045b      	lsls	r3, r3, #17
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d301      	bcc.n	80026b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ac:	2301      	movs	r3, #1
 80026ae:	e010      	b.n	80026d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <SysTick_Config+0x44>)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	3a01      	subs	r2, #1
 80026b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b8:	2301      	movs	r3, #1
 80026ba:	425b      	negs	r3, r3
 80026bc:	2103      	movs	r1, #3
 80026be:	0018      	movs	r0, r3
 80026c0:	f7ff ff7c 	bl	80025bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <SysTick_Config+0x44>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <SysTick_Config+0x44>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b002      	add	sp, #8
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	210f      	movs	r1, #15
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	1c02      	adds	r2, r0, #0
 80026f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff ff5d 	bl	80025bc <__NVIC_SetPriority>
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	0002      	movs	r2, r0
 8002712:	1dfb      	adds	r3, r7, #7
 8002714:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002716:	1dfb      	adds	r3, r7, #7
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b25b      	sxtb	r3, r3
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff ff33 	bl	8002588 <__NVIC_EnableIRQ>
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b002      	add	sp, #8
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f7ff ffaf 	bl	8002698 <SysTick_Config>
 800273a:	0003      	movs	r3, r0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e091      	b.n	800287a <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	001a      	movs	r2, r3
 800275c:	4b49      	ldr	r3, [pc, #292]	; (8002884 <HAL_DMA_Init+0x140>)
 800275e:	429a      	cmp	r2, r3
 8002760:	d810      	bhi.n	8002784 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a48      	ldr	r2, [pc, #288]	; (8002888 <HAL_DMA_Init+0x144>)
 8002768:	4694      	mov	ip, r2
 800276a:	4463      	add	r3, ip
 800276c:	2114      	movs	r1, #20
 800276e:	0018      	movs	r0, r3
 8002770:	f7fd fcd2 	bl	8000118 <__udivsi3>
 8002774:	0003      	movs	r3, r0
 8002776:	009a      	lsls	r2, r3, #2
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a43      	ldr	r2, [pc, #268]	; (800288c <HAL_DMA_Init+0x148>)
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
 8002782:	e00f      	b.n	80027a4 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a41      	ldr	r2, [pc, #260]	; (8002890 <HAL_DMA_Init+0x14c>)
 800278a:	4694      	mov	ip, r2
 800278c:	4463      	add	r3, ip
 800278e:	2114      	movs	r1, #20
 8002790:	0018      	movs	r0, r3
 8002792:	f7fd fcc1 	bl	8000118 <__udivsi3>
 8002796:	0003      	movs	r3, r0
 8002798:	009a      	lsls	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <HAL_DMA_Init+0x150>)
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2225      	movs	r2, #37	; 0x25
 80027a8:	2102      	movs	r1, #2
 80027aa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4938      	ldr	r1, [pc, #224]	; (8002898 <HAL_DMA_Init+0x154>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 f9d7 	bl	8002ba8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	01db      	lsls	r3, r3, #7
 8002802:	429a      	cmp	r2, r3
 8002804:	d102      	bne.n	800280c <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	217f      	movs	r1, #127	; 0x7f
 8002816:	400a      	ands	r2, r1
 8002818:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002822:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d011      	beq.n	8002850 <HAL_DMA_Init+0x10c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d80d      	bhi.n	8002850 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0018      	movs	r0, r3
 8002838:	f000 fa00 	bl	8002c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	e008      	b.n	8002862 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2225      	movs	r2, #37	; 0x25
 800286c:	2101      	movs	r1, #1
 800286e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	2100      	movs	r1, #0
 8002876:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b002      	add	sp, #8
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	40020407 	.word	0x40020407
 8002888:	bffdfff8 	.word	0xbffdfff8
 800288c:	40020000 	.word	0x40020000
 8002890:	bffdfbf8 	.word	0xbffdfbf8
 8002894:	40020400 	.word	0x40020400
 8002898:	ffff800f 	.word	0xffff800f

0800289c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2317      	movs	r3, #23
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2224      	movs	r2, #36	; 0x24
 80028b6:	5c9b      	ldrb	r3, [r3, r2]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_DMA_Start_IT+0x24>
 80028bc:	2302      	movs	r3, #2
 80028be:	e06f      	b.n	80029a0 <HAL_DMA_Start_IT+0x104>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	2101      	movs	r1, #1
 80028c6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2225      	movs	r2, #37	; 0x25
 80028cc:	5c9b      	ldrb	r3, [r3, r2]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d157      	bne.n	8002984 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2225      	movs	r2, #37	; 0x25
 80028d8:	2102      	movs	r1, #2
 80028da:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	438a      	bics	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f919 	bl	8002b30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	210e      	movs	r1, #14
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e00f      	b.n	8002938 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2104      	movs	r1, #4
 8002924:	438a      	bics	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	210a      	movs	r1, #10
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	025b      	lsls	r3, r3, #9
 8002942:	4013      	ands	r3, r2
 8002944:	d008      	beq.n	8002958 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	0049      	lsls	r1, r1, #1
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	0049      	lsls	r1, r1, #1
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e00a      	b.n	800299a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2224      	movs	r2, #36	; 0x24
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002992:	2317      	movs	r3, #23
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800299a:	2317      	movs	r3, #23
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	781b      	ldrb	r3, [r3, #0]
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b006      	add	sp, #24
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	221c      	movs	r2, #28
 80029c6:	4013      	ands	r3, r2
 80029c8:	2204      	movs	r2, #4
 80029ca:	409a      	lsls	r2, r3
 80029cc:	0013      	movs	r3, r2
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4013      	ands	r3, r2
 80029d2:	d026      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x7a>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2204      	movs	r2, #4
 80029d8:	4013      	ands	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2220      	movs	r2, #32
 80029e4:	4013      	ands	r3, r2
 80029e6:	d107      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2104      	movs	r1, #4
 80029f4:	438a      	bics	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	221c      	movs	r2, #28
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2104      	movs	r1, #4
 8002a06:	4091      	lsls	r1, r2
 8002a08:	000a      	movs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d100      	bne.n	8002a16 <HAL_DMA_IRQHandler+0x6e>
 8002a14:	e080      	b.n	8002b18 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002a20:	e07a      	b.n	8002b18 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	221c      	movs	r2, #28
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	0013      	movs	r3, r2
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	d03c      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x108>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d038      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2220      	movs	r2, #32
 8002a46:	4013      	ands	r3, r2
 8002a48:	d10b      	bne.n	8002a62 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	210a      	movs	r1, #10
 8002a56:	438a      	bics	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2225      	movs	r2, #37	; 0x25
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	001a      	movs	r2, r3
 8002a68:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <HAL_DMA_IRQHandler+0x17c>)
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d909      	bls.n	8002a82 <HAL_DMA_IRQHandler+0xda>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	221c      	movs	r2, #28
 8002a74:	401a      	ands	r2, r3
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_DMA_IRQHandler+0x180>)
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4091      	lsls	r1, r2
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	e008      	b.n	8002a94 <HAL_DMA_IRQHandler+0xec>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	221c      	movs	r2, #28
 8002a88:	401a      	ands	r2, r3
 8002a8a:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <HAL_DMA_IRQHandler+0x184>)
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	4091      	lsls	r1, r2
 8002a90:	000a      	movs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2224      	movs	r2, #36	; 0x24
 8002a98:	2100      	movs	r1, #0
 8002a9a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d039      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	0010      	movs	r0, r2
 8002aac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002aae:	e033      	b.n	8002b18 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	221c      	movs	r2, #28
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2208      	movs	r2, #8
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0013      	movs	r3, r2
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d02a      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x172>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d026      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	210e      	movs	r1, #14
 8002ad8:	438a      	bics	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	221c      	movs	r2, #28
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4091      	lsls	r1, r2
 8002aec:	000a      	movs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2225      	movs	r2, #37	; 0x25
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2224      	movs	r2, #36	; 0x24
 8002b02:	2100      	movs	r1, #0
 8002b04:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	0010      	movs	r0, r2
 8002b16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46c0      	nop			; (mov r8, r8)
}
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40020080 	.word	0x40020080
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020000 	.word	0x40020000

08002b30 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	221c      	movs	r2, #28
 8002b60:	401a      	ands	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	2101      	movs	r1, #1
 8002b68:	4091      	lsls	r1, r2
 8002b6a:	000a      	movs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d108      	bne.n	8002b90 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b8e:	e007      	b.n	8002ba0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d814      	bhi.n	8002be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002bc6:	189a      	adds	r2, r3, r2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	23ff      	movs	r3, #255	; 0xff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	3b08      	subs	r3, #8
 8002bd8:	2114      	movs	r1, #20
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7fd fa9c 	bl	8000118 <__udivsi3>
 8002be0:	0003      	movs	r3, r0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e014      	b.n	8002c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002bf0:	189a      	adds	r2, r3, r2
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	23ff      	movs	r3, #255	; 0xff
 8002bfe:	4013      	ands	r3, r2
 8002c00:	3b08      	subs	r3, #8
 8002c02:	2114      	movs	r1, #20
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7fd fa87 	bl	8000118 <__udivsi3>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	3307      	adds	r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002c14:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	221f      	movs	r2, #31
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40020407 	.word	0x40020407
 8002c30:	40020800 	.word	0x40020800
 8002c34:	4002081c 	.word	0x4002081c
 8002c38:	40020880 	.word	0x40020880

08002c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	227f      	movs	r2, #127	; 0x7f
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c52:	4694      	mov	ip, r2
 8002c54:	4463      	add	r3, ip
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	001a      	movs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c62:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	1000823f 	.word	0x1000823f
 8002c80:	40020940 	.word	0x40020940

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c92:	e14d      	b.n	8002f30 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4091      	lsls	r1, r2
 8002c9e:	000a      	movs	r2, r1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d100      	bne.n	8002cac <HAL_GPIO_Init+0x28>
 8002caa:	e13e      	b.n	8002f2a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d005      	beq.n	8002cc4 <HAL_GPIO_Init+0x40>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d130      	bne.n	8002d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	0013      	movs	r3, r2
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	0013      	movs	r3, r2
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	43da      	mvns	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	2201      	movs	r2, #1
 8002d12:	401a      	ands	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
 8002d18:	0013      	movs	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d017      	beq.n	8002d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	0013      	movs	r3, r2
 8002d42:	43da      	mvns	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	409a      	lsls	r2, r3
 8002d54:	0013      	movs	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2203      	movs	r2, #3
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d123      	bne.n	8002db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	08da      	lsrs	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3208      	adds	r2, #8
 8002d76:	0092      	lsls	r2, r2, #2
 8002d78:	58d3      	ldr	r3, [r2, r3]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2207      	movs	r2, #7
 8002d80:	4013      	ands	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	409a      	lsls	r2, r3
 8002d88:	0013      	movs	r3, r2
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2107      	movs	r1, #7
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	0013      	movs	r3, r2
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	08da      	lsrs	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3208      	adds	r2, #8
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	6939      	ldr	r1, [r7, #16]
 8002db4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	0013      	movs	r3, r2
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	0013      	movs	r3, r2
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	23c0      	movs	r3, #192	; 0xc0
 8002df0:	029b      	lsls	r3, r3, #10
 8002df2:	4013      	ands	r3, r2
 8002df4:	d100      	bne.n	8002df8 <HAL_GPIO_Init+0x174>
 8002df6:	e098      	b.n	8002f2a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002df8:	4a53      	ldr	r2, [pc, #332]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3318      	adds	r3, #24
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	589b      	ldr	r3, [r3, r2]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	220f      	movs	r2, #15
 8002e10:	409a      	lsls	r2, r3
 8002e12:	0013      	movs	r3, r2
 8002e14:	43da      	mvns	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	23a0      	movs	r3, #160	; 0xa0
 8002e20:	05db      	lsls	r3, r3, #23
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d019      	beq.n	8002e5a <HAL_GPIO_Init+0x1d6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a48      	ldr	r2, [pc, #288]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_GPIO_Init+0x1d2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a47      	ldr	r2, [pc, #284]	; (8002f50 <HAL_GPIO_Init+0x2cc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00d      	beq.n	8002e52 <HAL_GPIO_Init+0x1ce>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a46      	ldr	r2, [pc, #280]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <HAL_GPIO_Init+0x1ca>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a45      	ldr	r2, [pc, #276]	; (8002f58 <HAL_GPIO_Init+0x2d4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_GPIO_Init+0x1c6>
 8002e46:	2304      	movs	r3, #4
 8002e48:	e008      	b.n	8002e5c <HAL_GPIO_Init+0x1d8>
 8002e4a:	2305      	movs	r3, #5
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x1d8>
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e004      	b.n	8002e5c <HAL_GPIO_Init+0x1d8>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e002      	b.n	8002e5c <HAL_GPIO_Init+0x1d8>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_GPIO_Init+0x1d8>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	2103      	movs	r1, #3
 8002e60:	400a      	ands	r2, r1
 8002e62:	00d2      	lsls	r2, r2, #3
 8002e64:	4093      	lsls	r3, r2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002e6c:	4936      	ldr	r1, [pc, #216]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3318      	adds	r3, #24
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	43da      	mvns	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	035b      	lsls	r3, r3, #13
 8002e92:	4013      	ands	r3, r2
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	43da      	mvns	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	039b      	lsls	r3, r3, #14
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ece:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002ed0:	2384      	movs	r3, #132	; 0x84
 8002ed2:	58d3      	ldr	r3, [r2, r3]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	029b      	lsls	r3, r3, #10
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ef4:	4914      	ldr	r1, [pc, #80]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002ef6:	2284      	movs	r2, #132	; 0x84
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	58d3      	ldr	r3, [r2, r3]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43da      	mvns	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	4013      	ands	r3, r2
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f22:	4909      	ldr	r1, [pc, #36]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	40da      	lsrs	r2, r3
 8002f38:	1e13      	subs	r3, r2, #0
 8002f3a:	d000      	beq.n	8002f3e <HAL_GPIO_Init+0x2ba>
 8002f3c:	e6aa      	b.n	8002c94 <HAL_GPIO_Init+0x10>
  }
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b006      	add	sp, #24
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021800 	.word	0x40021800
 8002f4c:	50000400 	.word	0x50000400
 8002f50:	50000800 	.word	0x50000800
 8002f54:	50000c00 	.word	0x50000c00
 8002f58:	50001000 	.word	0x50001000

08002f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	0008      	movs	r0, r1
 8002f66:	0011      	movs	r1, r2
 8002f68:	1cbb      	adds	r3, r7, #2
 8002f6a:	1c02      	adds	r2, r0, #0
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	1c7b      	adds	r3, r7, #1
 8002f70:	1c0a      	adds	r2, r1, #0
 8002f72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f74:	1c7b      	adds	r3, r7, #1
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f7c:	1cbb      	adds	r3, r7, #2
 8002f7e:	881a      	ldrh	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f84:	e003      	b.n	8002f8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f86:	1cbb      	adds	r3, r7, #2
 8002f88:	881a      	ldrh	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a19      	ldr	r2, [pc, #100]	; (800300c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d11f      	bne.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	189b      	adds	r3, r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4912      	ldr	r1, [pc, #72]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7fd f8a4 	bl	8000118 <__udivsi3>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd6:	e008      	b.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e001      	b.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e009      	b.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d0ed      	beq.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	0018      	movs	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	b004      	add	sp, #16
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	40007000 	.word	0x40007000
 800300c:	fffff9ff 	.word	0xfffff9ff
 8003010:	20000000 	.word	0x20000000
 8003014:	000f4240 	.word	0x000f4240

08003018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f000 fb50 	bl	80036cc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	d100      	bne.n	8003038 <HAL_RCC_OscConfig+0x20>
 8003036:	e07c      	b.n	8003132 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003038:	4bc3      	ldr	r3, [pc, #780]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2238      	movs	r2, #56	; 0x38
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003042:	4bc1      	ldr	r3, [pc, #772]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2203      	movs	r2, #3
 8003048:	4013      	ands	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d102      	bne.n	8003058 <HAL_RCC_OscConfig+0x40>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d002      	beq.n	800305e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b08      	cmp	r3, #8
 800305c:	d10b      	bne.n	8003076 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305e:	4bba      	ldr	r3, [pc, #744]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	4013      	ands	r3, r2
 8003068:	d062      	beq.n	8003130 <HAL_RCC_OscConfig+0x118>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d15e      	bne.n	8003130 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e32a      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	025b      	lsls	r3, r3, #9
 800307e:	429a      	cmp	r2, r3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_OscConfig+0x7a>
 8003082:	4bb1      	ldr	r3, [pc, #708]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4bb0      	ldr	r3, [pc, #704]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0249      	lsls	r1, r1, #9
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e020      	b.n	80030d4 <HAL_RCC_OscConfig+0xbc>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	23a0      	movs	r3, #160	; 0xa0
 8003098:	02db      	lsls	r3, r3, #11
 800309a:	429a      	cmp	r2, r3
 800309c:	d10e      	bne.n	80030bc <HAL_RCC_OscConfig+0xa4>
 800309e:	4baa      	ldr	r3, [pc, #680]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4ba9      	ldr	r3, [pc, #676]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	02c9      	lsls	r1, r1, #11
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	4ba6      	ldr	r3, [pc, #664]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4ba5      	ldr	r3, [pc, #660]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	0249      	lsls	r1, r1, #9
 80030b6:	430a      	orrs	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xbc>
 80030bc:	4ba2      	ldr	r3, [pc, #648]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4ba1      	ldr	r3, [pc, #644]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80030c2:	49a2      	ldr	r1, [pc, #648]	; (800334c <HAL_RCC_OscConfig+0x334>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	4b9f      	ldr	r3, [pc, #636]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b9e      	ldr	r3, [pc, #632]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80030ce:	49a0      	ldr	r1, [pc, #640]	; (8003350 <HAL_RCC_OscConfig+0x338>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d014      	beq.n	8003106 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe f95a 	bl	8001394 <HAL_GetTick>
 80030e0:	0003      	movs	r3, r0
 80030e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e6:	f7fe f955 	bl	8001394 <HAL_GetTick>
 80030ea:	0002      	movs	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	; 0x64
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e2e9      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f8:	4b93      	ldr	r3, [pc, #588]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	029b      	lsls	r3, r3, #10
 8003100:	4013      	ands	r3, r2
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0xce>
 8003104:	e015      	b.n	8003132 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe f945 	bl	8001394 <HAL_GetTick>
 800310a:	0003      	movs	r3, r0
 800310c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe f940 	bl	8001394 <HAL_GetTick>
 8003114:	0002      	movs	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e2d4      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003122:	4b89      	ldr	r3, [pc, #548]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	4013      	ands	r3, r2
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0xf8>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2202      	movs	r2, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d100      	bne.n	800313e <HAL_RCC_OscConfig+0x126>
 800313c:	e099      	b.n	8003272 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313e:	4b82      	ldr	r3, [pc, #520]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2238      	movs	r2, #56	; 0x38
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003148:	4b7f      	ldr	r3, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2203      	movs	r2, #3
 800314e:	4013      	ands	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b10      	cmp	r3, #16
 8003156:	d102      	bne.n	800315e <HAL_RCC_OscConfig+0x146>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d002      	beq.n	8003164 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d135      	bne.n	80031d0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003164:	4b78      	ldr	r3, [pc, #480]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4013      	ands	r3, r2
 800316e:	d005      	beq.n	800317c <HAL_RCC_OscConfig+0x164>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e2a7      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a74      	ldr	r2, [pc, #464]	; (8003354 <HAL_RCC_OscConfig+0x33c>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	021a      	lsls	r2, r3, #8
 800318c:	4b6e      	ldr	r3, [pc, #440]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d112      	bne.n	80031be <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003198:	4b6b      	ldr	r3, [pc, #428]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6e      	ldr	r2, [pc, #440]	; (8003358 <HAL_RCC_OscConfig+0x340>)
 800319e:	4013      	ands	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	4b68      	ldr	r3, [pc, #416]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0adb      	lsrs	r3, r3, #11
 80031b2:	2207      	movs	r2, #7
 80031b4:	4013      	ands	r3, r2
 80031b6:	4a69      	ldr	r2, [pc, #420]	; (800335c <HAL_RCC_OscConfig+0x344>)
 80031b8:	40da      	lsrs	r2, r3
 80031ba:	4b69      	ldr	r3, [pc, #420]	; (8003360 <HAL_RCC_OscConfig+0x348>)
 80031bc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031be:	4b69      	ldr	r3, [pc, #420]	; (8003364 <HAL_RCC_OscConfig+0x34c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7fe f88a 	bl	80012dc <HAL_InitTick>
 80031c8:	1e03      	subs	r3, r0, #0
 80031ca:	d051      	beq.n	8003270 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e27d      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d030      	beq.n	800323a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031d8:	4b5b      	ldr	r3, [pc, #364]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5e      	ldr	r2, [pc, #376]	; (8003358 <HAL_RCC_OscConfig+0x340>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80031ec:	4b56      	ldr	r3, [pc, #344]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b55      	ldr	r3, [pc, #340]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	0049      	lsls	r1, r1, #1
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fa:	f7fe f8cb 	bl	8001394 <HAL_GetTick>
 80031fe:	0003      	movs	r3, r0
 8003200:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003204:	f7fe f8c6 	bl	8001394 <HAL_GetTick>
 8003208:	0002      	movs	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e25a      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003216:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4013      	ands	r3, r2
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4a4b      	ldr	r2, [pc, #300]	; (8003354 <HAL_RCC_OscConfig+0x33c>)
 8003228:	4013      	ands	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	021a      	lsls	r2, r3, #8
 8003232:	4b45      	ldr	r3, [pc, #276]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	e01b      	b.n	8003272 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b42      	ldr	r3, [pc, #264]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003240:	4949      	ldr	r1, [pc, #292]	; (8003368 <HAL_RCC_OscConfig+0x350>)
 8003242:	400a      	ands	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fe f8a5 	bl	8001394 <HAL_GetTick>
 800324a:	0003      	movs	r3, r0
 800324c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003250:	f7fe f8a0 	bl	8001394 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e234      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003262:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4013      	ands	r3, r2
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x238>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003270:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2208      	movs	r2, #8
 8003278:	4013      	ands	r3, r2
 800327a:	d047      	beq.n	800330c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800327c:	4b32      	ldr	r3, [pc, #200]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2238      	movs	r2, #56	; 0x38
 8003282:	4013      	ands	r3, r2
 8003284:	2b18      	cmp	r3, #24
 8003286:	d10a      	bne.n	800329e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003288:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 800328a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328c:	2202      	movs	r2, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d03c      	beq.n	800330c <HAL_RCC_OscConfig+0x2f4>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d138      	bne.n	800330c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e216      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80032a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032aa:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe f86f 	bl	8001394 <HAL_GetTick>
 80032b6:	0003      	movs	r3, r0
 80032b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032bc:	f7fe f86a 	bl	8001394 <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e1fe      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ce:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	2202      	movs	r2, #2
 80032d4:	4013      	ands	r3, r2
 80032d6:	d0f1      	beq.n	80032bc <HAL_RCC_OscConfig+0x2a4>
 80032d8:	e018      	b.n	800330c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80032dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	438a      	bics	r2, r1
 80032e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fe f855 	bl	8001394 <HAL_GetTick>
 80032ea:	0003      	movs	r3, r0
 80032ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f0:	f7fe f850 	bl	8001394 <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1e4      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	2202      	movs	r2, #2
 8003308:	4013      	ands	r3, r2
 800330a:	d1f1      	bne.n	80032f0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2204      	movs	r2, #4
 8003312:	4013      	ands	r3, r2
 8003314:	d100      	bne.n	8003318 <HAL_RCC_OscConfig+0x300>
 8003316:	e0c7      	b.n	80034a8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003318:	231f      	movs	r3, #31
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2238      	movs	r2, #56	; 0x38
 8003326:	4013      	ands	r3, r2
 8003328:	2b20      	cmp	r3, #32
 800332a:	d11f      	bne.n	800336c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_OscConfig+0x330>)
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	2202      	movs	r2, #2
 8003332:	4013      	ands	r3, r2
 8003334:	d100      	bne.n	8003338 <HAL_RCC_OscConfig+0x320>
 8003336:	e0b7      	b.n	80034a8 <HAL_RCC_OscConfig+0x490>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d000      	beq.n	8003342 <HAL_RCC_OscConfig+0x32a>
 8003340:	e0b2      	b.n	80034a8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e1c2      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	40021000 	.word	0x40021000
 800334c:	fffeffff 	.word	0xfffeffff
 8003350:	fffbffff 	.word	0xfffbffff
 8003354:	ffff80ff 	.word	0xffff80ff
 8003358:	ffffc7ff 	.word	0xffffc7ff
 800335c:	00f42400 	.word	0x00f42400
 8003360:	20000000 	.word	0x20000000
 8003364:	20000004 	.word	0x20000004
 8003368:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800336c:	4bb5      	ldr	r3, [pc, #724]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800336e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	055b      	lsls	r3, r3, #21
 8003374:	4013      	ands	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_RCC_OscConfig+0x364>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x366>
 800337c:	2300      	movs	r3, #0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d011      	beq.n	80033a6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	4bb0      	ldr	r3, [pc, #704]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003386:	4baf      	ldr	r3, [pc, #700]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	0549      	lsls	r1, r1, #21
 800338c:	430a      	orrs	r2, r1
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003390:	4bac      	ldr	r3, [pc, #688]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	055b      	lsls	r3, r3, #21
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800339e:	231f      	movs	r3, #31
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a6:	4ba8      	ldr	r3, [pc, #672]	; (8003648 <HAL_RCC_OscConfig+0x630>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	d11a      	bne.n	80033e8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b2:	4ba5      	ldr	r3, [pc, #660]	; (8003648 <HAL_RCC_OscConfig+0x630>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4ba4      	ldr	r3, [pc, #656]	; (8003648 <HAL_RCC_OscConfig+0x630>)
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	0049      	lsls	r1, r1, #1
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80033c0:	f7fd ffe8 	bl	8001394 <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ca:	f7fd ffe3 	bl	8001394 <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e177      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033dc:	4b9a      	ldr	r3, [pc, #616]	; (8003648 <HAL_RCC_OscConfig+0x630>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4013      	ands	r3, r2
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x3e6>
 80033f0:	4b94      	ldr	r3, [pc, #592]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80033f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033f4:	4b93      	ldr	r3, [pc, #588]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80033f6:	2101      	movs	r1, #1
 80033f8:	430a      	orrs	r2, r1
 80033fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80033fc:	e01c      	b.n	8003438 <HAL_RCC_OscConfig+0x420>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x408>
 8003406:	4b8f      	ldr	r3, [pc, #572]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800340a:	4b8e      	ldr	r3, [pc, #568]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800340c:	2104      	movs	r1, #4
 800340e:	430a      	orrs	r2, r1
 8003410:	65da      	str	r2, [r3, #92]	; 0x5c
 8003412:	4b8c      	ldr	r3, [pc, #560]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003416:	4b8b      	ldr	r3, [pc, #556]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003418:	2101      	movs	r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	65da      	str	r2, [r3, #92]	; 0x5c
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0x420>
 8003420:	4b88      	ldr	r3, [pc, #544]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003424:	4b87      	ldr	r3, [pc, #540]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003426:	2101      	movs	r1, #1
 8003428:	438a      	bics	r2, r1
 800342a:	65da      	str	r2, [r3, #92]	; 0x5c
 800342c:	4b85      	ldr	r3, [pc, #532]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800342e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003430:	4b84      	ldr	r3, [pc, #528]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003432:	2104      	movs	r1, #4
 8003434:	438a      	bics	r2, r1
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d014      	beq.n	800346a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fd ffa8 	bl	8001394 <HAL_GetTick>
 8003444:	0003      	movs	r3, r0
 8003446:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003448:	e009      	b.n	800345e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f7fd ffa3 	bl	8001394 <HAL_GetTick>
 800344e:	0002      	movs	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	4a7d      	ldr	r2, [pc, #500]	; (800364c <HAL_RCC_OscConfig+0x634>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e136      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345e:	4b79      	ldr	r3, [pc, #484]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2202      	movs	r2, #2
 8003464:	4013      	ands	r3, r2
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x432>
 8003468:	e013      	b.n	8003492 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fd ff93 	bl	8001394 <HAL_GetTick>
 800346e:	0003      	movs	r3, r0
 8003470:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003472:	e009      	b.n	8003488 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fd ff8e 	bl	8001394 <HAL_GetTick>
 8003478:	0002      	movs	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	4a73      	ldr	r2, [pc, #460]	; (800364c <HAL_RCC_OscConfig+0x634>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e121      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003488:	4b6e      	ldr	r3, [pc, #440]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	2202      	movs	r2, #2
 800348e:	4013      	ands	r3, r2
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003492:	231f      	movs	r3, #31
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800349c:	4b69      	ldr	r3, [pc, #420]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800349e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a0:	4b68      	ldr	r3, [pc, #416]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80034a2:	496b      	ldr	r1, [pc, #428]	; (8003650 <HAL_RCC_OscConfig+0x638>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2220      	movs	r2, #32
 80034ae:	4013      	ands	r3, r2
 80034b0:	d039      	beq.n	8003526 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01b      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034ba:	4b62      	ldr	r3, [pc, #392]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b61      	ldr	r3, [pc, #388]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80034c0:	2180      	movs	r1, #128	; 0x80
 80034c2:	03c9      	lsls	r1, r1, #15
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fd ff64 	bl	8001394 <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d2:	f7fd ff5f 	bl	8001394 <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0f3      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80034e4:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	4013      	ands	r3, r2
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x4ba>
 80034f0:	e019      	b.n	8003526 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034f2:	4b54      	ldr	r3, [pc, #336]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80034f8:	4956      	ldr	r1, [pc, #344]	; (8003654 <HAL_RCC_OscConfig+0x63c>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fd ff49 	bl	8001394 <HAL_GetTick>
 8003502:	0003      	movs	r3, r0
 8003504:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003508:	f7fd ff44 	bl	8001394 <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0d8      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800351a:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	4013      	ands	r3, r2
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d100      	bne.n	8003530 <HAL_RCC_OscConfig+0x518>
 800352e:	e0cc      	b.n	80036ca <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003530:	4b44      	ldr	r3, [pc, #272]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2238      	movs	r2, #56	; 0x38
 8003536:	4013      	ands	r3, r2
 8003538:	2b10      	cmp	r3, #16
 800353a:	d100      	bne.n	800353e <HAL_RCC_OscConfig+0x526>
 800353c:	e07b      	b.n	8003636 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d156      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	4b3f      	ldr	r3, [pc, #252]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800354c:	4942      	ldr	r1, [pc, #264]	; (8003658 <HAL_RCC_OscConfig+0x640>)
 800354e:	400a      	ands	r2, r1
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7fd ff1f 	bl	8001394 <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355c:	f7fd ff1a 	bl	8001394 <HAL_GetTick>
 8003560:	0002      	movs	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e0ae      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800356e:	4b35      	ldr	r3, [pc, #212]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	049b      	lsls	r3, r3, #18
 8003576:	4013      	ands	r3, r2
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800357a:	4b32      	ldr	r3, [pc, #200]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4a37      	ldr	r2, [pc, #220]	; (800365c <HAL_RCC_OscConfig+0x644>)
 8003580:	4013      	ands	r3, r2
 8003582:	0019      	movs	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	431a      	orrs	r2, r3
 80035a8:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80035aa:	430a      	orrs	r2, r1
 80035ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ae:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	0449      	lsls	r1, r1, #17
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80035bc:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80035c2:	2180      	movs	r1, #128	; 0x80
 80035c4:	0549      	lsls	r1, r1, #21
 80035c6:	430a      	orrs	r2, r1
 80035c8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fd fee3 	bl	8001394 <HAL_GetTick>
 80035ce:	0003      	movs	r3, r0
 80035d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fd fede 	bl	8001394 <HAL_GetTick>
 80035d8:	0002      	movs	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e072      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	049b      	lsls	r3, r3, #18
 80035ee:	4013      	ands	r3, r2
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x5bc>
 80035f2:	e06a      	b.n	80036ca <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 80035fa:	4917      	ldr	r1, [pc, #92]	; (8003658 <HAL_RCC_OscConfig+0x640>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fec8 	bl	8001394 <HAL_GetTick>
 8003604:	0003      	movs	r3, r0
 8003606:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360a:	f7fd fec3 	bl	8001394 <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e057      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	049b      	lsls	r3, r3, #18
 8003624:	4013      	ands	r3, r2
 8003626:	d1f0      	bne.n	800360a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCC_OscConfig+0x62c>)
 800362e:	490c      	ldr	r1, [pc, #48]	; (8003660 <HAL_RCC_OscConfig+0x648>)
 8003630:	400a      	ands	r2, r1
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	e049      	b.n	80036ca <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d112      	bne.n	8003664 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e044      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	40021000 	.word	0x40021000
 8003648:	40007000 	.word	0x40007000
 800364c:	00001388 	.word	0x00001388
 8003650:	efffffff 	.word	0xefffffff
 8003654:	ffbfffff 	.word	0xffbfffff
 8003658:	feffffff 	.word	0xfeffffff
 800365c:	11c1808c 	.word	0x11c1808c
 8003660:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x6bc>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2203      	movs	r2, #3
 800366e:	401a      	ands	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	429a      	cmp	r2, r3
 8003676:	d126      	bne.n	80036c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2270      	movs	r2, #112	; 0x70
 800367c:	401a      	ands	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d11f      	bne.n	80036c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	23fe      	movs	r3, #254	; 0xfe
 800368a:	01db      	lsls	r3, r3, #7
 800368c:	401a      	ands	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d116      	bne.n	80036c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	23f8      	movs	r3, #248	; 0xf8
 800369c:	039b      	lsls	r3, r3, #14
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d10e      	bne.n	80036c6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	23e0      	movs	r3, #224	; 0xe0
 80036ac:	051b      	lsls	r3, r3, #20
 80036ae:	401a      	ands	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d106      	bne.n	80036c6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	0f5b      	lsrs	r3, r3, #29
 80036bc:	075a      	lsls	r2, r3, #29
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b008      	add	sp, #32
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000

080036d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0e9      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036ec:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2207      	movs	r2, #7
 80036f2:	4013      	ands	r3, r2
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d91e      	bls.n	8003738 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b73      	ldr	r3, [pc, #460]	; (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2207      	movs	r2, #7
 8003700:	4393      	bics	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	4b70      	ldr	r3, [pc, #448]	; (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800370c:	f7fd fe42 	bl	8001394 <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003714:	e009      	b.n	800372a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003716:	f7fd fe3d 	bl	8001394 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	4a6a      	ldr	r2, [pc, #424]	; (80038cc <HAL_RCC_ClockConfig+0x1f4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e0ca      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800372a:	4b67      	ldr	r3, [pc, #412]	; (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2207      	movs	r2, #7
 8003730:	4013      	ands	r3, r2
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d1ee      	bne.n	8003716 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2202      	movs	r2, #2
 800373e:	4013      	ands	r3, r2
 8003740:	d015      	beq.n	800376e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2204      	movs	r2, #4
 8003748:	4013      	ands	r3, r2
 800374a:	d006      	beq.n	800375a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800374c:	4b60      	ldr	r3, [pc, #384]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	4b5f      	ldr	r3, [pc, #380]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003752:	21e0      	movs	r1, #224	; 0xe0
 8003754:	01c9      	lsls	r1, r1, #7
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375a:	4b5d      	ldr	r3, [pc, #372]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	4a5d      	ldr	r2, [pc, #372]	; (80038d4 <HAL_RCC_ClockConfig+0x1fc>)
 8003760:	4013      	ands	r3, r2
 8003762:	0019      	movs	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 800376a:	430a      	orrs	r2, r1
 800376c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2201      	movs	r2, #1
 8003774:	4013      	ands	r3, r2
 8003776:	d057      	beq.n	8003828 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d107      	bne.n	8003790 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003780:	4b53      	ldr	r3, [pc, #332]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	029b      	lsls	r3, r3, #10
 8003788:	4013      	ands	r3, r2
 800378a:	d12b      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e097      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003798:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	049b      	lsls	r3, r3, #18
 80037a0:	4013      	ands	r3, r2
 80037a2:	d11f      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e08b      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b0:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4013      	ands	r3, r2
 80037ba:	d113      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e07f      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c8:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 80037ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037cc:	2202      	movs	r2, #2
 80037ce:	4013      	ands	r3, r2
 80037d0:	d108      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e074      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d6:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	2202      	movs	r2, #2
 80037dc:	4013      	ands	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e06d      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037e4:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2207      	movs	r2, #7
 80037ea:	4393      	bics	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 80037f4:	430a      	orrs	r2, r1
 80037f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f8:	f7fd fdcc 	bl	8001394 <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003800:	e009      	b.n	8003816 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003802:	f7fd fdc7 	bl	8001394 <HAL_GetTick>
 8003806:	0002      	movs	r2, r0
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	4a2f      	ldr	r2, [pc, #188]	; (80038cc <HAL_RCC_ClockConfig+0x1f4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e054      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2238      	movs	r2, #56	; 0x38
 800381c:	401a      	ands	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	429a      	cmp	r2, r3
 8003826:	d1ec      	bne.n	8003802 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2207      	movs	r2, #7
 800382e:	4013      	ands	r3, r2
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d21e      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2207      	movs	r2, #7
 800383c:	4393      	bics	r3, r2
 800383e:	0019      	movs	r1, r3
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003848:	f7fd fda4 	bl	8001394 <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003850:	e009      	b.n	8003866 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003852:	f7fd fd9f 	bl	8001394 <HAL_GetTick>
 8003856:	0002      	movs	r2, r0
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <HAL_RCC_ClockConfig+0x1f4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e02c      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003866:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2207      	movs	r2, #7
 800386c:	4013      	ands	r3, r2
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d1ee      	bne.n	8003852 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2204      	movs	r2, #4
 800387a:	4013      	ands	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <HAL_RCC_ClockConfig+0x200>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 800388e:	430a      	orrs	r2, r1
 8003890:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003892:	f000 f829 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8003896:	0001      	movs	r1, r0
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	220f      	movs	r2, #15
 80038a0:	401a      	ands	r2, r3
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <HAL_RCC_ClockConfig+0x204>)
 80038a4:	0092      	lsls	r2, r2, #2
 80038a6:	58d3      	ldr	r3, [r2, r3]
 80038a8:	221f      	movs	r2, #31
 80038aa:	4013      	ands	r3, r2
 80038ac:	000a      	movs	r2, r1
 80038ae:	40da      	lsrs	r2, r3
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x208>)
 80038b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_ClockConfig+0x20c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fd fd0f 	bl	80012dc <HAL_InitTick>
 80038be:	0003      	movs	r3, r0
}
 80038c0:	0018      	movs	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b004      	add	sp, #16
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40022000 	.word	0x40022000
 80038cc:	00001388 	.word	0x00001388
 80038d0:	40021000 	.word	0x40021000
 80038d4:	fffff0ff 	.word	0xfffff0ff
 80038d8:	ffff8fff 	.word	0xffff8fff
 80038dc:	08004b88 	.word	0x08004b88
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ee:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2238      	movs	r2, #56	; 0x38
 80038f4:	4013      	ands	r3, r2
 80038f6:	d10f      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80038f8:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0adb      	lsrs	r3, r3, #11
 80038fe:	2207      	movs	r2, #7
 8003900:	4013      	ands	r3, r2
 8003902:	2201      	movs	r2, #1
 8003904:	409a      	lsls	r2, r3
 8003906:	0013      	movs	r3, r2
 8003908:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800390a:	6839      	ldr	r1, [r7, #0]
 800390c:	4835      	ldr	r0, [pc, #212]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800390e:	f7fc fc03 	bl	8000118 <__udivsi3>
 8003912:	0003      	movs	r3, r0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e05d      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003918:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2238      	movs	r2, #56	; 0x38
 800391e:	4013      	ands	r3, r2
 8003920:	2b08      	cmp	r3, #8
 8003922:	d102      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003924:	4b30      	ldr	r3, [pc, #192]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e054      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800392a:	4b2d      	ldr	r3, [pc, #180]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2238      	movs	r2, #56	; 0x38
 8003930:	4013      	ands	r3, r2
 8003932:	2b10      	cmp	r3, #16
 8003934:	d138      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003936:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2203      	movs	r2, #3
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	2207      	movs	r2, #7
 8003948:	4013      	ands	r3, r2
 800394a:	3301      	adds	r3, #1
 800394c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d10d      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	4824      	ldr	r0, [pc, #144]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003958:	f7fc fbde 	bl	8000118 <__udivsi3>
 800395c:	0003      	movs	r3, r0
 800395e:	0019      	movs	r1, r3
 8003960:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	227f      	movs	r2, #127	; 0x7f
 8003968:	4013      	ands	r3, r2
 800396a:	434b      	muls	r3, r1
 800396c:	617b      	str	r3, [r7, #20]
        break;
 800396e:	e00d      	b.n	800398c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	481c      	ldr	r0, [pc, #112]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003974:	f7fc fbd0 	bl	8000118 <__udivsi3>
 8003978:	0003      	movs	r3, r0
 800397a:	0019      	movs	r1, r3
 800397c:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	227f      	movs	r2, #127	; 0x7f
 8003984:	4013      	ands	r3, r2
 8003986:	434b      	muls	r3, r1
 8003988:	617b      	str	r3, [r7, #20]
        break;
 800398a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	0f5b      	lsrs	r3, r3, #29
 8003992:	2207      	movs	r2, #7
 8003994:	4013      	ands	r3, r2
 8003996:	3301      	adds	r3, #1
 8003998:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	f7fc fbbb 	bl	8000118 <__udivsi3>
 80039a2:	0003      	movs	r3, r0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e015      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80039a8:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2238      	movs	r2, #56	; 0x38
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d103      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	e00b      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2238      	movs	r2, #56	; 0x38
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b18      	cmp	r3, #24
 80039c6:	d103      	bne.n	80039d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80039c8:	23fa      	movs	r3, #250	; 0xfa
 80039ca:	01db      	lsls	r3, r3, #7
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	e001      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039d4:	693b      	ldr	r3, [r7, #16]
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b006      	add	sp, #24
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	40021000 	.word	0x40021000
 80039e4:	00f42400 	.word	0x00f42400
 80039e8:	007a1200 	.word	0x007a1200

080039ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039f4:	2313      	movs	r3, #19
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039fc:	2312      	movs	r3, #18
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	029b      	lsls	r3, r3, #10
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d100      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a10:	e0ad      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a12:	2011      	movs	r0, #17
 8003a14:	183b      	adds	r3, r7, r0
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	055b      	lsls	r3, r3, #21
 8003a22:	4013      	ands	r3, r2
 8003a24:	d110      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a2a:	4b43      	ldr	r3, [pc, #268]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	0549      	lsls	r1, r1, #21
 8003a30:	430a      	orrs	r2, r1
 8003a32:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a34:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	055b      	lsls	r3, r3, #21
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a42:	183b      	adds	r3, r7, r0
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a48:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	0049      	lsls	r1, r1, #1
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a56:	f7fd fc9d 	bl	8001394 <HAL_GetTick>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a60:	f7fd fc98 	bl	8001394 <HAL_GetTick>
 8003a64:	0002      	movs	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d904      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a6e:	2313      	movs	r3, #19
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2203      	movs	r2, #3
 8003a74:	701a      	strb	r2, [r3, #0]
        break;
 8003a76:	e005      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a78:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4013      	ands	r3, r2
 8003a82:	d0ed      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a84:	2313      	movs	r3, #19
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d15e      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a92:	23c0      	movs	r3, #192	; 0xc0
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4013      	ands	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d019      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d014      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aaa:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab4:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	0249      	lsls	r1, r1, #9
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ac4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ac8:	491e      	ldr	r1, [pc, #120]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003aca:	400a      	ands	r2, r1
 8003acc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d016      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd fc5a 	bl	8001394 <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae4:	e00c      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fc55 	bl	8001394 <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d904      	bls.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003af6:	2313      	movs	r3, #19
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2203      	movs	r2, #3
 8003afc:	701a      	strb	r2, [r3, #0]
            break;
 8003afe:	e004      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
 8003b08:	d0ed      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003b0a:	2313      	movs	r3, #19
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b14:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b24:	430a      	orrs	r2, r1
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b28:	e016      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b2a:	2312      	movs	r3, #18
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	2213      	movs	r2, #19
 8003b30:	18ba      	adds	r2, r7, r2
 8003b32:	7812      	ldrb	r2, [r2, #0]
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e00f      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	fffffcff 	.word	0xfffffcff
 8003b44:	fffeffff 	.word	0xfffeffff
 8003b48:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	2312      	movs	r3, #18
 8003b4e:	18fb      	adds	r3, r7, r3
 8003b50:	2213      	movs	r2, #19
 8003b52:	18ba      	adds	r2, r7, r2
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b58:	2311      	movs	r3, #17
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d105      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b62:	4bb6      	ldr	r3, [pc, #728]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b66:	4bb5      	ldr	r3, [pc, #724]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b68:	49b5      	ldr	r1, [pc, #724]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2201      	movs	r2, #1
 8003b74:	4013      	ands	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b78:	4bb0      	ldr	r3, [pc, #704]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	4393      	bics	r3, r2
 8003b80:	0019      	movs	r1, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	4bad      	ldr	r3, [pc, #692]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2202      	movs	r2, #2
 8003b92:	4013      	ands	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b96:	4ba9      	ldr	r3, [pc, #676]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	4ba5      	ldr	r3, [pc, #660]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb4:	4ba1      	ldr	r3, [pc, #644]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	2230      	movs	r2, #48	; 0x30
 8003bba:	4393      	bics	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	4b9e      	ldr	r3, [pc, #632]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd2:	4b9a      	ldr	r3, [pc, #616]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	4a9b      	ldr	r2, [pc, #620]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	0019      	movs	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	4b96      	ldr	r3, [pc, #600]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be2:	430a      	orrs	r2, r1
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	015b      	lsls	r3, r3, #5
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003bf2:	4b92      	ldr	r3, [pc, #584]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	4a94      	ldr	r2, [pc, #592]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	4b8e      	ldr	r3, [pc, #568]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c02:	430a      	orrs	r2, r1
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c12:	4b8a      	ldr	r3, [pc, #552]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	4a8d      	ldr	r2, [pc, #564]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c20:	4b86      	ldr	r3, [pc, #536]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c22:	430a      	orrs	r2, r1
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c32:	4b82      	ldr	r3, [pc, #520]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	4a86      	ldr	r2, [pc, #536]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	4b7e      	ldr	r3, [pc, #504]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c42:	430a      	orrs	r2, r1
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c50:	4b7a      	ldr	r3, [pc, #488]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	4a7f      	ldr	r2, [pc, #508]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	4b77      	ldr	r3, [pc, #476]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c60:	430a      	orrs	r2, r1
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2240      	movs	r2, #64	; 0x40
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c6e:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	4a79      	ldr	r2, [pc, #484]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	0019      	movs	r1, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	4b6f      	ldr	r3, [pc, #444]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	01db      	lsls	r3, r3, #7
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d015      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c8e:	4b6b      	ldr	r3, [pc, #428]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	0899      	lsrs	r1, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9a:	4b68      	ldr	r3, [pc, #416]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	05db      	lsls	r3, r3, #23
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d106      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003cac:	4b63      	ldr	r3, [pc, #396]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	4b62      	ldr	r3, [pc, #392]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cb2:	2180      	movs	r1, #128	; 0x80
 8003cb4:	0249      	lsls	r1, r1, #9
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	031b      	lsls	r3, r3, #12
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cc6:	4b5d      	ldr	r3, [pc, #372]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	2240      	movs	r2, #64	; 0x40
 8003ccc:	4393      	bics	r3, r2
 8003cce:	0019      	movs	r1, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd4:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	039b      	lsls	r3, r3, #14
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d016      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ce6:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	4a5c      	ldr	r2, [pc, #368]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf4:	4b51      	ldr	r3, [pc, #324]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	03db      	lsls	r3, r3, #15
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d106      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d06:	4b4d      	ldr	r3, [pc, #308]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	4b4c      	ldr	r3, [pc, #304]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	0449      	lsls	r1, r1, #17
 8003d10:	430a      	orrs	r2, r1
 8003d12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	03db      	lsls	r3, r3, #15
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d016      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d20:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	4a4e      	ldr	r2, [pc, #312]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d2e:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	045b      	lsls	r3, r3, #17
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d40:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	0449      	lsls	r1, r1, #17
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	4013      	ands	r3, r2
 8003d58:	d014      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	2203      	movs	r2, #3
 8003d60:	4393      	bics	r3, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d106      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d76:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d7c:	2180      	movs	r1, #128	; 0x80
 8003d7e:	0249      	lsls	r1, r1, #9
 8003d80:	430a      	orrs	r2, r1
 8003d82:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	019b      	lsls	r3, r3, #6
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d014      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d90:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	220c      	movs	r2, #12
 8003d96:	4393      	bics	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003da0:	430a      	orrs	r2, r1
 8003da2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d106      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003dac:	4b23      	ldr	r3, [pc, #140]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003db2:	2180      	movs	r1, #128	; 0x80
 8003db4:	0249      	lsls	r1, r1, #9
 8003db6:	430a      	orrs	r2, r1
 8003db8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	045b      	lsls	r3, r3, #17
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d016      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	019b      	lsls	r3, r3, #6
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d106      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	0449      	lsls	r1, r1, #17
 8003df0:	430a      	orrs	r2, r1
 8003df2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	049b      	lsls	r3, r3, #18
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d016      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e10:	430a      	orrs	r2, r1
 8003e12:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	0449      	lsls	r1, r1, #17
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e2e:	2312      	movs	r3, #18
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	781b      	ldrb	r3, [r3, #0]
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b006      	add	sp, #24
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	efffffff 	.word	0xefffffff
 8003e44:	fffff3ff 	.word	0xfffff3ff
 8003e48:	fffffcff 	.word	0xfffffcff
 8003e4c:	fff3ffff 	.word	0xfff3ffff
 8003e50:	ffcfffff 	.word	0xffcfffff
 8003e54:	ffffcfff 	.word	0xffffcfff
 8003e58:	ffff3fff 	.word	0xffff3fff
 8003e5c:	ffbfffff 	.word	0xffbfffff
 8003e60:	feffffff 	.word	0xfeffffff

08003e64 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8003e68:	201e      	movs	r0, #30
 8003e6a:	f7fd fa9d 	bl	80013a8 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8003e6e:	23a0      	movs	r3, #160	; 0xa0
 8003e70:	05db      	lsls	r3, r3, #23
 8003e72:	2200      	movs	r2, #0
 8003e74:	2104      	movs	r1, #4
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7ff f870 	bl	8002f5c <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8003e7c:	23a0      	movs	r3, #160	; 0xa0
 8003e7e:	05db      	lsls	r3, r3, #23
 8003e80:	2201      	movs	r2, #1
 8003e82:	2108      	movs	r1, #8
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff f869 	bl	8002f5c <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8003e8a:	23a0      	movs	r3, #160	; 0xa0
 8003e8c:	05db      	lsls	r3, r3, #23
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2110      	movs	r1, #16
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7ff f862 	bl	8002f5c <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8003e98:	23a0      	movs	r3, #160	; 0xa0
 8003e9a:	05db      	lsls	r3, r3, #23
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2120      	movs	r1, #32
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7ff f85b 	bl	8002f5c <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8003ea6:	23a0      	movs	r3, #160	; 0xa0
 8003ea8:	05db      	lsls	r3, r3, #23
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2101      	movs	r1, #1
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7ff f854 	bl	8002f5c <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8003eb4:	23a0      	movs	r3, #160	; 0xa0
 8003eb6:	05db      	lsls	r3, r3, #23
 8003eb8:	2201      	movs	r2, #1
 8003eba:	2102      	movs	r1, #2
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7ff f84d 	bl	8002f5c <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8003ec2:	23a0      	movs	r3, #160	; 0xa0
 8003ec4:	05db      	lsls	r3, r3, #23
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2102      	movs	r1, #2
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7ff f846 	bl	8002f5c <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8003ed0:	2128      	movs	r1, #40	; 0x28
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f000 f80f 	bl	8003ef6 <lcd_write>
	lcd_write(0,0x0c);
 8003ed8:	210c      	movs	r1, #12
 8003eda:	2000      	movs	r0, #0
 8003edc:	f000 f80b 	bl	8003ef6 <lcd_write>
	lcd_write(0,0x06);
 8003ee0:	2106      	movs	r1, #6
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	f000 f807 	bl	8003ef6 <lcd_write>
	lcd_write(0,0x01);
 8003ee8:	2101      	movs	r1, #1
 8003eea:	2000      	movs	r0, #0
 8003eec:	f000 f803 	bl	8003ef6 <lcd_write>
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	0002      	movs	r2, r0
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	1dbb      	adds	r3, r7, #6
 8003f04:	1c0a      	adds	r2, r1, #0
 8003f06:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8003f08:	2002      	movs	r0, #2
 8003f0a:	f7fd fa4d 	bl	80013a8 <HAL_Delay>
	if(type)
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8003f16:	23a0      	movs	r3, #160	; 0xa0
 8003f18:	05db      	lsls	r3, r3, #23
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7ff f81c 	bl	8002f5c <HAL_GPIO_WritePin>
 8003f24:	e006      	b.n	8003f34 <lcd_write+0x3e>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8003f26:	23a0      	movs	r3, #160	; 0xa0
 8003f28:	05db      	lsls	r3, r3, #23
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7ff f814 	bl	8002f5c <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8003f34:	1dbb      	adds	r3, r7, #6
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	b25b      	sxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da07      	bge.n	8003f4e <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8003f3e:	23a0      	movs	r3, #160	; 0xa0
 8003f40:	05db      	lsls	r3, r3, #23
 8003f42:	2201      	movs	r2, #1
 8003f44:	2120      	movs	r1, #32
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff f808 	bl	8002f5c <HAL_GPIO_WritePin>
 8003f4c:	e006      	b.n	8003f5c <lcd_write+0x66>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8003f4e:	23a0      	movs	r3, #160	; 0xa0
 8003f50:	05db      	lsls	r3, r3, #23
 8003f52:	2200      	movs	r2, #0
 8003f54:	2120      	movs	r1, #32
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7ff f800 	bl	8002f5c <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8003f5c:	1dbb      	adds	r3, r7, #6
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2240      	movs	r2, #64	; 0x40
 8003f62:	4013      	ands	r3, r2
 8003f64:	d007      	beq.n	8003f76 <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8003f66:	23a0      	movs	r3, #160	; 0xa0
 8003f68:	05db      	lsls	r3, r3, #23
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2110      	movs	r1, #16
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7fe fff4 	bl	8002f5c <HAL_GPIO_WritePin>
 8003f74:	e006      	b.n	8003f84 <lcd_write+0x8e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8003f76:	23a0      	movs	r3, #160	; 0xa0
 8003f78:	05db      	lsls	r3, r3, #23
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2110      	movs	r1, #16
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7fe ffec 	bl	8002f5c <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8003f84:	1dbb      	adds	r3, r7, #6
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8003f8e:	23a0      	movs	r3, #160	; 0xa0
 8003f90:	05db      	lsls	r3, r3, #23
 8003f92:	2201      	movs	r2, #1
 8003f94:	2108      	movs	r1, #8
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fe ffe0 	bl	8002f5c <HAL_GPIO_WritePin>
 8003f9c:	e006      	b.n	8003fac <lcd_write+0xb6>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8003f9e:	23a0      	movs	r3, #160	; 0xa0
 8003fa0:	05db      	lsls	r3, r3, #23
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2108      	movs	r1, #8
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fe ffd8 	bl	8002f5c <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8003fac:	1dbb      	adds	r3, r7, #6
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8003fb6:	23a0      	movs	r3, #160	; 0xa0
 8003fb8:	05db      	lsls	r3, r3, #23
 8003fba:	2201      	movs	r2, #1
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f7fe ffcc 	bl	8002f5c <HAL_GPIO_WritePin>
 8003fc4:	e006      	b.n	8003fd4 <lcd_write+0xde>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8003fc6:	23a0      	movs	r3, #160	; 0xa0
 8003fc8:	05db      	lsls	r3, r3, #23
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2104      	movs	r1, #4
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7fe ffc4 	bl	8002f5c <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8003fd4:	23a0      	movs	r3, #160	; 0xa0
 8003fd6:	05db      	lsls	r3, r3, #23
 8003fd8:	2201      	movs	r2, #1
 8003fda:	2102      	movs	r1, #2
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fe ffbd 	bl	8002f5c <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8003fe2:	23a0      	movs	r3, #160	; 0xa0
 8003fe4:	05db      	lsls	r3, r3, #23
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2102      	movs	r1, #2
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7fe ffb6 	bl	8002f5c <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 8003ff0:	1dbb      	adds	r3, r7, #6
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d007      	beq.n	800400a <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8003ffa:	23a0      	movs	r3, #160	; 0xa0
 8003ffc:	05db      	lsls	r3, r3, #23
 8003ffe:	2201      	movs	r2, #1
 8004000:	2120      	movs	r1, #32
 8004002:	0018      	movs	r0, r3
 8004004:	f7fe ffaa 	bl	8002f5c <HAL_GPIO_WritePin>
 8004008:	e006      	b.n	8004018 <lcd_write+0x122>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800400a:	23a0      	movs	r3, #160	; 0xa0
 800400c:	05db      	lsls	r3, r3, #23
 800400e:	2200      	movs	r2, #0
 8004010:	2120      	movs	r1, #32
 8004012:	0018      	movs	r0, r3
 8004014:	f7fe ffa2 	bl	8002f5c <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 8004018:	1dbb      	adds	r3, r7, #6
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2204      	movs	r2, #4
 800401e:	4013      	ands	r3, r2
 8004020:	d007      	beq.n	8004032 <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8004022:	23a0      	movs	r3, #160	; 0xa0
 8004024:	05db      	lsls	r3, r3, #23
 8004026:	2201      	movs	r2, #1
 8004028:	2110      	movs	r1, #16
 800402a:	0018      	movs	r0, r3
 800402c:	f7fe ff96 	bl	8002f5c <HAL_GPIO_WritePin>
 8004030:	e006      	b.n	8004040 <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8004032:	23a0      	movs	r3, #160	; 0xa0
 8004034:	05db      	lsls	r3, r3, #23
 8004036:	2200      	movs	r2, #0
 8004038:	2110      	movs	r1, #16
 800403a:	0018      	movs	r0, r3
 800403c:	f7fe ff8e 	bl	8002f5c <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8004040:	1dbb      	adds	r3, r7, #6
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2202      	movs	r2, #2
 8004046:	4013      	ands	r3, r2
 8004048:	d007      	beq.n	800405a <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800404a:	23a0      	movs	r3, #160	; 0xa0
 800404c:	05db      	lsls	r3, r3, #23
 800404e:	2201      	movs	r2, #1
 8004050:	2108      	movs	r1, #8
 8004052:	0018      	movs	r0, r3
 8004054:	f7fe ff82 	bl	8002f5c <HAL_GPIO_WritePin>
 8004058:	e006      	b.n	8004068 <lcd_write+0x172>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800405a:	23a0      	movs	r3, #160	; 0xa0
 800405c:	05db      	lsls	r3, r3, #23
 800405e:	2200      	movs	r2, #0
 8004060:	2108      	movs	r1, #8
 8004062:	0018      	movs	r0, r3
 8004064:	f7fe ff7a 	bl	8002f5c <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8004068:	1dbb      	adds	r3, r7, #6
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2201      	movs	r2, #1
 800406e:	4013      	ands	r3, r2
 8004070:	d007      	beq.n	8004082 <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8004072:	23a0      	movs	r3, #160	; 0xa0
 8004074:	05db      	lsls	r3, r3, #23
 8004076:	2201      	movs	r2, #1
 8004078:	2104      	movs	r1, #4
 800407a:	0018      	movs	r0, r3
 800407c:	f7fe ff6e 	bl	8002f5c <HAL_GPIO_WritePin>
 8004080:	e006      	b.n	8004090 <lcd_write+0x19a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8004082:	23a0      	movs	r3, #160	; 0xa0
 8004084:	05db      	lsls	r3, r3, #23
 8004086:	2200      	movs	r2, #0
 8004088:	2104      	movs	r1, #4
 800408a:	0018      	movs	r0, r3
 800408c:	f7fe ff66 	bl	8002f5c <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8004090:	23a0      	movs	r3, #160	; 0xa0
 8004092:	05db      	lsls	r3, r3, #23
 8004094:	2201      	movs	r2, #1
 8004096:	2102      	movs	r1, #2
 8004098:	0018      	movs	r0, r3
 800409a:	f7fe ff5f 	bl	8002f5c <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800409e:	23a0      	movs	r3, #160	; 0xa0
 80040a0:	05db      	lsls	r3, r3, #23
 80040a2:	2200      	movs	r2, #0
 80040a4:	2102      	movs	r1, #2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f7fe ff58 	bl	8002f5c <HAL_GPIO_WritePin>
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, char *string)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	603a      	str	r2, [r7, #0]
 80040bc:	1dfb      	adds	r3, r7, #7
 80040be:	1c02      	adds	r2, r0, #0
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	1dbb      	adds	r3, r7, #6
 80040c4:	1c0a      	adds	r2, r1, #0
 80040c6:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d023      	beq.n	8004118 <lcd_puts+0x64>
 80040d0:	dc35      	bgt.n	800413e <lcd_puts+0x8a>
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d017      	beq.n	8004106 <lcd_puts+0x52>
 80040d6:	dc32      	bgt.n	800413e <lcd_puts+0x8a>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <lcd_puts+0x2e>
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d009      	beq.n	80040f4 <lcd_puts+0x40>
 80040e0:	e023      	b.n	800412a <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80040e2:	1dbb      	adds	r3, r7, #6
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	3b80      	subs	r3, #128	; 0x80
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	0019      	movs	r1, r3
 80040ec:	2000      	movs	r0, #0
 80040ee:	f7ff ff02 	bl	8003ef6 <lcd_write>
			break;
 80040f2:	e01a      	b.n	800412a <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80040f4:	1dbb      	adds	r3, r7, #6
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	3b40      	subs	r3, #64	; 0x40
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	0019      	movs	r1, r3
 80040fe:	2000      	movs	r0, #0
 8004100:	f7ff fef9 	bl	8003ef6 <lcd_write>
			break;
 8004104:	e011      	b.n	800412a <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8004106:	1dbb      	adds	r3, r7, #6
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	3b70      	subs	r3, #112	; 0x70
 800410c:	b2db      	uxtb	r3, r3
 800410e:	0019      	movs	r1, r3
 8004110:	2000      	movs	r0, #0
 8004112:	f7ff fef0 	bl	8003ef6 <lcd_write>
			break;
 8004116:	e008      	b.n	800412a <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8004118:	1dbb      	adds	r3, r7, #6
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	3b30      	subs	r3, #48	; 0x30
 800411e:	b2db      	uxtb	r3, r3
 8004120:	0019      	movs	r1, r3
 8004122:	2000      	movs	r0, #0
 8004124:	f7ff fee7 	bl	8003ef6 <lcd_write>
			break;
 8004128:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 800412a:	e008      	b.n	800413e <lcd_puts+0x8a>
	{
		lcd_write(1,*string);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	0019      	movs	r1, r3
 8004132:	2001      	movs	r0, #1
 8004134:	f7ff fedf 	bl	8003ef6 <lcd_write>
		string++;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	603b      	str	r3, [r7, #0]
	while(*string)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f2      	bne.n	800412c <lcd_puts+0x78>
	}
}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b002      	add	sp, #8
 800414e:	bd80      	pop	{r7, pc}

08004150 <lcd_clear>:
void lcd_clear(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8004154:	2101      	movs	r1, #1
 8004156:	2000      	movs	r0, #0
 8004158:	f7ff fecd 	bl	8003ef6 <lcd_write>
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <__errno>:
 8004164:	4b01      	ldr	r3, [pc, #4]	; (800416c <__errno+0x8>)
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	4770      	bx	lr
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	2000000c 	.word	0x2000000c

08004170 <__libc_init_array>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	2600      	movs	r6, #0
 8004174:	4d0c      	ldr	r5, [pc, #48]	; (80041a8 <__libc_init_array+0x38>)
 8004176:	4c0d      	ldr	r4, [pc, #52]	; (80041ac <__libc_init_array+0x3c>)
 8004178:	1b64      	subs	r4, r4, r5
 800417a:	10a4      	asrs	r4, r4, #2
 800417c:	42a6      	cmp	r6, r4
 800417e:	d109      	bne.n	8004194 <__libc_init_array+0x24>
 8004180:	2600      	movs	r6, #0
 8004182:	f000 fc8b 	bl	8004a9c <_init>
 8004186:	4d0a      	ldr	r5, [pc, #40]	; (80041b0 <__libc_init_array+0x40>)
 8004188:	4c0a      	ldr	r4, [pc, #40]	; (80041b4 <__libc_init_array+0x44>)
 800418a:	1b64      	subs	r4, r4, r5
 800418c:	10a4      	asrs	r4, r4, #2
 800418e:	42a6      	cmp	r6, r4
 8004190:	d105      	bne.n	800419e <__libc_init_array+0x2e>
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	00b3      	lsls	r3, r6, #2
 8004196:	58eb      	ldr	r3, [r5, r3]
 8004198:	4798      	blx	r3
 800419a:	3601      	adds	r6, #1
 800419c:	e7ee      	b.n	800417c <__libc_init_array+0xc>
 800419e:	00b3      	lsls	r3, r6, #2
 80041a0:	58eb      	ldr	r3, [r5, r3]
 80041a2:	4798      	blx	r3
 80041a4:	3601      	adds	r6, #1
 80041a6:	e7f2      	b.n	800418e <__libc_init_array+0x1e>
 80041a8:	08004bfc 	.word	0x08004bfc
 80041ac:	08004bfc 	.word	0x08004bfc
 80041b0:	08004bfc 	.word	0x08004bfc
 80041b4:	08004c00 	.word	0x08004c00

080041b8 <memset>:
 80041b8:	0003      	movs	r3, r0
 80041ba:	1882      	adds	r2, r0, r2
 80041bc:	4293      	cmp	r3, r2
 80041be:	d100      	bne.n	80041c2 <memset+0xa>
 80041c0:	4770      	bx	lr
 80041c2:	7019      	strb	r1, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	e7f9      	b.n	80041bc <memset+0x4>

080041c8 <siprintf>:
 80041c8:	b40e      	push	{r1, r2, r3}
 80041ca:	b500      	push	{lr}
 80041cc:	490b      	ldr	r1, [pc, #44]	; (80041fc <siprintf+0x34>)
 80041ce:	b09c      	sub	sp, #112	; 0x70
 80041d0:	ab1d      	add	r3, sp, #116	; 0x74
 80041d2:	9002      	str	r0, [sp, #8]
 80041d4:	9006      	str	r0, [sp, #24]
 80041d6:	9107      	str	r1, [sp, #28]
 80041d8:	9104      	str	r1, [sp, #16]
 80041da:	4809      	ldr	r0, [pc, #36]	; (8004200 <siprintf+0x38>)
 80041dc:	4909      	ldr	r1, [pc, #36]	; (8004204 <siprintf+0x3c>)
 80041de:	cb04      	ldmia	r3!, {r2}
 80041e0:	9105      	str	r1, [sp, #20]
 80041e2:	6800      	ldr	r0, [r0, #0]
 80041e4:	a902      	add	r1, sp, #8
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	f000 f870 	bl	80042cc <_svfiprintf_r>
 80041ec:	2300      	movs	r3, #0
 80041ee:	9a02      	ldr	r2, [sp, #8]
 80041f0:	7013      	strb	r3, [r2, #0]
 80041f2:	b01c      	add	sp, #112	; 0x70
 80041f4:	bc08      	pop	{r3}
 80041f6:	b003      	add	sp, #12
 80041f8:	4718      	bx	r3
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	7fffffff 	.word	0x7fffffff
 8004200:	2000000c 	.word	0x2000000c
 8004204:	ffff0208 	.word	0xffff0208

08004208 <__ssputs_r>:
 8004208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800420a:	688e      	ldr	r6, [r1, #8]
 800420c:	b085      	sub	sp, #20
 800420e:	0007      	movs	r7, r0
 8004210:	000c      	movs	r4, r1
 8004212:	9203      	str	r2, [sp, #12]
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	429e      	cmp	r6, r3
 8004218:	d83c      	bhi.n	8004294 <__ssputs_r+0x8c>
 800421a:	2390      	movs	r3, #144	; 0x90
 800421c:	898a      	ldrh	r2, [r1, #12]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	421a      	tst	r2, r3
 8004222:	d034      	beq.n	800428e <__ssputs_r+0x86>
 8004224:	6909      	ldr	r1, [r1, #16]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	6960      	ldr	r0, [r4, #20]
 800422a:	1a5b      	subs	r3, r3, r1
 800422c:	9302      	str	r3, [sp, #8]
 800422e:	2303      	movs	r3, #3
 8004230:	4343      	muls	r3, r0
 8004232:	0fdd      	lsrs	r5, r3, #31
 8004234:	18ed      	adds	r5, r5, r3
 8004236:	9b01      	ldr	r3, [sp, #4]
 8004238:	9802      	ldr	r0, [sp, #8]
 800423a:	3301      	adds	r3, #1
 800423c:	181b      	adds	r3, r3, r0
 800423e:	106d      	asrs	r5, r5, #1
 8004240:	42ab      	cmp	r3, r5
 8004242:	d900      	bls.n	8004246 <__ssputs_r+0x3e>
 8004244:	001d      	movs	r5, r3
 8004246:	0553      	lsls	r3, r2, #21
 8004248:	d532      	bpl.n	80042b0 <__ssputs_r+0xa8>
 800424a:	0029      	movs	r1, r5
 800424c:	0038      	movs	r0, r7
 800424e:	f000 fb53 	bl	80048f8 <_malloc_r>
 8004252:	1e06      	subs	r6, r0, #0
 8004254:	d109      	bne.n	800426a <__ssputs_r+0x62>
 8004256:	230c      	movs	r3, #12
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	2340      	movs	r3, #64	; 0x40
 800425c:	2001      	movs	r0, #1
 800425e:	89a2      	ldrh	r2, [r4, #12]
 8004260:	4240      	negs	r0, r0
 8004262:	4313      	orrs	r3, r2
 8004264:	81a3      	strh	r3, [r4, #12]
 8004266:	b005      	add	sp, #20
 8004268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800426a:	9a02      	ldr	r2, [sp, #8]
 800426c:	6921      	ldr	r1, [r4, #16]
 800426e:	f000 faba 	bl	80047e6 <memcpy>
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <__ssputs_r+0xc0>)
 8004276:	401a      	ands	r2, r3
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	4313      	orrs	r3, r2
 800427c:	81a3      	strh	r3, [r4, #12]
 800427e:	9b02      	ldr	r3, [sp, #8]
 8004280:	6126      	str	r6, [r4, #16]
 8004282:	18f6      	adds	r6, r6, r3
 8004284:	6026      	str	r6, [r4, #0]
 8004286:	6165      	str	r5, [r4, #20]
 8004288:	9e01      	ldr	r6, [sp, #4]
 800428a:	1aed      	subs	r5, r5, r3
 800428c:	60a5      	str	r5, [r4, #8]
 800428e:	9b01      	ldr	r3, [sp, #4]
 8004290:	429e      	cmp	r6, r3
 8004292:	d900      	bls.n	8004296 <__ssputs_r+0x8e>
 8004294:	9e01      	ldr	r6, [sp, #4]
 8004296:	0032      	movs	r2, r6
 8004298:	9903      	ldr	r1, [sp, #12]
 800429a:	6820      	ldr	r0, [r4, #0]
 800429c:	f000 faac 	bl	80047f8 <memmove>
 80042a0:	68a3      	ldr	r3, [r4, #8]
 80042a2:	2000      	movs	r0, #0
 80042a4:	1b9b      	subs	r3, r3, r6
 80042a6:	60a3      	str	r3, [r4, #8]
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	199e      	adds	r6, r3, r6
 80042ac:	6026      	str	r6, [r4, #0]
 80042ae:	e7da      	b.n	8004266 <__ssputs_r+0x5e>
 80042b0:	002a      	movs	r2, r5
 80042b2:	0038      	movs	r0, r7
 80042b4:	f000 fb96 	bl	80049e4 <_realloc_r>
 80042b8:	1e06      	subs	r6, r0, #0
 80042ba:	d1e0      	bne.n	800427e <__ssputs_r+0x76>
 80042bc:	0038      	movs	r0, r7
 80042be:	6921      	ldr	r1, [r4, #16]
 80042c0:	f000 faae 	bl	8004820 <_free_r>
 80042c4:	e7c7      	b.n	8004256 <__ssputs_r+0x4e>
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	fffffb7f 	.word	0xfffffb7f

080042cc <_svfiprintf_r>:
 80042cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ce:	b0a1      	sub	sp, #132	; 0x84
 80042d0:	9003      	str	r0, [sp, #12]
 80042d2:	001d      	movs	r5, r3
 80042d4:	898b      	ldrh	r3, [r1, #12]
 80042d6:	000f      	movs	r7, r1
 80042d8:	0016      	movs	r6, r2
 80042da:	061b      	lsls	r3, r3, #24
 80042dc:	d511      	bpl.n	8004302 <_svfiprintf_r+0x36>
 80042de:	690b      	ldr	r3, [r1, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10e      	bne.n	8004302 <_svfiprintf_r+0x36>
 80042e4:	2140      	movs	r1, #64	; 0x40
 80042e6:	f000 fb07 	bl	80048f8 <_malloc_r>
 80042ea:	6038      	str	r0, [r7, #0]
 80042ec:	6138      	str	r0, [r7, #16]
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d105      	bne.n	80042fe <_svfiprintf_r+0x32>
 80042f2:	230c      	movs	r3, #12
 80042f4:	9a03      	ldr	r2, [sp, #12]
 80042f6:	3801      	subs	r0, #1
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	b021      	add	sp, #132	; 0x84
 80042fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042fe:	2340      	movs	r3, #64	; 0x40
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	2300      	movs	r3, #0
 8004304:	ac08      	add	r4, sp, #32
 8004306:	6163      	str	r3, [r4, #20]
 8004308:	3320      	adds	r3, #32
 800430a:	7663      	strb	r3, [r4, #25]
 800430c:	3310      	adds	r3, #16
 800430e:	76a3      	strb	r3, [r4, #26]
 8004310:	9507      	str	r5, [sp, #28]
 8004312:	0035      	movs	r5, r6
 8004314:	782b      	ldrb	r3, [r5, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <_svfiprintf_r+0x52>
 800431a:	2b25      	cmp	r3, #37	; 0x25
 800431c:	d147      	bne.n	80043ae <_svfiprintf_r+0xe2>
 800431e:	1bab      	subs	r3, r5, r6
 8004320:	9305      	str	r3, [sp, #20]
 8004322:	42b5      	cmp	r5, r6
 8004324:	d00c      	beq.n	8004340 <_svfiprintf_r+0x74>
 8004326:	0032      	movs	r2, r6
 8004328:	0039      	movs	r1, r7
 800432a:	9803      	ldr	r0, [sp, #12]
 800432c:	f7ff ff6c 	bl	8004208 <__ssputs_r>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d100      	bne.n	8004336 <_svfiprintf_r+0x6a>
 8004334:	e0ae      	b.n	8004494 <_svfiprintf_r+0x1c8>
 8004336:	6962      	ldr	r2, [r4, #20]
 8004338:	9b05      	ldr	r3, [sp, #20]
 800433a:	4694      	mov	ip, r2
 800433c:	4463      	add	r3, ip
 800433e:	6163      	str	r3, [r4, #20]
 8004340:	782b      	ldrb	r3, [r5, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d100      	bne.n	8004348 <_svfiprintf_r+0x7c>
 8004346:	e0a5      	b.n	8004494 <_svfiprintf_r+0x1c8>
 8004348:	2201      	movs	r2, #1
 800434a:	2300      	movs	r3, #0
 800434c:	4252      	negs	r2, r2
 800434e:	6062      	str	r2, [r4, #4]
 8004350:	a904      	add	r1, sp, #16
 8004352:	3254      	adds	r2, #84	; 0x54
 8004354:	1852      	adds	r2, r2, r1
 8004356:	1c6e      	adds	r6, r5, #1
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	60e3      	str	r3, [r4, #12]
 800435c:	60a3      	str	r3, [r4, #8]
 800435e:	7013      	strb	r3, [r2, #0]
 8004360:	65a3      	str	r3, [r4, #88]	; 0x58
 8004362:	2205      	movs	r2, #5
 8004364:	7831      	ldrb	r1, [r6, #0]
 8004366:	4854      	ldr	r0, [pc, #336]	; (80044b8 <_svfiprintf_r+0x1ec>)
 8004368:	f000 fa32 	bl	80047d0 <memchr>
 800436c:	1c75      	adds	r5, r6, #1
 800436e:	2800      	cmp	r0, #0
 8004370:	d11f      	bne.n	80043b2 <_svfiprintf_r+0xe6>
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	06d3      	lsls	r3, r2, #27
 8004376:	d504      	bpl.n	8004382 <_svfiprintf_r+0xb6>
 8004378:	2353      	movs	r3, #83	; 0x53
 800437a:	a904      	add	r1, sp, #16
 800437c:	185b      	adds	r3, r3, r1
 800437e:	2120      	movs	r1, #32
 8004380:	7019      	strb	r1, [r3, #0]
 8004382:	0713      	lsls	r3, r2, #28
 8004384:	d504      	bpl.n	8004390 <_svfiprintf_r+0xc4>
 8004386:	2353      	movs	r3, #83	; 0x53
 8004388:	a904      	add	r1, sp, #16
 800438a:	185b      	adds	r3, r3, r1
 800438c:	212b      	movs	r1, #43	; 0x2b
 800438e:	7019      	strb	r1, [r3, #0]
 8004390:	7833      	ldrb	r3, [r6, #0]
 8004392:	2b2a      	cmp	r3, #42	; 0x2a
 8004394:	d016      	beq.n	80043c4 <_svfiprintf_r+0xf8>
 8004396:	0035      	movs	r5, r6
 8004398:	2100      	movs	r1, #0
 800439a:	200a      	movs	r0, #10
 800439c:	68e3      	ldr	r3, [r4, #12]
 800439e:	782a      	ldrb	r2, [r5, #0]
 80043a0:	1c6e      	adds	r6, r5, #1
 80043a2:	3a30      	subs	r2, #48	; 0x30
 80043a4:	2a09      	cmp	r2, #9
 80043a6:	d94e      	bls.n	8004446 <_svfiprintf_r+0x17a>
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d111      	bne.n	80043d0 <_svfiprintf_r+0x104>
 80043ac:	e017      	b.n	80043de <_svfiprintf_r+0x112>
 80043ae:	3501      	adds	r5, #1
 80043b0:	e7b0      	b.n	8004314 <_svfiprintf_r+0x48>
 80043b2:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <_svfiprintf_r+0x1ec>)
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	1ac0      	subs	r0, r0, r3
 80043b8:	2301      	movs	r3, #1
 80043ba:	4083      	lsls	r3, r0
 80043bc:	4313      	orrs	r3, r2
 80043be:	002e      	movs	r6, r5
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	e7ce      	b.n	8004362 <_svfiprintf_r+0x96>
 80043c4:	9b07      	ldr	r3, [sp, #28]
 80043c6:	1d19      	adds	r1, r3, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	9107      	str	r1, [sp, #28]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db01      	blt.n	80043d4 <_svfiprintf_r+0x108>
 80043d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80043d2:	e004      	b.n	80043de <_svfiprintf_r+0x112>
 80043d4:	425b      	negs	r3, r3
 80043d6:	60e3      	str	r3, [r4, #12]
 80043d8:	2302      	movs	r3, #2
 80043da:	4313      	orrs	r3, r2
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	782b      	ldrb	r3, [r5, #0]
 80043e0:	2b2e      	cmp	r3, #46	; 0x2e
 80043e2:	d10a      	bne.n	80043fa <_svfiprintf_r+0x12e>
 80043e4:	786b      	ldrb	r3, [r5, #1]
 80043e6:	2b2a      	cmp	r3, #42	; 0x2a
 80043e8:	d135      	bne.n	8004456 <_svfiprintf_r+0x18a>
 80043ea:	9b07      	ldr	r3, [sp, #28]
 80043ec:	3502      	adds	r5, #2
 80043ee:	1d1a      	adds	r2, r3, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	9207      	str	r2, [sp, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	db2b      	blt.n	8004450 <_svfiprintf_r+0x184>
 80043f8:	9309      	str	r3, [sp, #36]	; 0x24
 80043fa:	4e30      	ldr	r6, [pc, #192]	; (80044bc <_svfiprintf_r+0x1f0>)
 80043fc:	2203      	movs	r2, #3
 80043fe:	0030      	movs	r0, r6
 8004400:	7829      	ldrb	r1, [r5, #0]
 8004402:	f000 f9e5 	bl	80047d0 <memchr>
 8004406:	2800      	cmp	r0, #0
 8004408:	d006      	beq.n	8004418 <_svfiprintf_r+0x14c>
 800440a:	2340      	movs	r3, #64	; 0x40
 800440c:	1b80      	subs	r0, r0, r6
 800440e:	4083      	lsls	r3, r0
 8004410:	6822      	ldr	r2, [r4, #0]
 8004412:	3501      	adds	r5, #1
 8004414:	4313      	orrs	r3, r2
 8004416:	6023      	str	r3, [r4, #0]
 8004418:	7829      	ldrb	r1, [r5, #0]
 800441a:	2206      	movs	r2, #6
 800441c:	4828      	ldr	r0, [pc, #160]	; (80044c0 <_svfiprintf_r+0x1f4>)
 800441e:	1c6e      	adds	r6, r5, #1
 8004420:	7621      	strb	r1, [r4, #24]
 8004422:	f000 f9d5 	bl	80047d0 <memchr>
 8004426:	2800      	cmp	r0, #0
 8004428:	d03c      	beq.n	80044a4 <_svfiprintf_r+0x1d8>
 800442a:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <_svfiprintf_r+0x1f8>)
 800442c:	2b00      	cmp	r3, #0
 800442e:	d125      	bne.n	800447c <_svfiprintf_r+0x1b0>
 8004430:	2207      	movs	r2, #7
 8004432:	9b07      	ldr	r3, [sp, #28]
 8004434:	3307      	adds	r3, #7
 8004436:	4393      	bics	r3, r2
 8004438:	3308      	adds	r3, #8
 800443a:	9307      	str	r3, [sp, #28]
 800443c:	6963      	ldr	r3, [r4, #20]
 800443e:	9a04      	ldr	r2, [sp, #16]
 8004440:	189b      	adds	r3, r3, r2
 8004442:	6163      	str	r3, [r4, #20]
 8004444:	e765      	b.n	8004312 <_svfiprintf_r+0x46>
 8004446:	4343      	muls	r3, r0
 8004448:	0035      	movs	r5, r6
 800444a:	2101      	movs	r1, #1
 800444c:	189b      	adds	r3, r3, r2
 800444e:	e7a6      	b.n	800439e <_svfiprintf_r+0xd2>
 8004450:	2301      	movs	r3, #1
 8004452:	425b      	negs	r3, r3
 8004454:	e7d0      	b.n	80043f8 <_svfiprintf_r+0x12c>
 8004456:	2300      	movs	r3, #0
 8004458:	200a      	movs	r0, #10
 800445a:	001a      	movs	r2, r3
 800445c:	3501      	adds	r5, #1
 800445e:	6063      	str	r3, [r4, #4]
 8004460:	7829      	ldrb	r1, [r5, #0]
 8004462:	1c6e      	adds	r6, r5, #1
 8004464:	3930      	subs	r1, #48	; 0x30
 8004466:	2909      	cmp	r1, #9
 8004468:	d903      	bls.n	8004472 <_svfiprintf_r+0x1a6>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0c5      	beq.n	80043fa <_svfiprintf_r+0x12e>
 800446e:	9209      	str	r2, [sp, #36]	; 0x24
 8004470:	e7c3      	b.n	80043fa <_svfiprintf_r+0x12e>
 8004472:	4342      	muls	r2, r0
 8004474:	0035      	movs	r5, r6
 8004476:	2301      	movs	r3, #1
 8004478:	1852      	adds	r2, r2, r1
 800447a:	e7f1      	b.n	8004460 <_svfiprintf_r+0x194>
 800447c:	ab07      	add	r3, sp, #28
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	003a      	movs	r2, r7
 8004482:	0021      	movs	r1, r4
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <_svfiprintf_r+0x1fc>)
 8004486:	9803      	ldr	r0, [sp, #12]
 8004488:	e000      	b.n	800448c <_svfiprintf_r+0x1c0>
 800448a:	bf00      	nop
 800448c:	9004      	str	r0, [sp, #16]
 800448e:	9b04      	ldr	r3, [sp, #16]
 8004490:	3301      	adds	r3, #1
 8004492:	d1d3      	bne.n	800443c <_svfiprintf_r+0x170>
 8004494:	89bb      	ldrh	r3, [r7, #12]
 8004496:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004498:	065b      	lsls	r3, r3, #25
 800449a:	d400      	bmi.n	800449e <_svfiprintf_r+0x1d2>
 800449c:	e72d      	b.n	80042fa <_svfiprintf_r+0x2e>
 800449e:	2001      	movs	r0, #1
 80044a0:	4240      	negs	r0, r0
 80044a2:	e72a      	b.n	80042fa <_svfiprintf_r+0x2e>
 80044a4:	ab07      	add	r3, sp, #28
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	003a      	movs	r2, r7
 80044aa:	0021      	movs	r1, r4
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <_svfiprintf_r+0x1fc>)
 80044ae:	9803      	ldr	r0, [sp, #12]
 80044b0:	f000 f87c 	bl	80045ac <_printf_i>
 80044b4:	e7ea      	b.n	800448c <_svfiprintf_r+0x1c0>
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	08004bc8 	.word	0x08004bc8
 80044bc:	08004bce 	.word	0x08004bce
 80044c0:	08004bd2 	.word	0x08004bd2
 80044c4:	00000000 	.word	0x00000000
 80044c8:	08004209 	.word	0x08004209

080044cc <_printf_common>:
 80044cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044ce:	0015      	movs	r5, r2
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	688a      	ldr	r2, [r1, #8]
 80044d4:	690b      	ldr	r3, [r1, #16]
 80044d6:	000c      	movs	r4, r1
 80044d8:	9000      	str	r0, [sp, #0]
 80044da:	4293      	cmp	r3, r2
 80044dc:	da00      	bge.n	80044e0 <_printf_common+0x14>
 80044de:	0013      	movs	r3, r2
 80044e0:	0022      	movs	r2, r4
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	3243      	adds	r2, #67	; 0x43
 80044e6:	7812      	ldrb	r2, [r2, #0]
 80044e8:	2a00      	cmp	r2, #0
 80044ea:	d001      	beq.n	80044f0 <_printf_common+0x24>
 80044ec:	3301      	adds	r3, #1
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	069b      	lsls	r3, r3, #26
 80044f4:	d502      	bpl.n	80044fc <_printf_common+0x30>
 80044f6:	682b      	ldr	r3, [r5, #0]
 80044f8:	3302      	adds	r3, #2
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	6822      	ldr	r2, [r4, #0]
 80044fe:	2306      	movs	r3, #6
 8004500:	0017      	movs	r7, r2
 8004502:	401f      	ands	r7, r3
 8004504:	421a      	tst	r2, r3
 8004506:	d027      	beq.n	8004558 <_printf_common+0x8c>
 8004508:	0023      	movs	r3, r4
 800450a:	3343      	adds	r3, #67	; 0x43
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	1e5a      	subs	r2, r3, #1
 8004510:	4193      	sbcs	r3, r2
 8004512:	6822      	ldr	r2, [r4, #0]
 8004514:	0692      	lsls	r2, r2, #26
 8004516:	d430      	bmi.n	800457a <_printf_common+0xae>
 8004518:	0022      	movs	r2, r4
 800451a:	9901      	ldr	r1, [sp, #4]
 800451c:	9800      	ldr	r0, [sp, #0]
 800451e:	9e08      	ldr	r6, [sp, #32]
 8004520:	3243      	adds	r2, #67	; 0x43
 8004522:	47b0      	blx	r6
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d025      	beq.n	8004574 <_printf_common+0xa8>
 8004528:	2306      	movs	r3, #6
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	682a      	ldr	r2, [r5, #0]
 800452e:	68e1      	ldr	r1, [r4, #12]
 8004530:	2500      	movs	r5, #0
 8004532:	4003      	ands	r3, r0
 8004534:	2b04      	cmp	r3, #4
 8004536:	d103      	bne.n	8004540 <_printf_common+0x74>
 8004538:	1a8d      	subs	r5, r1, r2
 800453a:	43eb      	mvns	r3, r5
 800453c:	17db      	asrs	r3, r3, #31
 800453e:	401d      	ands	r5, r3
 8004540:	68a3      	ldr	r3, [r4, #8]
 8004542:	6922      	ldr	r2, [r4, #16]
 8004544:	4293      	cmp	r3, r2
 8004546:	dd01      	ble.n	800454c <_printf_common+0x80>
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	18ed      	adds	r5, r5, r3
 800454c:	2700      	movs	r7, #0
 800454e:	42bd      	cmp	r5, r7
 8004550:	d120      	bne.n	8004594 <_printf_common+0xc8>
 8004552:	2000      	movs	r0, #0
 8004554:	e010      	b.n	8004578 <_printf_common+0xac>
 8004556:	3701      	adds	r7, #1
 8004558:	68e3      	ldr	r3, [r4, #12]
 800455a:	682a      	ldr	r2, [r5, #0]
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	42bb      	cmp	r3, r7
 8004560:	ddd2      	ble.n	8004508 <_printf_common+0x3c>
 8004562:	0022      	movs	r2, r4
 8004564:	2301      	movs	r3, #1
 8004566:	9901      	ldr	r1, [sp, #4]
 8004568:	9800      	ldr	r0, [sp, #0]
 800456a:	9e08      	ldr	r6, [sp, #32]
 800456c:	3219      	adds	r2, #25
 800456e:	47b0      	blx	r6
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d1f0      	bne.n	8004556 <_printf_common+0x8a>
 8004574:	2001      	movs	r0, #1
 8004576:	4240      	negs	r0, r0
 8004578:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800457a:	2030      	movs	r0, #48	; 0x30
 800457c:	18e1      	adds	r1, r4, r3
 800457e:	3143      	adds	r1, #67	; 0x43
 8004580:	7008      	strb	r0, [r1, #0]
 8004582:	0021      	movs	r1, r4
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	3145      	adds	r1, #69	; 0x45
 8004588:	7809      	ldrb	r1, [r1, #0]
 800458a:	18a2      	adds	r2, r4, r2
 800458c:	3243      	adds	r2, #67	; 0x43
 800458e:	3302      	adds	r3, #2
 8004590:	7011      	strb	r1, [r2, #0]
 8004592:	e7c1      	b.n	8004518 <_printf_common+0x4c>
 8004594:	0022      	movs	r2, r4
 8004596:	2301      	movs	r3, #1
 8004598:	9901      	ldr	r1, [sp, #4]
 800459a:	9800      	ldr	r0, [sp, #0]
 800459c:	9e08      	ldr	r6, [sp, #32]
 800459e:	321a      	adds	r2, #26
 80045a0:	47b0      	blx	r6
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	d0e6      	beq.n	8004574 <_printf_common+0xa8>
 80045a6:	3701      	adds	r7, #1
 80045a8:	e7d1      	b.n	800454e <_printf_common+0x82>
	...

080045ac <_printf_i>:
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b08b      	sub	sp, #44	; 0x2c
 80045b0:	9206      	str	r2, [sp, #24]
 80045b2:	000a      	movs	r2, r1
 80045b4:	3243      	adds	r2, #67	; 0x43
 80045b6:	9307      	str	r3, [sp, #28]
 80045b8:	9005      	str	r0, [sp, #20]
 80045ba:	9204      	str	r2, [sp, #16]
 80045bc:	7e0a      	ldrb	r2, [r1, #24]
 80045be:	000c      	movs	r4, r1
 80045c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045c2:	2a78      	cmp	r2, #120	; 0x78
 80045c4:	d807      	bhi.n	80045d6 <_printf_i+0x2a>
 80045c6:	2a62      	cmp	r2, #98	; 0x62
 80045c8:	d809      	bhi.n	80045de <_printf_i+0x32>
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	d100      	bne.n	80045d0 <_printf_i+0x24>
 80045ce:	e0c1      	b.n	8004754 <_printf_i+0x1a8>
 80045d0:	2a58      	cmp	r2, #88	; 0x58
 80045d2:	d100      	bne.n	80045d6 <_printf_i+0x2a>
 80045d4:	e08c      	b.n	80046f0 <_printf_i+0x144>
 80045d6:	0026      	movs	r6, r4
 80045d8:	3642      	adds	r6, #66	; 0x42
 80045da:	7032      	strb	r2, [r6, #0]
 80045dc:	e022      	b.n	8004624 <_printf_i+0x78>
 80045de:	0010      	movs	r0, r2
 80045e0:	3863      	subs	r0, #99	; 0x63
 80045e2:	2815      	cmp	r0, #21
 80045e4:	d8f7      	bhi.n	80045d6 <_printf_i+0x2a>
 80045e6:	f7fb fd8d 	bl	8000104 <__gnu_thumb1_case_shi>
 80045ea:	0016      	.short	0x0016
 80045ec:	fff6001f 	.word	0xfff6001f
 80045f0:	fff6fff6 	.word	0xfff6fff6
 80045f4:	001ffff6 	.word	0x001ffff6
 80045f8:	fff6fff6 	.word	0xfff6fff6
 80045fc:	fff6fff6 	.word	0xfff6fff6
 8004600:	003600a8 	.word	0x003600a8
 8004604:	fff6009a 	.word	0xfff6009a
 8004608:	00b9fff6 	.word	0x00b9fff6
 800460c:	0036fff6 	.word	0x0036fff6
 8004610:	fff6fff6 	.word	0xfff6fff6
 8004614:	009e      	.short	0x009e
 8004616:	0026      	movs	r6, r4
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	3642      	adds	r6, #66	; 0x42
 800461c:	1d11      	adds	r1, r2, #4
 800461e:	6019      	str	r1, [r3, #0]
 8004620:	6813      	ldr	r3, [r2, #0]
 8004622:	7033      	strb	r3, [r6, #0]
 8004624:	2301      	movs	r3, #1
 8004626:	e0a7      	b.n	8004778 <_printf_i+0x1cc>
 8004628:	6808      	ldr	r0, [r1, #0]
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	1d0a      	adds	r2, r1, #4
 800462e:	0605      	lsls	r5, r0, #24
 8004630:	d50b      	bpl.n	800464a <_printf_i+0x9e>
 8004632:	680d      	ldr	r5, [r1, #0]
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	2d00      	cmp	r5, #0
 8004638:	da03      	bge.n	8004642 <_printf_i+0x96>
 800463a:	232d      	movs	r3, #45	; 0x2d
 800463c:	9a04      	ldr	r2, [sp, #16]
 800463e:	426d      	negs	r5, r5
 8004640:	7013      	strb	r3, [r2, #0]
 8004642:	4b61      	ldr	r3, [pc, #388]	; (80047c8 <_printf_i+0x21c>)
 8004644:	270a      	movs	r7, #10
 8004646:	9303      	str	r3, [sp, #12]
 8004648:	e01b      	b.n	8004682 <_printf_i+0xd6>
 800464a:	680d      	ldr	r5, [r1, #0]
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	0641      	lsls	r1, r0, #25
 8004650:	d5f1      	bpl.n	8004636 <_printf_i+0x8a>
 8004652:	b22d      	sxth	r5, r5
 8004654:	e7ef      	b.n	8004636 <_printf_i+0x8a>
 8004656:	680d      	ldr	r5, [r1, #0]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	1d08      	adds	r0, r1, #4
 800465c:	6018      	str	r0, [r3, #0]
 800465e:	062e      	lsls	r6, r5, #24
 8004660:	d501      	bpl.n	8004666 <_printf_i+0xba>
 8004662:	680d      	ldr	r5, [r1, #0]
 8004664:	e003      	b.n	800466e <_printf_i+0xc2>
 8004666:	066d      	lsls	r5, r5, #25
 8004668:	d5fb      	bpl.n	8004662 <_printf_i+0xb6>
 800466a:	680d      	ldr	r5, [r1, #0]
 800466c:	b2ad      	uxth	r5, r5
 800466e:	4b56      	ldr	r3, [pc, #344]	; (80047c8 <_printf_i+0x21c>)
 8004670:	2708      	movs	r7, #8
 8004672:	9303      	str	r3, [sp, #12]
 8004674:	2a6f      	cmp	r2, #111	; 0x6f
 8004676:	d000      	beq.n	800467a <_printf_i+0xce>
 8004678:	3702      	adds	r7, #2
 800467a:	0023      	movs	r3, r4
 800467c:	2200      	movs	r2, #0
 800467e:	3343      	adds	r3, #67	; 0x43
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	6863      	ldr	r3, [r4, #4]
 8004684:	60a3      	str	r3, [r4, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	db03      	blt.n	8004692 <_printf_i+0xe6>
 800468a:	2204      	movs	r2, #4
 800468c:	6821      	ldr	r1, [r4, #0]
 800468e:	4391      	bics	r1, r2
 8004690:	6021      	str	r1, [r4, #0]
 8004692:	2d00      	cmp	r5, #0
 8004694:	d102      	bne.n	800469c <_printf_i+0xf0>
 8004696:	9e04      	ldr	r6, [sp, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00c      	beq.n	80046b6 <_printf_i+0x10a>
 800469c:	9e04      	ldr	r6, [sp, #16]
 800469e:	0028      	movs	r0, r5
 80046a0:	0039      	movs	r1, r7
 80046a2:	f7fb fdbf 	bl	8000224 <__aeabi_uidivmod>
 80046a6:	9b03      	ldr	r3, [sp, #12]
 80046a8:	3e01      	subs	r6, #1
 80046aa:	5c5b      	ldrb	r3, [r3, r1]
 80046ac:	7033      	strb	r3, [r6, #0]
 80046ae:	002b      	movs	r3, r5
 80046b0:	0005      	movs	r5, r0
 80046b2:	429f      	cmp	r7, r3
 80046b4:	d9f3      	bls.n	800469e <_printf_i+0xf2>
 80046b6:	2f08      	cmp	r7, #8
 80046b8:	d109      	bne.n	80046ce <_printf_i+0x122>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	07db      	lsls	r3, r3, #31
 80046be:	d506      	bpl.n	80046ce <_printf_i+0x122>
 80046c0:	6863      	ldr	r3, [r4, #4]
 80046c2:	6922      	ldr	r2, [r4, #16]
 80046c4:	4293      	cmp	r3, r2
 80046c6:	dc02      	bgt.n	80046ce <_printf_i+0x122>
 80046c8:	2330      	movs	r3, #48	; 0x30
 80046ca:	3e01      	subs	r6, #1
 80046cc:	7033      	strb	r3, [r6, #0]
 80046ce:	9b04      	ldr	r3, [sp, #16]
 80046d0:	1b9b      	subs	r3, r3, r6
 80046d2:	6123      	str	r3, [r4, #16]
 80046d4:	9b07      	ldr	r3, [sp, #28]
 80046d6:	0021      	movs	r1, r4
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	9805      	ldr	r0, [sp, #20]
 80046dc:	9b06      	ldr	r3, [sp, #24]
 80046de:	aa09      	add	r2, sp, #36	; 0x24
 80046e0:	f7ff fef4 	bl	80044cc <_printf_common>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d14c      	bne.n	8004782 <_printf_i+0x1d6>
 80046e8:	2001      	movs	r0, #1
 80046ea:	4240      	negs	r0, r0
 80046ec:	b00b      	add	sp, #44	; 0x2c
 80046ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f0:	3145      	adds	r1, #69	; 0x45
 80046f2:	700a      	strb	r2, [r1, #0]
 80046f4:	4a34      	ldr	r2, [pc, #208]	; (80047c8 <_printf_i+0x21c>)
 80046f6:	9203      	str	r2, [sp, #12]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	6821      	ldr	r1, [r4, #0]
 80046fc:	ca20      	ldmia	r2!, {r5}
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	0608      	lsls	r0, r1, #24
 8004702:	d516      	bpl.n	8004732 <_printf_i+0x186>
 8004704:	07cb      	lsls	r3, r1, #31
 8004706:	d502      	bpl.n	800470e <_printf_i+0x162>
 8004708:	2320      	movs	r3, #32
 800470a:	4319      	orrs	r1, r3
 800470c:	6021      	str	r1, [r4, #0]
 800470e:	2710      	movs	r7, #16
 8004710:	2d00      	cmp	r5, #0
 8004712:	d1b2      	bne.n	800467a <_printf_i+0xce>
 8004714:	2320      	movs	r3, #32
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	439a      	bics	r2, r3
 800471a:	6022      	str	r2, [r4, #0]
 800471c:	e7ad      	b.n	800467a <_printf_i+0xce>
 800471e:	2220      	movs	r2, #32
 8004720:	6809      	ldr	r1, [r1, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	6022      	str	r2, [r4, #0]
 8004726:	0022      	movs	r2, r4
 8004728:	2178      	movs	r1, #120	; 0x78
 800472a:	3245      	adds	r2, #69	; 0x45
 800472c:	7011      	strb	r1, [r2, #0]
 800472e:	4a27      	ldr	r2, [pc, #156]	; (80047cc <_printf_i+0x220>)
 8004730:	e7e1      	b.n	80046f6 <_printf_i+0x14a>
 8004732:	0648      	lsls	r0, r1, #25
 8004734:	d5e6      	bpl.n	8004704 <_printf_i+0x158>
 8004736:	b2ad      	uxth	r5, r5
 8004738:	e7e4      	b.n	8004704 <_printf_i+0x158>
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	680d      	ldr	r5, [r1, #0]
 800473e:	1d10      	adds	r0, r2, #4
 8004740:	6949      	ldr	r1, [r1, #20]
 8004742:	6018      	str	r0, [r3, #0]
 8004744:	6813      	ldr	r3, [r2, #0]
 8004746:	062e      	lsls	r6, r5, #24
 8004748:	d501      	bpl.n	800474e <_printf_i+0x1a2>
 800474a:	6019      	str	r1, [r3, #0]
 800474c:	e002      	b.n	8004754 <_printf_i+0x1a8>
 800474e:	066d      	lsls	r5, r5, #25
 8004750:	d5fb      	bpl.n	800474a <_printf_i+0x19e>
 8004752:	8019      	strh	r1, [r3, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	9e04      	ldr	r6, [sp, #16]
 8004758:	6123      	str	r3, [r4, #16]
 800475a:	e7bb      	b.n	80046d4 <_printf_i+0x128>
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	1d11      	adds	r1, r2, #4
 8004760:	6019      	str	r1, [r3, #0]
 8004762:	6816      	ldr	r6, [r2, #0]
 8004764:	2100      	movs	r1, #0
 8004766:	0030      	movs	r0, r6
 8004768:	6862      	ldr	r2, [r4, #4]
 800476a:	f000 f831 	bl	80047d0 <memchr>
 800476e:	2800      	cmp	r0, #0
 8004770:	d001      	beq.n	8004776 <_printf_i+0x1ca>
 8004772:	1b80      	subs	r0, r0, r6
 8004774:	6060      	str	r0, [r4, #4]
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	6123      	str	r3, [r4, #16]
 800477a:	2300      	movs	r3, #0
 800477c:	9a04      	ldr	r2, [sp, #16]
 800477e:	7013      	strb	r3, [r2, #0]
 8004780:	e7a8      	b.n	80046d4 <_printf_i+0x128>
 8004782:	6923      	ldr	r3, [r4, #16]
 8004784:	0032      	movs	r2, r6
 8004786:	9906      	ldr	r1, [sp, #24]
 8004788:	9805      	ldr	r0, [sp, #20]
 800478a:	9d07      	ldr	r5, [sp, #28]
 800478c:	47a8      	blx	r5
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	d0aa      	beq.n	80046e8 <_printf_i+0x13c>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	079b      	lsls	r3, r3, #30
 8004796:	d415      	bmi.n	80047c4 <_printf_i+0x218>
 8004798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800479a:	68e0      	ldr	r0, [r4, #12]
 800479c:	4298      	cmp	r0, r3
 800479e:	daa5      	bge.n	80046ec <_printf_i+0x140>
 80047a0:	0018      	movs	r0, r3
 80047a2:	e7a3      	b.n	80046ec <_printf_i+0x140>
 80047a4:	0022      	movs	r2, r4
 80047a6:	2301      	movs	r3, #1
 80047a8:	9906      	ldr	r1, [sp, #24]
 80047aa:	9805      	ldr	r0, [sp, #20]
 80047ac:	9e07      	ldr	r6, [sp, #28]
 80047ae:	3219      	adds	r2, #25
 80047b0:	47b0      	blx	r6
 80047b2:	1c43      	adds	r3, r0, #1
 80047b4:	d098      	beq.n	80046e8 <_printf_i+0x13c>
 80047b6:	3501      	adds	r5, #1
 80047b8:	68e3      	ldr	r3, [r4, #12]
 80047ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	42ab      	cmp	r3, r5
 80047c0:	dcf0      	bgt.n	80047a4 <_printf_i+0x1f8>
 80047c2:	e7e9      	b.n	8004798 <_printf_i+0x1ec>
 80047c4:	2500      	movs	r5, #0
 80047c6:	e7f7      	b.n	80047b8 <_printf_i+0x20c>
 80047c8:	08004bd9 	.word	0x08004bd9
 80047cc:	08004bea 	.word	0x08004bea

080047d0 <memchr>:
 80047d0:	b2c9      	uxtb	r1, r1
 80047d2:	1882      	adds	r2, r0, r2
 80047d4:	4290      	cmp	r0, r2
 80047d6:	d101      	bne.n	80047dc <memchr+0xc>
 80047d8:	2000      	movs	r0, #0
 80047da:	4770      	bx	lr
 80047dc:	7803      	ldrb	r3, [r0, #0]
 80047de:	428b      	cmp	r3, r1
 80047e0:	d0fb      	beq.n	80047da <memchr+0xa>
 80047e2:	3001      	adds	r0, #1
 80047e4:	e7f6      	b.n	80047d4 <memchr+0x4>

080047e6 <memcpy>:
 80047e6:	2300      	movs	r3, #0
 80047e8:	b510      	push	{r4, lr}
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d100      	bne.n	80047f0 <memcpy+0xa>
 80047ee:	bd10      	pop	{r4, pc}
 80047f0:	5ccc      	ldrb	r4, [r1, r3]
 80047f2:	54c4      	strb	r4, [r0, r3]
 80047f4:	3301      	adds	r3, #1
 80047f6:	e7f8      	b.n	80047ea <memcpy+0x4>

080047f8 <memmove>:
 80047f8:	b510      	push	{r4, lr}
 80047fa:	4288      	cmp	r0, r1
 80047fc:	d902      	bls.n	8004804 <memmove+0xc>
 80047fe:	188b      	adds	r3, r1, r2
 8004800:	4298      	cmp	r0, r3
 8004802:	d303      	bcc.n	800480c <memmove+0x14>
 8004804:	2300      	movs	r3, #0
 8004806:	e007      	b.n	8004818 <memmove+0x20>
 8004808:	5c8b      	ldrb	r3, [r1, r2]
 800480a:	5483      	strb	r3, [r0, r2]
 800480c:	3a01      	subs	r2, #1
 800480e:	d2fb      	bcs.n	8004808 <memmove+0x10>
 8004810:	bd10      	pop	{r4, pc}
 8004812:	5ccc      	ldrb	r4, [r1, r3]
 8004814:	54c4      	strb	r4, [r0, r3]
 8004816:	3301      	adds	r3, #1
 8004818:	429a      	cmp	r2, r3
 800481a:	d1fa      	bne.n	8004812 <memmove+0x1a>
 800481c:	e7f8      	b.n	8004810 <memmove+0x18>
	...

08004820 <_free_r>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	0005      	movs	r5, r0
 8004824:	2900      	cmp	r1, #0
 8004826:	d010      	beq.n	800484a <_free_r+0x2a>
 8004828:	1f0c      	subs	r4, r1, #4
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	da00      	bge.n	8004832 <_free_r+0x12>
 8004830:	18e4      	adds	r4, r4, r3
 8004832:	0028      	movs	r0, r5
 8004834:	f000 f918 	bl	8004a68 <__malloc_lock>
 8004838:	4a1d      	ldr	r2, [pc, #116]	; (80048b0 <_free_r+0x90>)
 800483a:	6813      	ldr	r3, [r2, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <_free_r+0x2c>
 8004840:	6063      	str	r3, [r4, #4]
 8004842:	6014      	str	r4, [r2, #0]
 8004844:	0028      	movs	r0, r5
 8004846:	f000 f917 	bl	8004a78 <__malloc_unlock>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	42a3      	cmp	r3, r4
 800484e:	d908      	bls.n	8004862 <_free_r+0x42>
 8004850:	6821      	ldr	r1, [r4, #0]
 8004852:	1860      	adds	r0, r4, r1
 8004854:	4283      	cmp	r3, r0
 8004856:	d1f3      	bne.n	8004840 <_free_r+0x20>
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	1841      	adds	r1, r0, r1
 800485e:	6021      	str	r1, [r4, #0]
 8004860:	e7ee      	b.n	8004840 <_free_r+0x20>
 8004862:	001a      	movs	r2, r3
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <_free_r+0x4e>
 800486a:	42a3      	cmp	r3, r4
 800486c:	d9f9      	bls.n	8004862 <_free_r+0x42>
 800486e:	6811      	ldr	r1, [r2, #0]
 8004870:	1850      	adds	r0, r2, r1
 8004872:	42a0      	cmp	r0, r4
 8004874:	d10b      	bne.n	800488e <_free_r+0x6e>
 8004876:	6820      	ldr	r0, [r4, #0]
 8004878:	1809      	adds	r1, r1, r0
 800487a:	1850      	adds	r0, r2, r1
 800487c:	6011      	str	r1, [r2, #0]
 800487e:	4283      	cmp	r3, r0
 8004880:	d1e0      	bne.n	8004844 <_free_r+0x24>
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	1841      	adds	r1, r0, r1
 8004888:	6011      	str	r1, [r2, #0]
 800488a:	6053      	str	r3, [r2, #4]
 800488c:	e7da      	b.n	8004844 <_free_r+0x24>
 800488e:	42a0      	cmp	r0, r4
 8004890:	d902      	bls.n	8004898 <_free_r+0x78>
 8004892:	230c      	movs	r3, #12
 8004894:	602b      	str	r3, [r5, #0]
 8004896:	e7d5      	b.n	8004844 <_free_r+0x24>
 8004898:	6821      	ldr	r1, [r4, #0]
 800489a:	1860      	adds	r0, r4, r1
 800489c:	4283      	cmp	r3, r0
 800489e:	d103      	bne.n	80048a8 <_free_r+0x88>
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	1841      	adds	r1, r0, r1
 80048a6:	6021      	str	r1, [r4, #0]
 80048a8:	6063      	str	r3, [r4, #4]
 80048aa:	6054      	str	r4, [r2, #4]
 80048ac:	e7ca      	b.n	8004844 <_free_r+0x24>
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	20000170 	.word	0x20000170

080048b4 <sbrk_aligned>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	4e0f      	ldr	r6, [pc, #60]	; (80048f4 <sbrk_aligned+0x40>)
 80048b8:	000d      	movs	r5, r1
 80048ba:	6831      	ldr	r1, [r6, #0]
 80048bc:	0004      	movs	r4, r0
 80048be:	2900      	cmp	r1, #0
 80048c0:	d102      	bne.n	80048c8 <sbrk_aligned+0x14>
 80048c2:	f000 f8bf 	bl	8004a44 <_sbrk_r>
 80048c6:	6030      	str	r0, [r6, #0]
 80048c8:	0029      	movs	r1, r5
 80048ca:	0020      	movs	r0, r4
 80048cc:	f000 f8ba 	bl	8004a44 <_sbrk_r>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d00a      	beq.n	80048ea <sbrk_aligned+0x36>
 80048d4:	2303      	movs	r3, #3
 80048d6:	1cc5      	adds	r5, r0, #3
 80048d8:	439d      	bics	r5, r3
 80048da:	42a8      	cmp	r0, r5
 80048dc:	d007      	beq.n	80048ee <sbrk_aligned+0x3a>
 80048de:	1a29      	subs	r1, r5, r0
 80048e0:	0020      	movs	r0, r4
 80048e2:	f000 f8af 	bl	8004a44 <_sbrk_r>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	d101      	bne.n	80048ee <sbrk_aligned+0x3a>
 80048ea:	2501      	movs	r5, #1
 80048ec:	426d      	negs	r5, r5
 80048ee:	0028      	movs	r0, r5
 80048f0:	bd70      	pop	{r4, r5, r6, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	20000174 	.word	0x20000174

080048f8 <_malloc_r>:
 80048f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048fa:	2203      	movs	r2, #3
 80048fc:	1ccb      	adds	r3, r1, #3
 80048fe:	4393      	bics	r3, r2
 8004900:	3308      	adds	r3, #8
 8004902:	0006      	movs	r6, r0
 8004904:	001f      	movs	r7, r3
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d232      	bcs.n	8004970 <_malloc_r+0x78>
 800490a:	270c      	movs	r7, #12
 800490c:	42b9      	cmp	r1, r7
 800490e:	d831      	bhi.n	8004974 <_malloc_r+0x7c>
 8004910:	0030      	movs	r0, r6
 8004912:	f000 f8a9 	bl	8004a68 <__malloc_lock>
 8004916:	4d32      	ldr	r5, [pc, #200]	; (80049e0 <_malloc_r+0xe8>)
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	001c      	movs	r4, r3
 800491c:	2c00      	cmp	r4, #0
 800491e:	d12e      	bne.n	800497e <_malloc_r+0x86>
 8004920:	0039      	movs	r1, r7
 8004922:	0030      	movs	r0, r6
 8004924:	f7ff ffc6 	bl	80048b4 <sbrk_aligned>
 8004928:	0004      	movs	r4, r0
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d11e      	bne.n	800496c <_malloc_r+0x74>
 800492e:	682c      	ldr	r4, [r5, #0]
 8004930:	0025      	movs	r5, r4
 8004932:	2d00      	cmp	r5, #0
 8004934:	d14a      	bne.n	80049cc <_malloc_r+0xd4>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	0029      	movs	r1, r5
 800493a:	18e3      	adds	r3, r4, r3
 800493c:	0030      	movs	r0, r6
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	f000 f880 	bl	8004a44 <_sbrk_r>
 8004944:	9b01      	ldr	r3, [sp, #4]
 8004946:	4283      	cmp	r3, r0
 8004948:	d143      	bne.n	80049d2 <_malloc_r+0xda>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	3703      	adds	r7, #3
 800494e:	1aff      	subs	r7, r7, r3
 8004950:	2303      	movs	r3, #3
 8004952:	439f      	bics	r7, r3
 8004954:	3708      	adds	r7, #8
 8004956:	2f0c      	cmp	r7, #12
 8004958:	d200      	bcs.n	800495c <_malloc_r+0x64>
 800495a:	270c      	movs	r7, #12
 800495c:	0039      	movs	r1, r7
 800495e:	0030      	movs	r0, r6
 8004960:	f7ff ffa8 	bl	80048b4 <sbrk_aligned>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d034      	beq.n	80049d2 <_malloc_r+0xda>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	19df      	adds	r7, r3, r7
 800496c:	6027      	str	r7, [r4, #0]
 800496e:	e013      	b.n	8004998 <_malloc_r+0xa0>
 8004970:	2b00      	cmp	r3, #0
 8004972:	dacb      	bge.n	800490c <_malloc_r+0x14>
 8004974:	230c      	movs	r3, #12
 8004976:	2500      	movs	r5, #0
 8004978:	6033      	str	r3, [r6, #0]
 800497a:	0028      	movs	r0, r5
 800497c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	1bd1      	subs	r1, r2, r7
 8004982:	d420      	bmi.n	80049c6 <_malloc_r+0xce>
 8004984:	290b      	cmp	r1, #11
 8004986:	d917      	bls.n	80049b8 <_malloc_r+0xc0>
 8004988:	19e2      	adds	r2, r4, r7
 800498a:	6027      	str	r7, [r4, #0]
 800498c:	42a3      	cmp	r3, r4
 800498e:	d111      	bne.n	80049b4 <_malloc_r+0xbc>
 8004990:	602a      	str	r2, [r5, #0]
 8004992:	6863      	ldr	r3, [r4, #4]
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	6053      	str	r3, [r2, #4]
 8004998:	0030      	movs	r0, r6
 800499a:	0025      	movs	r5, r4
 800499c:	f000 f86c 	bl	8004a78 <__malloc_unlock>
 80049a0:	2207      	movs	r2, #7
 80049a2:	350b      	adds	r5, #11
 80049a4:	1d23      	adds	r3, r4, #4
 80049a6:	4395      	bics	r5, r2
 80049a8:	1aea      	subs	r2, r5, r3
 80049aa:	429d      	cmp	r5, r3
 80049ac:	d0e5      	beq.n	800497a <_malloc_r+0x82>
 80049ae:	1b5b      	subs	r3, r3, r5
 80049b0:	50a3      	str	r3, [r4, r2]
 80049b2:	e7e2      	b.n	800497a <_malloc_r+0x82>
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	e7ec      	b.n	8004992 <_malloc_r+0x9a>
 80049b8:	6862      	ldr	r2, [r4, #4]
 80049ba:	42a3      	cmp	r3, r4
 80049bc:	d101      	bne.n	80049c2 <_malloc_r+0xca>
 80049be:	602a      	str	r2, [r5, #0]
 80049c0:	e7ea      	b.n	8004998 <_malloc_r+0xa0>
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	e7e8      	b.n	8004998 <_malloc_r+0xa0>
 80049c6:	0023      	movs	r3, r4
 80049c8:	6864      	ldr	r4, [r4, #4]
 80049ca:	e7a7      	b.n	800491c <_malloc_r+0x24>
 80049cc:	002c      	movs	r4, r5
 80049ce:	686d      	ldr	r5, [r5, #4]
 80049d0:	e7af      	b.n	8004932 <_malloc_r+0x3a>
 80049d2:	230c      	movs	r3, #12
 80049d4:	0030      	movs	r0, r6
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	f000 f84e 	bl	8004a78 <__malloc_unlock>
 80049dc:	e7cd      	b.n	800497a <_malloc_r+0x82>
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	20000170 	.word	0x20000170

080049e4 <_realloc_r>:
 80049e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049e6:	0007      	movs	r7, r0
 80049e8:	000e      	movs	r6, r1
 80049ea:	0014      	movs	r4, r2
 80049ec:	2900      	cmp	r1, #0
 80049ee:	d105      	bne.n	80049fc <_realloc_r+0x18>
 80049f0:	0011      	movs	r1, r2
 80049f2:	f7ff ff81 	bl	80048f8 <_malloc_r>
 80049f6:	0005      	movs	r5, r0
 80049f8:	0028      	movs	r0, r5
 80049fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049fc:	2a00      	cmp	r2, #0
 80049fe:	d103      	bne.n	8004a08 <_realloc_r+0x24>
 8004a00:	f7ff ff0e 	bl	8004820 <_free_r>
 8004a04:	0025      	movs	r5, r4
 8004a06:	e7f7      	b.n	80049f8 <_realloc_r+0x14>
 8004a08:	f000 f83e 	bl	8004a88 <_malloc_usable_size_r>
 8004a0c:	9001      	str	r0, [sp, #4]
 8004a0e:	4284      	cmp	r4, r0
 8004a10:	d803      	bhi.n	8004a1a <_realloc_r+0x36>
 8004a12:	0035      	movs	r5, r6
 8004a14:	0843      	lsrs	r3, r0, #1
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	d3ee      	bcc.n	80049f8 <_realloc_r+0x14>
 8004a1a:	0021      	movs	r1, r4
 8004a1c:	0038      	movs	r0, r7
 8004a1e:	f7ff ff6b 	bl	80048f8 <_malloc_r>
 8004a22:	1e05      	subs	r5, r0, #0
 8004a24:	d0e8      	beq.n	80049f8 <_realloc_r+0x14>
 8004a26:	9b01      	ldr	r3, [sp, #4]
 8004a28:	0022      	movs	r2, r4
 8004a2a:	429c      	cmp	r4, r3
 8004a2c:	d900      	bls.n	8004a30 <_realloc_r+0x4c>
 8004a2e:	001a      	movs	r2, r3
 8004a30:	0031      	movs	r1, r6
 8004a32:	0028      	movs	r0, r5
 8004a34:	f7ff fed7 	bl	80047e6 <memcpy>
 8004a38:	0031      	movs	r1, r6
 8004a3a:	0038      	movs	r0, r7
 8004a3c:	f7ff fef0 	bl	8004820 <_free_r>
 8004a40:	e7da      	b.n	80049f8 <_realloc_r+0x14>
	...

08004a44 <_sbrk_r>:
 8004a44:	2300      	movs	r3, #0
 8004a46:	b570      	push	{r4, r5, r6, lr}
 8004a48:	4d06      	ldr	r5, [pc, #24]	; (8004a64 <_sbrk_r+0x20>)
 8004a4a:	0004      	movs	r4, r0
 8004a4c:	0008      	movs	r0, r1
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	f7fc fbbe 	bl	80011d0 <_sbrk>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d103      	bne.n	8004a60 <_sbrk_r+0x1c>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d000      	beq.n	8004a60 <_sbrk_r+0x1c>
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	20000178 	.word	0x20000178

08004a68 <__malloc_lock>:
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	4802      	ldr	r0, [pc, #8]	; (8004a74 <__malloc_lock+0xc>)
 8004a6c:	f000 f814 	bl	8004a98 <__retarget_lock_acquire_recursive>
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	2000017c 	.word	0x2000017c

08004a78 <__malloc_unlock>:
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	4802      	ldr	r0, [pc, #8]	; (8004a84 <__malloc_unlock+0xc>)
 8004a7c:	f000 f80d 	bl	8004a9a <__retarget_lock_release_recursive>
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	2000017c 	.word	0x2000017c

08004a88 <_malloc_usable_size_r>:
 8004a88:	1f0b      	subs	r3, r1, #4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	1f18      	subs	r0, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	da01      	bge.n	8004a96 <_malloc_usable_size_r+0xe>
 8004a92:	580b      	ldr	r3, [r1, r0]
 8004a94:	18c0      	adds	r0, r0, r3
 8004a96:	4770      	bx	lr

08004a98 <__retarget_lock_acquire_recursive>:
 8004a98:	4770      	bx	lr

08004a9a <__retarget_lock_release_recursive>:
 8004a9a:	4770      	bx	lr

08004a9c <_init>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr

08004aa8 <_fini>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr
