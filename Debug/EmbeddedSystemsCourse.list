
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047ec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080048a8  080048a8  000148a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004930  08004930  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004938  08004938  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000020  08004960  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08004960  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c874  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd9  00000000  00000000  0002c8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002e598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002eee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b40e  00000000  00000000  0002f790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdcd  00000000  00000000  0004ab9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b051b  00000000  00000000  0005696b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002050  00000000  00000000  00106ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000020 	.word	0x20000020
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004890 	.word	0x08004890

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000024 	.word	0x20000024
 8000100:	08004890 	.word	0x08004890

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_RxCpltCallback>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
/*Receiving data interrupt callback
 * Once all the 5 bytes have been received, an interrupt will trigger and the RX complete callback will be called.*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_UART_RxCpltCallback+0x30>)
 8000628:	429a      	cmp	r2, r3
 800062a:	d10b      	bne.n	8000644 <HAL_UART_RxCpltCallback+0x28>
		/* The interrupt is disabled after each trigger, so we need to call the Receive_IT function again at the end of the callback.*/
		HAL_UART_Receive_IT(&huart2, rxData, RX_DATA_BUFFER);
 800062c:	4908      	ldr	r1, [pc, #32]	; (8000650 <HAL_UART_RxCpltCallback+0x34>)
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_UART_RxCpltCallback+0x30>)
 8000630:	2205      	movs	r2, #5
 8000632:	0018      	movs	r0, r3
 8000634:	f002 f8e6 	bl	8002804 <HAL_UART_Receive_IT>
		/*Transmitting OK message after receiving 5 bytes */
		HAL_UART_Transmit(&huart2, txData, sizeof(txData), 200);
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <HAL_UART_RxCpltCallback+0x38>)
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <HAL_UART_RxCpltCallback+0x30>)
 800063c:	23c8      	movs	r3, #200	; 0xc8
 800063e:	2214      	movs	r2, #20
 8000640:	f002 f834 	bl	80026ac <HAL_UART_Transmit>
	}
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000003c 	.word	0x2000003c
 8000650:	2000012c 	.word	0x2000012c
 8000654:	20000000 	.word	0x20000000

08000658 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065c:	f000 fa56 	bl	8000b0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000660:	f000 f820 	bl	80006a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000664:	f000 f8e8 	bl	8000838 <MX_GPIO_Init>
	MX_DMA_Init();
 8000668:	f000 f8c8 	bl	80007fc <MX_DMA_Init>
	MX_USART2_UART_Init();
 800066c:	f000 f878 	bl	8000760 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	/*Received data via UART2 in Interrupt mode*/
	HAL_UART_Receive_IT(&huart2, rxData, RX_DATA_BUFFER);
 8000670:	4909      	ldr	r1, [pc, #36]	; (8000698 <main+0x40>)
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <main+0x44>)
 8000674:	2205      	movs	r2, #5
 8000676:	0018      	movs	r0, r3
 8000678:	f002 f8c4 	bl	8002804 <HAL_UART_Receive_IT>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/*Toggle PC13 LED on board*/
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	019b      	lsls	r3, r3, #6
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <main+0x48>)
 8000682:	0019      	movs	r1, r3
 8000684:	0010      	movs	r0, r2
 8000686:	f001 f80e 	bl	80016a6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800068a:	23fa      	movs	r3, #250	; 0xfa
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fac2 	bl	8000c18 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000694:	e7f2      	b.n	800067c <main+0x24>
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	2000012c 	.word	0x2000012c
 800069c:	2000003c 	.word	0x2000003c
 80006a0:	50000800 	.word	0x50000800

080006a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b095      	sub	sp, #84	; 0x54
 80006a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006aa:	2414      	movs	r4, #20
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	233c      	movs	r3, #60	; 0x3c
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f004 f8e3 	bl	8004880 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	2310      	movs	r3, #16
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f004 f8dc 	bl	8004880 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f805 	bl	80016dc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2202      	movs	r2, #2
 80006d6:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	0052      	lsls	r2, r2, #1
 80006de:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e0:	0021      	movs	r1, r4
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2240      	movs	r2, #64	; 0x40
 80006ec:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2202      	movs	r2, #2
 80006f2:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 9;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2209      	movs	r2, #9
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	0292      	lsls	r2, r2, #10
 800070c:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0492      	lsls	r2, r2, #18
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	05d2      	lsls	r2, r2, #23
 800071c:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800071e:	187b      	adds	r3, r7, r1
 8000720:	0018      	movs	r0, r3
 8000722:	f001 f827 	bl	8001774 <HAL_RCC_OscConfig>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x8a>
		Error_Handler();
 800072a:	f000 f8cb 	bl	80008c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2207      	movs	r2, #7
 8000732:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2202      	movs	r2, #2
 8000738:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2101      	movs	r1, #1
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fb72 	bl	8001e34 <HAL_RCC_ClockConfig>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xb4>
		Error_Handler();
 8000754:	f000 f8b6 	bl	80008c4 <Error_Handler>
	}
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b015      	add	sp, #84	; 0x54
 800075e:	bd90      	pop	{r4, r7, pc}

08000760 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000766:	4a24      	ldr	r2, [pc, #144]	; (80007f8 <MX_USART2_UART_Init+0x98>)
 8000768:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800076c:	22e1      	movs	r2, #225	; 0xe1
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 ff28 	bl	8002600 <HAL_UART_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 80007b4:	f000 f886 	bl	80008c4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	0018      	movs	r0, r3
 80007be:	f003 ff5b 	bl	8004678 <HAL_UARTEx_SetTxFifoThreshold>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80007c6:	f000 f87d 	bl	80008c4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f003 ff92 	bl	80046f8 <HAL_UARTEx_SetRxFifoThreshold>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80007d8:	f000 f874 	bl	80008c4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f003 ff10 	bl	8004604 <HAL_UARTEx_DisableFifoMode>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80007e8:	f000 f86c 	bl	80008c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	2000003c 	.word	0x2000003c
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_DMA_Init+0x38>)
 8000804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_DMA_Init+0x38>)
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	639a      	str	r2, [r3, #56]	; 0x38
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_DMA_Init+0x38>)
 8000810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2009      	movs	r0, #9
 8000820:	f000 fae0 	bl	8000de4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000824:	2009      	movs	r0, #9
 8000826:	f000 faf2 	bl	8000e0e <HAL_NVIC_EnableIRQ>

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40021000 	.word	0x40021000

08000838 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800083e:	240c      	movs	r4, #12
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	2314      	movs	r3, #20
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f004 f819 	bl	8004880 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_GPIO_Init+0x84>)
 8000850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_GPIO_Init+0x84>)
 8000854:	2104      	movs	r1, #4
 8000856:	430a      	orrs	r2, r1
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_GPIO_Init+0x84>)
 800085c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085e:	2204      	movs	r2, #4
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_GPIO_Init+0x84>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_GPIO_Init+0x84>)
 800086c:	2101      	movs	r1, #1
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0x84>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000876:	2201      	movs	r2, #1
 8000878:	4013      	ands	r3, r2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	019b      	lsls	r3, r3, #6
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <MX_GPIO_Init+0x88>)
 8000884:	2200      	movs	r2, #0
 8000886:	0019      	movs	r1, r3
 8000888:	f000 fef0 	bl	800166c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0192      	lsls	r2, r2, #6
 8000892:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2201      	movs	r2, #1
 8000898:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <MX_GPIO_Init+0x88>)
 80008aa:	0019      	movs	r1, r3
 80008ac:	0010      	movs	r0, r2
 80008ae:	f000 fd71 	bl	8001394 <HAL_GPIO_Init>

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b009      	add	sp, #36	; 0x24
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40021000 	.word	0x40021000
 80008c0:	50000800 	.word	0x50000800

080008c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_MspInit+0x4c>)
 80008d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_MspInit+0x4c>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_MspInit+0x4c>)
 80008f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_MspInit+0x4c>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0549      	lsls	r1, r1, #21
 80008f8:	430a      	orrs	r2, r1
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_MspInit+0x4c>)
 80008fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	055b      	lsls	r3, r3, #21
 8000904:	4013      	ands	r3, r2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800090a:	23c0      	movs	r3, #192	; 0xc0
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	0018      	movs	r0, r3
 8000910:	f000 f9a6 	bl	8000c60 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b09d      	sub	sp, #116	; 0x74
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	235c      	movs	r3, #92	; 0x5c
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	0018      	movs	r0, r3
 800092e:	2314      	movs	r3, #20
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f003 ffa4 	bl	8004880 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	2410      	movs	r4, #16
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	234c      	movs	r3, #76	; 0x4c
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f003 ff9c 	bl	8004880 <memset>
  if(huart->Instance==USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a3b      	ldr	r2, [pc, #236]	; (8000a3c <HAL_UART_MspInit+0x11c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d16f      	bne.n	8000a32 <HAL_UART_MspInit+0x112>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2202      	movs	r2, #2
 8000956:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095e:	193b      	adds	r3, r7, r4
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fc11 	bl	8002188 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800096a:	f7ff ffab 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096e:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <HAL_UART_MspInit+0x120>)
 8000970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000972:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <HAL_UART_MspInit+0x120>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0289      	lsls	r1, r1, #10
 8000978:	430a      	orrs	r2, r1
 800097a:	63da      	str	r2, [r3, #60]	; 0x3c
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <HAL_UART_MspInit+0x120>)
 800097e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	029b      	lsls	r3, r3, #10
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <HAL_UART_MspInit+0x120>)
 800098c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <HAL_UART_MspInit+0x120>)
 8000990:	2101      	movs	r1, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <HAL_UART_MspInit+0x120>)
 8000998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099a:	2201      	movs	r2, #1
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a2:	215c      	movs	r1, #92	; 0x5c
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	220c      	movs	r2, #12
 80009a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2202      	movs	r2, #2
 80009ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2201      	movs	r2, #1
 80009c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	187a      	adds	r2, r7, r1
 80009c4:	23a0      	movs	r3, #160	; 0xa0
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fce2 	bl	8001394 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_UART_MspInit+0x124>)
 80009d2:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <HAL_UART_MspInit+0x128>)
 80009d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0x124>)
 80009d8:	2235      	movs	r2, #53	; 0x35
 80009da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_UART_MspInit+0x124>)
 80009de:	2210      	movs	r2, #16
 80009e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_UART_MspInit+0x124>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_UART_MspInit+0x124>)
 80009ea:	2280      	movs	r2, #128	; 0x80
 80009ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0x124>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <HAL_UART_MspInit+0x124>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_UART_MspInit+0x124>)
 80009fc:	2220      	movs	r2, #32
 80009fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_UART_MspInit+0x124>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_UART_MspInit+0x124>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fa1d 	bl	8000e48 <HAL_DMA_Init>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000a12:	f7ff ff57 	bl	80008c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_UART_MspInit+0x124>)
 8000a1a:	679a      	str	r2, [r3, #120]	; 0x78
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_UART_MspInit+0x124>)
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	201c      	movs	r0, #28
 8000a28:	f000 f9dc 	bl	8000de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000a2c:	201c      	movs	r0, #28
 8000a2e:	f000 f9ee 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b01d      	add	sp, #116	; 0x74
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	40004400 	.word	0x40004400
 8000a40:	40021000 	.word	0x40021000
 8000a44:	200000cc 	.word	0x200000cc
 8000a48:	40020008 	.word	0x40020008

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f8b6 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <DMA1_Channel1_IRQHandler+0x14>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fb54 	bl	8001130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	200000cc 	.word	0x200000cc

08000a94 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <USART2_LPUART2_IRQHandler+0x14>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 ff22 	bl	80028e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	2000003c 	.word	0x2000003c

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000abc:	f7ff fff6 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae6:	f003 fea7 	bl	8004838 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000aea:	f7ff fdb5 	bl	8000658 <main>

08000aee <LoopForever>:

LoopForever:
  b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000afc:	08004940 	.word	0x08004940
  ldr r2, =_sbss
 8000b00:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b04:	20000138 	.word	0x20000138

08000b08 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_COMP_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_Init+0x3c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Init+0x3c>)
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	0049      	lsls	r1, r1, #1
 8000b22:	430a      	orrs	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 f810 	bl	8000b4c <HAL_InitTick>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e001      	b.n	8000b3c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff feca 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b54:	230f      	movs	r3, #15
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_InitTick+0x88>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d02b      	beq.n	8000bbc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_InitTick+0x8c>)
 8000b66:	681c      	ldr	r4, [r3, #0]
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_InitTick+0x88>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	23fa      	movs	r3, #250	; 0xfa
 8000b70:	0098      	lsls	r0, r3, #2
 8000b72:	f7ff fac7 	bl	8000104 <__udivsi3>
 8000b76:	0003      	movs	r3, r0
 8000b78:	0019      	movs	r1, r3
 8000b7a:	0020      	movs	r0, r4
 8000b7c:	f7ff fac2 	bl	8000104 <__udivsi3>
 8000b80:	0003      	movs	r3, r0
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f953 	bl	8000e2e <HAL_SYSTICK_Config>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d112      	bne.n	8000bb2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d80a      	bhi.n	8000ba8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f922 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_InitTick+0x90>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e00d      	b.n	8000bc4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ba8:	230f      	movs	r3, #15
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e008      	b.n	8000bc4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e003      	b.n	8000bc4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	781b      	ldrb	r3, [r3, #0]
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b005      	add	sp, #20
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	2000001c 	.word	0x2000001c
 8000bd8:	20000014 	.word	0x20000014
 8000bdc:	20000018 	.word	0x20000018

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	001a      	movs	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	18d2      	adds	r2, r2, r3
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	2000001c 	.word	0x2000001c
 8000c00:	20000134 	.word	0x20000134

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	20000134 	.word	0x20000134

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	0003      	movs	r3, r0
 8000c26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	001a      	movs	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	189b      	adds	r3, r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	0002      	movs	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	2000001c 	.word	0x2000001c

08000c60 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	0019      	movs	r1, r3
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40010000 	.word	0x40010000
 8000c88:	fffff9ff 	.word	0xfffff9ff

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	0002      	movs	r2, r0
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c9e:	d809      	bhi.n	8000cb4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	231f      	movs	r3, #31
 8000ca8:	401a      	ands	r2, r3
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_EnableIRQ+0x30>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	4091      	lsls	r1, r2
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8000cd4:	d828      	bhi.n	8000d28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <__NVIC_SetPriority+0xd4>)
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	33c0      	adds	r3, #192	; 0xc0
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	589b      	ldr	r3, [r3, r2]
 8000ce6:	1dfa      	adds	r2, r7, #7
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	0011      	movs	r1, r2
 8000cec:	2203      	movs	r2, #3
 8000cee:	400a      	ands	r2, r1
 8000cf0:	00d2      	lsls	r2, r2, #3
 8000cf2:	21ff      	movs	r1, #255	; 0xff
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	22ff      	movs	r2, #255	; 0xff
 8000d04:	401a      	ands	r2, r3
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	4003      	ands	r3, r0
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	481f      	ldr	r0, [pc, #124]	; (8000d94 <__NVIC_SetPriority+0xd4>)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	33c0      	adds	r3, #192	; 0xc0
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d26:	e031      	b.n	8000d8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <__NVIC_SetPriority+0xd8>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0019      	movs	r1, r3
 8000d30:	230f      	movs	r3, #15
 8000d32:	400b      	ands	r3, r1
 8000d34:	3b08      	subs	r3, #8
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3306      	adds	r3, #6
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	3304      	adds	r3, #4
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	1dfa      	adds	r2, r7, #7
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	0011      	movs	r1, r2
 8000d48:	2203      	movs	r2, #3
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	00d2      	lsls	r2, r2, #3
 8000d4e:	21ff      	movs	r1, #255	; 0xff
 8000d50:	4091      	lsls	r1, r2
 8000d52:	000a      	movs	r2, r1
 8000d54:	43d2      	mvns	r2, r2
 8000d56:	401a      	ands	r2, r3
 8000d58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	22ff      	movs	r2, #255	; 0xff
 8000d60:	401a      	ands	r2, r3
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0018      	movs	r0, r3
 8000d68:	2303      	movs	r3, #3
 8000d6a:	4003      	ands	r3, r0
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <__NVIC_SetPriority+0xd8>)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	001c      	movs	r4, r3
 8000d78:	230f      	movs	r3, #15
 8000d7a:	4023      	ands	r3, r4
 8000d7c:	3b08      	subs	r3, #8
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	430a      	orrs	r2, r1
 8000d82:	3306      	adds	r3, #6
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	18c3      	adds	r3, r0, r3
 8000d88:	3304      	adds	r3, #4
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b003      	add	sp, #12
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	045b      	lsls	r3, r3, #17
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d301      	bcc.n	8000db4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db0:	2301      	movs	r3, #1
 8000db2:	e010      	b.n	8000dd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <SysTick_Config+0x44>)
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	3a01      	subs	r2, #1
 8000dba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff ff7c 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x44>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x44>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	210f      	movs	r1, #15
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	1c02      	adds	r2, r0, #0
 8000df4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b004      	add	sp, #16
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	0002      	movs	r2, r0
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff ff33 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ffaf 	bl	8000d9c <SysTick_Config>
 8000e3e:	0003      	movs	r3, r0
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e091      	b.n	8000f7e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	001a      	movs	r2, r3
 8000e60:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_DMA_Init+0x140>)
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d810      	bhi.n	8000e88 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <HAL_DMA_Init+0x144>)
 8000e6c:	4694      	mov	ip, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	2114      	movs	r1, #20
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff f946 	bl	8000104 <__udivsi3>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	009a      	lsls	r2, r3, #2
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a43      	ldr	r2, [pc, #268]	; (8000f90 <HAL_DMA_Init+0x148>)
 8000e84:	641a      	str	r2, [r3, #64]	; 0x40
 8000e86:	e00f      	b.n	8000ea8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a41      	ldr	r2, [pc, #260]	; (8000f94 <HAL_DMA_Init+0x14c>)
 8000e8e:	4694      	mov	ip, r2
 8000e90:	4463      	add	r3, ip
 8000e92:	2114      	movs	r1, #20
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff f935 	bl	8000104 <__udivsi3>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	009a      	lsls	r2, r3, #2
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a3c      	ldr	r2, [pc, #240]	; (8000f98 <HAL_DMA_Init+0x150>)
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2225      	movs	r2, #37	; 0x25
 8000eac:	2102      	movs	r1, #2
 8000eae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4938      	ldr	r1, [pc, #224]	; (8000f9c <HAL_DMA_Init+0x154>)
 8000ebc:	400a      	ands	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6819      	ldr	r1, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f000 f9dd 	bl	80012b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	01db      	lsls	r3, r3, #7
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d102      	bne.n	8000f10 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f18:	217f      	movs	r1, #127	; 0x7f
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f26:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d011      	beq.n	8000f54 <HAL_DMA_Init+0x10c>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d80d      	bhi.n	8000f54 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fa06 	bl	800134c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	e008      	b.n	8000f66 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2225      	movs	r2, #37	; 0x25
 8000f70:	2101      	movs	r1, #1
 8000f72:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2224      	movs	r2, #36	; 0x24
 8000f78:	2100      	movs	r1, #0
 8000f7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	40020407 	.word	0x40020407
 8000f8c:	bffdfff8 	.word	0xbffdfff8
 8000f90:	40020000 	.word	0x40020000
 8000f94:	bffdfbf8 	.word	0xbffdfbf8
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	ffff800f 	.word	0xffff800f

08000fa0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e04f      	b.n	8001052 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2225      	movs	r2, #37	; 0x25
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d008      	beq.n	8000fd0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2224      	movs	r2, #36	; 0x24
 8000fc8:	2100      	movs	r1, #0
 8000fca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e040      	b.n	8001052 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	210e      	movs	r1, #14
 8000fdc:	438a      	bics	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fea:	491c      	ldr	r1, [pc, #112]	; (800105c <HAL_DMA_Abort+0xbc>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	221c      	movs	r2, #28
 8001006:	401a      	ands	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	2101      	movs	r1, #1
 800100e:	4091      	lsls	r1, r2
 8001010:	000a      	movs	r2, r1
 8001012:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800101c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00c      	beq.n	8001040 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001030:	490a      	ldr	r1, [pc, #40]	; (800105c <HAL_DMA_Abort+0xbc>)
 8001032:	400a      	ands	r2, r1
 8001034:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800103e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2225      	movs	r2, #37	; 0x25
 8001044:	2101      	movs	r1, #1
 8001046:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	2100      	movs	r1, #0
 800104e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	fffffeff 	.word	0xfffffeff

08001060 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001068:	210f      	movs	r1, #15
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2225      	movs	r2, #37	; 0x25
 8001074:	5c9b      	ldrb	r3, [r3, r2]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d006      	beq.n	800108a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2204      	movs	r2, #4
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e048      	b.n	800111c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	210e      	movs	r1, #14
 8001096:	438a      	bics	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	438a      	bics	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b4:	491d      	ldr	r1, [pc, #116]	; (800112c <HAL_DMA_Abort_IT+0xcc>)
 80010b6:	400a      	ands	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	221c      	movs	r2, #28
 80010c0:	401a      	ands	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	2101      	movs	r1, #1
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00c      	beq.n	80010fa <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ea:	4910      	ldr	r1, [pc, #64]	; (800112c <HAL_DMA_Abort_IT+0xcc>)
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2225      	movs	r2, #37	; 0x25
 80010fe:	2101      	movs	r1, #1
 8001100:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2224      	movs	r2, #36	; 0x24
 8001106:	2100      	movs	r1, #0
 8001108:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	0010      	movs	r0, r2
 800111a:	4798      	blx	r3
    }
  }
  return status;
 800111c:	230f      	movs	r3, #15
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	781b      	ldrb	r3, [r3, #0]
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b004      	add	sp, #16
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	fffffeff 	.word	0xfffffeff

08001130 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	221c      	movs	r2, #28
 800114e:	4013      	ands	r3, r2
 8001150:	2204      	movs	r2, #4
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4013      	ands	r3, r2
 800115a:	d026      	beq.n	80011aa <HAL_DMA_IRQHandler+0x7a>
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2204      	movs	r2, #4
 8001160:	4013      	ands	r3, r2
 8001162:	d022      	beq.n	80011aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2220      	movs	r2, #32
 800116c:	4013      	ands	r3, r2
 800116e:	d107      	bne.n	8001180 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2104      	movs	r1, #4
 800117c:	438a      	bics	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001184:	221c      	movs	r2, #28
 8001186:	401a      	ands	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	2104      	movs	r1, #4
 800118e:	4091      	lsls	r1, r2
 8001190:	000a      	movs	r2, r1
 8001192:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	2b00      	cmp	r3, #0
 800119a:	d100      	bne.n	800119e <HAL_DMA_IRQHandler+0x6e>
 800119c:	e080      	b.n	80012a0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	0010      	movs	r0, r2
 80011a6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80011a8:	e07a      	b.n	80012a0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	221c      	movs	r2, #28
 80011b0:	4013      	ands	r3, r2
 80011b2:	2202      	movs	r2, #2
 80011b4:	409a      	lsls	r2, r3
 80011b6:	0013      	movs	r3, r2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4013      	ands	r3, r2
 80011bc:	d03c      	beq.n	8001238 <HAL_DMA_IRQHandler+0x108>
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2202      	movs	r2, #2
 80011c2:	4013      	ands	r3, r2
 80011c4:	d038      	beq.n	8001238 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2220      	movs	r2, #32
 80011ce:	4013      	ands	r3, r2
 80011d0:	d10b      	bne.n	80011ea <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	210a      	movs	r1, #10
 80011de:	438a      	bics	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2225      	movs	r2, #37	; 0x25
 80011e6:	2101      	movs	r1, #1
 80011e8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	001a      	movs	r2, r3
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <HAL_DMA_IRQHandler+0x17c>)
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d909      	bls.n	800120a <HAL_DMA_IRQHandler+0xda>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	221c      	movs	r2, #28
 80011fc:	401a      	ands	r2, r3
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <HAL_DMA_IRQHandler+0x180>)
 8001200:	2102      	movs	r1, #2
 8001202:	4091      	lsls	r1, r2
 8001204:	000a      	movs	r2, r1
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	e008      	b.n	800121c <HAL_DMA_IRQHandler+0xec>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	221c      	movs	r2, #28
 8001210:	401a      	ands	r2, r3
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_DMA_IRQHandler+0x184>)
 8001214:	2102      	movs	r1, #2
 8001216:	4091      	lsls	r1, r2
 8001218:	000a      	movs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2224      	movs	r2, #36	; 0x24
 8001220:	2100      	movs	r1, #0
 8001222:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d039      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	0010      	movs	r0, r2
 8001234:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001236:	e033      	b.n	80012a0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	221c      	movs	r2, #28
 800123e:	4013      	ands	r3, r2
 8001240:	2208      	movs	r2, #8
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	d02a      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x172>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2208      	movs	r2, #8
 8001250:	4013      	ands	r3, r2
 8001252:	d026      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	210e      	movs	r1, #14
 8001260:	438a      	bics	r2, r1
 8001262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	221c      	movs	r2, #28
 800126a:	401a      	ands	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	2101      	movs	r1, #1
 8001272:	4091      	lsls	r1, r2
 8001274:	000a      	movs	r2, r1
 8001276:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2225      	movs	r2, #37	; 0x25
 8001282:	2101      	movs	r1, #1
 8001284:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2224      	movs	r2, #36	; 0x24
 800128a:	2100      	movs	r1, #0
 800128c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	0010      	movs	r0, r2
 800129e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46c0      	nop			; (mov r8, r8)
}
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40020080 	.word	0x40020080
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020000 	.word	0x40020000

080012b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	001a      	movs	r2, r3
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d814      	bhi.n	80012f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80012d6:	189a      	adds	r2, r3, r2
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	001a      	movs	r2, r3
 80012e2:	23ff      	movs	r3, #255	; 0xff
 80012e4:	4013      	ands	r3, r2
 80012e6:	3b08      	subs	r3, #8
 80012e8:	2114      	movs	r1, #20
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7fe ff0a 	bl	8000104 <__udivsi3>
 80012f0:	0003      	movs	r3, r0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e014      	b.n	8001320 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001300:	189a      	adds	r2, r3, r2
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	001a      	movs	r2, r3
 800130c:	23ff      	movs	r3, #255	; 0xff
 800130e:	4013      	ands	r3, r2
 8001310:	3b08      	subs	r3, #8
 8001312:	2114      	movs	r1, #20
 8001314:	0018      	movs	r0, r3
 8001316:	f7fe fef5 	bl	8000104 <__udivsi3>
 800131a:	0003      	movs	r3, r0
 800131c:	3307      	adds	r3, #7
 800131e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001324:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	221f      	movs	r2, #31
 800132a:	4013      	ands	r3, r2
 800132c:	2201      	movs	r2, #1
 800132e:	409a      	lsls	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b004      	add	sp, #16
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020407 	.word	0x40020407
 8001340:	40020800 	.word	0x40020800
 8001344:	4002081c 	.word	0x4002081c
 8001348:	40020880 	.word	0x40020880

0800134c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	227f      	movs	r2, #127	; 0x7f
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001362:	4694      	mov	ip, r2
 8001364:	4463      	add	r3, ip
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	001a      	movs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001372:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3b01      	subs	r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	4013      	ands	r3, r2
 800137c:	2201      	movs	r2, #1
 800137e:	409a      	lsls	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b004      	add	sp, #16
 800138a:	bd80      	pop	{r7, pc}
 800138c:	1000823f 	.word	0x1000823f
 8001390:	40020940 	.word	0x40020940

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	e14d      	b.n	8001640 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4091      	lsls	r1, r2
 80013ae:	000a      	movs	r2, r1
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <HAL_GPIO_Init+0x28>
 80013ba:	e13e      	b.n	800163a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2203      	movs	r2, #3
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d005      	beq.n	80013d4 <HAL_GPIO_Init+0x40>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2203      	movs	r2, #3
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d130      	bne.n	8001436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	409a      	lsls	r2, r3
 80013e2:	0013      	movs	r3, r2
 80013e4:	43da      	mvns	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140a:	2201      	movs	r2, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	43da      	mvns	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	2201      	movs	r2, #1
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	4013      	ands	r3, r2
 800143e:	2b03      	cmp	r3, #3
 8001440:	d017      	beq.n	8001472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	4013      	ands	r3, r2
 800147a:	2b02      	cmp	r3, #2
 800147c:	d123      	bne.n	80014c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	58d3      	ldr	r3, [r2, r3]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2207      	movs	r2, #7
 8001490:	4013      	ands	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2107      	movs	r1, #7
 80014aa:	400b      	ands	r3, r1
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	6939      	ldr	r1, [r7, #16]
 80014c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	43da      	mvns	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2203      	movs	r2, #3
 80014e4:	401a      	ands	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	029b      	lsls	r3, r3, #10
 8001502:	4013      	ands	r3, r2
 8001504:	d100      	bne.n	8001508 <HAL_GPIO_Init+0x174>
 8001506:	e098      	b.n	800163a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001508:	4a53      	ldr	r2, [pc, #332]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3318      	adds	r3, #24
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	589b      	ldr	r3, [r3, r2]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2203      	movs	r2, #3
 800151a:	4013      	ands	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	220f      	movs	r2, #15
 8001520:	409a      	lsls	r2, r3
 8001522:	0013      	movs	r3, r2
 8001524:	43da      	mvns	r2, r3
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	23a0      	movs	r3, #160	; 0xa0
 8001530:	05db      	lsls	r3, r3, #23
 8001532:	429a      	cmp	r2, r3
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x1d6>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a48      	ldr	r2, [pc, #288]	; (800165c <HAL_GPIO_Init+0x2c8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x1d2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a47      	ldr	r2, [pc, #284]	; (8001660 <HAL_GPIO_Init+0x2cc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x1ce>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a46      	ldr	r2, [pc, #280]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x1ca>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_GPIO_Init+0x2d4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x1c6>
 8001556:	2304      	movs	r3, #4
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x1d8>
 800155a:	2305      	movs	r3, #5
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x1d8>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x1d8>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x1d8>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x1d8>
 800156a:	2300      	movs	r3, #0
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	2103      	movs	r1, #3
 8001570:	400a      	ands	r2, r1
 8001572:	00d2      	lsls	r2, r2, #3
 8001574:	4093      	lsls	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800157c:	4936      	ldr	r1, [pc, #216]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3318      	adds	r3, #24
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43da      	mvns	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	035b      	lsls	r3, r3, #13
 80015a2:	4013      	ands	r3, r2
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43da      	mvns	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	039b      	lsls	r3, r3, #14
 80015cc:	4013      	ands	r3, r2
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 80015e0:	2384      	movs	r3, #132	; 0x84
 80015e2:	58d3      	ldr	r3, [r2, r3]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43da      	mvns	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4013      	ands	r3, r2
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001604:	4914      	ldr	r1, [pc, #80]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 8001606:	2284      	movs	r2, #132	; 0x84
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	58d3      	ldr	r3, [r2, r3]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43da      	mvns	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	025b      	lsls	r3, r3, #9
 8001626:	4013      	ands	r3, r2
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001632:	4909      	ldr	r1, [pc, #36]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	40da      	lsrs	r2, r3
 8001648:	1e13      	subs	r3, r2, #0
 800164a:	d000      	beq.n	800164e <HAL_GPIO_Init+0x2ba>
 800164c:	e6aa      	b.n	80013a4 <HAL_GPIO_Init+0x10>
  }
}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b006      	add	sp, #24
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021800 	.word	0x40021800
 800165c:	50000400 	.word	0x50000400
 8001660:	50000800 	.word	0x50000800
 8001664:	50000c00 	.word	0x50000c00
 8001668:	50001000 	.word	0x50001000

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	0008      	movs	r0, r1
 8001676:	0011      	movs	r1, r2
 8001678:	1cbb      	adds	r3, r7, #2
 800167a:	1c02      	adds	r2, r0, #0
 800167c:	801a      	strh	r2, [r3, #0]
 800167e:	1c7b      	adds	r3, r7, #1
 8001680:	1c0a      	adds	r2, r1, #0
 8001682:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001684:	1c7b      	adds	r3, r7, #1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800168c:	1cbb      	adds	r3, r7, #2
 800168e:	881a      	ldrh	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001694:	e003      	b.n	800169e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001696:	1cbb      	adds	r3, r7, #2
 8001698:	881a      	ldrh	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	000a      	movs	r2, r1
 80016b0:	1cbb      	adds	r3, r7, #2
 80016b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ba:	1cbb      	adds	r3, r7, #2
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	041a      	lsls	r2, r3, #16
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	1cb9      	adds	r1, r7, #2
 80016ca:	8809      	ldrh	r1, [r1, #0]
 80016cc:	400b      	ands	r3, r1
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b004      	add	sp, #16
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d11f      	bne.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	0013      	movs	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	189b      	adds	r3, r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4912      	ldr	r1, [pc, #72]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800170e:	0018      	movs	r0, r3
 8001710:	f7fe fcf8 	bl	8000104 <__udivsi3>
 8001714:	0003      	movs	r3, r0
 8001716:	3301      	adds	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800171a:	e008      	b.n	800172e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3b01      	subs	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	e001      	b.n	800172e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e009      	b.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	401a      	ands	r2, r3
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	429a      	cmp	r2, r3
 800173e:	d0ed      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b004      	add	sp, #16
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	40007000 	.word	0x40007000
 8001750:	fffff9ff 	.word	0xfffff9ff
 8001754:	20000014 	.word	0x20000014
 8001758:	000f4240 	.word	0x000f4240

0800175c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	23e0      	movs	r3, #224	; 0xe0
 8001766:	01db      	lsls	r3, r3, #7
 8001768:	4013      	ands	r3, r2
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	f000 fb50 	bl	8001e28 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d100      	bne.n	8001794 <HAL_RCC_OscConfig+0x20>
 8001792:	e07c      	b.n	800188e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001794:	4bc3      	ldr	r3, [pc, #780]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2238      	movs	r2, #56	; 0x38
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179e:	4bc1      	ldr	r3, [pc, #772]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2203      	movs	r2, #3
 80017a4:	4013      	ands	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_OscConfig+0x40>
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d002      	beq.n	80017ba <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d10b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	4bba      	ldr	r3, [pc, #744]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	029b      	lsls	r3, r3, #10
 80017c2:	4013      	ands	r3, r2
 80017c4:	d062      	beq.n	800188c <HAL_RCC_OscConfig+0x118>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d15e      	bne.n	800188c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e32a      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	429a      	cmp	r2, r3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_OscConfig+0x7a>
 80017de:	4bb1      	ldr	r3, [pc, #708]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4bb0      	ldr	r3, [pc, #704]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0249      	lsls	r1, r1, #9
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e020      	b.n	8001830 <HAL_RCC_OscConfig+0xbc>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	23a0      	movs	r3, #160	; 0xa0
 80017f4:	02db      	lsls	r3, r3, #11
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d10e      	bne.n	8001818 <HAL_RCC_OscConfig+0xa4>
 80017fa:	4baa      	ldr	r3, [pc, #680]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4ba9      	ldr	r3, [pc, #676]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	02c9      	lsls	r1, r1, #11
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	4ba6      	ldr	r3, [pc, #664]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4ba5      	ldr	r3, [pc, #660]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	0249      	lsls	r1, r1, #9
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0xbc>
 8001818:	4ba2      	ldr	r3, [pc, #648]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4ba1      	ldr	r3, [pc, #644]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800181e:	49a2      	ldr	r1, [pc, #648]	; (8001aa8 <HAL_RCC_OscConfig+0x334>)
 8001820:	400a      	ands	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	4b9f      	ldr	r3, [pc, #636]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b9e      	ldr	r3, [pc, #632]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800182a:	49a0      	ldr	r1, [pc, #640]	; (8001aac <HAL_RCC_OscConfig+0x338>)
 800182c:	400a      	ands	r2, r1
 800182e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d014      	beq.n	8001862 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff f9e4 	bl	8000c04 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001842:	f7ff f9df 	bl	8000c04 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b64      	cmp	r3, #100	; 0x64
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e2e9      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001854:	4b93      	ldr	r3, [pc, #588]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	4013      	ands	r3, r2
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0xce>
 8001860:	e015      	b.n	800188e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff f9cf 	bl	8000c04 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff f9ca 	bl	8000c04 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e2d4      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187e:	4b89      	ldr	r3, [pc, #548]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	029b      	lsls	r3, r3, #10
 8001886:	4013      	ands	r3, r2
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0xf8>
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d100      	bne.n	800189a <HAL_RCC_OscConfig+0x126>
 8001898:	e099      	b.n	80019ce <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800189a:	4b82      	ldr	r3, [pc, #520]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2238      	movs	r2, #56	; 0x38
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018a4:	4b7f      	ldr	r3, [pc, #508]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2203      	movs	r2, #3
 80018aa:	4013      	ands	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_OscConfig+0x146>
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d135      	bne.n	800192c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c0:	4b78      	ldr	r3, [pc, #480]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4013      	ands	r3, r2
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x164>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e2a7      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a74      	ldr	r2, [pc, #464]	; (8001ab0 <HAL_RCC_OscConfig+0x33c>)
 80018de:	4013      	ands	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	021a      	lsls	r2, r3, #8
 80018e8:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d112      	bne.n	800191a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018f4:	4b6b      	ldr	r3, [pc, #428]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x340>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0adb      	lsrs	r3, r3, #11
 800190e:	2207      	movs	r2, #7
 8001910:	4013      	ands	r3, r2
 8001912:	4a69      	ldr	r2, [pc, #420]	; (8001ab8 <HAL_RCC_OscConfig+0x344>)
 8001914:	40da      	lsrs	r2, r3
 8001916:	4b69      	ldr	r3, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x348>)
 8001918:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800191a:	4b69      	ldr	r3, [pc, #420]	; (8001ac0 <HAL_RCC_OscConfig+0x34c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0018      	movs	r0, r3
 8001920:	f7ff f914 	bl	8000b4c <HAL_InitTick>
 8001924:	1e03      	subs	r3, r0, #0
 8001926:	d051      	beq.n	80019cc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e27d      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d030      	beq.n	8001996 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001934:	4b5b      	ldr	r3, [pc, #364]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5e      	ldr	r2, [pc, #376]	; (8001ab4 <HAL_RCC_OscConfig+0x340>)
 800193a:	4013      	ands	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691a      	ldr	r2, [r3, #16]
 8001942:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b55      	ldr	r3, [pc, #340]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	0049      	lsls	r1, r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff f955 	bl	8000c04 <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff f950 	bl	8000c04 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e25a      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001972:	4b4c      	ldr	r3, [pc, #304]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4013      	ands	r3, r2
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_RCC_OscConfig+0x33c>)
 8001984:	4013      	ands	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	021a      	lsls	r2, r3, #8
 800198e:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001990:	430a      	orrs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	e01b      	b.n	80019ce <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b43      	ldr	r3, [pc, #268]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 800199c:	4949      	ldr	r1, [pc, #292]	; (8001ac4 <HAL_RCC_OscConfig+0x350>)
 800199e:	400a      	ands	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff f92f 	bl	8000c04 <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff f92a 	bl	8000c04 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e234      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x238>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2208      	movs	r2, #8
 80019d4:	4013      	ands	r3, r2
 80019d6:	d047      	beq.n	8001a68 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2238      	movs	r2, #56	; 0x38
 80019de:	4013      	ands	r3, r2
 80019e0:	2b18      	cmp	r3, #24
 80019e2:	d10a      	bne.n	80019fa <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 80019e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d03c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x2f4>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d138      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e216      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d019      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a02:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001a04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001a08:	2101      	movs	r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f8f9 	bl	8000c04 <HAL_GetTick>
 8001a12:	0003      	movs	r3, r0
 8001a14:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff f8f4 	bl	8000c04 <HAL_GetTick>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1fe      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d0f1      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2a4>
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001a38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	438a      	bics	r2, r1
 8001a40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f8df 	bl	8000c04 <HAL_GetTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f8da 	bl	8000c04 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1e4      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d1f1      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d100      	bne.n	8001a74 <HAL_RCC_OscConfig+0x300>
 8001a72:	e0c7      	b.n	8001c04 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a74:	231f      	movs	r3, #31
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2238      	movs	r2, #56	; 0x38
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_RCC_OscConfig+0x330>)
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d100      	bne.n	8001a94 <HAL_RCC_OscConfig+0x320>
 8001a92:	e0b7      	b.n	8001c04 <HAL_RCC_OscConfig+0x490>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d000      	beq.n	8001a9e <HAL_RCC_OscConfig+0x32a>
 8001a9c:	e0b2      	b.n	8001c04 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e1c2      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	fffeffff 	.word	0xfffeffff
 8001aac:	fffbffff 	.word	0xfffbffff
 8001ab0:	ffff80ff 	.word	0xffff80ff
 8001ab4:	ffffc7ff 	.word	0xffffc7ff
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	20000014 	.word	0x20000014
 8001ac0:	20000018 	.word	0x20000018
 8001ac4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ac8:	4bb5      	ldr	r3, [pc, #724]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	055b      	lsls	r3, r3, #21
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x364>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x366>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d011      	beq.n	8001b02 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4bb0      	ldr	r3, [pc, #704]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae2:	4baf      	ldr	r3, [pc, #700]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0549      	lsls	r1, r1, #21
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aec:	4bac      	ldr	r3, [pc, #688]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	055b      	lsls	r3, r3, #21
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001afa:	231f      	movs	r3, #31
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b02:	4ba8      	ldr	r3, [pc, #672]	; (8001da4 <HAL_RCC_OscConfig+0x630>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d11a      	bne.n	8001b44 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0e:	4ba5      	ldr	r3, [pc, #660]	; (8001da4 <HAL_RCC_OscConfig+0x630>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4ba4      	ldr	r3, [pc, #656]	; (8001da4 <HAL_RCC_OscConfig+0x630>)
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	0049      	lsls	r1, r1, #1
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f872 	bl	8000c04 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b26:	f7ff f86d 	bl	8000c04 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e177      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b38:	4b9a      	ldr	r3, [pc, #616]	; (8001da4 <HAL_RCC_OscConfig+0x630>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3e6>
 8001b4c:	4b94      	ldr	r3, [pc, #592]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b50:	4b93      	ldr	r3, [pc, #588]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	430a      	orrs	r2, r1
 8001b56:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b58:	e01c      	b.n	8001b94 <HAL_RCC_OscConfig+0x420>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x408>
 8001b62:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b66:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b68:	2104      	movs	r1, #4
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b6e:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b72:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0x420>
 8001b7c:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b80:	4b87      	ldr	r3, [pc, #540]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	438a      	bics	r2, r1
 8001b86:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b88:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b8c:	4b84      	ldr	r3, [pc, #528]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001b8e:	2104      	movs	r1, #4
 8001b90:	438a      	bics	r2, r1
 8001b92:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d014      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f832 	bl	8000c04 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba4:	e009      	b.n	8001bba <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff f82d 	bl	8000c04 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a7d      	ldr	r2, [pc, #500]	; (8001da8 <HAL_RCC_OscConfig+0x634>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e136      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bba:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x432>
 8001bc4:	e013      	b.n	8001bee <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7ff f81d 	bl	8000c04 <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bce:	e009      	b.n	8001be4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f818 	bl	8000c04 <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	4a73      	ldr	r2, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x634>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e121      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be4:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bee:	231f      	movs	r3, #31
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001bf8:	4b69      	ldr	r3, [pc, #420]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001bfe:	496b      	ldr	r1, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x638>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d039      	beq.n	8001c82 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d01b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c16:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	03c9      	lsls	r1, r1, #15
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7fe ffee 	bl	8000c04 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c2e:	f7fe ffe9 	bl	8000c04 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0f3      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c40:	4b57      	ldr	r3, [pc, #348]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x4ba>
 8001c4c:	e019      	b.n	8001c82 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c4e:	4b54      	ldr	r3, [pc, #336]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001c54:	4956      	ldr	r1, [pc, #344]	; (8001db0 <HAL_RCC_OscConfig+0x63c>)
 8001c56:	400a      	ands	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5a:	f7fe ffd3 	bl	8000c04 <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c64:	f7fe ffce 	bl	8000c04 <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0d8      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c76:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d100      	bne.n	8001c8c <HAL_RCC_OscConfig+0x518>
 8001c8a:	e0cc      	b.n	8001e26 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8c:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2238      	movs	r2, #56	; 0x38
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_OscConfig+0x526>
 8001c98:	e07b      	b.n	8001d92 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d156      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001ca8:	4942      	ldr	r1, [pc, #264]	; (8001db4 <HAL_RCC_OscConfig+0x640>)
 8001caa:	400a      	ands	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7fe ffa9 	bl	8000c04 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe ffa4 	bl	8000c04 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0ae      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cca:	4b35      	ldr	r3, [pc, #212]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	049b      	lsls	r3, r3, #18
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd6:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4a37      	ldr	r2, [pc, #220]	; (8001db8 <HAL_RCC_OscConfig+0x644>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	431a      	orrs	r2, r3
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0a:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	0449      	lsls	r1, r1, #17
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d1e:	2180      	movs	r1, #128	; 0x80
 8001d20:	0549      	lsls	r1, r1, #21
 8001d22:	430a      	orrs	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7fe ff6d 	bl	8000c04 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe ff68 	bl	8000c04 <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e072      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	049b      	lsls	r3, r3, #18
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x5bc>
 8001d4e:	e06a      	b.n	8001e26 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d56:	4917      	ldr	r1, [pc, #92]	; (8001db4 <HAL_RCC_OscConfig+0x640>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7fe ff52 	bl	8000c04 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe ff4d 	bl	8000c04 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e057      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	049b      	lsls	r3, r3, #18
 8001d80:	4013      	ands	r3, r2
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_OscConfig+0x62c>)
 8001d8a:	490c      	ldr	r1, [pc, #48]	; (8001dbc <HAL_RCC_OscConfig+0x648>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	e049      	b.n	8001e26 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d112      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e044      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40007000 	.word	0x40007000
 8001da8:	00001388 	.word	0x00001388
 8001dac:	efffffff 	.word	0xefffffff
 8001db0:	ffbfffff 	.word	0xffbfffff
 8001db4:	feffffff 	.word	0xfeffffff
 8001db8:	11c1808c 	.word	0x11c1808c
 8001dbc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_OscConfig+0x6bc>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d126      	bne.n	8001e22 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2270      	movs	r2, #112	; 0x70
 8001dd8:	401a      	ands	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d11f      	bne.n	8001e22 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	23fe      	movs	r3, #254	; 0xfe
 8001de6:	01db      	lsls	r3, r3, #7
 8001de8:	401a      	ands	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d116      	bne.n	8001e22 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	23f8      	movs	r3, #248	; 0xf8
 8001df8:	039b      	lsls	r3, r3, #14
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d10e      	bne.n	8001e22 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	23e0      	movs	r3, #224	; 0xe0
 8001e08:	051b      	lsls	r3, r3, #20
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	0f5b      	lsrs	r3, r3, #29
 8001e18:	075a      	lsls	r2, r3, #29
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b008      	add	sp, #32
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0e9      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b76      	ldr	r3, [pc, #472]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	4013      	ands	r3, r2
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d91e      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b73      	ldr	r3, [pc, #460]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	4b70      	ldr	r3, [pc, #448]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e68:	f7fe fecc 	bl	8000c04 <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e72:	f7fe fec7 	bl	8000c04 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	; (8002028 <HAL_RCC_ClockConfig+0x1f4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0ca      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d015      	beq.n	8001eca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d006      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ea8:	4b60      	ldr	r3, [pc, #384]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	4b5f      	ldr	r3, [pc, #380]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001eae:	21e0      	movs	r1, #224	; 0xe0
 8001eb0:	01c9      	lsls	r1, r1, #7
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4a5d      	ldr	r2, [pc, #372]	; (8002030 <HAL_RCC_ClockConfig+0x1fc>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b59      	ldr	r3, [pc, #356]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d057      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d12b      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e097      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef4:	4b4d      	ldr	r3, [pc, #308]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	049b      	lsls	r3, r3, #18
 8001efc:	4013      	ands	r3, r2
 8001efe:	d11f      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e08b      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f0c:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4013      	ands	r3, r2
 8001f16:	d113      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e07f      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e074      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e06d      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2207      	movs	r2, #7
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f54:	f7fe fe56 	bl	8000c04 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5c:	e009      	b.n	8001f72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5e:	f7fe fe51 	bl	8000c04 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <HAL_RCC_ClockConfig+0x1f4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e054      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2238      	movs	r2, #56	; 0x38
 8001f78:	401a      	ands	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1ec      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2207      	movs	r2, #7
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d21e      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2207      	movs	r2, #7
 8001f98:	4393      	bics	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa4:	f7fe fe2e 	bl	8000c04 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fac:	e009      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fae:	f7fe fe29 	bl	8000c04 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_RCC_ClockConfig+0x1f4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e02c      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	4013      	ands	r3, r2
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_RCC_ClockConfig+0x200>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fee:	f000 f829 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ff2:	0001      	movs	r1, r0
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_RCC_ClockConfig+0x204>)
 8002000:	0092      	lsls	r2, r2, #2
 8002002:	58d3      	ldr	r3, [r2, r3]
 8002004:	221f      	movs	r2, #31
 8002006:	4013      	ands	r3, r2
 8002008:	000a      	movs	r2, r1
 800200a:	40da      	lsrs	r2, r3
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x208>)
 800200e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x20c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0018      	movs	r0, r3
 8002016:	f7fe fd99 	bl	8000b4c <HAL_InitTick>
 800201a:	0003      	movs	r3, r0
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b004      	add	sp, #16
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40022000 	.word	0x40022000
 8002028:	00001388 	.word	0x00001388
 800202c:	40021000 	.word	0x40021000
 8002030:	fffff0ff 	.word	0xfffff0ff
 8002034:	ffff8fff 	.word	0xffff8fff
 8002038:	080048a8 	.word	0x080048a8
 800203c:	20000014 	.word	0x20000014
 8002040:	20000018 	.word	0x20000018

08002044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800204a:	4b3c      	ldr	r3, [pc, #240]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2238      	movs	r2, #56	; 0x38
 8002050:	4013      	ands	r3, r2
 8002052:	d10f      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0adb      	lsrs	r3, r3, #11
 800205a:	2207      	movs	r2, #7
 800205c:	4013      	ands	r3, r2
 800205e:	2201      	movs	r2, #1
 8002060:	409a      	lsls	r2, r3
 8002062:	0013      	movs	r3, r2
 8002064:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	4835      	ldr	r0, [pc, #212]	; (8002140 <HAL_RCC_GetSysClockFreq+0xfc>)
 800206a:	f7fe f84b 	bl	8000104 <__udivsi3>
 800206e:	0003      	movs	r3, r0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e05d      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2238      	movs	r2, #56	; 0x38
 800207a:	4013      	ands	r3, r2
 800207c:	2b08      	cmp	r3, #8
 800207e:	d102      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_GetSysClockFreq+0x100>)
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e054      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2238      	movs	r2, #56	; 0x38
 800208c:	4013      	ands	r3, r2
 800208e:	2b10      	cmp	r3, #16
 8002090:	d138      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2203      	movs	r2, #3
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	2207      	movs	r2, #7
 80020a4:	4013      	ands	r3, r2
 80020a6:	3301      	adds	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d10d      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	4824      	ldr	r0, [pc, #144]	; (8002144 <HAL_RCC_GetSysClockFreq+0x100>)
 80020b4:	f7fe f826 	bl	8000104 <__udivsi3>
 80020b8:	0003      	movs	r3, r0
 80020ba:	0019      	movs	r1, r3
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	227f      	movs	r2, #127	; 0x7f
 80020c4:	4013      	ands	r3, r2
 80020c6:	434b      	muls	r3, r1
 80020c8:	617b      	str	r3, [r7, #20]
        break;
 80020ca:	e00d      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	481c      	ldr	r0, [pc, #112]	; (8002140 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020d0:	f7fe f818 	bl	8000104 <__udivsi3>
 80020d4:	0003      	movs	r3, r0
 80020d6:	0019      	movs	r1, r3
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	227f      	movs	r2, #127	; 0x7f
 80020e0:	4013      	ands	r3, r2
 80020e2:	434b      	muls	r3, r1
 80020e4:	617b      	str	r3, [r7, #20]
        break;
 80020e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0f5b      	lsrs	r3, r3, #29
 80020ee:	2207      	movs	r2, #7
 80020f0:	4013      	ands	r3, r2
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7fe f803 	bl	8000104 <__udivsi3>
 80020fe:	0003      	movs	r3, r0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e015      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2238      	movs	r2, #56	; 0x38
 800210a:	4013      	ands	r3, r2
 800210c:	2b20      	cmp	r3, #32
 800210e:	d103      	bne.n	8002118 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2238      	movs	r2, #56	; 0x38
 800211e:	4013      	ands	r3, r2
 8002120:	2b18      	cmp	r3, #24
 8002122:	d103      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002124:	23fa      	movs	r3, #250	; 0xfa
 8002126:	01db      	lsls	r3, r3, #7
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	e001      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002130:	693b      	ldr	r3, [r7, #16]
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	b006      	add	sp, #24
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	40021000 	.word	0x40021000
 8002140:	00f42400 	.word	0x00f42400
 8002144:	007a1200 	.word	0x007a1200

08002148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_RCC_GetHCLKFreq+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	20000014 	.word	0x20000014

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b5b0      	push	{r4, r5, r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002160:	f7ff fff2 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002164:	0004      	movs	r4, r0
 8002166:	f7ff faf9 	bl	800175c <LL_RCC_GetAPB1Prescaler>
 800216a:	0003      	movs	r3, r0
 800216c:	0b1a      	lsrs	r2, r3, #12
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	58d3      	ldr	r3, [r2, r3]
 8002174:	221f      	movs	r2, #31
 8002176:	4013      	ands	r3, r2
 8002178:	40dc      	lsrs	r4, r3
 800217a:	0023      	movs	r3, r4
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	bdb0      	pop	{r4, r5, r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	080048e8 	.word	0x080048e8

08002188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002190:	2313      	movs	r3, #19
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002198:	2312      	movs	r3, #18
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d100      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021ac:	e0ad      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2011      	movs	r0, #17
 80021b0:	183b      	adds	r3, r7, r0
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	055b      	lsls	r3, r3, #21
 80021be:	4013      	ands	r3, r2
 80021c0:	d110      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b44      	ldr	r3, [pc, #272]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0549      	lsls	r1, r1, #21
 80021cc:	430a      	orrs	r2, r1
 80021ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	055b      	lsls	r3, r3, #21
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021de:	183b      	adds	r3, r7, r0
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e4:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	0049      	lsls	r1, r1, #1
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021f2:	f7fe fd07 	bl	8000c04 <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021fa:	e00b      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fc:	f7fe fd02 	bl	8000c04 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d904      	bls.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800220a:	2313      	movs	r3, #19
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2203      	movs	r2, #3
 8002210:	701a      	strb	r2, [r3, #0]
        break;
 8002212:	e005      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002214:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4013      	ands	r3, r2
 800221e:	d0ed      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002220:	2313      	movs	r3, #19
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d15e      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800222c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800222e:	23c0      	movs	r3, #192	; 0xc0
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4013      	ands	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d019      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	429a      	cmp	r2, r3
 8002244:	d014      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	4a24      	ldr	r2, [pc, #144]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800224c:	4013      	ands	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	0249      	lsls	r1, r1, #9
 800225a:	430a      	orrs	r2, r1
 800225c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002260:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002264:	491e      	ldr	r1, [pc, #120]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002266:	400a      	ands	r2, r1
 8002268:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2201      	movs	r2, #1
 8002274:	4013      	ands	r3, r2
 8002276:	d016      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fcc4 	bl	8000c04 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002280:	e00c      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fcbf 	bl	8000c04 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d904      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002292:	2313      	movs	r3, #19
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2203      	movs	r2, #3
 8002298:	701a      	strb	r2, [r3, #0]
            break;
 800229a:	e004      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	d0ed      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80022a6:	2313      	movs	r3, #19
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80022c4:	e016      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022c6:	2312      	movs	r3, #18
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2213      	movs	r2, #19
 80022cc:	18ba      	adds	r2, r7, r2
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e00f      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
 80022dc:	fffffcff 	.word	0xfffffcff
 80022e0:	fffeffff 	.word	0xfffeffff
 80022e4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e8:	2312      	movs	r3, #18
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2213      	movs	r2, #19
 80022ee:	18ba      	adds	r2, r7, r2
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022f4:	2311      	movs	r3, #17
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fe:	4bb6      	ldr	r3, [pc, #728]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002302:	4bb5      	ldr	r3, [pc, #724]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002304:	49b5      	ldr	r1, [pc, #724]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002306:	400a      	ands	r2, r1
 8002308:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	4013      	ands	r3, r2
 8002312:	d009      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002314:	4bb0      	ldr	r3, [pc, #704]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	2203      	movs	r2, #3
 800231a:	4393      	bics	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4bad      	ldr	r3, [pc, #692]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002324:	430a      	orrs	r2, r1
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2202      	movs	r2, #2
 800232e:	4013      	ands	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002332:	4ba9      	ldr	r3, [pc, #676]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	220c      	movs	r2, #12
 8002338:	4393      	bics	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	4ba5      	ldr	r3, [pc, #660]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002342:	430a      	orrs	r2, r1
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2204      	movs	r2, #4
 800234c:	4013      	ands	r3, r2
 800234e:	d009      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002350:	4ba1      	ldr	r3, [pc, #644]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	2230      	movs	r2, #48	; 0x30
 8002356:	4393      	bics	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	4b9e      	ldr	r3, [pc, #632]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002360:	430a      	orrs	r2, r1
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2210      	movs	r2, #16
 800236a:	4013      	ands	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800236e:	4b9a      	ldr	r3, [pc, #616]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	4a9b      	ldr	r2, [pc, #620]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	4b96      	ldr	r3, [pc, #600]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800237e:	430a      	orrs	r2, r1
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	015b      	lsls	r3, r3, #5
 800238a:	4013      	ands	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800238e:	4b92      	ldr	r3, [pc, #584]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	4a94      	ldr	r2, [pc, #592]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002394:	4013      	ands	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	4b8e      	ldr	r3, [pc, #568]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4013      	ands	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ae:	4b8a      	ldr	r3, [pc, #552]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	4a8d      	ldr	r2, [pc, #564]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023bc:	4b86      	ldr	r3, [pc, #536]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4013      	ands	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023ce:	4b82      	ldr	r3, [pc, #520]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	4a86      	ldr	r2, [pc, #536]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	4b7e      	ldr	r3, [pc, #504]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023de:	430a      	orrs	r2, r1
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2220      	movs	r2, #32
 80023e8:	4013      	ands	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ec:	4b7a      	ldr	r3, [pc, #488]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	4a7f      	ldr	r2, [pc, #508]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	4b77      	ldr	r3, [pc, #476]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023fc:	430a      	orrs	r2, r1
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2240      	movs	r2, #64	; 0x40
 8002406:	4013      	ands	r3, r2
 8002408:	d009      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800240a:	4b73      	ldr	r3, [pc, #460]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	4a79      	ldr	r2, [pc, #484]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002410:	4013      	ands	r3, r2
 8002412:	0019      	movs	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	4b6f      	ldr	r3, [pc, #444]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800241a:	430a      	orrs	r2, r1
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	01db      	lsls	r3, r3, #7
 8002426:	4013      	ands	r3, r2
 8002428:	d015      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800242a:	4b6b      	ldr	r3, [pc, #428]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	0899      	lsrs	r1, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002436:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002438:	430a      	orrs	r2, r1
 800243a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	05db      	lsls	r3, r3, #23
 8002444:	429a      	cmp	r2, r3
 8002446:	d106      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002448:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	4b62      	ldr	r3, [pc, #392]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0249      	lsls	r1, r1, #9
 8002452:	430a      	orrs	r2, r1
 8002454:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	031b      	lsls	r3, r3, #12
 800245e:	4013      	ands	r3, r2
 8002460:	d009      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002462:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002472:	430a      	orrs	r2, r1
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	039b      	lsls	r3, r3, #14
 800247e:	4013      	ands	r3, r2
 8002480:	d016      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002482:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	4a5c      	ldr	r2, [pc, #368]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002488:	4013      	ands	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002490:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002492:	430a      	orrs	r2, r1
 8002494:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	03db      	lsls	r3, r3, #15
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024a2:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	4b4c      	ldr	r3, [pc, #304]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	0449      	lsls	r1, r1, #17
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	03db      	lsls	r3, r3, #15
 80024b8:	4013      	ands	r3, r2
 80024ba:	d016      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024bc:	4b46      	ldr	r3, [pc, #280]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	4a4e      	ldr	r2, [pc, #312]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ca:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024cc:	430a      	orrs	r2, r1
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	045b      	lsls	r3, r3, #17
 80024d8:	429a      	cmp	r2, r3
 80024da:	d106      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024dc:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024e2:	2180      	movs	r1, #128	; 0x80
 80024e4:	0449      	lsls	r1, r1, #17
 80024e6:	430a      	orrs	r2, r1
 80024e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	4013      	ands	r3, r2
 80024f4:	d014      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	2203      	movs	r2, #3
 80024fc:	4393      	bics	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002506:	430a      	orrs	r2, r1
 8002508:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d106      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002512:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0249      	lsls	r1, r1, #9
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	019b      	lsls	r3, r3, #6
 8002528:	4013      	ands	r3, r2
 800252a:	d014      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800252c:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	220c      	movs	r2, #12
 8002532:	4393      	bics	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253c:	430a      	orrs	r2, r1
 800253e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b04      	cmp	r3, #4
 8002546:	d106      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	0249      	lsls	r1, r1, #9
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	045b      	lsls	r3, r3, #17
 800255e:	4013      	ands	r3, r2
 8002560:	d016      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002568:	4013      	ands	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002572:	430a      	orrs	r2, r1
 8002574:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	429a      	cmp	r2, r3
 8002580:	d106      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	0449      	lsls	r1, r1, #17
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	049b      	lsls	r3, r3, #18
 8002598:	4013      	ands	r3, r2
 800259a:	d016      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ac:	430a      	orrs	r2, r1
 80025ae:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d106      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	0449      	lsls	r1, r1, #17
 80025c6:	430a      	orrs	r2, r1
 80025c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80025ca:	2312      	movs	r3, #18
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b006      	add	sp, #24
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000
 80025dc:	efffffff 	.word	0xefffffff
 80025e0:	fffff3ff 	.word	0xfffff3ff
 80025e4:	fffffcff 	.word	0xfffffcff
 80025e8:	fff3ffff 	.word	0xfff3ffff
 80025ec:	ffcfffff 	.word	0xffcfffff
 80025f0:	ffffcfff 	.word	0xffffcfff
 80025f4:	ffff3fff 	.word	0xffff3fff
 80025f8:	ffbfffff 	.word	0xffbfffff
 80025fc:	feffffff 	.word	0xfeffffff

08002600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e046      	b.n	80026a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2284      	movs	r2, #132	; 0x84
 8002616:	589b      	ldr	r3, [r3, r2]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	2100      	movs	r1, #0
 8002622:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	f7fe f97a 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2284      	movs	r2, #132	; 0x84
 8002630:	2124      	movs	r1, #36	; 0x24
 8002632:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2101      	movs	r1, #1
 8002640:	438a      	bics	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0018      	movs	r0, r3
 8002648:	f000 fc82 	bl	8002f50 <UART_SetConfig>
 800264c:	0003      	movs	r3, r0
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e024      	b.n	80026a0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f000 ffcb 	bl	80035fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	490d      	ldr	r1, [pc, #52]	; (80026a8 <HAL_UART_Init+0xa8>)
 8002672:	400a      	ands	r2, r1
 8002674:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	212a      	movs	r1, #42	; 0x2a
 8002682:	438a      	bics	r2, r1
 8002684:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0018      	movs	r0, r3
 800269a:	f001 f863 	bl	8003764 <UART_CheckIdleState>
 800269e:	0003      	movs	r3, r0
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	ffffb7ff 	.word	0xffffb7ff

080026ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	1dbb      	adds	r3, r7, #6
 80026ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2284      	movs	r2, #132	; 0x84
 80026c0:	589b      	ldr	r3, [r3, r2]
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d000      	beq.n	80026c8 <HAL_UART_Transmit+0x1c>
 80026c6:	e097      	b.n	80027f8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_UART_Transmit+0x2a>
 80026ce:	1dbb      	adds	r3, r7, #6
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e08f      	b.n	80027fa <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	015b      	lsls	r3, r3, #5
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d109      	bne.n	80026fa <HAL_UART_Transmit+0x4e>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2201      	movs	r2, #1
 80026f2:	4013      	ands	r3, r2
 80026f4:	d001      	beq.n	80026fa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07f      	b.n	80027fa <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	5c9b      	ldrb	r3, [r3, r2]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_UART_Transmit+0x5c>
 8002704:	2302      	movs	r3, #2
 8002706:	e078      	b.n	80027fa <HAL_UART_Transmit+0x14e>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	2101      	movs	r1, #1
 800270e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	228c      	movs	r2, #140	; 0x8c
 8002714:	2100      	movs	r1, #0
 8002716:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2284      	movs	r2, #132	; 0x84
 800271c:	2121      	movs	r1, #33	; 0x21
 800271e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002720:	f7fe fa70 	bl	8000c04 <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1dba      	adds	r2, r7, #6
 800272c:	2154      	movs	r1, #84	; 0x54
 800272e:	8812      	ldrh	r2, [r2, #0]
 8002730:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1dba      	adds	r2, r7, #6
 8002736:	2156      	movs	r1, #86	; 0x56
 8002738:	8812      	ldrh	r2, [r2, #0]
 800273a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	015b      	lsls	r3, r3, #5
 8002744:	429a      	cmp	r2, r3
 8002746:	d108      	bne.n	800275a <HAL_UART_Transmit+0xae>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e003      	b.n	8002762 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	2100      	movs	r1, #0
 8002768:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800276a:	e02c      	b.n	80027c6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	0013      	movs	r3, r2
 8002776:	2200      	movs	r2, #0
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	f001 f83d 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d001      	beq.n	8002786 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e039      	b.n	80027fa <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	001a      	movs	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	05d2      	lsls	r2, r2, #23
 8002798:	0dd2      	lsrs	r2, r2, #23
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	3302      	adds	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	e007      	b.n	80027b4 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	781a      	ldrb	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2256      	movs	r2, #86	; 0x56
 80027b8:	5a9b      	ldrh	r3, [r3, r2]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b299      	uxth	r1, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2256      	movs	r2, #86	; 0x56
 80027c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2256      	movs	r2, #86	; 0x56
 80027ca:	5a9b      	ldrh	r3, [r3, r2]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1cc      	bne.n	800276c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	0013      	movs	r3, r2
 80027dc:	2200      	movs	r2, #0
 80027de:	2140      	movs	r1, #64	; 0x40
 80027e0:	f001 f80a 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 80027e4:	1e03      	subs	r3, r0, #0
 80027e6:	d001      	beq.n	80027ec <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e006      	b.n	80027fa <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2284      	movs	r2, #132	; 0x84
 80027f0:	2120      	movs	r1, #32
 80027f2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	0018      	movs	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b008      	add	sp, #32
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	1dbb      	adds	r3, r7, #6
 8002810:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2288      	movs	r2, #136	; 0x88
 8002816:	589b      	ldr	r3, [r3, r2]
 8002818:	2b20      	cmp	r3, #32
 800281a:	d15a      	bne.n	80028d2 <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_UART_Receive_IT+0x26>
 8002822:	1dbb      	adds	r3, r7, #6
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e052      	b.n	80028d4 <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	015b      	lsls	r3, r3, #5
 8002836:	429a      	cmp	r2, r3
 8002838:	d109      	bne.n	800284e <HAL_UART_Receive_IT+0x4a>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2201      	movs	r2, #1
 8002846:	4013      	ands	r3, r2
 8002848:	d001      	beq.n	800284e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e042      	b.n	80028d4 <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	5c9b      	ldrb	r3, [r3, r2]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_UART_Receive_IT+0x58>
 8002858:	2302      	movs	r3, #2
 800285a:	e03b      	b.n	80028d4 <HAL_UART_Receive_IT+0xd0>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	2101      	movs	r1, #1
 8002862:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_UART_Receive_IT+0xd8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d025      	beq.n	80028c0 <HAL_UART_Receive_IT+0xbc>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_UART_Receive_IT+0xdc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d020      	beq.n	80028c0 <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	4013      	ands	r3, r2
 800288a:	d019      	beq.n	80028c0 <HAL_UART_Receive_IT+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288c:	f3ef 8310 	mrs	r3, PRIMASK
 8002890:	613b      	str	r3, [r7, #16]
  return(result);
 8002892:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	2301      	movs	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f383 8810 	msr	PRIMASK, r3
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	04c9      	lsls	r1, r1, #19
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f383 8810 	msr	PRIMASK, r3
}
 80028be:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028c0:	1dbb      	adds	r3, r7, #6
 80028c2:	881a      	ldrh	r2, [r3, #0]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f001 f85d 	bl	8003988 <UART_Start_Receive_IT>
 80028ce:	0003      	movs	r3, r0
 80028d0:	e000      	b.n	80028d4 <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
  }
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b008      	add	sp, #32
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40008000 	.word	0x40008000
 80028e0:	40008400 	.word	0x40008400

080028e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b0aa      	sub	sp, #168	; 0xa8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	22a4      	movs	r2, #164	; 0xa4
 80028f4:	18b9      	adds	r1, r7, r2
 80028f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	20a0      	movs	r0, #160	; 0xa0
 8002900:	1839      	adds	r1, r7, r0
 8002902:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	249c      	movs	r4, #156	; 0x9c
 800290c:	1939      	adds	r1, r7, r4
 800290e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002910:	0011      	movs	r1, r2
 8002912:	18bb      	adds	r3, r7, r2
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4aa0      	ldr	r2, [pc, #640]	; (8002b98 <HAL_UART_IRQHandler+0x2b4>)
 8002918:	4013      	ands	r3, r2
 800291a:	2298      	movs	r2, #152	; 0x98
 800291c:	18bd      	adds	r5, r7, r2
 800291e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002920:	18bb      	adds	r3, r7, r2
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d11a      	bne.n	800295e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002928:	187b      	adds	r3, r7, r1
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2220      	movs	r2, #32
 800292e:	4013      	ands	r3, r2
 8002930:	d015      	beq.n	800295e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002932:	183b      	adds	r3, r7, r0
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	4013      	ands	r3, r2
 800293a:	d105      	bne.n	8002948 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800293c:	193b      	adds	r3, r7, r4
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	055b      	lsls	r3, r3, #21
 8002944:	4013      	ands	r3, r2
 8002946:	d00a      	beq.n	800295e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	2b00      	cmp	r3, #0
 800294e:	d100      	bne.n	8002952 <HAL_UART_IRQHandler+0x6e>
 8002950:	e2cf      	b.n	8002ef2 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	0010      	movs	r0, r2
 800295a:	4798      	blx	r3
      }
      return;
 800295c:	e2c9      	b.n	8002ef2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800295e:	2398      	movs	r3, #152	; 0x98
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d100      	bne.n	800296a <HAL_UART_IRQHandler+0x86>
 8002968:	e11e      	b.n	8002ba8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800296a:	239c      	movs	r3, #156	; 0x9c
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a8a      	ldr	r2, [pc, #552]	; (8002b9c <HAL_UART_IRQHandler+0x2b8>)
 8002972:	4013      	ands	r3, r2
 8002974:	d106      	bne.n	8002984 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002976:	23a0      	movs	r3, #160	; 0xa0
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a88      	ldr	r2, [pc, #544]	; (8002ba0 <HAL_UART_IRQHandler+0x2bc>)
 800297e:	4013      	ands	r3, r2
 8002980:	d100      	bne.n	8002984 <HAL_UART_IRQHandler+0xa0>
 8002982:	e111      	b.n	8002ba8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002984:	23a4      	movs	r3, #164	; 0xa4
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	4013      	ands	r3, r2
 800298e:	d012      	beq.n	80029b6 <HAL_UART_IRQHandler+0xd2>
 8002990:	23a0      	movs	r3, #160	; 0xa0
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4013      	ands	r3, r2
 800299c:	d00b      	beq.n	80029b6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2201      	movs	r2, #1
 80029a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	228c      	movs	r2, #140	; 0x8c
 80029aa:	589b      	ldr	r3, [r3, r2]
 80029ac:	2201      	movs	r2, #1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	218c      	movs	r1, #140	; 0x8c
 80029b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029b6:	23a4      	movs	r3, #164	; 0xa4
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2202      	movs	r2, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	d011      	beq.n	80029e6 <HAL_UART_IRQHandler+0x102>
 80029c2:	239c      	movs	r3, #156	; 0x9c
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2201      	movs	r2, #1
 80029ca:	4013      	ands	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2202      	movs	r2, #2
 80029d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	228c      	movs	r2, #140	; 0x8c
 80029da:	589b      	ldr	r3, [r3, r2]
 80029dc:	2204      	movs	r2, #4
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	218c      	movs	r1, #140	; 0x8c
 80029e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e6:	23a4      	movs	r3, #164	; 0xa4
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2204      	movs	r2, #4
 80029ee:	4013      	ands	r3, r2
 80029f0:	d011      	beq.n	8002a16 <HAL_UART_IRQHandler+0x132>
 80029f2:	239c      	movs	r3, #156	; 0x9c
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2201      	movs	r2, #1
 80029fa:	4013      	ands	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2204      	movs	r2, #4
 8002a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	228c      	movs	r2, #140	; 0x8c
 8002a0a:	589b      	ldr	r3, [r3, r2]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	218c      	movs	r1, #140	; 0x8c
 8002a14:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a16:	23a4      	movs	r3, #164	; 0xa4
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d017      	beq.n	8002a52 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a22:	23a0      	movs	r3, #160	; 0xa0
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d105      	bne.n	8002a3a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a2e:	239c      	movs	r3, #156	; 0x9c
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a59      	ldr	r2, [pc, #356]	; (8002b9c <HAL_UART_IRQHandler+0x2b8>)
 8002a36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a38:	d00b      	beq.n	8002a52 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2208      	movs	r2, #8
 8002a40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	228c      	movs	r2, #140	; 0x8c
 8002a46:	589b      	ldr	r3, [r3, r2]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	218c      	movs	r1, #140	; 0x8c
 8002a50:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a52:	23a4      	movs	r3, #164	; 0xa4
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <HAL_UART_IRQHandler+0x1a4>
 8002a60:	23a0      	movs	r3, #160	; 0xa0
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	04db      	lsls	r3, r3, #19
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d00c      	beq.n	8002a88 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	228c      	movs	r2, #140	; 0x8c
 8002a7c:	589b      	ldr	r3, [r3, r2]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	218c      	movs	r1, #140	; 0x8c
 8002a86:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	228c      	movs	r2, #140	; 0x8c
 8002a8c:	589b      	ldr	r3, [r3, r2]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <HAL_UART_IRQHandler+0x1b0>
 8002a92:	e230      	b.n	8002ef6 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a94:	23a4      	movs	r3, #164	; 0xa4
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d015      	beq.n	8002acc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002aa0:	23a0      	movs	r3, #160	; 0xa0
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d106      	bne.n	8002aba <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002aac:	239c      	movs	r3, #156	; 0x9c
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	055b      	lsls	r3, r3, #21
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d008      	beq.n	8002acc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	0010      	movs	r0, r2
 8002aca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	228c      	movs	r2, #140	; 0x8c
 8002ad0:	589b      	ldr	r3, [r3, r2]
 8002ad2:	2194      	movs	r1, #148	; 0x94
 8002ad4:	187a      	adds	r2, r7, r1
 8002ad6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2240      	movs	r2, #64	; 0x40
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d004      	beq.n	8002af0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2228      	movs	r2, #40	; 0x28
 8002aec:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aee:	d047      	beq.n	8002b80 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f001 f874 	bl	8003be0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2240      	movs	r2, #64	; 0x40
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d137      	bne.n	8002b76 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b06:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0e:	2090      	movs	r0, #144	; 0x90
 8002b10:	183a      	adds	r2, r7, r0
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	2301      	movs	r3, #1
 8002b16:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b1a:	f383 8810 	msr	PRIMASK, r3
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2140      	movs	r1, #64	; 0x40
 8002b2c:	438a      	bics	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	183b      	adds	r3, r7, r0
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b38:	f383 8810 	msr	PRIMASK, r3
}
 8002b3c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4a:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <HAL_UART_IRQHandler+0x2c0>)
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7fe fa84 	bl	8001060 <HAL_DMA_Abort_IT>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d01a      	beq.n	8002b92 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b66:	0018      	movs	r0, r3
 8002b68:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6a:	e012      	b.n	8002b92 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 f9da 	bl	8002f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	e00d      	b.n	8002b92 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 f9d5 	bl	8002f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7e:	e008      	b.n	8002b92 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 f9d0 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	228c      	movs	r2, #140	; 0x8c
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002b90:	e1b1      	b.n	8002ef6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b92:	46c0      	nop			; (mov r8, r8)
    return;
 8002b94:	e1af      	b.n	8002ef6 <HAL_UART_IRQHandler+0x612>
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	0000080f 	.word	0x0000080f
 8002b9c:	10000001 	.word	0x10000001
 8002ba0:	04000120 	.word	0x04000120
 8002ba4:	08003cad 	.word	0x08003cad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d000      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x2ce>
 8002bb0:	e135      	b.n	8002e1e <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bb2:	23a4      	movs	r3, #164	; 0xa4
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d100      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x2dc>
 8002bbe:	e12e      	b.n	8002e1e <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bc0:	23a0      	movs	r3, #160	; 0xa0
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d100      	bne.n	8002bce <HAL_UART_IRQHandler+0x2ea>
 8002bcc:	e127      	b.n	8002e1e <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2240      	movs	r2, #64	; 0x40
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d000      	beq.n	8002be6 <HAL_UART_IRQHandler+0x302>
 8002be4:	e09e      	b.n	8002d24 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	217e      	movs	r1, #126	; 0x7e
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d100      	bne.n	8002bfe <HAL_UART_IRQHandler+0x31a>
 8002bfc:	e17d      	b.n	8002efa <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	225c      	movs	r2, #92	; 0x5c
 8002c02:	5a9b      	ldrh	r3, [r3, r2]
 8002c04:	187a      	adds	r2, r7, r1
 8002c06:	8812      	ldrh	r2, [r2, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d300      	bcc.n	8002c0e <HAL_UART_IRQHandler+0x32a>
 8002c0c:	e175      	b.n	8002efa <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	187a      	adds	r2, r7, r1
 8002c12:	215e      	movs	r1, #94	; 0x5e
 8002c14:	8812      	ldrh	r2, [r2, #0]
 8002c16:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2220      	movs	r2, #32
 8002c22:	4013      	ands	r3, r2
 8002c24:	d16f      	bne.n	8002d06 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c26:	f3ef 8310 	mrs	r3, PRIMASK
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c30:	2301      	movs	r3, #1
 8002c32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	f383 8810 	msr	PRIMASK, r3
}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	49b1      	ldr	r1, [pc, #708]	; (8002f0c <HAL_UART_IRQHandler+0x628>)
 8002c48:	400a      	ands	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	f383 8810 	msr	PRIMASK, r3
}
 8002c56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c58:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c60:	677b      	str	r3, [r7, #116]	; 0x74
 8002c62:	2301      	movs	r3, #1
 8002c64:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	438a      	bics	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c80:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c84:	f383 8810 	msr	PRIMASK, r3
}
 8002c88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c92:	673b      	str	r3, [r7, #112]	; 0x70
 8002c94:	2301      	movs	r3, #1
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	438a      	bics	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2288      	movs	r2, #136	; 0x88
 8002cc0:	2120      	movs	r1, #32
 8002cc2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cca:	f3ef 8310 	mrs	r3, PRIMASK
 8002cce:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cda:	f383 8810 	msr	PRIMASK, r3
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2110      	movs	r1, #16
 8002cec:	438a      	bics	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf6:	f383 8810 	msr	PRIMASK, r3
}
 8002cfa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fe f94d 	bl	8000fa0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	225c      	movs	r2, #92	; 0x5c
 8002d0a:	5a9a      	ldrh	r2, [r3, r2]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	215e      	movs	r1, #94	; 0x5e
 8002d10:	5a5b      	ldrh	r3, [r3, r1]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 f90b 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d22:	e0ea      	b.n	8002efa <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	225c      	movs	r2, #92	; 0x5c
 8002d28:	5a99      	ldrh	r1, [r3, r2]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	225e      	movs	r2, #94	; 0x5e
 8002d2e:	5a9b      	ldrh	r3, [r3, r2]
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	208e      	movs	r0, #142	; 0x8e
 8002d34:	183b      	adds	r3, r7, r0
 8002d36:	1a8a      	subs	r2, r1, r2
 8002d38:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	225e      	movs	r2, #94	; 0x5e
 8002d3e:	5a9b      	ldrh	r3, [r3, r2]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d100      	bne.n	8002d48 <HAL_UART_IRQHandler+0x464>
 8002d46:	e0da      	b.n	8002efe <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002d48:	183b      	adds	r3, r7, r0
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d100      	bne.n	8002d52 <HAL_UART_IRQHandler+0x46e>
 8002d50:	e0d5      	b.n	8002efe <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d52:	f3ef 8310 	mrs	r3, PRIMASK
 8002d56:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d58:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d5a:	2488      	movs	r4, #136	; 0x88
 8002d5c:	193a      	adds	r2, r7, r4
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	2301      	movs	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f383 8810 	msr	PRIMASK, r3
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4966      	ldr	r1, [pc, #408]	; (8002f10 <HAL_UART_IRQHandler+0x62c>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	193b      	adds	r3, r7, r4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f383 8810 	msr	PRIMASK, r3
}
 8002d88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d90:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d92:	2484      	movs	r4, #132	; 0x84
 8002d94:	193a      	adds	r2, r7, r4
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	2301      	movs	r3, #1
 8002d9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4959      	ldr	r1, [pc, #356]	; (8002f14 <HAL_UART_IRQHandler+0x630>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f383 8810 	msr	PRIMASK, r3
}
 8002dc0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2288      	movs	r2, #136	; 0x88
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dde:	2480      	movs	r4, #128	; 0x80
 8002de0:	193a      	adds	r2, r7, r4
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	2301      	movs	r3, #1
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	f383 8810 	msr	PRIMASK, r3
}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	193b      	adds	r3, r7, r4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	f383 8810 	msr	PRIMASK, r3
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e0e:	183b      	adds	r3, r7, r0
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0011      	movs	r1, r2
 8002e16:	0018      	movs	r0, r3
 8002e18:	f000 f88e 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e1c:	e06f      	b.n	8002efe <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e1e:	23a4      	movs	r3, #164	; 0xa4
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	035b      	lsls	r3, r3, #13
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d010      	beq.n	8002e4e <HAL_UART_IRQHandler+0x56a>
 8002e2c:	239c      	movs	r3, #156	; 0x9c
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	03db      	lsls	r3, r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	0352      	lsls	r2, r2, #13
 8002e42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f001 fbc4 	bl	80045d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e4c:	e05a      	b.n	8002f04 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002e4e:	23a4      	movs	r3, #164	; 0xa4
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	4013      	ands	r3, r2
 8002e58:	d016      	beq.n	8002e88 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002e5a:	23a0      	movs	r3, #160	; 0xa0
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	4013      	ands	r3, r2
 8002e64:	d106      	bne.n	8002e74 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002e66:	239c      	movs	r3, #156	; 0x9c
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	041b      	lsls	r3, r3, #16
 8002e70:	4013      	ands	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d042      	beq.n	8002f02 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	0010      	movs	r0, r2
 8002e84:	4798      	blx	r3
    }
    return;
 8002e86:	e03c      	b.n	8002f02 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e88:	23a4      	movs	r3, #164	; 0xa4
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	4013      	ands	r3, r2
 8002e92:	d00a      	beq.n	8002eaa <HAL_UART_IRQHandler+0x5c6>
 8002e94:	23a0      	movs	r3, #160	; 0xa0
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f000 ff19 	bl	8003cda <UART_EndTransmit_IT>
    return;
 8002ea8:	e02c      	b.n	8002f04 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002eaa:	23a4      	movs	r3, #164	; 0xa4
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x5ec>
 8002eb8:	23a0      	movs	r3, #160	; 0xa0
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	05db      	lsls	r3, r3, #23
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f001 fb93 	bl	80045f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ece:	e019      	b.n	8002f04 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ed0:	23a4      	movs	r3, #164	; 0xa4
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	045b      	lsls	r3, r3, #17
 8002eda:	4013      	ands	r3, r2
 8002edc:	d012      	beq.n	8002f04 <HAL_UART_IRQHandler+0x620>
 8002ede:	23a0      	movs	r3, #160	; 0xa0
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	da0d      	bge.n	8002f04 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f001 fb7a 	bl	80045e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ef0:	e008      	b.n	8002f04 <HAL_UART_IRQHandler+0x620>
      return;
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	e006      	b.n	8002f04 <HAL_UART_IRQHandler+0x620>
    return;
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	e004      	b.n	8002f04 <HAL_UART_IRQHandler+0x620>
      return;
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	e002      	b.n	8002f04 <HAL_UART_IRQHandler+0x620>
      return;
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	e000      	b.n	8002f04 <HAL_UART_IRQHandler+0x620>
    return;
 8002f02:	46c0      	nop			; (mov r8, r8)
  }
}
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b02a      	add	sp, #168	; 0xa8
 8002f08:	bdb0      	pop	{r4, r5, r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	fffffeff 	.word	0xfffffeff
 8002f10:	fffffedf 	.word	0xfffffedf
 8002f14:	effffffe 	.word	0xeffffffe

08002f18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	000a      	movs	r2, r1
 8002f42:	1cbb      	adds	r3, r7, #2
 8002f44:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b002      	add	sp, #8
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f50:	b5b0      	push	{r4, r5, r7, lr}
 8002f52:	b090      	sub	sp, #64	; 0x40
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f58:	231a      	movs	r3, #26
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	189b      	adds	r3, r3, r2
 8002f5e:	19db      	adds	r3, r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4ac1      	ldr	r2, [pc, #772]	; (8003288 <UART_SetConfig+0x338>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4abc      	ldr	r2, [pc, #752]	; (800328c <UART_SetConfig+0x33c>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	68d9      	ldr	r1, [r3, #12]
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4ab6      	ldr	r2, [pc, #728]	; (8003290 <UART_SetConfig+0x340>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <UART_SetConfig+0x80>
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4ab4      	ldr	r2, [pc, #720]	; (8003294 <UART_SetConfig+0x344>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4ab0      	ldr	r2, [pc, #704]	; (8003298 <UART_SetConfig+0x348>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	220f      	movs	r2, #15
 8002fee:	4393      	bics	r3, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4aa5      	ldr	r2, [pc, #660]	; (800329c <UART_SetConfig+0x34c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d131      	bne.n	800306e <UART_SetConfig+0x11e>
 800300a:	4ba5      	ldr	r3, [pc, #660]	; (80032a0 <UART_SetConfig+0x350>)
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	2203      	movs	r2, #3
 8003010:	4013      	ands	r3, r2
 8003012:	2b03      	cmp	r3, #3
 8003014:	d01d      	beq.n	8003052 <UART_SetConfig+0x102>
 8003016:	d823      	bhi.n	8003060 <UART_SetConfig+0x110>
 8003018:	2b02      	cmp	r3, #2
 800301a:	d00c      	beq.n	8003036 <UART_SetConfig+0xe6>
 800301c:	d820      	bhi.n	8003060 <UART_SetConfig+0x110>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <UART_SetConfig+0xd8>
 8003022:	2b01      	cmp	r3, #1
 8003024:	d00e      	beq.n	8003044 <UART_SetConfig+0xf4>
 8003026:	e01b      	b.n	8003060 <UART_SetConfig+0x110>
 8003028:	231b      	movs	r3, #27
 800302a:	2220      	movs	r2, #32
 800302c:	189b      	adds	r3, r3, r2
 800302e:	19db      	adds	r3, r3, r7
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e154      	b.n	80032e0 <UART_SetConfig+0x390>
 8003036:	231b      	movs	r3, #27
 8003038:	2220      	movs	r2, #32
 800303a:	189b      	adds	r3, r3, r2
 800303c:	19db      	adds	r3, r3, r7
 800303e:	2202      	movs	r2, #2
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e14d      	b.n	80032e0 <UART_SetConfig+0x390>
 8003044:	231b      	movs	r3, #27
 8003046:	2220      	movs	r2, #32
 8003048:	189b      	adds	r3, r3, r2
 800304a:	19db      	adds	r3, r3, r7
 800304c:	2204      	movs	r2, #4
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e146      	b.n	80032e0 <UART_SetConfig+0x390>
 8003052:	231b      	movs	r3, #27
 8003054:	2220      	movs	r2, #32
 8003056:	189b      	adds	r3, r3, r2
 8003058:	19db      	adds	r3, r3, r7
 800305a:	2208      	movs	r2, #8
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	e13f      	b.n	80032e0 <UART_SetConfig+0x390>
 8003060:	231b      	movs	r3, #27
 8003062:	2220      	movs	r2, #32
 8003064:	189b      	adds	r3, r3, r2
 8003066:	19db      	adds	r3, r3, r7
 8003068:	2210      	movs	r2, #16
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e138      	b.n	80032e0 <UART_SetConfig+0x390>
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a8c      	ldr	r2, [pc, #560]	; (80032a4 <UART_SetConfig+0x354>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d131      	bne.n	80030dc <UART_SetConfig+0x18c>
 8003078:	4b89      	ldr	r3, [pc, #548]	; (80032a0 <UART_SetConfig+0x350>)
 800307a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307c:	220c      	movs	r2, #12
 800307e:	4013      	ands	r3, r2
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d01d      	beq.n	80030c0 <UART_SetConfig+0x170>
 8003084:	d823      	bhi.n	80030ce <UART_SetConfig+0x17e>
 8003086:	2b08      	cmp	r3, #8
 8003088:	d00c      	beq.n	80030a4 <UART_SetConfig+0x154>
 800308a:	d820      	bhi.n	80030ce <UART_SetConfig+0x17e>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <UART_SetConfig+0x146>
 8003090:	2b04      	cmp	r3, #4
 8003092:	d00e      	beq.n	80030b2 <UART_SetConfig+0x162>
 8003094:	e01b      	b.n	80030ce <UART_SetConfig+0x17e>
 8003096:	231b      	movs	r3, #27
 8003098:	2220      	movs	r2, #32
 800309a:	189b      	adds	r3, r3, r2
 800309c:	19db      	adds	r3, r3, r7
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e11d      	b.n	80032e0 <UART_SetConfig+0x390>
 80030a4:	231b      	movs	r3, #27
 80030a6:	2220      	movs	r2, #32
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	19db      	adds	r3, r3, r7
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e116      	b.n	80032e0 <UART_SetConfig+0x390>
 80030b2:	231b      	movs	r3, #27
 80030b4:	2220      	movs	r2, #32
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	19db      	adds	r3, r3, r7
 80030ba:	2204      	movs	r2, #4
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e10f      	b.n	80032e0 <UART_SetConfig+0x390>
 80030c0:	231b      	movs	r3, #27
 80030c2:	2220      	movs	r2, #32
 80030c4:	189b      	adds	r3, r3, r2
 80030c6:	19db      	adds	r3, r3, r7
 80030c8:	2208      	movs	r2, #8
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e108      	b.n	80032e0 <UART_SetConfig+0x390>
 80030ce:	231b      	movs	r3, #27
 80030d0:	2220      	movs	r2, #32
 80030d2:	189b      	adds	r3, r3, r2
 80030d4:	19db      	adds	r3, r3, r7
 80030d6:	2210      	movs	r2, #16
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e101      	b.n	80032e0 <UART_SetConfig+0x390>
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a71      	ldr	r2, [pc, #452]	; (80032a8 <UART_SetConfig+0x358>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d131      	bne.n	800314a <UART_SetConfig+0x1fa>
 80030e6:	4b6e      	ldr	r3, [pc, #440]	; (80032a0 <UART_SetConfig+0x350>)
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	2230      	movs	r2, #48	; 0x30
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b30      	cmp	r3, #48	; 0x30
 80030f0:	d01d      	beq.n	800312e <UART_SetConfig+0x1de>
 80030f2:	d823      	bhi.n	800313c <UART_SetConfig+0x1ec>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d00c      	beq.n	8003112 <UART_SetConfig+0x1c2>
 80030f8:	d820      	bhi.n	800313c <UART_SetConfig+0x1ec>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <UART_SetConfig+0x1b4>
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d00e      	beq.n	8003120 <UART_SetConfig+0x1d0>
 8003102:	e01b      	b.n	800313c <UART_SetConfig+0x1ec>
 8003104:	231b      	movs	r3, #27
 8003106:	2220      	movs	r2, #32
 8003108:	189b      	adds	r3, r3, r2
 800310a:	19db      	adds	r3, r3, r7
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e0e6      	b.n	80032e0 <UART_SetConfig+0x390>
 8003112:	231b      	movs	r3, #27
 8003114:	2220      	movs	r2, #32
 8003116:	189b      	adds	r3, r3, r2
 8003118:	19db      	adds	r3, r3, r7
 800311a:	2202      	movs	r2, #2
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e0df      	b.n	80032e0 <UART_SetConfig+0x390>
 8003120:	231b      	movs	r3, #27
 8003122:	2220      	movs	r2, #32
 8003124:	189b      	adds	r3, r3, r2
 8003126:	19db      	adds	r3, r3, r7
 8003128:	2204      	movs	r2, #4
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e0d8      	b.n	80032e0 <UART_SetConfig+0x390>
 800312e:	231b      	movs	r3, #27
 8003130:	2220      	movs	r2, #32
 8003132:	189b      	adds	r3, r3, r2
 8003134:	19db      	adds	r3, r3, r7
 8003136:	2208      	movs	r2, #8
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e0d1      	b.n	80032e0 <UART_SetConfig+0x390>
 800313c:	231b      	movs	r3, #27
 800313e:	2220      	movs	r2, #32
 8003140:	189b      	adds	r3, r3, r2
 8003142:	19db      	adds	r3, r3, r7
 8003144:	2210      	movs	r2, #16
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e0ca      	b.n	80032e0 <UART_SetConfig+0x390>
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a57      	ldr	r2, [pc, #348]	; (80032ac <UART_SetConfig+0x35c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d106      	bne.n	8003162 <UART_SetConfig+0x212>
 8003154:	231b      	movs	r3, #27
 8003156:	2220      	movs	r2, #32
 8003158:	189b      	adds	r3, r3, r2
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e0be      	b.n	80032e0 <UART_SetConfig+0x390>
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <UART_SetConfig+0x360>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d106      	bne.n	800317a <UART_SetConfig+0x22a>
 800316c:	231b      	movs	r3, #27
 800316e:	2220      	movs	r2, #32
 8003170:	189b      	adds	r3, r3, r2
 8003172:	19db      	adds	r3, r3, r7
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	e0b2      	b.n	80032e0 <UART_SetConfig+0x390>
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a4d      	ldr	r2, [pc, #308]	; (80032b4 <UART_SetConfig+0x364>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d106      	bne.n	8003192 <UART_SetConfig+0x242>
 8003184:	231b      	movs	r3, #27
 8003186:	2220      	movs	r2, #32
 8003188:	189b      	adds	r3, r3, r2
 800318a:	19db      	adds	r3, r3, r7
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e0a6      	b.n	80032e0 <UART_SetConfig+0x390>
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a3e      	ldr	r2, [pc, #248]	; (8003290 <UART_SetConfig+0x340>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d13e      	bne.n	800321a <UART_SetConfig+0x2ca>
 800319c:	4b40      	ldr	r3, [pc, #256]	; (80032a0 <UART_SetConfig+0x350>)
 800319e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031a0:	23c0      	movs	r3, #192	; 0xc0
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	4013      	ands	r3, r2
 80031a6:	22c0      	movs	r2, #192	; 0xc0
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d027      	beq.n	80031fe <UART_SetConfig+0x2ae>
 80031ae:	22c0      	movs	r2, #192	; 0xc0
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d82a      	bhi.n	800320c <UART_SetConfig+0x2bc>
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d011      	beq.n	80031e2 <UART_SetConfig+0x292>
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d822      	bhi.n	800320c <UART_SetConfig+0x2bc>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <UART_SetConfig+0x284>
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	00d2      	lsls	r2, r2, #3
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <UART_SetConfig+0x2a0>
 80031d2:	e01b      	b.n	800320c <UART_SetConfig+0x2bc>
 80031d4:	231b      	movs	r3, #27
 80031d6:	2220      	movs	r2, #32
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	19db      	adds	r3, r3, r7
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e07e      	b.n	80032e0 <UART_SetConfig+0x390>
 80031e2:	231b      	movs	r3, #27
 80031e4:	2220      	movs	r2, #32
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e077      	b.n	80032e0 <UART_SetConfig+0x390>
 80031f0:	231b      	movs	r3, #27
 80031f2:	2220      	movs	r2, #32
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	19db      	adds	r3, r3, r7
 80031f8:	2204      	movs	r2, #4
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e070      	b.n	80032e0 <UART_SetConfig+0x390>
 80031fe:	231b      	movs	r3, #27
 8003200:	2220      	movs	r2, #32
 8003202:	189b      	adds	r3, r3, r2
 8003204:	19db      	adds	r3, r3, r7
 8003206:	2208      	movs	r2, #8
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e069      	b.n	80032e0 <UART_SetConfig+0x390>
 800320c:	231b      	movs	r3, #27
 800320e:	2220      	movs	r2, #32
 8003210:	189b      	adds	r3, r3, r2
 8003212:	19db      	adds	r3, r3, r7
 8003214:	2210      	movs	r2, #16
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e062      	b.n	80032e0 <UART_SetConfig+0x390>
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <UART_SetConfig+0x344>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d157      	bne.n	80032d4 <UART_SetConfig+0x384>
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <UART_SetConfig+0x350>)
 8003226:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003228:	23c0      	movs	r3, #192	; 0xc0
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4013      	ands	r3, r2
 800322e:	22c0      	movs	r2, #192	; 0xc0
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	4293      	cmp	r3, r2
 8003234:	d040      	beq.n	80032b8 <UART_SetConfig+0x368>
 8003236:	22c0      	movs	r2, #192	; 0xc0
 8003238:	0092      	lsls	r2, r2, #2
 800323a:	4293      	cmp	r3, r2
 800323c:	d843      	bhi.n	80032c6 <UART_SetConfig+0x376>
 800323e:	2280      	movs	r2, #128	; 0x80
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4293      	cmp	r3, r2
 8003244:	d011      	beq.n	800326a <UART_SetConfig+0x31a>
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4293      	cmp	r3, r2
 800324c:	d83b      	bhi.n	80032c6 <UART_SetConfig+0x376>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <UART_SetConfig+0x30c>
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	0052      	lsls	r2, r2, #1
 8003256:	4293      	cmp	r3, r2
 8003258:	d00e      	beq.n	8003278 <UART_SetConfig+0x328>
 800325a:	e034      	b.n	80032c6 <UART_SetConfig+0x376>
 800325c:	231b      	movs	r3, #27
 800325e:	2220      	movs	r2, #32
 8003260:	189b      	adds	r3, r3, r2
 8003262:	19db      	adds	r3, r3, r7
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e03a      	b.n	80032e0 <UART_SetConfig+0x390>
 800326a:	231b      	movs	r3, #27
 800326c:	2220      	movs	r2, #32
 800326e:	189b      	adds	r3, r3, r2
 8003270:	19db      	adds	r3, r3, r7
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e033      	b.n	80032e0 <UART_SetConfig+0x390>
 8003278:	231b      	movs	r3, #27
 800327a:	2220      	movs	r2, #32
 800327c:	189b      	adds	r3, r3, r2
 800327e:	19db      	adds	r3, r3, r7
 8003280:	2204      	movs	r2, #4
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e02c      	b.n	80032e0 <UART_SetConfig+0x390>
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	cfff69f3 	.word	0xcfff69f3
 800328c:	ffffcfff 	.word	0xffffcfff
 8003290:	40008000 	.word	0x40008000
 8003294:	40008400 	.word	0x40008400
 8003298:	11fff4ff 	.word	0x11fff4ff
 800329c:	40013800 	.word	0x40013800
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40004400 	.word	0x40004400
 80032a8:	40004800 	.word	0x40004800
 80032ac:	40004c00 	.word	0x40004c00
 80032b0:	40005000 	.word	0x40005000
 80032b4:	40013c00 	.word	0x40013c00
 80032b8:	231b      	movs	r3, #27
 80032ba:	2220      	movs	r2, #32
 80032bc:	189b      	adds	r3, r3, r2
 80032be:	19db      	adds	r3, r3, r7
 80032c0:	2208      	movs	r2, #8
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e00c      	b.n	80032e0 <UART_SetConfig+0x390>
 80032c6:	231b      	movs	r3, #27
 80032c8:	2220      	movs	r2, #32
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	19db      	adds	r3, r3, r7
 80032ce:	2210      	movs	r2, #16
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e005      	b.n	80032e0 <UART_SetConfig+0x390>
 80032d4:	231b      	movs	r3, #27
 80032d6:	2220      	movs	r2, #32
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	19db      	adds	r3, r3, r7
 80032dc:	2210      	movs	r2, #16
 80032de:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4ac1      	ldr	r2, [pc, #772]	; (80035ec <UART_SetConfig+0x69c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d005      	beq.n	80032f6 <UART_SetConfig+0x3a6>
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4ac0      	ldr	r2, [pc, #768]	; (80035f0 <UART_SetConfig+0x6a0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d000      	beq.n	80032f6 <UART_SetConfig+0x3a6>
 80032f4:	e093      	b.n	800341e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032f6:	231b      	movs	r3, #27
 80032f8:	2220      	movs	r2, #32
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	19db      	adds	r3, r3, r7
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d015      	beq.n	8003330 <UART_SetConfig+0x3e0>
 8003304:	dc18      	bgt.n	8003338 <UART_SetConfig+0x3e8>
 8003306:	2b04      	cmp	r3, #4
 8003308:	d00d      	beq.n	8003326 <UART_SetConfig+0x3d6>
 800330a:	dc15      	bgt.n	8003338 <UART_SetConfig+0x3e8>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <UART_SetConfig+0x3c6>
 8003310:	2b02      	cmp	r3, #2
 8003312:	d005      	beq.n	8003320 <UART_SetConfig+0x3d0>
 8003314:	e010      	b.n	8003338 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003316:	f7fe ff21 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 800331a:	0003      	movs	r3, r0
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800331e:	e014      	b.n	800334a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003320:	4bb4      	ldr	r3, [pc, #720]	; (80035f4 <UART_SetConfig+0x6a4>)
 8003322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003324:	e011      	b.n	800334a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003326:	f7fe fe8d 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 800332a:	0003      	movs	r3, r0
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800332e:	e00c      	b.n	800334a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003336:	e008      	b.n	800334a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800333c:	231a      	movs	r3, #26
 800333e:	2220      	movs	r2, #32
 8003340:	189b      	adds	r3, r3, r2
 8003342:	19db      	adds	r3, r3, r7
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
        break;
 8003348:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800334a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334c:	2b00      	cmp	r3, #0
 800334e:	d100      	bne.n	8003352 <UART_SetConfig+0x402>
 8003350:	e135      	b.n	80035be <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003356:	4ba8      	ldr	r3, [pc, #672]	; (80035f8 <UART_SetConfig+0x6a8>)
 8003358:	0052      	lsls	r2, r2, #1
 800335a:	5ad3      	ldrh	r3, [r2, r3]
 800335c:	0019      	movs	r1, r3
 800335e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003360:	f7fc fed0 	bl	8000104 <__udivsi3>
 8003364:	0003      	movs	r3, r0
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	0013      	movs	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	189b      	adds	r3, r3, r2
 8003372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003374:	429a      	cmp	r2, r3
 8003376:	d305      	bcc.n	8003384 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800337e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003380:	429a      	cmp	r2, r3
 8003382:	d906      	bls.n	8003392 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003384:	231a      	movs	r3, #26
 8003386:	2220      	movs	r2, #32
 8003388:	189b      	adds	r3, r3, r2
 800338a:	19db      	adds	r3, r3, r7
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e044      	b.n	800341c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800339e:	4b96      	ldr	r3, [pc, #600]	; (80035f8 <UART_SetConfig+0x6a8>)
 80033a0:	0052      	lsls	r2, r2, #1
 80033a2:	5ad3      	ldrh	r3, [r2, r3]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	69b8      	ldr	r0, [r7, #24]
 80033b0:	69f9      	ldr	r1, [r7, #28]
 80033b2:	f7fd f81d 	bl	80003f0 <__aeabi_uldivmod>
 80033b6:	0002      	movs	r2, r0
 80033b8:	000b      	movs	r3, r1
 80033ba:	0e11      	lsrs	r1, r2, #24
 80033bc:	021d      	lsls	r5, r3, #8
 80033be:	430d      	orrs	r5, r1
 80033c0:	0214      	lsls	r4, r2, #8
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68b8      	ldr	r0, [r7, #8]
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	1900      	adds	r0, r0, r4
 80033d4:	4169      	adcs	r1, r5
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	2300      	movs	r3, #0
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f7fd f804 	bl	80003f0 <__aeabi_uldivmod>
 80033e8:	0002      	movs	r2, r0
 80033ea:	000b      	movs	r3, r1
 80033ec:	0013      	movs	r3, r2
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f2:	23c0      	movs	r3, #192	; 0xc0
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d309      	bcc.n	800340e <UART_SetConfig+0x4be>
 80033fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	035b      	lsls	r3, r3, #13
 8003400:	429a      	cmp	r2, r3
 8003402:	d204      	bcs.n	800340e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340a:	60da      	str	r2, [r3, #12]
 800340c:	e006      	b.n	800341c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800340e:	231a      	movs	r3, #26
 8003410:	2220      	movs	r2, #32
 8003412:	189b      	adds	r3, r3, r2
 8003414:	19db      	adds	r3, r3, r7
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800341a:	e0d0      	b.n	80035be <UART_SetConfig+0x66e>
 800341c:	e0cf      	b.n	80035be <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	429a      	cmp	r2, r3
 8003428:	d000      	beq.n	800342c <UART_SetConfig+0x4dc>
 800342a:	e070      	b.n	800350e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800342c:	231b      	movs	r3, #27
 800342e:	2220      	movs	r2, #32
 8003430:	189b      	adds	r3, r3, r2
 8003432:	19db      	adds	r3, r3, r7
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b08      	cmp	r3, #8
 8003438:	d015      	beq.n	8003466 <UART_SetConfig+0x516>
 800343a:	dc18      	bgt.n	800346e <UART_SetConfig+0x51e>
 800343c:	2b04      	cmp	r3, #4
 800343e:	d00d      	beq.n	800345c <UART_SetConfig+0x50c>
 8003440:	dc15      	bgt.n	800346e <UART_SetConfig+0x51e>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <UART_SetConfig+0x4fc>
 8003446:	2b02      	cmp	r3, #2
 8003448:	d005      	beq.n	8003456 <UART_SetConfig+0x506>
 800344a:	e010      	b.n	800346e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800344c:	f7fe fe86 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8003450:	0003      	movs	r3, r0
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003454:	e014      	b.n	8003480 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003456:	4b67      	ldr	r3, [pc, #412]	; (80035f4 <UART_SetConfig+0x6a4>)
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800345a:	e011      	b.n	8003480 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345c:	f7fe fdf2 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8003460:	0003      	movs	r3, r0
 8003462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003464:	e00c      	b.n	8003480 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800346c:	e008      	b.n	8003480 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003472:	231a      	movs	r3, #26
 8003474:	2220      	movs	r2, #32
 8003476:	189b      	adds	r3, r3, r2
 8003478:	19db      	adds	r3, r3, r7
 800347a:	2201      	movs	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
        break;
 800347e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	2b00      	cmp	r3, #0
 8003484:	d100      	bne.n	8003488 <UART_SetConfig+0x538>
 8003486:	e09a      	b.n	80035be <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800348c:	4b5a      	ldr	r3, [pc, #360]	; (80035f8 <UART_SetConfig+0x6a8>)
 800348e:	0052      	lsls	r2, r2, #1
 8003490:	5ad3      	ldrh	r3, [r2, r3]
 8003492:	0019      	movs	r1, r3
 8003494:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003496:	f7fc fe35 	bl	8000104 <__udivsi3>
 800349a:	0003      	movs	r3, r0
 800349c:	005a      	lsls	r2, r3, #1
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	18d2      	adds	r2, r2, r3
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	0019      	movs	r1, r3
 80034ac:	0010      	movs	r0, r2
 80034ae:	f7fc fe29 	bl	8000104 <__udivsi3>
 80034b2:	0003      	movs	r3, r0
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	d921      	bls.n	8003500 <UART_SetConfig+0x5b0>
 80034bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	025b      	lsls	r3, r3, #9
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d21c      	bcs.n	8003500 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	200e      	movs	r0, #14
 80034cc:	2420      	movs	r4, #32
 80034ce:	1903      	adds	r3, r0, r4
 80034d0:	19db      	adds	r3, r3, r7
 80034d2:	210f      	movs	r1, #15
 80034d4:	438a      	bics	r2, r1
 80034d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2207      	movs	r2, #7
 80034e0:	4013      	ands	r3, r2
 80034e2:	b299      	uxth	r1, r3
 80034e4:	1903      	adds	r3, r0, r4
 80034e6:	19db      	adds	r3, r3, r7
 80034e8:	1902      	adds	r2, r0, r4
 80034ea:	19d2      	adds	r2, r2, r7
 80034ec:	8812      	ldrh	r2, [r2, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1902      	adds	r2, r0, r4
 80034f8:	19d2      	adds	r2, r2, r7
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	e05e      	b.n	80035be <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003500:	231a      	movs	r3, #26
 8003502:	2220      	movs	r2, #32
 8003504:	189b      	adds	r3, r3, r2
 8003506:	19db      	adds	r3, r3, r7
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	e057      	b.n	80035be <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800350e:	231b      	movs	r3, #27
 8003510:	2220      	movs	r2, #32
 8003512:	189b      	adds	r3, r3, r2
 8003514:	19db      	adds	r3, r3, r7
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d015      	beq.n	8003548 <UART_SetConfig+0x5f8>
 800351c:	dc18      	bgt.n	8003550 <UART_SetConfig+0x600>
 800351e:	2b04      	cmp	r3, #4
 8003520:	d00d      	beq.n	800353e <UART_SetConfig+0x5ee>
 8003522:	dc15      	bgt.n	8003550 <UART_SetConfig+0x600>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <UART_SetConfig+0x5de>
 8003528:	2b02      	cmp	r3, #2
 800352a:	d005      	beq.n	8003538 <UART_SetConfig+0x5e8>
 800352c:	e010      	b.n	8003550 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800352e:	f7fe fe15 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8003532:	0003      	movs	r3, r0
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003536:	e014      	b.n	8003562 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003538:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <UART_SetConfig+0x6a4>)
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800353c:	e011      	b.n	8003562 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353e:	f7fe fd81 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8003542:	0003      	movs	r3, r0
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003546:	e00c      	b.n	8003562 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800354e:	e008      	b.n	8003562 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003554:	231a      	movs	r3, #26
 8003556:	2220      	movs	r2, #32
 8003558:	189b      	adds	r3, r3, r2
 800355a:	19db      	adds	r3, r3, r7
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]
        break;
 8003560:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02a      	beq.n	80035be <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <UART_SetConfig+0x6a8>)
 800356e:	0052      	lsls	r2, r2, #1
 8003570:	5ad3      	ldrh	r3, [r2, r3]
 8003572:	0019      	movs	r1, r3
 8003574:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003576:	f7fc fdc5 	bl	8000104 <__udivsi3>
 800357a:	0003      	movs	r3, r0
 800357c:	001a      	movs	r2, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	18d2      	adds	r2, r2, r3
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0019      	movs	r1, r3
 800358c:	0010      	movs	r0, r2
 800358e:	f7fc fdb9 	bl	8000104 <__udivsi3>
 8003592:	0003      	movs	r3, r0
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	2b0f      	cmp	r3, #15
 800359a:	d90a      	bls.n	80035b2 <UART_SetConfig+0x662>
 800359c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	025b      	lsls	r3, r3, #9
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d205      	bcs.n	80035b2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	e005      	b.n	80035be <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80035b2:	231a      	movs	r3, #26
 80035b4:	2220      	movs	r2, #32
 80035b6:	189b      	adds	r3, r3, r2
 80035b8:	19db      	adds	r3, r3, r7
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	226a      	movs	r2, #106	; 0x6a
 80035c2:	2101      	movs	r1, #1
 80035c4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	2268      	movs	r2, #104	; 0x68
 80035ca:	2101      	movs	r1, #1
 80035cc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	2200      	movs	r2, #0
 80035d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	2200      	movs	r2, #0
 80035d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80035da:	231a      	movs	r3, #26
 80035dc:	2220      	movs	r2, #32
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	19db      	adds	r3, r3, r7
 80035e2:	781b      	ldrb	r3, [r3, #0]
}
 80035e4:	0018      	movs	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b010      	add	sp, #64	; 0x40
 80035ea:	bdb0      	pop	{r4, r5, r7, pc}
 80035ec:	40008000 	.word	0x40008000
 80035f0:	40008400 	.word	0x40008400
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	08004908 	.word	0x08004908

080035fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	2201      	movs	r2, #1
 800360a:	4013      	ands	r3, r2
 800360c:	d00b      	beq.n	8003626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a4a      	ldr	r2, [pc, #296]	; (8003740 <UART_AdvFeatureConfig+0x144>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	2202      	movs	r2, #2
 800362c:	4013      	ands	r3, r2
 800362e:	d00b      	beq.n	8003648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4a43      	ldr	r2, [pc, #268]	; (8003744 <UART_AdvFeatureConfig+0x148>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	2204      	movs	r2, #4
 800364e:	4013      	ands	r3, r2
 8003650:	d00b      	beq.n	800366a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <UART_AdvFeatureConfig+0x14c>)
 800365a:	4013      	ands	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	2208      	movs	r2, #8
 8003670:	4013      	ands	r3, r2
 8003672:	d00b      	beq.n	800368c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4a34      	ldr	r2, [pc, #208]	; (800374c <UART_AdvFeatureConfig+0x150>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	2210      	movs	r2, #16
 8003692:	4013      	ands	r3, r2
 8003694:	d00b      	beq.n	80036ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <UART_AdvFeatureConfig+0x154>)
 800369e:	4013      	ands	r3, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	2220      	movs	r2, #32
 80036b4:	4013      	ands	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <UART_AdvFeatureConfig+0x158>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	0019      	movs	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	2240      	movs	r2, #64	; 0x40
 80036d6:	4013      	ands	r3, r2
 80036d8:	d01d      	beq.n	8003716 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <UART_AdvFeatureConfig+0x15c>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	035b      	lsls	r3, r3, #13
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d10b      	bne.n	8003716 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a15      	ldr	r2, [pc, #84]	; (800375c <UART_AdvFeatureConfig+0x160>)
 8003706:	4013      	ands	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	4013      	ands	r3, r2
 800371e:	d00b      	beq.n	8003738 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <UART_AdvFeatureConfig+0x164>)
 8003728:	4013      	ands	r3, r2
 800372a:	0019      	movs	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  }
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}
 8003740:	fffdffff 	.word	0xfffdffff
 8003744:	fffeffff 	.word	0xfffeffff
 8003748:	fffbffff 	.word	0xfffbffff
 800374c:	ffff7fff 	.word	0xffff7fff
 8003750:	ffffefff 	.word	0xffffefff
 8003754:	ffffdfff 	.word	0xffffdfff
 8003758:	ffefffff 	.word	0xffefffff
 800375c:	ff9fffff 	.word	0xff9fffff
 8003760:	fff7ffff 	.word	0xfff7ffff

08003764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	228c      	movs	r2, #140	; 0x8c
 8003770:	2100      	movs	r1, #0
 8003772:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003774:	f7fd fa46 	bl	8000c04 <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2208      	movs	r2, #8
 8003784:	4013      	ands	r3, r2
 8003786:	2b08      	cmp	r3, #8
 8003788:	d10c      	bne.n	80037a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	0391      	lsls	r1, r2, #14
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <UART_CheckIdleState+0x90>)
 8003794:	9200      	str	r2, [sp, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	f000 f82e 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d001      	beq.n	80037a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e023      	b.n	80037ec <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2204      	movs	r2, #4
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d10c      	bne.n	80037cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	03d1      	lsls	r1, r2, #15
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <UART_CheckIdleState+0x90>)
 80037bc:	9200      	str	r2, [sp, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	f000 f81a 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 80037c4:	1e03      	subs	r3, r0, #0
 80037c6:	d001      	beq.n	80037cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e00f      	b.n	80037ec <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2284      	movs	r2, #132	; 0x84
 80037d0:	2120      	movs	r1, #32
 80037d2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2288      	movs	r2, #136	; 0x88
 80037d8:	2120      	movs	r1, #32
 80037da:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	2100      	movs	r1, #0
 80037e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b004      	add	sp, #16
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	01ffffff 	.word	0x01ffffff

080037f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b094      	sub	sp, #80	; 0x50
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003808:	e0a7      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800380c:	3301      	adds	r3, #1
 800380e:	d100      	bne.n	8003812 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003810:	e0a3      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7fd f9f7 	bl	8000c04 <HAL_GetTick>
 8003816:	0002      	movs	r2, r0
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <UART_WaitOnFlagUntilTimeout+0x30>
 8003822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003824:	2b00      	cmp	r3, #0
 8003826:	d13f      	bne.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003828:	f3ef 8310 	mrs	r3, PRIMASK
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003830:	647b      	str	r3, [r7, #68]	; 0x44
 8003832:	2301      	movs	r3, #1
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	f383 8810 	msr	PRIMASK, r3
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	494e      	ldr	r1, [pc, #312]	; (8003984 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800384a:	400a      	ands	r2, r1
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	f383 8810 	msr	PRIMASK, r3
}
 8003858:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385a:	f3ef 8310 	mrs	r3, PRIMASK
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
 8003864:	2301      	movs	r3, #1
 8003866:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	f383 8810 	msr	PRIMASK, r3
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2101      	movs	r1, #1
 800387c:	438a      	bics	r2, r1
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003886:	f383 8810 	msr	PRIMASK, r3
}
 800388a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2284      	movs	r2, #132	; 0x84
 8003890:	2120      	movs	r1, #32
 8003892:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2288      	movs	r2, #136	; 0x88
 8003898:	2120      	movs	r1, #32
 800389a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2280      	movs	r2, #128	; 0x80
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e069      	b.n	800397c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2204      	movs	r2, #4
 80038b0:	4013      	ands	r3, r2
 80038b2:	d052      	beq.n	800395a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	401a      	ands	r2, r3
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d148      	bne.n	800395a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	613b      	str	r3, [r7, #16]
  return(result);
 80038d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038dc:	2301      	movs	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4924      	ldr	r1, [pc, #144]	; (8003984 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003904:	f3ef 8310 	mrs	r3, PRIMASK
 8003908:	61fb      	str	r3, [r7, #28]
  return(result);
 800390a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
 800390e:	2301      	movs	r3, #1
 8003910:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f383 8810 	msr	PRIMASK, r3
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	438a      	bics	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f383 8810 	msr	PRIMASK, r3
}
 8003934:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2284      	movs	r2, #132	; 0x84
 800393a:	2120      	movs	r1, #32
 800393c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2288      	movs	r2, #136	; 0x88
 8003942:	2120      	movs	r1, #32
 8003944:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	228c      	movs	r2, #140	; 0x8c
 800394a:	2120      	movs	r1, #32
 800394c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e010      	b.n	800397c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	425a      	negs	r2, r3
 800396a:	4153      	adcs	r3, r2
 800396c:	b2db      	uxtb	r3, r3
 800396e:	001a      	movs	r2, r3
 8003970:	1dfb      	adds	r3, r7, #7
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d100      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0x182>
 8003978:	e747      	b.n	800380a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b014      	add	sp, #80	; 0x50
 8003982:	bd80      	pop	{r7, pc}
 8003984:	fffffe5f 	.word	0xfffffe5f

08003988 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b098      	sub	sp, #96	; 0x60
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1dba      	adds	r2, r7, #6
 80039a0:	215c      	movs	r1, #92	; 0x5c
 80039a2:	8812      	ldrh	r2, [r2, #0]
 80039a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1dba      	adds	r2, r7, #6
 80039aa:	215e      	movs	r1, #94	; 0x5e
 80039ac:	8812      	ldrh	r2, [r2, #0]
 80039ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	015b      	lsls	r3, r3, #5
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10d      	bne.n	80039de <UART_Start_Receive_IT+0x56>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d104      	bne.n	80039d4 <UART_Start_Receive_IT+0x4c>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2260      	movs	r2, #96	; 0x60
 80039ce:	497f      	ldr	r1, [pc, #508]	; (8003bcc <UART_Start_Receive_IT+0x244>)
 80039d0:	5299      	strh	r1, [r3, r2]
 80039d2:	e02e      	b.n	8003a32 <UART_Start_Receive_IT+0xaa>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2260      	movs	r2, #96	; 0x60
 80039d8:	21ff      	movs	r1, #255	; 0xff
 80039da:	5299      	strh	r1, [r3, r2]
 80039dc:	e029      	b.n	8003a32 <UART_Start_Receive_IT+0xaa>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10d      	bne.n	8003a02 <UART_Start_Receive_IT+0x7a>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <UART_Start_Receive_IT+0x70>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2260      	movs	r2, #96	; 0x60
 80039f2:	21ff      	movs	r1, #255	; 0xff
 80039f4:	5299      	strh	r1, [r3, r2]
 80039f6:	e01c      	b.n	8003a32 <UART_Start_Receive_IT+0xaa>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2260      	movs	r2, #96	; 0x60
 80039fc:	217f      	movs	r1, #127	; 0x7f
 80039fe:	5299      	strh	r1, [r3, r2]
 8003a00:	e017      	b.n	8003a32 <UART_Start_Receive_IT+0xaa>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	055b      	lsls	r3, r3, #21
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d10d      	bne.n	8003a2a <UART_Start_Receive_IT+0xa2>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <UART_Start_Receive_IT+0x98>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2260      	movs	r2, #96	; 0x60
 8003a1a:	217f      	movs	r1, #127	; 0x7f
 8003a1c:	5299      	strh	r1, [r3, r2]
 8003a1e:	e008      	b.n	8003a32 <UART_Start_Receive_IT+0xaa>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2260      	movs	r2, #96	; 0x60
 8003a24:	213f      	movs	r1, #63	; 0x3f
 8003a26:	5299      	strh	r1, [r3, r2]
 8003a28:	e003      	b.n	8003a32 <UART_Start_Receive_IT+0xaa>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2260      	movs	r2, #96	; 0x60
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	228c      	movs	r2, #140	; 0x8c
 8003a36:	2100      	movs	r1, #0
 8003a38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2288      	movs	r2, #136	; 0x88
 8003a3e:	2122      	movs	r1, #34	; 0x22
 8003a40:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a42:	f3ef 8310 	mrs	r3, PRIMASK
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a52:	f383 8810 	msr	PRIMASK, r3
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2101      	movs	r1, #1
 8003a64:	430a      	orrs	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6e:	f383 8810 	msr	PRIMASK, r3
}
 8003a72:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	059b      	lsls	r3, r3, #22
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d154      	bne.n	8003b2a <UART_Start_Receive_IT+0x1a2>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2268      	movs	r2, #104	; 0x68
 8003a84:	5a9b      	ldrh	r3, [r3, r2]
 8003a86:	1dba      	adds	r2, r7, #6
 8003a88:	8812      	ldrh	r2, [r2, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d34d      	bcc.n	8003b2a <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	015b      	lsls	r3, r3, #5
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d107      	bne.n	8003aaa <UART_Start_Receive_IT+0x122>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a4a      	ldr	r2, [pc, #296]	; (8003bd0 <UART_Start_Receive_IT+0x248>)
 8003aa6:	671a      	str	r2, [r3, #112]	; 0x70
 8003aa8:	e002      	b.n	8003ab0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a49      	ldr	r2, [pc, #292]	; (8003bd4 <UART_Start_Receive_IT+0x24c>)
 8003aae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d019      	beq.n	8003af4 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ac8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aca:	2301      	movs	r3, #1
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2180      	movs	r1, #128	; 0x80
 8003ae2:	0049      	lsls	r1, r1, #1
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af4:	f3ef 8310 	mrs	r3, PRIMASK
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003afc:	657b      	str	r3, [r7, #84]	; 0x54
 8003afe:	2301      	movs	r3, #1
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	0549      	lsls	r1, r1, #21
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	f383 8810 	msr	PRIMASK, r3
}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	e04b      	b.n	8003bc2 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	015b      	lsls	r3, r3, #5
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d107      	bne.n	8003b46 <UART_Start_Receive_IT+0x1be>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a25      	ldr	r2, [pc, #148]	; (8003bd8 <UART_Start_Receive_IT+0x250>)
 8003b42:	671a      	str	r2, [r3, #112]	; 0x70
 8003b44:	e002      	b.n	8003b4c <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a24      	ldr	r2, [pc, #144]	; (8003bdc <UART_Start_Receive_IT+0x254>)
 8003b4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d019      	beq.n	8003b90 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b60:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b62:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b66:	2301      	movs	r3, #1
 8003b68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f383 8810 	msr	PRIMASK, r3
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2190      	movs	r1, #144	; 0x90
 8003b7e:	0049      	lsls	r1, r1, #1
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	f383 8810 	msr	PRIMASK, r3
}
 8003b8e:	e018      	b.n	8003bc2 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b90:	f3ef 8310 	mrs	r3, PRIMASK
 8003b94:	613b      	str	r3, [r7, #16]
  return(result);
 8003b96:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b98:	653b      	str	r3, [r7, #80]	; 0x50
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f383 8810 	msr	PRIMASK, r3
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b018      	add	sp, #96	; 0x60
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	000001ff 	.word	0x000001ff
 8003bd0:	080042f1 	.word	0x080042f1
 8003bd4:	0800400d 	.word	0x0800400d
 8003bd8:	08003ea1 	.word	0x08003ea1
 8003bdc:	08003d35 	.word	0x08003d35

08003be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08e      	sub	sp, #56	; 0x38
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bec:	617b      	str	r3, [r7, #20]
  return(result);
 8003bee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f383 8810 	msr	PRIMASK, r3
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4926      	ldr	r1, [pc, #152]	; (8003ca4 <UART_EndRxTransfer+0xc4>)
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f383 8810 	msr	PRIMASK, r3
}
 8003c18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1e:	623b      	str	r3, [r7, #32]
  return(result);
 8003c20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c22:	633b      	str	r3, [r7, #48]	; 0x30
 8003c24:	2301      	movs	r3, #1
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	f383 8810 	msr	PRIMASK, r3
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	491b      	ldr	r1, [pc, #108]	; (8003ca8 <UART_EndRxTransfer+0xc8>)
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	f383 8810 	msr	PRIMASK, r3
}
 8003c4a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d118      	bne.n	8003c86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c54:	f3ef 8310 	mrs	r3, PRIMASK
 8003c58:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	2301      	movs	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2110      	movs	r1, #16
 8003c76:	438a      	bics	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2288      	movs	r2, #136	; 0x88
 8003c8a:	2120      	movs	r1, #32
 8003c8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b00e      	add	sp, #56	; 0x38
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	fffffedf 	.word	0xfffffedf
 8003ca8:	effffffe 	.word	0xeffffffe

08003cac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	225e      	movs	r2, #94	; 0x5e
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2256      	movs	r2, #86	; 0x56
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7ff f92b 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	2301      	movs	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f383 8810 	msr	PRIMASK, r3
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2140      	movs	r1, #64	; 0x40
 8003d04:	438a      	bics	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f383 8810 	msr	PRIMASK, r3
}
 8003d12:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2284      	movs	r2, #132	; 0x84
 8003d18:	2120      	movs	r1, #32
 8003d1a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff f8f7 	bl	8002f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b006      	add	sp, #24
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b090      	sub	sp, #64	; 0x40
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d3c:	203e      	movs	r0, #62	; 0x3e
 8003d3e:	183b      	adds	r3, r7, r0
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	2160      	movs	r1, #96	; 0x60
 8003d44:	5a52      	ldrh	r2, [r2, r1]
 8003d46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2288      	movs	r2, #136	; 0x88
 8003d4c:	589b      	ldr	r3, [r3, r2]
 8003d4e:	2b22      	cmp	r3, #34	; 0x22
 8003d50:	d000      	beq.n	8003d54 <UART_RxISR_8BIT+0x20>
 8003d52:	e097      	b.n	8003e84 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5a:	213c      	movs	r1, #60	; 0x3c
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	183b      	adds	r3, r7, r0
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b2d9      	uxtb	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	400a      	ands	r2, r1
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	225e      	movs	r2, #94	; 0x5e
 8003d84:	5a9b      	ldrh	r3, [r3, r2]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b299      	uxth	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	225e      	movs	r2, #94	; 0x5e
 8003d90:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	225e      	movs	r2, #94	; 0x5e
 8003d96:	5a9b      	ldrh	r3, [r3, r2]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d000      	beq.n	8003da0 <UART_RxISR_8BIT+0x6c>
 8003d9e:	e079      	b.n	8003e94 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da0:	f3ef 8310 	mrs	r3, PRIMASK
 8003da4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003da6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f383 8810 	msr	PRIMASK, r3
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4936      	ldr	r1, [pc, #216]	; (8003e9c <UART_RxISR_8BIT+0x168>)
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	f383 8810 	msr	PRIMASK, r3
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
 8003ddc:	2301      	movs	r3, #1
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	f383 8810 	msr	PRIMASK, r3
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2101      	movs	r1, #1
 8003df4:	438a      	bics	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfe:	f383 8810 	msr	PRIMASK, r3
}
 8003e02:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2288      	movs	r2, #136	; 0x88
 8003e08:	2120      	movs	r1, #32
 8003e0a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d12f      	bne.n	8003e7a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e20:	f3ef 8310 	mrs	r3, PRIMASK
 8003e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e26:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f383 8810 	msr	PRIMASK, r3
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2110      	movs	r1, #16
 8003e42:	438a      	bics	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f383 8810 	msr	PRIMASK, r3
}
 8003e50:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	2210      	movs	r2, #16
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d103      	bne.n	8003e68 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2210      	movs	r2, #16
 8003e66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	225c      	movs	r2, #92	; 0x5c
 8003e6c:	5a9a      	ldrh	r2, [r3, r2]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0011      	movs	r1, r2
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7ff f860 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e78:	e00c      	b.n	8003e94 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7fc fbcd 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003e82:	e007      	b.n	8003e94 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2108      	movs	r1, #8
 8003e90:	430a      	orrs	r2, r1
 8003e92:	619a      	str	r2, [r3, #24]
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b010      	add	sp, #64	; 0x40
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	fffffedf 	.word	0xfffffedf

08003ea0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b090      	sub	sp, #64	; 0x40
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ea8:	203e      	movs	r0, #62	; 0x3e
 8003eaa:	183b      	adds	r3, r7, r0
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	2160      	movs	r1, #96	; 0x60
 8003eb0:	5a52      	ldrh	r2, [r2, r1]
 8003eb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2288      	movs	r2, #136	; 0x88
 8003eb8:	589b      	ldr	r3, [r3, r2]
 8003eba:	2b22      	cmp	r3, #34	; 0x22
 8003ebc:	d000      	beq.n	8003ec0 <UART_RxISR_16BIT+0x20>
 8003ebe:	e097      	b.n	8003ff0 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec6:	213c      	movs	r1, #60	; 0x3c
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	183a      	adds	r2, r7, r0
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	4013      	ands	r3, r2
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	225e      	movs	r2, #94	; 0x5e
 8003ef0:	5a9b      	ldrh	r3, [r3, r2]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b299      	uxth	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	225e      	movs	r2, #94	; 0x5e
 8003efc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	225e      	movs	r2, #94	; 0x5e
 8003f02:	5a9b      	ldrh	r3, [r3, r2]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d000      	beq.n	8003f0c <UART_RxISR_16BIT+0x6c>
 8003f0a:	e079      	b.n	8004000 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f10:	617b      	str	r3, [r7, #20]
  return(result);
 8003f12:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
 8003f16:	2301      	movs	r3, #1
 8003f18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f383 8810 	msr	PRIMASK, r3
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4936      	ldr	r1, [pc, #216]	; (8004008 <UART_RxISR_16BIT+0x168>)
 8003f2e:	400a      	ands	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f42:	623b      	str	r3, [r7, #32]
  return(result);
 8003f44:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
 8003f48:	2301      	movs	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	f383 8810 	msr	PRIMASK, r3
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2101      	movs	r1, #1
 8003f60:	438a      	bics	r2, r1
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	f383 8810 	msr	PRIMASK, r3
}
 8003f6e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2288      	movs	r2, #136	; 0x88
 8003f74:	2120      	movs	r1, #32
 8003f76:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d12f      	bne.n	8003fe6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f90:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f92:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f96:	2301      	movs	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f383 8810 	msr	PRIMASK, r3
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2110      	movs	r1, #16
 8003fae:	438a      	bics	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f383 8810 	msr	PRIMASK, r3
}
 8003fbc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d103      	bne.n	8003fd4 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	225c      	movs	r2, #92	; 0x5c
 8003fd8:	5a9a      	ldrh	r2, [r3, r2]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0011      	movs	r1, r2
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7fe ffaa 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fe4:	e00c      	b.n	8004000 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7fc fb17 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003fee:	e007      	b.n	8004000 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2108      	movs	r1, #8
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	619a      	str	r2, [r3, #24]
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b010      	add	sp, #64	; 0x40
 8004006:	bd80      	pop	{r7, pc}
 8004008:	fffffedf 	.word	0xfffffedf

0800400c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b09c      	sub	sp, #112	; 0x70
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004014:	236a      	movs	r3, #106	; 0x6a
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	2160      	movs	r1, #96	; 0x60
 800401c:	5a52      	ldrh	r2, [r2, r1]
 800401e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2288      	movs	r2, #136	; 0x88
 800403c:	589b      	ldr	r3, [r3, r2]
 800403e:	2b22      	cmp	r3, #34	; 0x22
 8004040:	d000      	beq.n	8004044 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004042:	e141      	b.n	80042c8 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004044:	235e      	movs	r3, #94	; 0x5e
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	2168      	movs	r1, #104	; 0x68
 800404c:	5a52      	ldrh	r2, [r2, r1]
 800404e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004050:	e0e8      	b.n	8004224 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004058:	215c      	movs	r1, #92	; 0x5c
 800405a:	187b      	adds	r3, r7, r1
 800405c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800405e:	187b      	adds	r3, r7, r1
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	236a      	movs	r3, #106	; 0x6a
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b2d9      	uxtb	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	400a      	ands	r2, r1
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	225e      	movs	r2, #94	; 0x5e
 8004084:	5a9b      	ldrh	r3, [r3, r2]
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b299      	uxth	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	225e      	movs	r2, #94	; 0x5e
 8004090:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	2207      	movs	r2, #7
 800409e:	4013      	ands	r3, r2
 80040a0:	d049      	beq.n	8004136 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a4:	2201      	movs	r2, #1
 80040a6:	4013      	ands	r3, r2
 80040a8:	d010      	beq.n	80040cc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80040aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	4013      	ands	r3, r2
 80040b2:	d00b      	beq.n	80040cc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2201      	movs	r2, #1
 80040ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	228c      	movs	r2, #140	; 0x8c
 80040c0:	589b      	ldr	r3, [r3, r2]
 80040c2:	2201      	movs	r2, #1
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	218c      	movs	r1, #140	; 0x8c
 80040ca:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	2202      	movs	r2, #2
 80040d0:	4013      	ands	r3, r2
 80040d2:	d00f      	beq.n	80040f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80040d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d6:	2201      	movs	r2, #1
 80040d8:	4013      	ands	r3, r2
 80040da:	d00b      	beq.n	80040f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2202      	movs	r2, #2
 80040e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	228c      	movs	r2, #140	; 0x8c
 80040e8:	589b      	ldr	r3, [r3, r2]
 80040ea:	2204      	movs	r2, #4
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	218c      	movs	r1, #140	; 0x8c
 80040f2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f6:	2204      	movs	r2, #4
 80040f8:	4013      	ands	r3, r2
 80040fa:	d00f      	beq.n	800411c <UART_RxISR_8BIT_FIFOEN+0x110>
 80040fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040fe:	2201      	movs	r2, #1
 8004100:	4013      	ands	r3, r2
 8004102:	d00b      	beq.n	800411c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2204      	movs	r2, #4
 800410a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	228c      	movs	r2, #140	; 0x8c
 8004110:	589b      	ldr	r3, [r3, r2]
 8004112:	2202      	movs	r2, #2
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	218c      	movs	r1, #140	; 0x8c
 800411a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	228c      	movs	r2, #140	; 0x8c
 8004120:	589b      	ldr	r3, [r3, r2]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0018      	movs	r0, r3
 800412a:	f7fe fefd 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	228c      	movs	r2, #140	; 0x8c
 8004132:	2100      	movs	r1, #0
 8004134:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	225e      	movs	r2, #94	; 0x5e
 800413a:	5a9b      	ldrh	r3, [r3, r2]
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d170      	bne.n	8004224 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004142:	f3ef 8310 	mrs	r3, PRIMASK
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800414a:	65bb      	str	r3, [r7, #88]	; 0x58
 800414c:	2301      	movs	r3, #1
 800414e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	f383 8810 	msr	PRIMASK, r3
}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	495f      	ldr	r1, [pc, #380]	; (80042e0 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8004164:	400a      	ands	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	f383 8810 	msr	PRIMASK, r3
}
 8004172:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004174:	f3ef 8310 	mrs	r3, PRIMASK
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800417c:	657b      	str	r3, [r7, #84]	; 0x54
 800417e:	2301      	movs	r3, #1
 8004180:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004184:	f383 8810 	msr	PRIMASK, r3
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4953      	ldr	r1, [pc, #332]	; (80042e4 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8004196:	400a      	ands	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
 800419a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a0:	f383 8810 	msr	PRIMASK, r3
}
 80041a4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2288      	movs	r2, #136	; 0x88
 80041aa:	2120      	movs	r1, #32
 80041ac:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d12f      	bne.n	800421c <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	623b      	str	r3, [r7, #32]
  return(result);
 80041c8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
 80041cc:	2301      	movs	r3, #1
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2110      	movs	r1, #16
 80041e4:	438a      	bics	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	2210      	movs	r2, #16
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d103      	bne.n	800420a <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2210      	movs	r2, #16
 8004208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	225c      	movs	r2, #92	; 0x5c
 800420e:	5a9a      	ldrh	r2, [r3, r2]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f7fe fe8f 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
 800421a:	e003      	b.n	8004224 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	0018      	movs	r0, r3
 8004220:	f7fc f9fc 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004224:	235e      	movs	r3, #94	; 0x5e
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d004      	beq.n	8004238 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800422e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004230:	2220      	movs	r2, #32
 8004232:	4013      	ands	r3, r2
 8004234:	d000      	beq.n	8004238 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004236:	e70c      	b.n	8004052 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004238:	204e      	movs	r0, #78	; 0x4e
 800423a:	183b      	adds	r3, r7, r0
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	215e      	movs	r1, #94	; 0x5e
 8004240:	5a52      	ldrh	r2, [r2, r1]
 8004242:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004244:	0001      	movs	r1, r0
 8004246:	187b      	adds	r3, r7, r1
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d044      	beq.n	80042d8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2268      	movs	r2, #104	; 0x68
 8004252:	5a9b      	ldrh	r3, [r3, r2]
 8004254:	187a      	adds	r2, r7, r1
 8004256:	8812      	ldrh	r2, [r2, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d23d      	bcs.n	80042d8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425c:	f3ef 8310 	mrs	r3, PRIMASK
 8004260:	60bb      	str	r3, [r7, #8]
  return(result);
 8004262:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48
 8004266:	2301      	movs	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	491a      	ldr	r1, [pc, #104]	; (80042e8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800427e:	400a      	ands	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a16      	ldr	r2, [pc, #88]	; (80042ec <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004292:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004294:	f3ef 8310 	mrs	r3, PRIMASK
 8004298:	617b      	str	r3, [r7, #20]
  return(result);
 800429a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
 800429e:	2301      	movs	r3, #1
 80042a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f383 8810 	msr	PRIMASK, r3
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2120      	movs	r1, #32
 80042b6:	430a      	orrs	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042c6:	e007      	b.n	80042d8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2108      	movs	r1, #8
 80042d4:	430a      	orrs	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b01c      	add	sp, #112	; 0x70
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	fffffeff 	.word	0xfffffeff
 80042e4:	effffffe 	.word	0xeffffffe
 80042e8:	efffffff 	.word	0xefffffff
 80042ec:	08003d35 	.word	0x08003d35

080042f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b09e      	sub	sp, #120	; 0x78
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80042f8:	2372      	movs	r3, #114	; 0x72
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	2160      	movs	r1, #96	; 0x60
 8004300:	5a52      	ldrh	r2, [r2, r1]
 8004302:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2288      	movs	r2, #136	; 0x88
 8004320:	589b      	ldr	r3, [r3, r2]
 8004322:	2b22      	cmp	r3, #34	; 0x22
 8004324:	d000      	beq.n	8004328 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004326:	e141      	b.n	80045ac <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004328:	2366      	movs	r3, #102	; 0x66
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	2168      	movs	r1, #104	; 0x68
 8004330:	5a52      	ldrh	r2, [r2, r1]
 8004332:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004334:	e0e8      	b.n	8004508 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800433c:	2164      	movs	r1, #100	; 0x64
 800433e:	187b      	adds	r3, r7, r1
 8004340:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004346:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004348:	187b      	adds	r3, r7, r1
 800434a:	2272      	movs	r2, #114	; 0x72
 800434c:	18ba      	adds	r2, r7, r2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	8812      	ldrh	r2, [r2, #0]
 8004352:	4013      	ands	r3, r2
 8004354:	b29a      	uxth	r2, r3
 8004356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004358:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	225e      	movs	r2, #94	; 0x5e
 8004368:	5a9b      	ldrh	r3, [r3, r2]
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b299      	uxth	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	225e      	movs	r2, #94	; 0x5e
 8004374:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800437e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004380:	2207      	movs	r2, #7
 8004382:	4013      	ands	r3, r2
 8004384:	d049      	beq.n	800441a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004388:	2201      	movs	r2, #1
 800438a:	4013      	ands	r3, r2
 800438c:	d010      	beq.n	80043b0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800438e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4013      	ands	r3, r2
 8004396:	d00b      	beq.n	80043b0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2201      	movs	r2, #1
 800439e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	228c      	movs	r2, #140	; 0x8c
 80043a4:	589b      	ldr	r3, [r3, r2]
 80043a6:	2201      	movs	r2, #1
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	218c      	movs	r1, #140	; 0x8c
 80043ae:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b2:	2202      	movs	r2, #2
 80043b4:	4013      	ands	r3, r2
 80043b6:	d00f      	beq.n	80043d8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80043b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ba:	2201      	movs	r2, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	d00b      	beq.n	80043d8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2202      	movs	r2, #2
 80043c6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	228c      	movs	r2, #140	; 0x8c
 80043cc:	589b      	ldr	r3, [r3, r2]
 80043ce:	2204      	movs	r2, #4
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	218c      	movs	r1, #140	; 0x8c
 80043d6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043da:	2204      	movs	r2, #4
 80043dc:	4013      	ands	r3, r2
 80043de:	d00f      	beq.n	8004400 <UART_RxISR_16BIT_FIFOEN+0x110>
 80043e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043e2:	2201      	movs	r2, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	d00b      	beq.n	8004400 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2204      	movs	r2, #4
 80043ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	228c      	movs	r2, #140	; 0x8c
 80043f4:	589b      	ldr	r3, [r3, r2]
 80043f6:	2202      	movs	r2, #2
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	218c      	movs	r1, #140	; 0x8c
 80043fe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	228c      	movs	r2, #140	; 0x8c
 8004404:	589b      	ldr	r3, [r3, r2]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	0018      	movs	r0, r3
 800440e:	f7fe fd8b 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	228c      	movs	r2, #140	; 0x8c
 8004416:	2100      	movs	r1, #0
 8004418:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	225e      	movs	r2, #94	; 0x5e
 800441e:	5a9b      	ldrh	r3, [r3, r2]
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d170      	bne.n	8004508 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004426:	f3ef 8310 	mrs	r3, PRIMASK
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800442e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004430:	2301      	movs	r3, #1
 8004432:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004436:	f383 8810 	msr	PRIMASK, r3
}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	495f      	ldr	r1, [pc, #380]	; (80045c4 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004448:	400a      	ands	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	f383 8810 	msr	PRIMASK, r3
}
 8004456:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004458:	f3ef 8310 	mrs	r3, PRIMASK
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004460:	65bb      	str	r3, [r7, #88]	; 0x58
 8004462:	2301      	movs	r3, #1
 8004464:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004468:	f383 8810 	msr	PRIMASK, r3
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4953      	ldr	r1, [pc, #332]	; (80045c8 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 800447a:	400a      	ands	r2, r1
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	f383 8810 	msr	PRIMASK, r3
}
 8004488:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2288      	movs	r2, #136	; 0x88
 800448e:	2120      	movs	r1, #32
 8004490:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d12f      	bne.n	8004500 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a6:	f3ef 8310 	mrs	r3, PRIMASK
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ae:	657b      	str	r3, [r7, #84]	; 0x54
 80044b0:	2301      	movs	r3, #1
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2110      	movs	r1, #16
 80044c8:	438a      	bics	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	2210      	movs	r2, #16
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d103      	bne.n	80044ee <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2210      	movs	r2, #16
 80044ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	225c      	movs	r2, #92	; 0x5c
 80044f2:	5a9a      	ldrh	r2, [r3, r2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	0011      	movs	r1, r2
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7fe fd1d 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
 80044fe:	e003      	b.n	8004508 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0018      	movs	r0, r3
 8004504:	f7fc f88a 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004508:	2366      	movs	r3, #102	; 0x66
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004514:	2220      	movs	r2, #32
 8004516:	4013      	ands	r3, r2
 8004518:	d000      	beq.n	800451c <UART_RxISR_16BIT_FIFOEN+0x22c>
 800451a:	e70c      	b.n	8004336 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800451c:	2052      	movs	r0, #82	; 0x52
 800451e:	183b      	adds	r3, r7, r0
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	215e      	movs	r1, #94	; 0x5e
 8004524:	5a52      	ldrh	r2, [r2, r1]
 8004526:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004528:	0001      	movs	r1, r0
 800452a:	187b      	adds	r3, r7, r1
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d044      	beq.n	80045bc <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2268      	movs	r2, #104	; 0x68
 8004536:	5a9b      	ldrh	r3, [r3, r2]
 8004538:	187a      	adds	r2, r7, r1
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d23d      	bcs.n	80045bc <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004540:	f3ef 8310 	mrs	r3, PRIMASK
 8004544:	60fb      	str	r3, [r7, #12]
  return(result);
 8004546:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800454a:	2301      	movs	r3, #1
 800454c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f383 8810 	msr	PRIMASK, r3
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	491a      	ldr	r1, [pc, #104]	; (80045cc <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004562:	400a      	ands	r2, r1
 8004564:	609a      	str	r2, [r3, #8]
 8004566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f383 8810 	msr	PRIMASK, r3
}
 8004570:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004576:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004578:	f3ef 8310 	mrs	r3, PRIMASK
 800457c:	61bb      	str	r3, [r7, #24]
  return(result);
 800457e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004580:	64bb      	str	r3, [r7, #72]	; 0x48
 8004582:	2301      	movs	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f383 8810 	msr	PRIMASK, r3
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2120      	movs	r1, #32
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f383 8810 	msr	PRIMASK, r3
}
 80045a8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045aa:	e007      	b.n	80045bc <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2108      	movs	r1, #8
 80045b8:	430a      	orrs	r2, r1
 80045ba:	619a      	str	r2, [r3, #24]
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b01e      	add	sp, #120	; 0x78
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	fffffeff 	.word	0xfffffeff
 80045c8:	effffffe 	.word	0xeffffffe
 80045cc:	efffffff 	.word	0xefffffff
 80045d0:	08003ea1 	.word	0x08003ea1

080045d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b002      	add	sp, #8
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	5c9b      	ldrb	r3, [r3, r2]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_UARTEx_DisableFifoMode+0x16>
 8004616:	2302      	movs	r3, #2
 8004618:	e027      	b.n	800466a <HAL_UARTEx_DisableFifoMode+0x66>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2284      	movs	r2, #132	; 0x84
 8004626:	2124      	movs	r1, #36	; 0x24
 8004628:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	438a      	bics	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004646:	4013      	ands	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2284      	movs	r2, #132	; 0x84
 800465c:	2120      	movs	r1, #32
 800465e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2280      	movs	r2, #128	; 0x80
 8004664:	2100      	movs	r1, #0
 8004666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b004      	add	sp, #16
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	dfffffff 	.word	0xdfffffff

08004678 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2280      	movs	r2, #128	; 0x80
 8004686:	5c9b      	ldrb	r3, [r3, r2]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800468c:	2302      	movs	r3, #2
 800468e:	e02e      	b.n	80046ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	2101      	movs	r1, #1
 8004696:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2284      	movs	r2, #132	; 0x84
 800469c:	2124      	movs	r1, #36	; 0x24
 800469e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2101      	movs	r1, #1
 80046b4:	438a      	bics	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	08d9      	lsrs	r1, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f854 	bl	800477c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2284      	movs	r2, #132	; 0x84
 80046e0:	2120      	movs	r1, #32
 80046e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2280      	movs	r2, #128	; 0x80
 80046e8:	2100      	movs	r1, #0
 80046ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b004      	add	sp, #16
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	5c9b      	ldrb	r3, [r3, r2]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e02f      	b.n	8004770 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	2101      	movs	r1, #1
 8004716:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2284      	movs	r2, #132	; 0x84
 800471c:	2124      	movs	r1, #36	; 0x24
 800471e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2101      	movs	r1, #1
 8004734:	438a      	bics	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004740:	4013      	ands	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 f813 	bl	800477c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2284      	movs	r2, #132	; 0x84
 8004762:	2120      	movs	r1, #32
 8004764:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2280      	movs	r2, #128	; 0x80
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b004      	add	sp, #16
 8004776:	bd80      	pop	{r7, pc}
 8004778:	f1ffffff 	.word	0xf1ffffff

0800477c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004788:	2b00      	cmp	r3, #0
 800478a:	d108      	bne.n	800479e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	226a      	movs	r2, #106	; 0x6a
 8004790:	2101      	movs	r1, #1
 8004792:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2268      	movs	r2, #104	; 0x68
 8004798:	2101      	movs	r1, #1
 800479a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800479c:	e043      	b.n	8004826 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800479e:	260f      	movs	r6, #15
 80047a0:	19bb      	adds	r3, r7, r6
 80047a2:	2208      	movs	r2, #8
 80047a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047a6:	200e      	movs	r0, #14
 80047a8:	183b      	adds	r3, r7, r0
 80047aa:	2208      	movs	r2, #8
 80047ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	0e5b      	lsrs	r3, r3, #25
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	240d      	movs	r4, #13
 80047ba:	193b      	adds	r3, r7, r4
 80047bc:	2107      	movs	r1, #7
 80047be:	400a      	ands	r2, r1
 80047c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	0f5b      	lsrs	r3, r3, #29
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	250c      	movs	r5, #12
 80047ce:	197b      	adds	r3, r7, r5
 80047d0:	2107      	movs	r1, #7
 80047d2:	400a      	ands	r2, r1
 80047d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047d6:	183b      	adds	r3, r7, r0
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	197a      	adds	r2, r7, r5
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	4914      	ldr	r1, [pc, #80]	; (8004830 <UARTEx_SetNbDataToProcess+0xb4>)
 80047e0:	5c8a      	ldrb	r2, [r1, r2]
 80047e2:	435a      	muls	r2, r3
 80047e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80047e6:	197b      	adds	r3, r7, r5
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <UARTEx_SetNbDataToProcess+0xb8>)
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047ee:	0019      	movs	r1, r3
 80047f0:	f7fb fd12 	bl	8000218 <__divsi3>
 80047f4:	0003      	movs	r3, r0
 80047f6:	b299      	uxth	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	226a      	movs	r2, #106	; 0x6a
 80047fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047fe:	19bb      	adds	r3, r7, r6
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	193a      	adds	r2, r7, r4
 8004804:	7812      	ldrb	r2, [r2, #0]
 8004806:	490a      	ldr	r1, [pc, #40]	; (8004830 <UARTEx_SetNbDataToProcess+0xb4>)
 8004808:	5c8a      	ldrb	r2, [r1, r2]
 800480a:	435a      	muls	r2, r3
 800480c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800480e:	193b      	adds	r3, r7, r4
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <UARTEx_SetNbDataToProcess+0xb8>)
 8004814:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004816:	0019      	movs	r1, r3
 8004818:	f7fb fcfe 	bl	8000218 <__divsi3>
 800481c:	0003      	movs	r3, r0
 800481e:	b299      	uxth	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2268      	movs	r2, #104	; 0x68
 8004824:	5299      	strh	r1, [r3, r2]
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	b005      	add	sp, #20
 800482c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	08004920 	.word	0x08004920
 8004834:	08004928 	.word	0x08004928

08004838 <__libc_init_array>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	2600      	movs	r6, #0
 800483c:	4d0c      	ldr	r5, [pc, #48]	; (8004870 <__libc_init_array+0x38>)
 800483e:	4c0d      	ldr	r4, [pc, #52]	; (8004874 <__libc_init_array+0x3c>)
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	42a6      	cmp	r6, r4
 8004846:	d109      	bne.n	800485c <__libc_init_array+0x24>
 8004848:	2600      	movs	r6, #0
 800484a:	f000 f821 	bl	8004890 <_init>
 800484e:	4d0a      	ldr	r5, [pc, #40]	; (8004878 <__libc_init_array+0x40>)
 8004850:	4c0a      	ldr	r4, [pc, #40]	; (800487c <__libc_init_array+0x44>)
 8004852:	1b64      	subs	r4, r4, r5
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	42a6      	cmp	r6, r4
 8004858:	d105      	bne.n	8004866 <__libc_init_array+0x2e>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	00b3      	lsls	r3, r6, #2
 800485e:	58eb      	ldr	r3, [r5, r3]
 8004860:	4798      	blx	r3
 8004862:	3601      	adds	r6, #1
 8004864:	e7ee      	b.n	8004844 <__libc_init_array+0xc>
 8004866:	00b3      	lsls	r3, r6, #2
 8004868:	58eb      	ldr	r3, [r5, r3]
 800486a:	4798      	blx	r3
 800486c:	3601      	adds	r6, #1
 800486e:	e7f2      	b.n	8004856 <__libc_init_array+0x1e>
 8004870:	08004938 	.word	0x08004938
 8004874:	08004938 	.word	0x08004938
 8004878:	08004938 	.word	0x08004938
 800487c:	0800493c 	.word	0x0800493c

08004880 <memset>:
 8004880:	0003      	movs	r3, r0
 8004882:	1882      	adds	r2, r0, r2
 8004884:	4293      	cmp	r3, r2
 8004886:	d100      	bne.n	800488a <memset+0xa>
 8004888:	4770      	bx	lr
 800488a:	7019      	strb	r1, [r3, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	e7f9      	b.n	8004884 <memset+0x4>

08004890 <_init>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr

0800489c <_fini>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr
