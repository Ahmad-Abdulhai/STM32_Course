
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004864  08004864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004988  08004988  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004988  08004988  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004988  08004988  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004988  08004988  00005988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800498c  0800498c  0000598c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004990  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000005c  080049ec  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080049ec  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f3c  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c09  00000000  00000000  0000dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0000fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068d  00000000  00000000  000104a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c532  00000000  00000000  00010b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2b4  00000000  00000000  0002d067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b496f  00000000  00000000  0003731b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebc8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000249c  00000000  00000000  000ebcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ee16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800484c 	.word	0x0800484c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	0800484c 	.word	0x0800484c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_f2uiz>:
 8000230:	219e      	movs	r1, #158	@ 0x9e
 8000232:	b510      	push	{r4, lr}
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	1c04      	adds	r4, r0, #0
 8000238:	f000 fcf2 	bl	8000c20 <__aeabi_fcmpge>
 800023c:	2800      	cmp	r0, #0
 800023e:	d103      	bne.n	8000248 <__aeabi_f2uiz+0x18>
 8000240:	1c20      	adds	r0, r4, #0
 8000242:	f000 fc0f 	bl	8000a64 <__aeabi_f2iz>
 8000246:	bd10      	pop	{r4, pc}
 8000248:	219e      	movs	r1, #158	@ 0x9e
 800024a:	1c20      	adds	r0, r4, #0
 800024c:	05c9      	lsls	r1, r1, #23
 800024e:	f000 fa65 	bl	800071c <__aeabi_fsub>
 8000252:	f000 fc07 	bl	8000a64 <__aeabi_f2iz>
 8000256:	2380      	movs	r3, #128	@ 0x80
 8000258:	061b      	lsls	r3, r3, #24
 800025a:	469c      	mov	ip, r3
 800025c:	4460      	add	r0, ip
 800025e:	e7f2      	b.n	8000246 <__aeabi_f2uiz+0x16>

08000260 <__aeabi_fdiv>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	0244      	lsls	r4, r0, #9
 800026a:	b5c0      	push	{r6, r7, lr}
 800026c:	0047      	lsls	r7, r0, #1
 800026e:	1c0e      	adds	r6, r1, #0
 8000270:	0a64      	lsrs	r4, r4, #9
 8000272:	0e3f      	lsrs	r7, r7, #24
 8000274:	0fc5      	lsrs	r5, r0, #31
 8000276:	2f00      	cmp	r7, #0
 8000278:	d03c      	beq.n	80002f4 <__aeabi_fdiv+0x94>
 800027a:	2fff      	cmp	r7, #255	@ 0xff
 800027c:	d042      	beq.n	8000304 <__aeabi_fdiv+0xa4>
 800027e:	2300      	movs	r3, #0
 8000280:	2280      	movs	r2, #128	@ 0x80
 8000282:	4699      	mov	r9, r3
 8000284:	469a      	mov	sl, r3
 8000286:	00e4      	lsls	r4, r4, #3
 8000288:	04d2      	lsls	r2, r2, #19
 800028a:	4314      	orrs	r4, r2
 800028c:	3f7f      	subs	r7, #127	@ 0x7f
 800028e:	0273      	lsls	r3, r6, #9
 8000290:	0a5b      	lsrs	r3, r3, #9
 8000292:	4698      	mov	r8, r3
 8000294:	0073      	lsls	r3, r6, #1
 8000296:	0e1b      	lsrs	r3, r3, #24
 8000298:	0ff6      	lsrs	r6, r6, #31
 800029a:	2b00      	cmp	r3, #0
 800029c:	d01b      	beq.n	80002d6 <__aeabi_fdiv+0x76>
 800029e:	2bff      	cmp	r3, #255	@ 0xff
 80002a0:	d013      	beq.n	80002ca <__aeabi_fdiv+0x6a>
 80002a2:	4642      	mov	r2, r8
 80002a4:	2180      	movs	r1, #128	@ 0x80
 80002a6:	00d2      	lsls	r2, r2, #3
 80002a8:	04c9      	lsls	r1, r1, #19
 80002aa:	4311      	orrs	r1, r2
 80002ac:	4688      	mov	r8, r1
 80002ae:	2000      	movs	r0, #0
 80002b0:	3b7f      	subs	r3, #127	@ 0x7f
 80002b2:	0029      	movs	r1, r5
 80002b4:	1aff      	subs	r7, r7, r3
 80002b6:	464b      	mov	r3, r9
 80002b8:	4071      	eors	r1, r6
 80002ba:	b2c9      	uxtb	r1, r1
 80002bc:	2b0f      	cmp	r3, #15
 80002be:	d900      	bls.n	80002c2 <__aeabi_fdiv+0x62>
 80002c0:	e0b5      	b.n	800042e <__aeabi_fdiv+0x1ce>
 80002c2:	4a74      	ldr	r2, [pc, #464]	@ (8000494 <__aeabi_fdiv+0x234>)
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	58d3      	ldr	r3, [r2, r3]
 80002c8:	469f      	mov	pc, r3
 80002ca:	4643      	mov	r3, r8
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d13f      	bne.n	8000350 <__aeabi_fdiv+0xf0>
 80002d0:	3fff      	subs	r7, #255	@ 0xff
 80002d2:	3302      	adds	r3, #2
 80002d4:	e003      	b.n	80002de <__aeabi_fdiv+0x7e>
 80002d6:	4643      	mov	r3, r8
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d12d      	bne.n	8000338 <__aeabi_fdiv+0xd8>
 80002dc:	2301      	movs	r3, #1
 80002de:	0029      	movs	r1, r5
 80002e0:	464a      	mov	r2, r9
 80002e2:	4071      	eors	r1, r6
 80002e4:	b2c9      	uxtb	r1, r1
 80002e6:	431a      	orrs	r2, r3
 80002e8:	2a0e      	cmp	r2, #14
 80002ea:	d838      	bhi.n	800035e <__aeabi_fdiv+0xfe>
 80002ec:	486a      	ldr	r0, [pc, #424]	@ (8000498 <__aeabi_fdiv+0x238>)
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	5882      	ldr	r2, [r0, r2]
 80002f2:	4697      	mov	pc, r2
 80002f4:	2c00      	cmp	r4, #0
 80002f6:	d113      	bne.n	8000320 <__aeabi_fdiv+0xc0>
 80002f8:	2304      	movs	r3, #4
 80002fa:	4699      	mov	r9, r3
 80002fc:	3b03      	subs	r3, #3
 80002fe:	2700      	movs	r7, #0
 8000300:	469a      	mov	sl, r3
 8000302:	e7c4      	b.n	800028e <__aeabi_fdiv+0x2e>
 8000304:	2c00      	cmp	r4, #0
 8000306:	d105      	bne.n	8000314 <__aeabi_fdiv+0xb4>
 8000308:	2308      	movs	r3, #8
 800030a:	4699      	mov	r9, r3
 800030c:	3b06      	subs	r3, #6
 800030e:	27ff      	movs	r7, #255	@ 0xff
 8000310:	469a      	mov	sl, r3
 8000312:	e7bc      	b.n	800028e <__aeabi_fdiv+0x2e>
 8000314:	230c      	movs	r3, #12
 8000316:	4699      	mov	r9, r3
 8000318:	3b09      	subs	r3, #9
 800031a:	27ff      	movs	r7, #255	@ 0xff
 800031c:	469a      	mov	sl, r3
 800031e:	e7b6      	b.n	800028e <__aeabi_fdiv+0x2e>
 8000320:	0020      	movs	r0, r4
 8000322:	f000 fc87 	bl	8000c34 <__clzsi2>
 8000326:	2776      	movs	r7, #118	@ 0x76
 8000328:	1f43      	subs	r3, r0, #5
 800032a:	409c      	lsls	r4, r3
 800032c:	2300      	movs	r3, #0
 800032e:	427f      	negs	r7, r7
 8000330:	4699      	mov	r9, r3
 8000332:	469a      	mov	sl, r3
 8000334:	1a3f      	subs	r7, r7, r0
 8000336:	e7aa      	b.n	800028e <__aeabi_fdiv+0x2e>
 8000338:	4640      	mov	r0, r8
 800033a:	f000 fc7b 	bl	8000c34 <__clzsi2>
 800033e:	4642      	mov	r2, r8
 8000340:	1f43      	subs	r3, r0, #5
 8000342:	409a      	lsls	r2, r3
 8000344:	2376      	movs	r3, #118	@ 0x76
 8000346:	425b      	negs	r3, r3
 8000348:	1a1b      	subs	r3, r3, r0
 800034a:	4690      	mov	r8, r2
 800034c:	2000      	movs	r0, #0
 800034e:	e7b0      	b.n	80002b2 <__aeabi_fdiv+0x52>
 8000350:	2303      	movs	r3, #3
 8000352:	464a      	mov	r2, r9
 8000354:	431a      	orrs	r2, r3
 8000356:	4691      	mov	r9, r2
 8000358:	2003      	movs	r0, #3
 800035a:	33fc      	adds	r3, #252	@ 0xfc
 800035c:	e7a9      	b.n	80002b2 <__aeabi_fdiv+0x52>
 800035e:	000d      	movs	r5, r1
 8000360:	20ff      	movs	r0, #255	@ 0xff
 8000362:	2200      	movs	r2, #0
 8000364:	05c0      	lsls	r0, r0, #23
 8000366:	07ed      	lsls	r5, r5, #31
 8000368:	4310      	orrs	r0, r2
 800036a:	4328      	orrs	r0, r5
 800036c:	bce0      	pop	{r5, r6, r7}
 800036e:	46ba      	mov	sl, r7
 8000370:	46b1      	mov	r9, r6
 8000372:	46a8      	mov	r8, r5
 8000374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000376:	000d      	movs	r5, r1
 8000378:	2000      	movs	r0, #0
 800037a:	2200      	movs	r2, #0
 800037c:	e7f2      	b.n	8000364 <__aeabi_fdiv+0x104>
 800037e:	4653      	mov	r3, sl
 8000380:	2b02      	cmp	r3, #2
 8000382:	d0ed      	beq.n	8000360 <__aeabi_fdiv+0x100>
 8000384:	2b03      	cmp	r3, #3
 8000386:	d033      	beq.n	80003f0 <__aeabi_fdiv+0x190>
 8000388:	46a0      	mov	r8, r4
 800038a:	2b01      	cmp	r3, #1
 800038c:	d105      	bne.n	800039a <__aeabi_fdiv+0x13a>
 800038e:	2000      	movs	r0, #0
 8000390:	2200      	movs	r2, #0
 8000392:	e7e7      	b.n	8000364 <__aeabi_fdiv+0x104>
 8000394:	0035      	movs	r5, r6
 8000396:	2803      	cmp	r0, #3
 8000398:	d07a      	beq.n	8000490 <__aeabi_fdiv+0x230>
 800039a:	003b      	movs	r3, r7
 800039c:	337f      	adds	r3, #127	@ 0x7f
 800039e:	2b00      	cmp	r3, #0
 80003a0:	dd2d      	ble.n	80003fe <__aeabi_fdiv+0x19e>
 80003a2:	4642      	mov	r2, r8
 80003a4:	0752      	lsls	r2, r2, #29
 80003a6:	d007      	beq.n	80003b8 <__aeabi_fdiv+0x158>
 80003a8:	220f      	movs	r2, #15
 80003aa:	4641      	mov	r1, r8
 80003ac:	400a      	ands	r2, r1
 80003ae:	2a04      	cmp	r2, #4
 80003b0:	d002      	beq.n	80003b8 <__aeabi_fdiv+0x158>
 80003b2:	2204      	movs	r2, #4
 80003b4:	4694      	mov	ip, r2
 80003b6:	44e0      	add	r8, ip
 80003b8:	4642      	mov	r2, r8
 80003ba:	0112      	lsls	r2, r2, #4
 80003bc:	d505      	bpl.n	80003ca <__aeabi_fdiv+0x16a>
 80003be:	4642      	mov	r2, r8
 80003c0:	4b36      	ldr	r3, [pc, #216]	@ (800049c <__aeabi_fdiv+0x23c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	003b      	movs	r3, r7
 80003c6:	4690      	mov	r8, r2
 80003c8:	3380      	adds	r3, #128	@ 0x80
 80003ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80003cc:	dcc8      	bgt.n	8000360 <__aeabi_fdiv+0x100>
 80003ce:	4642      	mov	r2, r8
 80003d0:	0192      	lsls	r2, r2, #6
 80003d2:	0a52      	lsrs	r2, r2, #9
 80003d4:	b2d8      	uxtb	r0, r3
 80003d6:	e7c5      	b.n	8000364 <__aeabi_fdiv+0x104>
 80003d8:	2280      	movs	r2, #128	@ 0x80
 80003da:	2500      	movs	r5, #0
 80003dc:	20ff      	movs	r0, #255	@ 0xff
 80003de:	03d2      	lsls	r2, r2, #15
 80003e0:	e7c0      	b.n	8000364 <__aeabi_fdiv+0x104>
 80003e2:	2280      	movs	r2, #128	@ 0x80
 80003e4:	03d2      	lsls	r2, r2, #15
 80003e6:	4214      	tst	r4, r2
 80003e8:	d002      	beq.n	80003f0 <__aeabi_fdiv+0x190>
 80003ea:	4643      	mov	r3, r8
 80003ec:	4213      	tst	r3, r2
 80003ee:	d049      	beq.n	8000484 <__aeabi_fdiv+0x224>
 80003f0:	2280      	movs	r2, #128	@ 0x80
 80003f2:	03d2      	lsls	r2, r2, #15
 80003f4:	4322      	orrs	r2, r4
 80003f6:	0252      	lsls	r2, r2, #9
 80003f8:	20ff      	movs	r0, #255	@ 0xff
 80003fa:	0a52      	lsrs	r2, r2, #9
 80003fc:	e7b2      	b.n	8000364 <__aeabi_fdiv+0x104>
 80003fe:	2201      	movs	r2, #1
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	2b1b      	cmp	r3, #27
 8000404:	dcc3      	bgt.n	800038e <__aeabi_fdiv+0x12e>
 8000406:	4642      	mov	r2, r8
 8000408:	40da      	lsrs	r2, r3
 800040a:	4643      	mov	r3, r8
 800040c:	379e      	adds	r7, #158	@ 0x9e
 800040e:	40bb      	lsls	r3, r7
 8000410:	1e59      	subs	r1, r3, #1
 8000412:	418b      	sbcs	r3, r1
 8000414:	431a      	orrs	r2, r3
 8000416:	0753      	lsls	r3, r2, #29
 8000418:	d004      	beq.n	8000424 <__aeabi_fdiv+0x1c4>
 800041a:	230f      	movs	r3, #15
 800041c:	4013      	ands	r3, r2
 800041e:	2b04      	cmp	r3, #4
 8000420:	d000      	beq.n	8000424 <__aeabi_fdiv+0x1c4>
 8000422:	3204      	adds	r2, #4
 8000424:	0153      	lsls	r3, r2, #5
 8000426:	d529      	bpl.n	800047c <__aeabi_fdiv+0x21c>
 8000428:	2001      	movs	r0, #1
 800042a:	2200      	movs	r2, #0
 800042c:	e79a      	b.n	8000364 <__aeabi_fdiv+0x104>
 800042e:	4642      	mov	r2, r8
 8000430:	0163      	lsls	r3, r4, #5
 8000432:	0155      	lsls	r5, r2, #5
 8000434:	42ab      	cmp	r3, r5
 8000436:	d215      	bcs.n	8000464 <__aeabi_fdiv+0x204>
 8000438:	201b      	movs	r0, #27
 800043a:	2200      	movs	r2, #0
 800043c:	3f01      	subs	r7, #1
 800043e:	2601      	movs	r6, #1
 8000440:	001c      	movs	r4, r3
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	2c00      	cmp	r4, #0
 8000448:	db01      	blt.n	800044e <__aeabi_fdiv+0x1ee>
 800044a:	429d      	cmp	r5, r3
 800044c:	d801      	bhi.n	8000452 <__aeabi_fdiv+0x1f2>
 800044e:	1b5b      	subs	r3, r3, r5
 8000450:	4332      	orrs	r2, r6
 8000452:	3801      	subs	r0, #1
 8000454:	2800      	cmp	r0, #0
 8000456:	d1f3      	bne.n	8000440 <__aeabi_fdiv+0x1e0>
 8000458:	1e58      	subs	r0, r3, #1
 800045a:	4183      	sbcs	r3, r0
 800045c:	4313      	orrs	r3, r2
 800045e:	4698      	mov	r8, r3
 8000460:	000d      	movs	r5, r1
 8000462:	e79a      	b.n	800039a <__aeabi_fdiv+0x13a>
 8000464:	201a      	movs	r0, #26
 8000466:	2201      	movs	r2, #1
 8000468:	1b5b      	subs	r3, r3, r5
 800046a:	e7e8      	b.n	800043e <__aeabi_fdiv+0x1de>
 800046c:	3b02      	subs	r3, #2
 800046e:	425a      	negs	r2, r3
 8000470:	4153      	adcs	r3, r2
 8000472:	425b      	negs	r3, r3
 8000474:	0035      	movs	r5, r6
 8000476:	2200      	movs	r2, #0
 8000478:	b2d8      	uxtb	r0, r3
 800047a:	e773      	b.n	8000364 <__aeabi_fdiv+0x104>
 800047c:	0192      	lsls	r2, r2, #6
 800047e:	2000      	movs	r0, #0
 8000480:	0a52      	lsrs	r2, r2, #9
 8000482:	e76f      	b.n	8000364 <__aeabi_fdiv+0x104>
 8000484:	431a      	orrs	r2, r3
 8000486:	0252      	lsls	r2, r2, #9
 8000488:	0035      	movs	r5, r6
 800048a:	20ff      	movs	r0, #255	@ 0xff
 800048c:	0a52      	lsrs	r2, r2, #9
 800048e:	e769      	b.n	8000364 <__aeabi_fdiv+0x104>
 8000490:	4644      	mov	r4, r8
 8000492:	e7ad      	b.n	80003f0 <__aeabi_fdiv+0x190>
 8000494:	08004898 	.word	0x08004898
 8000498:	080048d8 	.word	0x080048d8
 800049c:	f7ffffff 	.word	0xf7ffffff

080004a0 <__aeabi_fmul>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	0243      	lsls	r3, r0, #9
 80004aa:	0a5b      	lsrs	r3, r3, #9
 80004ac:	0045      	lsls	r5, r0, #1
 80004ae:	b5c0      	push	{r6, r7, lr}
 80004b0:	4699      	mov	r9, r3
 80004b2:	1c0f      	adds	r7, r1, #0
 80004b4:	0e2d      	lsrs	r5, r5, #24
 80004b6:	0fc6      	lsrs	r6, r0, #31
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_fmul+0x1e>
 80004bc:	e088      	b.n	80005d0 <__aeabi_fmul+0x130>
 80004be:	2dff      	cmp	r5, #255	@ 0xff
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fmul+0x24>
 80004c2:	e08d      	b.n	80005e0 <__aeabi_fmul+0x140>
 80004c4:	2280      	movs	r2, #128	@ 0x80
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	04d2      	lsls	r2, r2, #19
 80004ca:	431a      	orrs	r2, r3
 80004cc:	2300      	movs	r3, #0
 80004ce:	4691      	mov	r9, r2
 80004d0:	4698      	mov	r8, r3
 80004d2:	469a      	mov	sl, r3
 80004d4:	3d7f      	subs	r5, #127	@ 0x7f
 80004d6:	027c      	lsls	r4, r7, #9
 80004d8:	007b      	lsls	r3, r7, #1
 80004da:	0a64      	lsrs	r4, r4, #9
 80004dc:	0e1b      	lsrs	r3, r3, #24
 80004de:	0fff      	lsrs	r7, r7, #31
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d068      	beq.n	80005b6 <__aeabi_fmul+0x116>
 80004e4:	2bff      	cmp	r3, #255	@ 0xff
 80004e6:	d021      	beq.n	800052c <__aeabi_fmul+0x8c>
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	00e4      	lsls	r4, r4, #3
 80004ec:	04d2      	lsls	r2, r2, #19
 80004ee:	4314      	orrs	r4, r2
 80004f0:	4642      	mov	r2, r8
 80004f2:	3b7f      	subs	r3, #127	@ 0x7f
 80004f4:	195b      	adds	r3, r3, r5
 80004f6:	2100      	movs	r1, #0
 80004f8:	1c5d      	adds	r5, r3, #1
 80004fa:	2a0a      	cmp	r2, #10
 80004fc:	dc2e      	bgt.n	800055c <__aeabi_fmul+0xbc>
 80004fe:	407e      	eors	r6, r7
 8000500:	4642      	mov	r2, r8
 8000502:	2a02      	cmp	r2, #2
 8000504:	dc23      	bgt.n	800054e <__aeabi_fmul+0xae>
 8000506:	3a01      	subs	r2, #1
 8000508:	2a01      	cmp	r2, #1
 800050a:	d900      	bls.n	800050e <__aeabi_fmul+0x6e>
 800050c:	e0bd      	b.n	800068a <__aeabi_fmul+0x1ea>
 800050e:	2902      	cmp	r1, #2
 8000510:	d06e      	beq.n	80005f0 <__aeabi_fmul+0x150>
 8000512:	2901      	cmp	r1, #1
 8000514:	d12c      	bne.n	8000570 <__aeabi_fmul+0xd0>
 8000516:	2000      	movs	r0, #0
 8000518:	2200      	movs	r2, #0
 800051a:	05c0      	lsls	r0, r0, #23
 800051c:	07f6      	lsls	r6, r6, #31
 800051e:	4310      	orrs	r0, r2
 8000520:	4330      	orrs	r0, r6
 8000522:	bce0      	pop	{r5, r6, r7}
 8000524:	46ba      	mov	sl, r7
 8000526:	46b1      	mov	r9, r6
 8000528:	46a8      	mov	r8, r5
 800052a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052c:	002b      	movs	r3, r5
 800052e:	33ff      	adds	r3, #255	@ 0xff
 8000530:	2c00      	cmp	r4, #0
 8000532:	d065      	beq.n	8000600 <__aeabi_fmul+0x160>
 8000534:	2203      	movs	r2, #3
 8000536:	4641      	mov	r1, r8
 8000538:	4311      	orrs	r1, r2
 800053a:	0032      	movs	r2, r6
 800053c:	3501      	adds	r5, #1
 800053e:	4688      	mov	r8, r1
 8000540:	407a      	eors	r2, r7
 8000542:	35ff      	adds	r5, #255	@ 0xff
 8000544:	290a      	cmp	r1, #10
 8000546:	dd00      	ble.n	800054a <__aeabi_fmul+0xaa>
 8000548:	e0d8      	b.n	80006fc <__aeabi_fmul+0x25c>
 800054a:	0016      	movs	r6, r2
 800054c:	2103      	movs	r1, #3
 800054e:	4640      	mov	r0, r8
 8000550:	2201      	movs	r2, #1
 8000552:	4082      	lsls	r2, r0
 8000554:	20a6      	movs	r0, #166	@ 0xa6
 8000556:	00c0      	lsls	r0, r0, #3
 8000558:	4202      	tst	r2, r0
 800055a:	d020      	beq.n	800059e <__aeabi_fmul+0xfe>
 800055c:	4653      	mov	r3, sl
 800055e:	2b02      	cmp	r3, #2
 8000560:	d046      	beq.n	80005f0 <__aeabi_fmul+0x150>
 8000562:	2b03      	cmp	r3, #3
 8000564:	d100      	bne.n	8000568 <__aeabi_fmul+0xc8>
 8000566:	e0bb      	b.n	80006e0 <__aeabi_fmul+0x240>
 8000568:	4651      	mov	r1, sl
 800056a:	464c      	mov	r4, r9
 800056c:	2901      	cmp	r1, #1
 800056e:	d0d2      	beq.n	8000516 <__aeabi_fmul+0x76>
 8000570:	002b      	movs	r3, r5
 8000572:	337f      	adds	r3, #127	@ 0x7f
 8000574:	2b00      	cmp	r3, #0
 8000576:	dd70      	ble.n	800065a <__aeabi_fmul+0x1ba>
 8000578:	0762      	lsls	r2, r4, #29
 800057a:	d004      	beq.n	8000586 <__aeabi_fmul+0xe6>
 800057c:	220f      	movs	r2, #15
 800057e:	4022      	ands	r2, r4
 8000580:	2a04      	cmp	r2, #4
 8000582:	d000      	beq.n	8000586 <__aeabi_fmul+0xe6>
 8000584:	3404      	adds	r4, #4
 8000586:	0122      	lsls	r2, r4, #4
 8000588:	d503      	bpl.n	8000592 <__aeabi_fmul+0xf2>
 800058a:	4b63      	ldr	r3, [pc, #396]	@ (8000718 <__aeabi_fmul+0x278>)
 800058c:	401c      	ands	r4, r3
 800058e:	002b      	movs	r3, r5
 8000590:	3380      	adds	r3, #128	@ 0x80
 8000592:	2bfe      	cmp	r3, #254	@ 0xfe
 8000594:	dc2c      	bgt.n	80005f0 <__aeabi_fmul+0x150>
 8000596:	01a2      	lsls	r2, r4, #6
 8000598:	0a52      	lsrs	r2, r2, #9
 800059a:	b2d8      	uxtb	r0, r3
 800059c:	e7bd      	b.n	800051a <__aeabi_fmul+0x7a>
 800059e:	2090      	movs	r0, #144	@ 0x90
 80005a0:	0080      	lsls	r0, r0, #2
 80005a2:	4202      	tst	r2, r0
 80005a4:	d127      	bne.n	80005f6 <__aeabi_fmul+0x156>
 80005a6:	38b9      	subs	r0, #185	@ 0xb9
 80005a8:	38ff      	subs	r0, #255	@ 0xff
 80005aa:	4210      	tst	r0, r2
 80005ac:	d06d      	beq.n	800068a <__aeabi_fmul+0x1ea>
 80005ae:	003e      	movs	r6, r7
 80005b0:	46a1      	mov	r9, r4
 80005b2:	468a      	mov	sl, r1
 80005b4:	e7d2      	b.n	800055c <__aeabi_fmul+0xbc>
 80005b6:	2c00      	cmp	r4, #0
 80005b8:	d141      	bne.n	800063e <__aeabi_fmul+0x19e>
 80005ba:	2301      	movs	r3, #1
 80005bc:	4642      	mov	r2, r8
 80005be:	431a      	orrs	r2, r3
 80005c0:	4690      	mov	r8, r2
 80005c2:	002b      	movs	r3, r5
 80005c4:	4642      	mov	r2, r8
 80005c6:	2101      	movs	r1, #1
 80005c8:	1c5d      	adds	r5, r3, #1
 80005ca:	2a0a      	cmp	r2, #10
 80005cc:	dd97      	ble.n	80004fe <__aeabi_fmul+0x5e>
 80005ce:	e7c5      	b.n	800055c <__aeabi_fmul+0xbc>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d126      	bne.n	8000622 <__aeabi_fmul+0x182>
 80005d4:	2304      	movs	r3, #4
 80005d6:	4698      	mov	r8, r3
 80005d8:	3b03      	subs	r3, #3
 80005da:	2500      	movs	r5, #0
 80005dc:	469a      	mov	sl, r3
 80005de:	e77a      	b.n	80004d6 <__aeabi_fmul+0x36>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d118      	bne.n	8000616 <__aeabi_fmul+0x176>
 80005e4:	2308      	movs	r3, #8
 80005e6:	4698      	mov	r8, r3
 80005e8:	3b06      	subs	r3, #6
 80005ea:	25ff      	movs	r5, #255	@ 0xff
 80005ec:	469a      	mov	sl, r3
 80005ee:	e772      	b.n	80004d6 <__aeabi_fmul+0x36>
 80005f0:	20ff      	movs	r0, #255	@ 0xff
 80005f2:	2200      	movs	r2, #0
 80005f4:	e791      	b.n	800051a <__aeabi_fmul+0x7a>
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	2600      	movs	r6, #0
 80005fa:	20ff      	movs	r0, #255	@ 0xff
 80005fc:	03d2      	lsls	r2, r2, #15
 80005fe:	e78c      	b.n	800051a <__aeabi_fmul+0x7a>
 8000600:	4641      	mov	r1, r8
 8000602:	2202      	movs	r2, #2
 8000604:	3501      	adds	r5, #1
 8000606:	4311      	orrs	r1, r2
 8000608:	4688      	mov	r8, r1
 800060a:	35ff      	adds	r5, #255	@ 0xff
 800060c:	290a      	cmp	r1, #10
 800060e:	dca5      	bgt.n	800055c <__aeabi_fmul+0xbc>
 8000610:	2102      	movs	r1, #2
 8000612:	407e      	eors	r6, r7
 8000614:	e774      	b.n	8000500 <__aeabi_fmul+0x60>
 8000616:	230c      	movs	r3, #12
 8000618:	4698      	mov	r8, r3
 800061a:	3b09      	subs	r3, #9
 800061c:	25ff      	movs	r5, #255	@ 0xff
 800061e:	469a      	mov	sl, r3
 8000620:	e759      	b.n	80004d6 <__aeabi_fmul+0x36>
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fb06 	bl	8000c34 <__clzsi2>
 8000628:	464a      	mov	r2, r9
 800062a:	1f43      	subs	r3, r0, #5
 800062c:	2576      	movs	r5, #118	@ 0x76
 800062e:	409a      	lsls	r2, r3
 8000630:	2300      	movs	r3, #0
 8000632:	426d      	negs	r5, r5
 8000634:	4691      	mov	r9, r2
 8000636:	4698      	mov	r8, r3
 8000638:	469a      	mov	sl, r3
 800063a:	1a2d      	subs	r5, r5, r0
 800063c:	e74b      	b.n	80004d6 <__aeabi_fmul+0x36>
 800063e:	0020      	movs	r0, r4
 8000640:	f000 faf8 	bl	8000c34 <__clzsi2>
 8000644:	4642      	mov	r2, r8
 8000646:	1f43      	subs	r3, r0, #5
 8000648:	409c      	lsls	r4, r3
 800064a:	1a2b      	subs	r3, r5, r0
 800064c:	3b76      	subs	r3, #118	@ 0x76
 800064e:	2100      	movs	r1, #0
 8000650:	1c5d      	adds	r5, r3, #1
 8000652:	2a0a      	cmp	r2, #10
 8000654:	dc00      	bgt.n	8000658 <__aeabi_fmul+0x1b8>
 8000656:	e752      	b.n	80004fe <__aeabi_fmul+0x5e>
 8000658:	e780      	b.n	800055c <__aeabi_fmul+0xbc>
 800065a:	2201      	movs	r2, #1
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	2b1b      	cmp	r3, #27
 8000660:	dd00      	ble.n	8000664 <__aeabi_fmul+0x1c4>
 8000662:	e758      	b.n	8000516 <__aeabi_fmul+0x76>
 8000664:	359e      	adds	r5, #158	@ 0x9e
 8000666:	0022      	movs	r2, r4
 8000668:	40ac      	lsls	r4, r5
 800066a:	40da      	lsrs	r2, r3
 800066c:	1e63      	subs	r3, r4, #1
 800066e:	419c      	sbcs	r4, r3
 8000670:	4322      	orrs	r2, r4
 8000672:	0753      	lsls	r3, r2, #29
 8000674:	d004      	beq.n	8000680 <__aeabi_fmul+0x1e0>
 8000676:	230f      	movs	r3, #15
 8000678:	4013      	ands	r3, r2
 800067a:	2b04      	cmp	r3, #4
 800067c:	d000      	beq.n	8000680 <__aeabi_fmul+0x1e0>
 800067e:	3204      	adds	r2, #4
 8000680:	0153      	lsls	r3, r2, #5
 8000682:	d537      	bpl.n	80006f4 <__aeabi_fmul+0x254>
 8000684:	2001      	movs	r0, #1
 8000686:	2200      	movs	r2, #0
 8000688:	e747      	b.n	800051a <__aeabi_fmul+0x7a>
 800068a:	0c21      	lsrs	r1, r4, #16
 800068c:	464a      	mov	r2, r9
 800068e:	0424      	lsls	r4, r4, #16
 8000690:	0c24      	lsrs	r4, r4, #16
 8000692:	0027      	movs	r7, r4
 8000694:	0c10      	lsrs	r0, r2, #16
 8000696:	0412      	lsls	r2, r2, #16
 8000698:	0c12      	lsrs	r2, r2, #16
 800069a:	4344      	muls	r4, r0
 800069c:	4357      	muls	r7, r2
 800069e:	4348      	muls	r0, r1
 80006a0:	4351      	muls	r1, r2
 80006a2:	0c3a      	lsrs	r2, r7, #16
 80006a4:	1909      	adds	r1, r1, r4
 80006a6:	1852      	adds	r2, r2, r1
 80006a8:	4294      	cmp	r4, r2
 80006aa:	d903      	bls.n	80006b4 <__aeabi_fmul+0x214>
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0249      	lsls	r1, r1, #9
 80006b0:	468c      	mov	ip, r1
 80006b2:	4460      	add	r0, ip
 80006b4:	043f      	lsls	r7, r7, #16
 80006b6:	0411      	lsls	r1, r2, #16
 80006b8:	0c3f      	lsrs	r7, r7, #16
 80006ba:	19c9      	adds	r1, r1, r7
 80006bc:	018c      	lsls	r4, r1, #6
 80006be:	1e67      	subs	r7, r4, #1
 80006c0:	41bc      	sbcs	r4, r7
 80006c2:	0c12      	lsrs	r2, r2, #16
 80006c4:	0e89      	lsrs	r1, r1, #26
 80006c6:	1812      	adds	r2, r2, r0
 80006c8:	430c      	orrs	r4, r1
 80006ca:	0192      	lsls	r2, r2, #6
 80006cc:	4314      	orrs	r4, r2
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	d50e      	bpl.n	80006f0 <__aeabi_fmul+0x250>
 80006d2:	2301      	movs	r3, #1
 80006d4:	0862      	lsrs	r2, r4, #1
 80006d6:	401c      	ands	r4, r3
 80006d8:	4314      	orrs	r4, r2
 80006da:	e749      	b.n	8000570 <__aeabi_fmul+0xd0>
 80006dc:	003e      	movs	r6, r7
 80006de:	46a1      	mov	r9, r4
 80006e0:	2280      	movs	r2, #128	@ 0x80
 80006e2:	464b      	mov	r3, r9
 80006e4:	03d2      	lsls	r2, r2, #15
 80006e6:	431a      	orrs	r2, r3
 80006e8:	0252      	lsls	r2, r2, #9
 80006ea:	20ff      	movs	r0, #255	@ 0xff
 80006ec:	0a52      	lsrs	r2, r2, #9
 80006ee:	e714      	b.n	800051a <__aeabi_fmul+0x7a>
 80006f0:	001d      	movs	r5, r3
 80006f2:	e73d      	b.n	8000570 <__aeabi_fmul+0xd0>
 80006f4:	0192      	lsls	r2, r2, #6
 80006f6:	2000      	movs	r0, #0
 80006f8:	0a52      	lsrs	r2, r2, #9
 80006fa:	e70e      	b.n	800051a <__aeabi_fmul+0x7a>
 80006fc:	290f      	cmp	r1, #15
 80006fe:	d1ed      	bne.n	80006dc <__aeabi_fmul+0x23c>
 8000700:	2280      	movs	r2, #128	@ 0x80
 8000702:	464b      	mov	r3, r9
 8000704:	03d2      	lsls	r2, r2, #15
 8000706:	4213      	tst	r3, r2
 8000708:	d0ea      	beq.n	80006e0 <__aeabi_fmul+0x240>
 800070a:	4214      	tst	r4, r2
 800070c:	d1e8      	bne.n	80006e0 <__aeabi_fmul+0x240>
 800070e:	003e      	movs	r6, r7
 8000710:	20ff      	movs	r0, #255	@ 0xff
 8000712:	4322      	orrs	r2, r4
 8000714:	e701      	b.n	800051a <__aeabi_fmul+0x7a>
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	f7ffffff 	.word	0xf7ffffff

0800071c <__aeabi_fsub>:
 800071c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071e:	4647      	mov	r7, r8
 8000720:	46ce      	mov	lr, r9
 8000722:	024e      	lsls	r6, r1, #9
 8000724:	0243      	lsls	r3, r0, #9
 8000726:	0045      	lsls	r5, r0, #1
 8000728:	0a72      	lsrs	r2, r6, #9
 800072a:	0fc4      	lsrs	r4, r0, #31
 800072c:	0048      	lsls	r0, r1, #1
 800072e:	b580      	push	{r7, lr}
 8000730:	4694      	mov	ip, r2
 8000732:	0a5f      	lsrs	r7, r3, #9
 8000734:	0e2d      	lsrs	r5, r5, #24
 8000736:	099b      	lsrs	r3, r3, #6
 8000738:	0e00      	lsrs	r0, r0, #24
 800073a:	0fc9      	lsrs	r1, r1, #31
 800073c:	09b6      	lsrs	r6, r6, #6
 800073e:	28ff      	cmp	r0, #255	@ 0xff
 8000740:	d024      	beq.n	800078c <__aeabi_fsub+0x70>
 8000742:	2201      	movs	r2, #1
 8000744:	4051      	eors	r1, r2
 8000746:	1a2a      	subs	r2, r5, r0
 8000748:	428c      	cmp	r4, r1
 800074a:	d00f      	beq.n	800076c <__aeabi_fsub+0x50>
 800074c:	2a00      	cmp	r2, #0
 800074e:	dc00      	bgt.n	8000752 <__aeabi_fsub+0x36>
 8000750:	e16a      	b.n	8000a28 <__aeabi_fsub+0x30c>
 8000752:	2800      	cmp	r0, #0
 8000754:	d135      	bne.n	80007c2 <__aeabi_fsub+0xa6>
 8000756:	2e00      	cmp	r6, #0
 8000758:	d100      	bne.n	800075c <__aeabi_fsub+0x40>
 800075a:	e0a2      	b.n	80008a2 <__aeabi_fsub+0x186>
 800075c:	1e51      	subs	r1, r2, #1
 800075e:	2a01      	cmp	r2, #1
 8000760:	d100      	bne.n	8000764 <__aeabi_fsub+0x48>
 8000762:	e124      	b.n	80009ae <__aeabi_fsub+0x292>
 8000764:	2aff      	cmp	r2, #255	@ 0xff
 8000766:	d021      	beq.n	80007ac <__aeabi_fsub+0x90>
 8000768:	000a      	movs	r2, r1
 800076a:	e02f      	b.n	80007cc <__aeabi_fsub+0xb0>
 800076c:	2a00      	cmp	r2, #0
 800076e:	dc00      	bgt.n	8000772 <__aeabi_fsub+0x56>
 8000770:	e167      	b.n	8000a42 <__aeabi_fsub+0x326>
 8000772:	2800      	cmp	r0, #0
 8000774:	d05e      	beq.n	8000834 <__aeabi_fsub+0x118>
 8000776:	2dff      	cmp	r5, #255	@ 0xff
 8000778:	d018      	beq.n	80007ac <__aeabi_fsub+0x90>
 800077a:	2180      	movs	r1, #128	@ 0x80
 800077c:	04c9      	lsls	r1, r1, #19
 800077e:	430e      	orrs	r6, r1
 8000780:	2a1b      	cmp	r2, #27
 8000782:	dc00      	bgt.n	8000786 <__aeabi_fsub+0x6a>
 8000784:	e076      	b.n	8000874 <__aeabi_fsub+0x158>
 8000786:	002a      	movs	r2, r5
 8000788:	3301      	adds	r3, #1
 800078a:	e032      	b.n	80007f2 <__aeabi_fsub+0xd6>
 800078c:	002a      	movs	r2, r5
 800078e:	3aff      	subs	r2, #255	@ 0xff
 8000790:	4691      	mov	r9, r2
 8000792:	2e00      	cmp	r6, #0
 8000794:	d042      	beq.n	800081c <__aeabi_fsub+0x100>
 8000796:	428c      	cmp	r4, r1
 8000798:	d055      	beq.n	8000846 <__aeabi_fsub+0x12a>
 800079a:	464a      	mov	r2, r9
 800079c:	2a00      	cmp	r2, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fsub+0x86>
 80007a0:	e09c      	b.n	80008dc <__aeabi_fsub+0x1c0>
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fsub+0x8c>
 80007a6:	e077      	b.n	8000898 <__aeabi_fsub+0x17c>
 80007a8:	000c      	movs	r4, r1
 80007aa:	0033      	movs	r3, r6
 80007ac:	08db      	lsrs	r3, r3, #3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fsub+0x98>
 80007b2:	e06e      	b.n	8000892 <__aeabi_fsub+0x176>
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	03d2      	lsls	r2, r2, #15
 80007b8:	4313      	orrs	r3, r2
 80007ba:	025b      	lsls	r3, r3, #9
 80007bc:	20ff      	movs	r0, #255	@ 0xff
 80007be:	0a5b      	lsrs	r3, r3, #9
 80007c0:	e024      	b.n	800080c <__aeabi_fsub+0xf0>
 80007c2:	2dff      	cmp	r5, #255	@ 0xff
 80007c4:	d0f2      	beq.n	80007ac <__aeabi_fsub+0x90>
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	04c9      	lsls	r1, r1, #19
 80007ca:	430e      	orrs	r6, r1
 80007cc:	2101      	movs	r1, #1
 80007ce:	2a1b      	cmp	r2, #27
 80007d0:	dc08      	bgt.n	80007e4 <__aeabi_fsub+0xc8>
 80007d2:	0031      	movs	r1, r6
 80007d4:	2020      	movs	r0, #32
 80007d6:	40d1      	lsrs	r1, r2
 80007d8:	1a82      	subs	r2, r0, r2
 80007da:	4096      	lsls	r6, r2
 80007dc:	0032      	movs	r2, r6
 80007de:	1e50      	subs	r0, r2, #1
 80007e0:	4182      	sbcs	r2, r0
 80007e2:	4311      	orrs	r1, r2
 80007e4:	1a5b      	subs	r3, r3, r1
 80007e6:	015a      	lsls	r2, r3, #5
 80007e8:	d460      	bmi.n	80008ac <__aeabi_fsub+0x190>
 80007ea:	2107      	movs	r1, #7
 80007ec:	002a      	movs	r2, r5
 80007ee:	4019      	ands	r1, r3
 80007f0:	d057      	beq.n	80008a2 <__aeabi_fsub+0x186>
 80007f2:	210f      	movs	r1, #15
 80007f4:	4019      	ands	r1, r3
 80007f6:	2904      	cmp	r1, #4
 80007f8:	d000      	beq.n	80007fc <__aeabi_fsub+0xe0>
 80007fa:	3304      	adds	r3, #4
 80007fc:	0159      	lsls	r1, r3, #5
 80007fe:	d550      	bpl.n	80008a2 <__aeabi_fsub+0x186>
 8000800:	1c50      	adds	r0, r2, #1
 8000802:	2afe      	cmp	r2, #254	@ 0xfe
 8000804:	d045      	beq.n	8000892 <__aeabi_fsub+0x176>
 8000806:	019b      	lsls	r3, r3, #6
 8000808:	b2c0      	uxtb	r0, r0
 800080a:	0a5b      	lsrs	r3, r3, #9
 800080c:	05c0      	lsls	r0, r0, #23
 800080e:	4318      	orrs	r0, r3
 8000810:	07e4      	lsls	r4, r4, #31
 8000812:	4320      	orrs	r0, r4
 8000814:	bcc0      	pop	{r6, r7}
 8000816:	46b9      	mov	r9, r7
 8000818:	46b0      	mov	r8, r6
 800081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081c:	2201      	movs	r2, #1
 800081e:	4051      	eors	r1, r2
 8000820:	428c      	cmp	r4, r1
 8000822:	d1ba      	bne.n	800079a <__aeabi_fsub+0x7e>
 8000824:	464a      	mov	r2, r9
 8000826:	2a00      	cmp	r2, #0
 8000828:	d010      	beq.n	800084c <__aeabi_fsub+0x130>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fsub+0x114>
 800082e:	e098      	b.n	8000962 <__aeabi_fsub+0x246>
 8000830:	2300      	movs	r3, #0
 8000832:	e7bb      	b.n	80007ac <__aeabi_fsub+0x90>
 8000834:	2e00      	cmp	r6, #0
 8000836:	d034      	beq.n	80008a2 <__aeabi_fsub+0x186>
 8000838:	1e51      	subs	r1, r2, #1
 800083a:	2a01      	cmp	r2, #1
 800083c:	d06e      	beq.n	800091c <__aeabi_fsub+0x200>
 800083e:	2aff      	cmp	r2, #255	@ 0xff
 8000840:	d0b4      	beq.n	80007ac <__aeabi_fsub+0x90>
 8000842:	000a      	movs	r2, r1
 8000844:	e79c      	b.n	8000780 <__aeabi_fsub+0x64>
 8000846:	2a00      	cmp	r2, #0
 8000848:	d000      	beq.n	800084c <__aeabi_fsub+0x130>
 800084a:	e088      	b.n	800095e <__aeabi_fsub+0x242>
 800084c:	20fe      	movs	r0, #254	@ 0xfe
 800084e:	1c6a      	adds	r2, r5, #1
 8000850:	4210      	tst	r0, r2
 8000852:	d000      	beq.n	8000856 <__aeabi_fsub+0x13a>
 8000854:	e092      	b.n	800097c <__aeabi_fsub+0x260>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d000      	beq.n	800085c <__aeabi_fsub+0x140>
 800085a:	e0a4      	b.n	80009a6 <__aeabi_fsub+0x28a>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_fsub+0x146>
 8000860:	e0cb      	b.n	80009fa <__aeabi_fsub+0x2de>
 8000862:	2e00      	cmp	r6, #0
 8000864:	d000      	beq.n	8000868 <__aeabi_fsub+0x14c>
 8000866:	e0ca      	b.n	80009fe <__aeabi_fsub+0x2e2>
 8000868:	2200      	movs	r2, #0
 800086a:	08db      	lsrs	r3, r3, #3
 800086c:	025b      	lsls	r3, r3, #9
 800086e:	0a5b      	lsrs	r3, r3, #9
 8000870:	b2d0      	uxtb	r0, r2
 8000872:	e7cb      	b.n	800080c <__aeabi_fsub+0xf0>
 8000874:	0031      	movs	r1, r6
 8000876:	2020      	movs	r0, #32
 8000878:	40d1      	lsrs	r1, r2
 800087a:	1a82      	subs	r2, r0, r2
 800087c:	4096      	lsls	r6, r2
 800087e:	0032      	movs	r2, r6
 8000880:	1e50      	subs	r0, r2, #1
 8000882:	4182      	sbcs	r2, r0
 8000884:	430a      	orrs	r2, r1
 8000886:	189b      	adds	r3, r3, r2
 8000888:	015a      	lsls	r2, r3, #5
 800088a:	d5ae      	bpl.n	80007ea <__aeabi_fsub+0xce>
 800088c:	1c6a      	adds	r2, r5, #1
 800088e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000890:	d14a      	bne.n	8000928 <__aeabi_fsub+0x20c>
 8000892:	20ff      	movs	r0, #255	@ 0xff
 8000894:	2300      	movs	r3, #0
 8000896:	e7b9      	b.n	800080c <__aeabi_fsub+0xf0>
 8000898:	22ff      	movs	r2, #255	@ 0xff
 800089a:	2b00      	cmp	r3, #0
 800089c:	d14b      	bne.n	8000936 <__aeabi_fsub+0x21a>
 800089e:	000c      	movs	r4, r1
 80008a0:	0033      	movs	r3, r6
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	2aff      	cmp	r2, #255	@ 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fsub+0x18e>
 80008a8:	e781      	b.n	80007ae <__aeabi_fsub+0x92>
 80008aa:	e7df      	b.n	800086c <__aeabi_fsub+0x150>
 80008ac:	019f      	lsls	r7, r3, #6
 80008ae:	09bf      	lsrs	r7, r7, #6
 80008b0:	0038      	movs	r0, r7
 80008b2:	f000 f9bf 	bl	8000c34 <__clzsi2>
 80008b6:	3805      	subs	r0, #5
 80008b8:	4087      	lsls	r7, r0
 80008ba:	4285      	cmp	r5, r0
 80008bc:	dc21      	bgt.n	8000902 <__aeabi_fsub+0x1e6>
 80008be:	003b      	movs	r3, r7
 80008c0:	2120      	movs	r1, #32
 80008c2:	1b42      	subs	r2, r0, r5
 80008c4:	3201      	adds	r2, #1
 80008c6:	40d3      	lsrs	r3, r2
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	4097      	lsls	r7, r2
 80008cc:	1e7a      	subs	r2, r7, #1
 80008ce:	4197      	sbcs	r7, r2
 80008d0:	2200      	movs	r2, #0
 80008d2:	433b      	orrs	r3, r7
 80008d4:	0759      	lsls	r1, r3, #29
 80008d6:	d000      	beq.n	80008da <__aeabi_fsub+0x1be>
 80008d8:	e78b      	b.n	80007f2 <__aeabi_fsub+0xd6>
 80008da:	e78f      	b.n	80007fc <__aeabi_fsub+0xe0>
 80008dc:	20fe      	movs	r0, #254	@ 0xfe
 80008de:	1c6a      	adds	r2, r5, #1
 80008e0:	4210      	tst	r0, r2
 80008e2:	d112      	bne.n	800090a <__aeabi_fsub+0x1ee>
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d152      	bne.n	800098e <__aeabi_fsub+0x272>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d07c      	beq.n	80009e6 <__aeabi_fsub+0x2ca>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0bb      	beq.n	8000868 <__aeabi_fsub+0x14c>
 80008f0:	1b9a      	subs	r2, r3, r6
 80008f2:	0150      	lsls	r0, r2, #5
 80008f4:	d400      	bmi.n	80008f8 <__aeabi_fsub+0x1dc>
 80008f6:	e08b      	b.n	8000a10 <__aeabi_fsub+0x2f4>
 80008f8:	2401      	movs	r4, #1
 80008fa:	2200      	movs	r2, #0
 80008fc:	1af3      	subs	r3, r6, r3
 80008fe:	400c      	ands	r4, r1
 8000900:	e7e8      	b.n	80008d4 <__aeabi_fsub+0x1b8>
 8000902:	4b56      	ldr	r3, [pc, #344]	@ (8000a5c <__aeabi_fsub+0x340>)
 8000904:	1a2a      	subs	r2, r5, r0
 8000906:	403b      	ands	r3, r7
 8000908:	e7e4      	b.n	80008d4 <__aeabi_fsub+0x1b8>
 800090a:	1b9f      	subs	r7, r3, r6
 800090c:	017a      	lsls	r2, r7, #5
 800090e:	d446      	bmi.n	800099e <__aeabi_fsub+0x282>
 8000910:	2f00      	cmp	r7, #0
 8000912:	d1cd      	bne.n	80008b0 <__aeabi_fsub+0x194>
 8000914:	2400      	movs	r4, #0
 8000916:	2000      	movs	r0, #0
 8000918:	2300      	movs	r3, #0
 800091a:	e777      	b.n	800080c <__aeabi_fsub+0xf0>
 800091c:	199b      	adds	r3, r3, r6
 800091e:	2501      	movs	r5, #1
 8000920:	3201      	adds	r2, #1
 8000922:	0159      	lsls	r1, r3, #5
 8000924:	d400      	bmi.n	8000928 <__aeabi_fsub+0x20c>
 8000926:	e760      	b.n	80007ea <__aeabi_fsub+0xce>
 8000928:	2101      	movs	r1, #1
 800092a:	484d      	ldr	r0, [pc, #308]	@ (8000a60 <__aeabi_fsub+0x344>)
 800092c:	4019      	ands	r1, r3
 800092e:	085b      	lsrs	r3, r3, #1
 8000930:	4003      	ands	r3, r0
 8000932:	430b      	orrs	r3, r1
 8000934:	e7ce      	b.n	80008d4 <__aeabi_fsub+0x1b8>
 8000936:	1e57      	subs	r7, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d05a      	beq.n	80009f2 <__aeabi_fsub+0x2d6>
 800093c:	000c      	movs	r4, r1
 800093e:	2aff      	cmp	r2, #255	@ 0xff
 8000940:	d033      	beq.n	80009aa <__aeabi_fsub+0x28e>
 8000942:	2201      	movs	r2, #1
 8000944:	2f1b      	cmp	r7, #27
 8000946:	dc07      	bgt.n	8000958 <__aeabi_fsub+0x23c>
 8000948:	2120      	movs	r1, #32
 800094a:	1bc9      	subs	r1, r1, r7
 800094c:	001a      	movs	r2, r3
 800094e:	408b      	lsls	r3, r1
 8000950:	40fa      	lsrs	r2, r7
 8000952:	1e59      	subs	r1, r3, #1
 8000954:	418b      	sbcs	r3, r1
 8000956:	431a      	orrs	r2, r3
 8000958:	0005      	movs	r5, r0
 800095a:	1ab3      	subs	r3, r6, r2
 800095c:	e743      	b.n	80007e6 <__aeabi_fsub+0xca>
 800095e:	2d00      	cmp	r5, #0
 8000960:	d123      	bne.n	80009aa <__aeabi_fsub+0x28e>
 8000962:	22ff      	movs	r2, #255	@ 0xff
 8000964:	2b00      	cmp	r3, #0
 8000966:	d09b      	beq.n	80008a0 <__aeabi_fsub+0x184>
 8000968:	1e51      	subs	r1, r2, #1
 800096a:	2a01      	cmp	r2, #1
 800096c:	d0d6      	beq.n	800091c <__aeabi_fsub+0x200>
 800096e:	2aff      	cmp	r2, #255	@ 0xff
 8000970:	d01b      	beq.n	80009aa <__aeabi_fsub+0x28e>
 8000972:	291b      	cmp	r1, #27
 8000974:	dd2c      	ble.n	80009d0 <__aeabi_fsub+0x2b4>
 8000976:	0002      	movs	r2, r0
 8000978:	1c73      	adds	r3, r6, #1
 800097a:	e73a      	b.n	80007f2 <__aeabi_fsub+0xd6>
 800097c:	2aff      	cmp	r2, #255	@ 0xff
 800097e:	d088      	beq.n	8000892 <__aeabi_fsub+0x176>
 8000980:	199b      	adds	r3, r3, r6
 8000982:	085b      	lsrs	r3, r3, #1
 8000984:	0759      	lsls	r1, r3, #29
 8000986:	d000      	beq.n	800098a <__aeabi_fsub+0x26e>
 8000988:	e733      	b.n	80007f2 <__aeabi_fsub+0xd6>
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	e76e      	b.n	800086c <__aeabi_fsub+0x150>
 800098e:	2b00      	cmp	r3, #0
 8000990:	d110      	bne.n	80009b4 <__aeabi_fsub+0x298>
 8000992:	2e00      	cmp	r6, #0
 8000994:	d043      	beq.n	8000a1e <__aeabi_fsub+0x302>
 8000996:	2401      	movs	r4, #1
 8000998:	0033      	movs	r3, r6
 800099a:	400c      	ands	r4, r1
 800099c:	e706      	b.n	80007ac <__aeabi_fsub+0x90>
 800099e:	2401      	movs	r4, #1
 80009a0:	1af7      	subs	r7, r6, r3
 80009a2:	400c      	ands	r4, r1
 80009a4:	e784      	b.n	80008b0 <__aeabi_fsub+0x194>
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d104      	bne.n	80009b4 <__aeabi_fsub+0x298>
 80009aa:	0033      	movs	r3, r6
 80009ac:	e6fe      	b.n	80007ac <__aeabi_fsub+0x90>
 80009ae:	2501      	movs	r5, #1
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	e718      	b.n	80007e6 <__aeabi_fsub+0xca>
 80009b4:	2e00      	cmp	r6, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0x29e>
 80009b8:	e6f8      	b.n	80007ac <__aeabi_fsub+0x90>
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	03d2      	lsls	r2, r2, #15
 80009be:	4297      	cmp	r7, r2
 80009c0:	d304      	bcc.n	80009cc <__aeabi_fsub+0x2b0>
 80009c2:	4594      	cmp	ip, r2
 80009c4:	d202      	bcs.n	80009cc <__aeabi_fsub+0x2b0>
 80009c6:	2401      	movs	r4, #1
 80009c8:	0033      	movs	r3, r6
 80009ca:	400c      	ands	r4, r1
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	e6f1      	b.n	80007b4 <__aeabi_fsub+0x98>
 80009d0:	001a      	movs	r2, r3
 80009d2:	2520      	movs	r5, #32
 80009d4:	40ca      	lsrs	r2, r1
 80009d6:	1a69      	subs	r1, r5, r1
 80009d8:	408b      	lsls	r3, r1
 80009da:	1e59      	subs	r1, r3, #1
 80009dc:	418b      	sbcs	r3, r1
 80009de:	4313      	orrs	r3, r2
 80009e0:	0005      	movs	r5, r0
 80009e2:	199b      	adds	r3, r3, r6
 80009e4:	e750      	b.n	8000888 <__aeabi_fsub+0x16c>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d094      	beq.n	8000914 <__aeabi_fsub+0x1f8>
 80009ea:	2401      	movs	r4, #1
 80009ec:	0033      	movs	r3, r6
 80009ee:	400c      	ands	r4, r1
 80009f0:	e73a      	b.n	8000868 <__aeabi_fsub+0x14c>
 80009f2:	000c      	movs	r4, r1
 80009f4:	2501      	movs	r5, #1
 80009f6:	1af3      	subs	r3, r6, r3
 80009f8:	e6f5      	b.n	80007e6 <__aeabi_fsub+0xca>
 80009fa:	0033      	movs	r3, r6
 80009fc:	e734      	b.n	8000868 <__aeabi_fsub+0x14c>
 80009fe:	199b      	adds	r3, r3, r6
 8000a00:	2200      	movs	r2, #0
 8000a02:	0159      	lsls	r1, r3, #5
 8000a04:	d5c1      	bpl.n	800098a <__aeabi_fsub+0x26e>
 8000a06:	4a15      	ldr	r2, [pc, #84]	@ (8000a5c <__aeabi_fsub+0x340>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	e72d      	b.n	800086c <__aeabi_fsub+0x150>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fsub+0x2fa>
 8000a14:	e77e      	b.n	8000914 <__aeabi_fsub+0x1f8>
 8000a16:	0013      	movs	r3, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	e726      	b.n	800086c <__aeabi_fsub+0x150>
 8000a1e:	2380      	movs	r3, #128	@ 0x80
 8000a20:	2400      	movs	r4, #0
 8000a22:	20ff      	movs	r0, #255	@ 0xff
 8000a24:	03db      	lsls	r3, r3, #15
 8000a26:	e6f1      	b.n	800080c <__aeabi_fsub+0xf0>
 8000a28:	2a00      	cmp	r2, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fsub+0x312>
 8000a2c:	e756      	b.n	80008dc <__aeabi_fsub+0x1c0>
 8000a2e:	1b47      	subs	r7, r0, r5
 8000a30:	003a      	movs	r2, r7
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fsub+0x31c>
 8000a36:	e730      	b.n	800089a <__aeabi_fsub+0x17e>
 8000a38:	2280      	movs	r2, #128	@ 0x80
 8000a3a:	04d2      	lsls	r2, r2, #19
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	e77f      	b.n	8000942 <__aeabi_fsub+0x226>
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0x32c>
 8000a46:	e701      	b.n	800084c <__aeabi_fsub+0x130>
 8000a48:	1b41      	subs	r1, r0, r5
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	d101      	bne.n	8000a52 <__aeabi_fsub+0x336>
 8000a4e:	000a      	movs	r2, r1
 8000a50:	e788      	b.n	8000964 <__aeabi_fsub+0x248>
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	04d2      	lsls	r2, r2, #19
 8000a56:	4313      	orrs	r3, r2
 8000a58:	e78b      	b.n	8000972 <__aeabi_fsub+0x256>
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	fbffffff 	.word	0xfbffffff
 8000a60:	7dffffff 	.word	0x7dffffff

08000a64 <__aeabi_f2iz>:
 8000a64:	0241      	lsls	r1, r0, #9
 8000a66:	0042      	lsls	r2, r0, #1
 8000a68:	0fc3      	lsrs	r3, r0, #31
 8000a6a:	0a49      	lsrs	r1, r1, #9
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	0e12      	lsrs	r2, r2, #24
 8000a70:	2a7e      	cmp	r2, #126	@ 0x7e
 8000a72:	dd03      	ble.n	8000a7c <__aeabi_f2iz+0x18>
 8000a74:	2a9d      	cmp	r2, #157	@ 0x9d
 8000a76:	dd02      	ble.n	8000a7e <__aeabi_f2iz+0x1a>
 8000a78:	4a09      	ldr	r2, [pc, #36]	@ (8000aa0 <__aeabi_f2iz+0x3c>)
 8000a7a:	1898      	adds	r0, r3, r2
 8000a7c:	4770      	bx	lr
 8000a7e:	2080      	movs	r0, #128	@ 0x80
 8000a80:	0400      	lsls	r0, r0, #16
 8000a82:	4301      	orrs	r1, r0
 8000a84:	2a95      	cmp	r2, #149	@ 0x95
 8000a86:	dc07      	bgt.n	8000a98 <__aeabi_f2iz+0x34>
 8000a88:	2096      	movs	r0, #150	@ 0x96
 8000a8a:	1a82      	subs	r2, r0, r2
 8000a8c:	40d1      	lsrs	r1, r2
 8000a8e:	4248      	negs	r0, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f3      	bne.n	8000a7c <__aeabi_f2iz+0x18>
 8000a94:	0008      	movs	r0, r1
 8000a96:	e7f1      	b.n	8000a7c <__aeabi_f2iz+0x18>
 8000a98:	3a96      	subs	r2, #150	@ 0x96
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	e7f7      	b.n	8000a8e <__aeabi_f2iz+0x2a>
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	7fffffff 	.word	0x7fffffff

08000aa4 <__aeabi_i2f>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	d013      	beq.n	8000ad2 <__aeabi_i2f+0x2e>
 8000aaa:	17c3      	asrs	r3, r0, #31
 8000aac:	18c5      	adds	r5, r0, r3
 8000aae:	405d      	eors	r5, r3
 8000ab0:	0fc4      	lsrs	r4, r0, #31
 8000ab2:	0028      	movs	r0, r5
 8000ab4:	f000 f8be 	bl	8000c34 <__clzsi2>
 8000ab8:	239e      	movs	r3, #158	@ 0x9e
 8000aba:	0001      	movs	r1, r0
 8000abc:	1a1b      	subs	r3, r3, r0
 8000abe:	2b96      	cmp	r3, #150	@ 0x96
 8000ac0:	dc0f      	bgt.n	8000ae2 <__aeabi_i2f+0x3e>
 8000ac2:	2808      	cmp	r0, #8
 8000ac4:	d034      	beq.n	8000b30 <__aeabi_i2f+0x8c>
 8000ac6:	3908      	subs	r1, #8
 8000ac8:	408d      	lsls	r5, r1
 8000aca:	026d      	lsls	r5, r5, #9
 8000acc:	0a6d      	lsrs	r5, r5, #9
 8000ace:	b2d8      	uxtb	r0, r3
 8000ad0:	e002      	b.n	8000ad8 <__aeabi_i2f+0x34>
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	05c0      	lsls	r0, r0, #23
 8000ada:	4328      	orrs	r0, r5
 8000adc:	07e4      	lsls	r4, r4, #31
 8000ade:	4320      	orrs	r0, r4
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	2b99      	cmp	r3, #153	@ 0x99
 8000ae4:	dc16      	bgt.n	8000b14 <__aeabi_i2f+0x70>
 8000ae6:	1f42      	subs	r2, r0, #5
 8000ae8:	2805      	cmp	r0, #5
 8000aea:	d000      	beq.n	8000aee <__aeabi_i2f+0x4a>
 8000aec:	4095      	lsls	r5, r2
 8000aee:	002a      	movs	r2, r5
 8000af0:	4811      	ldr	r0, [pc, #68]	@ (8000b38 <__aeabi_i2f+0x94>)
 8000af2:	4002      	ands	r2, r0
 8000af4:	076e      	lsls	r6, r5, #29
 8000af6:	d009      	beq.n	8000b0c <__aeabi_i2f+0x68>
 8000af8:	260f      	movs	r6, #15
 8000afa:	4035      	ands	r5, r6
 8000afc:	2d04      	cmp	r5, #4
 8000afe:	d005      	beq.n	8000b0c <__aeabi_i2f+0x68>
 8000b00:	3204      	adds	r2, #4
 8000b02:	0155      	lsls	r5, r2, #5
 8000b04:	d502      	bpl.n	8000b0c <__aeabi_i2f+0x68>
 8000b06:	239f      	movs	r3, #159	@ 0x9f
 8000b08:	4002      	ands	r2, r0
 8000b0a:	1a5b      	subs	r3, r3, r1
 8000b0c:	0192      	lsls	r2, r2, #6
 8000b0e:	0a55      	lsrs	r5, r2, #9
 8000b10:	b2d8      	uxtb	r0, r3
 8000b12:	e7e1      	b.n	8000ad8 <__aeabi_i2f+0x34>
 8000b14:	2205      	movs	r2, #5
 8000b16:	1a12      	subs	r2, r2, r0
 8000b18:	0028      	movs	r0, r5
 8000b1a:	40d0      	lsrs	r0, r2
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	0008      	movs	r0, r1
 8000b20:	301b      	adds	r0, #27
 8000b22:	4085      	lsls	r5, r0
 8000b24:	0028      	movs	r0, r5
 8000b26:	1e45      	subs	r5, r0, #1
 8000b28:	41a8      	sbcs	r0, r5
 8000b2a:	4302      	orrs	r2, r0
 8000b2c:	0015      	movs	r5, r2
 8000b2e:	e7de      	b.n	8000aee <__aeabi_i2f+0x4a>
 8000b30:	026d      	lsls	r5, r5, #9
 8000b32:	2096      	movs	r0, #150	@ 0x96
 8000b34:	0a6d      	lsrs	r5, r5, #9
 8000b36:	e7cf      	b.n	8000ad8 <__aeabi_i2f+0x34>
 8000b38:	fbffffff 	.word	0xfbffffff

08000b3c <__aeabi_ui2f>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	1e04      	subs	r4, r0, #0
 8000b40:	d00e      	beq.n	8000b60 <__aeabi_ui2f+0x24>
 8000b42:	f000 f877 	bl	8000c34 <__clzsi2>
 8000b46:	239e      	movs	r3, #158	@ 0x9e
 8000b48:	0001      	movs	r1, r0
 8000b4a:	1a1b      	subs	r3, r3, r0
 8000b4c:	2b96      	cmp	r3, #150	@ 0x96
 8000b4e:	dc0c      	bgt.n	8000b6a <__aeabi_ui2f+0x2e>
 8000b50:	2808      	cmp	r0, #8
 8000b52:	d02f      	beq.n	8000bb4 <__aeabi_ui2f+0x78>
 8000b54:	3908      	subs	r1, #8
 8000b56:	408c      	lsls	r4, r1
 8000b58:	0264      	lsls	r4, r4, #9
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	b2d8      	uxtb	r0, r3
 8000b5e:	e001      	b.n	8000b64 <__aeabi_ui2f+0x28>
 8000b60:	2000      	movs	r0, #0
 8000b62:	2400      	movs	r4, #0
 8000b64:	05c0      	lsls	r0, r0, #23
 8000b66:	4320      	orrs	r0, r4
 8000b68:	bd70      	pop	{r4, r5, r6, pc}
 8000b6a:	2b99      	cmp	r3, #153	@ 0x99
 8000b6c:	dc16      	bgt.n	8000b9c <__aeabi_ui2f+0x60>
 8000b6e:	1f42      	subs	r2, r0, #5
 8000b70:	2805      	cmp	r0, #5
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ui2f+0x3a>
 8000b74:	4094      	lsls	r4, r2
 8000b76:	0022      	movs	r2, r4
 8000b78:	4810      	ldr	r0, [pc, #64]	@ (8000bbc <__aeabi_ui2f+0x80>)
 8000b7a:	4002      	ands	r2, r0
 8000b7c:	0765      	lsls	r5, r4, #29
 8000b7e:	d009      	beq.n	8000b94 <__aeabi_ui2f+0x58>
 8000b80:	250f      	movs	r5, #15
 8000b82:	402c      	ands	r4, r5
 8000b84:	2c04      	cmp	r4, #4
 8000b86:	d005      	beq.n	8000b94 <__aeabi_ui2f+0x58>
 8000b88:	3204      	adds	r2, #4
 8000b8a:	0154      	lsls	r4, r2, #5
 8000b8c:	d502      	bpl.n	8000b94 <__aeabi_ui2f+0x58>
 8000b8e:	239f      	movs	r3, #159	@ 0x9f
 8000b90:	4002      	ands	r2, r0
 8000b92:	1a5b      	subs	r3, r3, r1
 8000b94:	0192      	lsls	r2, r2, #6
 8000b96:	0a54      	lsrs	r4, r2, #9
 8000b98:	b2d8      	uxtb	r0, r3
 8000b9a:	e7e3      	b.n	8000b64 <__aeabi_ui2f+0x28>
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	321b      	adds	r2, #27
 8000ba2:	4090      	lsls	r0, r2
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	1e50      	subs	r0, r2, #1
 8000ba8:	4182      	sbcs	r2, r0
 8000baa:	2005      	movs	r0, #5
 8000bac:	1a40      	subs	r0, r0, r1
 8000bae:	40c4      	lsrs	r4, r0
 8000bb0:	4314      	orrs	r4, r2
 8000bb2:	e7e0      	b.n	8000b76 <__aeabi_ui2f+0x3a>
 8000bb4:	0264      	lsls	r4, r4, #9
 8000bb6:	2096      	movs	r0, #150	@ 0x96
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	e7d3      	b.n	8000b64 <__aeabi_ui2f+0x28>
 8000bbc:	fbffffff 	.word	0xfbffffff

08000bc0 <__aeabi_cfrcmple>:
 8000bc0:	4684      	mov	ip, r0
 8000bc2:	0008      	movs	r0, r1
 8000bc4:	4661      	mov	r1, ip
 8000bc6:	e7ff      	b.n	8000bc8 <__aeabi_cfcmpeq>

08000bc8 <__aeabi_cfcmpeq>:
 8000bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000bca:	f000 f8c9 	bl	8000d60 <__lesf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d401      	bmi.n	8000bd6 <__aeabi_cfcmpeq+0xe>
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	42c8      	cmn	r0, r1
 8000bd6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000bd8 <__aeabi_fcmpeq>:
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	f000 f849 	bl	8000c70 <__eqsf2>
 8000bde:	4240      	negs	r0, r0
 8000be0:	3001      	adds	r0, #1
 8000be2:	bd10      	pop	{r4, pc}

08000be4 <__aeabi_fcmplt>:
 8000be4:	b510      	push	{r4, lr}
 8000be6:	f000 f8bb 	bl	8000d60 <__lesf2>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	db01      	blt.n	8000bf2 <__aeabi_fcmplt+0xe>
 8000bee:	2000      	movs	r0, #0
 8000bf0:	bd10      	pop	{r4, pc}
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	bd10      	pop	{r4, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)

08000bf8 <__aeabi_fcmple>:
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	f000 f8b1 	bl	8000d60 <__lesf2>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	dd01      	ble.n	8000c06 <__aeabi_fcmple+0xe>
 8000c02:	2000      	movs	r0, #0
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	2001      	movs	r0, #1
 8000c08:	bd10      	pop	{r4, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	f000 f857 	bl	8000cc0 <__gesf2>
 8000c12:	2800      	cmp	r0, #0
 8000c14:	dc01      	bgt.n	8000c1a <__aeabi_fcmpgt+0xe>
 8000c16:	2000      	movs	r0, #0
 8000c18:	bd10      	pop	{r4, pc}
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)

08000c20 <__aeabi_fcmpge>:
 8000c20:	b510      	push	{r4, lr}
 8000c22:	f000 f84d 	bl	8000cc0 <__gesf2>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	da01      	bge.n	8000c2e <__aeabi_fcmpge+0xe>
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	bd10      	pop	{r4, pc}
 8000c2e:	2001      	movs	r0, #1
 8000c30:	bd10      	pop	{r4, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)

08000c34 <__clzsi2>:
 8000c34:	211c      	movs	r1, #28
 8000c36:	2301      	movs	r3, #1
 8000c38:	041b      	lsls	r3, r3, #16
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d301      	bcc.n	8000c42 <__clzsi2+0xe>
 8000c3e:	0c00      	lsrs	r0, r0, #16
 8000c40:	3910      	subs	r1, #16
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	4298      	cmp	r0, r3
 8000c46:	d301      	bcc.n	8000c4c <__clzsi2+0x18>
 8000c48:	0a00      	lsrs	r0, r0, #8
 8000c4a:	3908      	subs	r1, #8
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	4298      	cmp	r0, r3
 8000c50:	d301      	bcc.n	8000c56 <__clzsi2+0x22>
 8000c52:	0900      	lsrs	r0, r0, #4
 8000c54:	3904      	subs	r1, #4
 8000c56:	a202      	add	r2, pc, #8	@ (adr r2, 8000c60 <__clzsi2+0x2c>)
 8000c58:	5c10      	ldrb	r0, [r2, r0]
 8000c5a:	1840      	adds	r0, r0, r1
 8000c5c:	4770      	bx	lr
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	02020304 	.word	0x02020304
 8000c64:	01010101 	.word	0x01010101
	...

08000c70 <__eqsf2>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	0042      	lsls	r2, r0, #1
 8000c74:	024e      	lsls	r6, r1, #9
 8000c76:	004c      	lsls	r4, r1, #1
 8000c78:	0245      	lsls	r5, r0, #9
 8000c7a:	0a6d      	lsrs	r5, r5, #9
 8000c7c:	0e12      	lsrs	r2, r2, #24
 8000c7e:	0fc3      	lsrs	r3, r0, #31
 8000c80:	0a76      	lsrs	r6, r6, #9
 8000c82:	0e24      	lsrs	r4, r4, #24
 8000c84:	0fc9      	lsrs	r1, r1, #31
 8000c86:	2aff      	cmp	r2, #255	@ 0xff
 8000c88:	d010      	beq.n	8000cac <__eqsf2+0x3c>
 8000c8a:	2cff      	cmp	r4, #255	@ 0xff
 8000c8c:	d00c      	beq.n	8000ca8 <__eqsf2+0x38>
 8000c8e:	2001      	movs	r0, #1
 8000c90:	42a2      	cmp	r2, r4
 8000c92:	d10a      	bne.n	8000caa <__eqsf2+0x3a>
 8000c94:	42b5      	cmp	r5, r6
 8000c96:	d108      	bne.n	8000caa <__eqsf2+0x3a>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d00f      	beq.n	8000cbc <__eqsf2+0x4c>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d104      	bne.n	8000caa <__eqsf2+0x3a>
 8000ca0:	0028      	movs	r0, r5
 8000ca2:	1e43      	subs	r3, r0, #1
 8000ca4:	4198      	sbcs	r0, r3
 8000ca6:	e000      	b.n	8000caa <__eqsf2+0x3a>
 8000ca8:	2001      	movs	r0, #1
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
 8000cac:	2001      	movs	r0, #1
 8000cae:	2cff      	cmp	r4, #255	@ 0xff
 8000cb0:	d1fb      	bne.n	8000caa <__eqsf2+0x3a>
 8000cb2:	4335      	orrs	r5, r6
 8000cb4:	d1f9      	bne.n	8000caa <__eqsf2+0x3a>
 8000cb6:	404b      	eors	r3, r1
 8000cb8:	0018      	movs	r0, r3
 8000cba:	e7f6      	b.n	8000caa <__eqsf2+0x3a>
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	e7f4      	b.n	8000caa <__eqsf2+0x3a>

08000cc0 <__gesf2>:
 8000cc0:	b530      	push	{r4, r5, lr}
 8000cc2:	0042      	lsls	r2, r0, #1
 8000cc4:	0244      	lsls	r4, r0, #9
 8000cc6:	024d      	lsls	r5, r1, #9
 8000cc8:	0fc3      	lsrs	r3, r0, #31
 8000cca:	0048      	lsls	r0, r1, #1
 8000ccc:	0a64      	lsrs	r4, r4, #9
 8000cce:	0e12      	lsrs	r2, r2, #24
 8000cd0:	0a6d      	lsrs	r5, r5, #9
 8000cd2:	0e00      	lsrs	r0, r0, #24
 8000cd4:	0fc9      	lsrs	r1, r1, #31
 8000cd6:	2aff      	cmp	r2, #255	@ 0xff
 8000cd8:	d019      	beq.n	8000d0e <__gesf2+0x4e>
 8000cda:	28ff      	cmp	r0, #255	@ 0xff
 8000cdc:	d00b      	beq.n	8000cf6 <__gesf2+0x36>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d11e      	bne.n	8000d20 <__gesf2+0x60>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d10b      	bne.n	8000cfe <__gesf2+0x3e>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d027      	beq.n	8000d3a <__gesf2+0x7a>
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d134      	bne.n	8000d58 <__gesf2+0x98>
 8000cee:	2900      	cmp	r1, #0
 8000cf0:	d02f      	beq.n	8000d52 <__gesf2+0x92>
 8000cf2:	0008      	movs	r0, r1
 8000cf4:	bd30      	pop	{r4, r5, pc}
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d128      	bne.n	8000d4c <__gesf2+0x8c>
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d101      	bne.n	8000d02 <__gesf2+0x42>
 8000cfe:	2c00      	cmp	r4, #0
 8000d00:	d0f5      	beq.n	8000cee <__gesf2+0x2e>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d107      	bne.n	8000d16 <__gesf2+0x56>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d023      	beq.n	8000d52 <__gesf2+0x92>
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	e7f2      	b.n	8000cf4 <__gesf2+0x34>
 8000d0e:	2c00      	cmp	r4, #0
 8000d10:	d11c      	bne.n	8000d4c <__gesf2+0x8c>
 8000d12:	28ff      	cmp	r0, #255	@ 0xff
 8000d14:	d014      	beq.n	8000d40 <__gesf2+0x80>
 8000d16:	1e58      	subs	r0, r3, #1
 8000d18:	2302      	movs	r3, #2
 8000d1a:	4018      	ands	r0, r3
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	e7e9      	b.n	8000cf4 <__gesf2+0x34>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d0f8      	beq.n	8000d16 <__gesf2+0x56>
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d1f6      	bne.n	8000d16 <__gesf2+0x56>
 8000d28:	4282      	cmp	r2, r0
 8000d2a:	dcf4      	bgt.n	8000d16 <__gesf2+0x56>
 8000d2c:	dbeb      	blt.n	8000d06 <__gesf2+0x46>
 8000d2e:	42ac      	cmp	r4, r5
 8000d30:	d8f1      	bhi.n	8000d16 <__gesf2+0x56>
 8000d32:	2000      	movs	r0, #0
 8000d34:	42ac      	cmp	r4, r5
 8000d36:	d2dd      	bcs.n	8000cf4 <__gesf2+0x34>
 8000d38:	e7e5      	b.n	8000d06 <__gesf2+0x46>
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d0da      	beq.n	8000cf4 <__gesf2+0x34>
 8000d3e:	e7ea      	b.n	8000d16 <__gesf2+0x56>
 8000d40:	2d00      	cmp	r5, #0
 8000d42:	d103      	bne.n	8000d4c <__gesf2+0x8c>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d1e6      	bne.n	8000d16 <__gesf2+0x56>
 8000d48:	2000      	movs	r0, #0
 8000d4a:	e7d3      	b.n	8000cf4 <__gesf2+0x34>
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	4240      	negs	r0, r0
 8000d50:	e7d0      	b.n	8000cf4 <__gesf2+0x34>
 8000d52:	2001      	movs	r0, #1
 8000d54:	4240      	negs	r0, r0
 8000d56:	e7cd      	b.n	8000cf4 <__gesf2+0x34>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d0e8      	beq.n	8000d2e <__gesf2+0x6e>
 8000d5c:	e7db      	b.n	8000d16 <__gesf2+0x56>
 8000d5e:	46c0      	nop			@ (mov r8, r8)

08000d60 <__lesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d01a      	beq.n	8000db0 <__lesf2+0x50>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00e      	beq.n	8000d9c <__lesf2+0x3c>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__lesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10e      	bne.n	8000da4 <__lesf2+0x44>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d02a      	beq.n	8000de0 <__lesf2+0x80>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d00c      	beq.n	8000da8 <__lesf2+0x48>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d01d      	beq.n	8000dce <__lesf2+0x6e>
 8000d92:	1e58      	subs	r0, r3, #1
 8000d94:	2302      	movs	r3, #2
 8000d96:	4018      	ands	r0, r3
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e010      	b.n	8000dbe <__lesf2+0x5e>
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d10d      	bne.n	8000dbc <__lesf2+0x5c>
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	d120      	bne.n	8000de6 <__lesf2+0x86>
 8000da4:	2c00      	cmp	r4, #0
 8000da6:	d11e      	bne.n	8000de6 <__lesf2+0x86>
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d023      	beq.n	8000df4 <__lesf2+0x94>
 8000dac:	0008      	movs	r0, r1
 8000dae:	e006      	b.n	8000dbe <__lesf2+0x5e>
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d103      	bne.n	8000dbc <__lesf2+0x5c>
 8000db4:	28ff      	cmp	r0, #255	@ 0xff
 8000db6:	d1ec      	bne.n	8000d92 <__lesf2+0x32>
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d017      	beq.n	8000dec <__lesf2+0x8c>
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	bd30      	pop	{r4, r5, pc}
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__lesf2+0x32>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1e4      	bne.n	8000d92 <__lesf2+0x32>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dce2      	bgt.n	8000d92 <__lesf2+0x32>
 8000dcc:	db04      	blt.n	8000dd8 <__lesf2+0x78>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8df      	bhi.n	8000d92 <__lesf2+0x32>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2f2      	bcs.n	8000dbe <__lesf2+0x5e>
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00b      	beq.n	8000df4 <__lesf2+0x94>
 8000ddc:	0018      	movs	r0, r3
 8000dde:	e7ee      	b.n	8000dbe <__lesf2+0x5e>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d0ec      	beq.n	8000dbe <__lesf2+0x5e>
 8000de4:	e7d5      	b.n	8000d92 <__lesf2+0x32>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d1d3      	bne.n	8000d92 <__lesf2+0x32>
 8000dea:	e7f5      	b.n	8000dd8 <__lesf2+0x78>
 8000dec:	2000      	movs	r0, #0
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d0e5      	beq.n	8000dbe <__lesf2+0x5e>
 8000df2:	e7ce      	b.n	8000d92 <__lesf2+0x32>
 8000df4:	2001      	movs	r0, #1
 8000df6:	4240      	negs	r0, r0
 8000df8:	e7e1      	b.n	8000dbe <__lesf2+0x5e>
 8000dfa:	46c0      	nop			@ (mov r8, r8)

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b5b0      	push	{r4, r5, r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 fb20 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f8a6 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f000 f9b2 	bl	8001170 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0c:	f000 f992 	bl	8001134 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e10:	f000 f8fe 	bl	8001010 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	/*Start calibration for ADC*/
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000e14:	4b44      	ldr	r3, [pc, #272]	@ (8000f28 <main+0x12c>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 fbcc 	bl	80025b4 <HAL_ADCEx_Calibration_Start>
	/*Init ADC with DMA in single conversion mode*/
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_RES, ADC_CONVERTED_DATA_BUFFER_SIZE);
 8000e1c:	4943      	ldr	r1, [pc, #268]	@ (8000f2c <main+0x130>)
 8000e1e:	4b42      	ldr	r3, [pc, #264]	@ (8000f28 <main+0x12c>)
 8000e20:	2203      	movs	r2, #3
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 ff3e 	bl	8001ca4 <HAL_ADC_Start_DMA>
	/*Init LCD*/
	lcd_init();
 8000e28:	f002 fef2 	bl	8003c10 <lcd_init>
	/*Welcome screen lcd */
	lcd_puts(0, 2, "ADC DMA Mul CH");
 8000e2c:	4b40      	ldr	r3, [pc, #256]	@ (8000f30 <main+0x134>)
 8000e2e:	001a      	movs	r2, r3
 8000e30:	2102      	movs	r1, #2
 8000e32:	2000      	movs	r0, #0
 8000e34:	f003 f814 	bl	8003e60 <lcd_puts>
	HAL_Delay(2000);
 8000e38:	23fa      	movs	r3, #250	@ 0xfa
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f000 fb87 	bl	8001550 <HAL_Delay>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/* in single conversion mode we should triggered ADC by software starting every while loop*/
		HAL_ADC_Start(&hadc1);
 8000e42:	4b39      	ldr	r3, [pc, #228]	@ (8000f28 <main+0x12c>)
 8000e44:	0018      	movs	r0, r3
 8000e46:	f000 fedf 	bl	8001c08 <HAL_ADC_Start>
		// Convert ADC value to temperature in Celsius
		LMtemperature = ((float) ADC_RES[1] / ADC_MAX ) * (ADC_REFERNCE / LM35_GAIN );
 8000e4a:	4b38      	ldr	r3, [pc, #224]	@ (8000f2c <main+0x130>)
 8000e4c:	885b      	ldrh	r3, [r3, #2]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fe74 	bl	8000b3c <__aeabi_ui2f>
 8000e54:	1c03      	adds	r3, r0, #0
 8000e56:	218b      	movs	r1, #139	@ 0x8b
 8000e58:	05c9      	lsls	r1, r1, #23
 8000e5a:	1c18      	adds	r0, r3, #0
 8000e5c:	f7ff fa00 	bl	8000260 <__aeabi_fdiv>
 8000e60:	1c03      	adds	r3, r0, #0
 8000e62:	4934      	ldr	r1, [pc, #208]	@ (8000f34 <main+0x138>)
 8000e64:	1c18      	adds	r0, r3, #0
 8000e66:	f7ff fb1b 	bl	80004a0 <__aeabi_fmul>
 8000e6a:	1c03      	adds	r3, r0, #0
 8000e6c:	1c1a      	adds	r2, r3, #0
 8000e6e:	4b32      	ldr	r3, [pc, #200]	@ (8000f38 <main+0x13c>)
 8000e70:	601a      	str	r2, [r3, #0]
		STtemperature = ((float) ADC_RES[2] / ADC_MAX ) * (ADC_REFERNCE / LM35_GAIN );
 8000e72:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <main+0x130>)
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff fe60 	bl	8000b3c <__aeabi_ui2f>
 8000e7c:	1c03      	adds	r3, r0, #0
 8000e7e:	218b      	movs	r1, #139	@ 0x8b
 8000e80:	05c9      	lsls	r1, r1, #23
 8000e82:	1c18      	adds	r0, r3, #0
 8000e84:	f7ff f9ec 	bl	8000260 <__aeabi_fdiv>
 8000e88:	1c03      	adds	r3, r0, #0
 8000e8a:	492a      	ldr	r1, [pc, #168]	@ (8000f34 <main+0x138>)
 8000e8c:	1c18      	adds	r0, r3, #0
 8000e8e:	f7ff fb07 	bl	80004a0 <__aeabi_fmul>
 8000e92:	1c03      	adds	r3, r0, #0
 8000e94:	1c1a      	adds	r2, r3, #0
 8000e96:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <main+0x140>)
 8000e98:	601a      	str	r2, [r3, #0]
		/*read analog input mVoltage*/
		mVoltage = ADC_RES[0] * ((float) ADC_REFERNCE / ADC_MAX);
 8000e9a:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <main+0x130>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff fe00 	bl	8000aa4 <__aeabi_i2f>
 8000ea4:	1c03      	adds	r3, r0, #0
 8000ea6:	4926      	ldr	r1, [pc, #152]	@ (8000f40 <main+0x144>)
 8000ea8:	1c18      	adds	r0, r3, #0
 8000eaa:	f7ff faf9 	bl	80004a0 <__aeabi_fmul>
 8000eae:	1c03      	adds	r3, r0, #0
 8000eb0:	1c1a      	adds	r2, r3, #0
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <main+0x148>)
 8000eb4:	601a      	str	r2, [r3, #0]
		/*Clear LCD and print a new value*/
		lcd_clear();
 8000eb6:	f003 f821 	bl	8003efc <lcd_clear>
		sprintf(buff, "tem:LM%03d ST%03d", (uint16_t) LMtemperature,(uint16_t)STtemperature);
 8000eba:	4b1f      	ldr	r3, [pc, #124]	@ (8000f38 <main+0x13c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	1c18      	adds	r0, r3, #0
 8000ec0:	f7ff f9b6 	bl	8000230 <__aeabi_f2uiz>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	001c      	movs	r4, r3
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <main+0x140>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1c18      	adds	r0, r3, #0
 8000ed0:	f7ff f9ae 	bl	8000230 <__aeabi_f2uiz>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	491b      	ldr	r1, [pc, #108]	@ (8000f48 <main+0x14c>)
 8000eda:	481c      	ldr	r0, [pc, #112]	@ (8000f4c <main+0x150>)
 8000edc:	0022      	movs	r2, r4
 8000ede:	f003 f817 	bl	8003f10 <siprintf>
		lcd_puts(0, 0, buff);
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <main+0x150>)
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f002 ffb9 	bl	8003e60 <lcd_puts>
		HAL_Delay(5);
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f000 fb2e 	bl	8001550 <HAL_Delay>
		sprintf(buff, "voltage:%03dmV", (uint16_t) mVoltage);
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <main+0x148>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	1c18      	adds	r0, r3, #0
 8000efa:	f7ff f999 	bl	8000230 <__aeabi_f2uiz>
 8000efe:	0003      	movs	r3, r0
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	001a      	movs	r2, r3
 8000f04:	4912      	ldr	r1, [pc, #72]	@ (8000f50 <main+0x154>)
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <main+0x150>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f003 f801 	bl	8003f10 <siprintf>
		lcd_puts(1, 0, buff);
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <main+0x150>)
 8000f10:	001a      	movs	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	2001      	movs	r0, #1
 8000f16:	f002 ffa3 	bl	8003e60 <lcd_puts>
		HAL_Delay(500);
 8000f1a:	23fa      	movs	r3, #250	@ 0xfa
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 fb16 	bl	8001550 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	e78c      	b.n	8000e42 <main+0x46>
 8000f28:	20000078 	.word	0x20000078
 8000f2c:	2000013c 	.word	0x2000013c
 8000f30:	08004864 	.word	0x08004864
 8000f34:	43a50000 	.word	0x43a50000
 8000f38:	20000144 	.word	0x20000144
 8000f3c:	20000148 	.word	0x20000148
 8000f40:	3f4e4000 	.word	0x3f4e4000
 8000f44:	2000014c 	.word	0x2000014c
 8000f48:	08004874 	.word	0x08004874
 8000f4c:	20000150 	.word	0x20000150
 8000f50:	08004888 	.word	0x08004888

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b095      	sub	sp, #84	@ 0x54
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	2414      	movs	r4, #20
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	0018      	movs	r0, r3
 8000f60:	233c      	movs	r3, #60	@ 0x3c
 8000f62:	001a      	movs	r2, r3
 8000f64:	2100      	movs	r1, #0
 8000f66:	f002 fff3 	bl	8003f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2310      	movs	r3, #16
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f002 ffec 	bl	8003f50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f002 f91d 	bl	80031bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2202      	movs	r2, #2
 8000f86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2280      	movs	r2, #128	@ 0x80
 8000f8c:	0052      	lsls	r2, r2, #1
 8000f8e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f90:	0021      	movs	r1, r4
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2240      	movs	r2, #64	@ 0x40
 8000f9c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2209      	movs	r2, #9
 8000fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	0292      	lsls	r2, r2, #10
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2280      	movs	r2, #128	@ 0x80
 8000fc2:	0492      	lsls	r2, r2, #18
 8000fc4:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2280      	movs	r2, #128	@ 0x80
 8000fca:	05d2      	lsls	r2, r2, #23
 8000fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f002 f933 	bl	800323c <HAL_RCC_OscConfig>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fda:	f000 f8ff 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 fc7e 	bl	80038fc <HAL_RCC_ClockConfig>
 8001000:	1e03      	subs	r3, r0, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001004:	f000 f8ea 	bl	80011dc <Error_Handler>
  }
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b015      	add	sp, #84	@ 0x54
 800100e:	bd90      	pop	{r4, r7, pc}

08001010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	0018      	movs	r0, r3
 800101a:	230c      	movs	r3, #12
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f002 ff96 	bl	8003f50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001024:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001026:	4a3f      	ldr	r2, [pc, #252]	@ (8001124 <MX_ADC1_Init+0x114>)
 8001028:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800102a:	4b3d      	ldr	r3, [pc, #244]	@ (8001120 <MX_ADC1_Init+0x110>)
 800102c:	2280      	movs	r2, #128	@ 0x80
 800102e:	05d2      	lsls	r2, r2, #23
 8001030:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001032:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001038:	4b39      	ldr	r3, [pc, #228]	@ (8001120 <MX_ADC1_Init+0x110>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800103e:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001040:	2280      	movs	r2, #128	@ 0x80
 8001042:	0392      	lsls	r2, r2, #14
 8001044:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b36      	ldr	r3, [pc, #216]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001048:	2204      	movs	r2, #4
 800104a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800104c:	4b34      	ldr	r3, [pc, #208]	@ (8001120 <MX_ADC1_Init+0x110>)
 800104e:	2200      	movs	r2, #0
 8001050:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001052:	4b33      	ldr	r3, [pc, #204]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001054:	2200      	movs	r2, #0
 8001056:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001058:	4b31      	ldr	r3, [pc, #196]	@ (8001120 <MX_ADC1_Init+0x110>)
 800105a:	2200      	movs	r2, #0
 800105c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001060:	2203      	movs	r2, #3
 8001062:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001064:	4b2e      	ldr	r3, [pc, #184]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001066:	2220      	movs	r2, #32
 8001068:	2100      	movs	r1, #0
 800106a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <MX_ADC1_Init+0x110>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001072:	4b2b      	ldr	r3, [pc, #172]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001078:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <MX_ADC1_Init+0x110>)
 800107a:	222c      	movs	r2, #44	@ 0x2c
 800107c:	2101      	movs	r1, #1
 800107e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001080:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001082:	2200      	movs	r2, #0
 8001084:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001086:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001088:	2200      	movs	r2, #0
 800108a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800108c:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <MX_ADC1_Init+0x110>)
 800108e:	2200      	movs	r2, #0
 8001090:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001092:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001094:	223c      	movs	r2, #60	@ 0x3c
 8001096:	2100      	movs	r1, #0
 8001098:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <MX_ADC1_Init+0x110>)
 800109c:	2200      	movs	r2, #0
 800109e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <MX_ADC1_Init+0x110>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f000 fc08 	bl	80018b8 <HAL_ADC_Init>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80010ac:	f000 f896 	bl	80011dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <MX_ADC1_Init+0x118>)
 80010b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	1d3a      	adds	r2, r7, #4
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_ADC1_Init+0x110>)
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f000 fe91 	bl	8001df0 <HAL_ADC_ConfigChannel>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010d2:	f000 f883 	bl	80011dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <MX_ADC1_Init+0x11c>)
 80010da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2204      	movs	r2, #4
 80010e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	1d3a      	adds	r2, r7, #4
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0x110>)
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f000 fe81 	bl	8001df0 <HAL_ADC_ConfigChannel>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80010f2:	f000 f873 	bl	80011dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <MX_ADC1_Init+0x120>)
 80010fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2208      	movs	r2, #8
 8001100:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	1d3a      	adds	r2, r7, #4
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_ADC1_Init+0x110>)
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fe71 	bl	8001df0 <HAL_ADC_ConfigChannel>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001112:	f000 f863 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	20000078 	.word	0x20000078
 8001124:	40012400 	.word	0x40012400
 8001128:	1c000080 	.word	0x1c000080
 800112c:	18000040 	.word	0x18000040
 8001130:	b0001000 	.word	0xb0001000

08001134 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_DMA_Init+0x38>)
 800113c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <MX_DMA_Init+0x38>)
 8001140:	2101      	movs	r1, #1
 8001142:	430a      	orrs	r2, r1
 8001144:	639a      	str	r2, [r3, #56]	@ 0x38
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_DMA_Init+0x38>)
 8001148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114a:	2201      	movs	r2, #1
 800114c:	4013      	ands	r3, r2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2009      	movs	r0, #9
 8001158:	f001 fbd4 	bl	8002904 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800115c:	2009      	movs	r0, #9
 800115e:	f001 fbe6 	bl	800292e <HAL_NVIC_EnableIRQ>

}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	40021000 	.word	0x40021000

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	0018      	movs	r0, r3
 800117a:	2314      	movs	r3, #20
 800117c:	001a      	movs	r2, r3
 800117e:	2100      	movs	r1, #0
 8001180:	f002 fee6 	bl	8003f50 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_GPIO_Init+0x68>)
 8001186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <MX_GPIO_Init+0x68>)
 800118a:	2101      	movs	r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_GPIO_Init+0x68>)
 8001192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001194:	2201      	movs	r2, #1
 8001196:	4013      	ands	r3, r2
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800119c:	23a0      	movs	r3, #160	@ 0xa0
 800119e:	05db      	lsls	r3, r3, #23
 80011a0:	2200      	movs	r2, #0
 80011a2:	213f      	movs	r1, #63	@ 0x3f
 80011a4:	0018      	movs	r0, r3
 80011a6:	f001 ffeb 	bl	8003180 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	223f      	movs	r2, #63	@ 0x3f
 80011ae:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2201      	movs	r2, #1
 80011b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	1d3a      	adds	r2, r7, #4
 80011c4:	23a0      	movs	r3, #160	@ 0xa0
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	0011      	movs	r1, r2
 80011ca:	0018      	movs	r0, r3
 80011cc:	f001 fe6c 	bl	8002ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b006      	add	sp, #24
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	e7fd      	b.n	80011e4 <Error_Handler+0x8>

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <HAL_MspInit+0x58>)
 80011f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <HAL_MspInit+0x58>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	430a      	orrs	r2, r1
 80011f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <HAL_MspInit+0x58>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	2201      	movs	r2, #1
 8001200:	4013      	ands	r3, r2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <HAL_MspInit+0x58>)
 8001208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800120a:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <HAL_MspInit+0x58>)
 800120c:	2180      	movs	r1, #128	@ 0x80
 800120e:	0549      	lsls	r1, r1, #21
 8001210:	430a      	orrs	r2, r1
 8001212:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001214:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <HAL_MspInit+0x58>)
 8001216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	055b      	lsls	r3, r3, #21
 800121c:	4013      	ands	r3, r2
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001222:	f000 f9cd 	bl	80015c0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001226:	2002      	movs	r0, #2
 8001228:	f000 f9b6 	bl	8001598 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800122c:	23c0      	movs	r3, #192	@ 0xc0
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	0018      	movs	r0, r3
 8001232:	f000 f9d3 	bl	80015dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b08b      	sub	sp, #44	@ 0x2c
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	2414      	movs	r4, #20
 800124e:	193b      	adds	r3, r7, r4
 8001250:	0018      	movs	r0, r3
 8001252:	2314      	movs	r3, #20
 8001254:	001a      	movs	r2, r3
 8001256:	2100      	movs	r1, #0
 8001258:	f002 fe7a 	bl	8003f50 <memset>
  if(hadc->Instance==ADC1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2e      	ldr	r2, [pc, #184]	@ (800131c <HAL_ADC_MspInit+0xd8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d155      	bne.n	8001312 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001266:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <HAL_ADC_MspInit+0xdc>)
 8001268:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <HAL_ADC_MspInit+0xdc>)
 800126c:	2180      	movs	r1, #128	@ 0x80
 800126e:	0349      	lsls	r1, r1, #13
 8001270:	430a      	orrs	r2, r1
 8001272:	641a      	str	r2, [r3, #64]	@ 0x40
 8001274:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_ADC_MspInit+0xdc>)
 8001276:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	035b      	lsls	r3, r3, #13
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <HAL_ADC_MspInit+0xdc>)
 8001284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001286:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <HAL_ADC_MspInit+0xdc>)
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	635a      	str	r2, [r3, #52]	@ 0x34
 800128e:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <HAL_ADC_MspInit+0xdc>)
 8001290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001292:	2201      	movs	r2, #1
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800129a:	193b      	adds	r3, r7, r4
 800129c:	22c0      	movs	r2, #192	@ 0xc0
 800129e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	2203      	movs	r2, #3
 80012a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	193a      	adds	r2, r7, r4
 80012ae:	23a0      	movs	r3, #160	@ 0xa0
 80012b0:	05db      	lsls	r3, r3, #23
 80012b2:	0011      	movs	r1, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 fdf7 	bl	8002ea8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <HAL_ADC_MspInit+0xe4>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012c2:	2205      	movs	r2, #5
 80012c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012d4:	2280      	movs	r2, #128	@ 0x80
 80012d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	0052      	lsls	r2, r2, #1
 80012de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	00d2      	lsls	r2, r2, #3
 80012e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012ea:	2220      	movs	r2, #32
 80012ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012f0:	2280      	movs	r2, #128	@ 0x80
 80012f2:	0152      	lsls	r2, r2, #5
 80012f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f001 fb35 	bl	8002968 <HAL_DMA_Init>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d001      	beq.n	8001306 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001302:	f7ff ff6b 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a06      	ldr	r2, [pc, #24]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 800130a:	651a      	str	r2, [r3, #80]	@ 0x50
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_ADC_MspInit+0xe0>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b00b      	add	sp, #44	@ 0x2c
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	40012400 	.word	0x40012400
 8001320:	40021000 	.word	0x40021000
 8001324:	200000dc 	.word	0x200000dc
 8001328:	40020008 	.word	0x40020008

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	46c0      	nop			@ (mov r8, r8)
 8001332:	e7fd      	b.n	8001330 <NMI_Handler+0x4>

08001334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	e7fd      	b.n	8001338 <HardFault_Handler+0x4>

0800133c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001340:	46c0      	nop			@ (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 f8e0 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001358:	46c0      	nop			@ (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <DMA1_Channel1_IRQHandler+0x14>)
 8001366:	0018      	movs	r0, r3
 8001368:	f001 fc30 	bl	8002bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	200000dc 	.word	0x200000dc

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f002 fdda 	bl	8003f60 <__errno>
 80013ac:	0003      	movs	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	425b      	negs	r3, r3
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	18d2      	adds	r2, r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <_sbrk+0x64>)
 80013c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b006      	add	sp, #24
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20024000 	.word	0x20024000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	20000160 	.word	0x20000160
 80013e0:	200002b0 	.word	0x200002b0

080013e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013f0:	480d      	ldr	r0, [pc, #52]	@ (8001428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013f4:	f7ff fff6 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <LoopForever+0x6>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	@ (8001430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <LoopForever+0xe>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	@ (800143c <LoopForever+0x16>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800141e:	f002 fda5 	bl	8003f6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001422:	f7ff fceb 	bl	8000dfc <main>

08001426 <LoopForever>:

LoopForever:
  b LoopForever
 8001426:	e7fe      	b.n	8001426 <LoopForever>
  ldr   r0, =_estack
 8001428:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001434:	08004990 	.word	0x08004990
  ldr r2, =_sbss
 8001438:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800143c:	200002b0 	.word	0x200002b0

08001440 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC1_COMP_IRQHandler>
	...

08001444 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_Init+0x3c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <HAL_Init+0x3c>)
 8001456:	2180      	movs	r1, #128	@ 0x80
 8001458:	0049      	lsls	r1, r1, #1
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800145e:	2003      	movs	r0, #3
 8001460:	f000 f810 	bl	8001484 <HAL_InitTick>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d003      	beq.n	8001470 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001468:	1dfb      	adds	r3, r7, #7
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e001      	b.n	8001474 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001470:	f7ff feba 	bl	80011e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40022000 	.word	0x40022000

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800148c:	230f      	movs	r3, #15
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <HAL_InitTick+0x88>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d02b      	beq.n	80014f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_InitTick+0x8c>)
 800149e:	681c      	ldr	r4, [r3, #0]
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <HAL_InitTick+0x88>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	0019      	movs	r1, r3
 80014a6:	23fa      	movs	r3, #250	@ 0xfa
 80014a8:	0098      	lsls	r0, r3, #2
 80014aa:	f7fe fe35 	bl	8000118 <__udivsi3>
 80014ae:	0003      	movs	r3, r0
 80014b0:	0019      	movs	r1, r3
 80014b2:	0020      	movs	r0, r4
 80014b4:	f7fe fe30 	bl	8000118 <__udivsi3>
 80014b8:	0003      	movs	r3, r0
 80014ba:	0018      	movs	r0, r3
 80014bc:	f001 fa47 	bl	800294e <HAL_SYSTICK_Config>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d112      	bne.n	80014ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d80a      	bhi.n	80014e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	2301      	movs	r3, #1
 80014ce:	425b      	negs	r3, r3
 80014d0:	2200      	movs	r2, #0
 80014d2:	0018      	movs	r0, r3
 80014d4:	f001 fa16 	bl	8002904 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_InitTick+0x90>)
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e00d      	b.n	80014fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80014e0:	230f      	movs	r3, #15
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e008      	b.n	80014fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ea:	230f      	movs	r3, #15
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e003      	b.n	80014fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014fc:	230f      	movs	r3, #15
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	781b      	ldrb	r3, [r3, #0]
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b005      	add	sp, #20
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	20000008 	.word	0x20000008
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_IncTick+0x1c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	001a      	movs	r2, r3
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_IncTick+0x20>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	18d2      	adds	r2, r2, r3
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_IncTick+0x20>)
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	20000008 	.word	0x20000008
 8001538:	20000164 	.word	0x20000164

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b02      	ldr	r3, [pc, #8]	@ (800154c <HAL_GetTick+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	20000164 	.word	0x20000164

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff fff0 	bl	800153c <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3301      	adds	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <HAL_Delay+0x44>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	001a      	movs	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	189b      	adds	r3, r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	f7ff ffe0 	bl	800153c <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f7      	bhi.n	8001578 <HAL_Delay+0x28>
  {
  }
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	20000008 	.word	0x20000008

08001598 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2202      	movs	r2, #2
 80015a6:	4393      	bics	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	40010030 	.word	0x40010030

080015c0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80015c4:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	438a      	bics	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	46c0      	nop			@ (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	40010030 	.word	0x40010030

080015dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a06      	ldr	r2, [pc, #24]	@ (8001604 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	40010000 	.word	0x40010000
 8001604:	fffff9ff 	.word	0xfffff9ff

08001608 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a05      	ldr	r2, [pc, #20]	@ (800162c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001618:	401a      	ands	r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	601a      	str	r2, [r3, #0]
}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	fe3fffff 	.word	0xfe3fffff

08001630 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	23e0      	movs	r3, #224	@ 0xe0
 800163e:	045b      	lsls	r3, r3, #17
 8001640:	4013      	ands	r3, r2
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}

0800164a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	2104      	movs	r1, #4
 800165e:	400a      	ands	r2, r1
 8001660:	2107      	movs	r1, #7
 8001662:	4091      	lsls	r1, r2
 8001664:	000a      	movs	r2, r1
 8001666:	43d2      	mvns	r2, r2
 8001668:	401a      	ands	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2104      	movs	r1, #4
 800166e:	400b      	ands	r3, r1
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4099      	lsls	r1, r3
 8001674:	000b      	movs	r3, r1
 8001676:	431a      	orrs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800167c:	46c0      	nop			@ (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b004      	add	sp, #16
 8001682:	bd80      	pop	{r7, pc}

08001684 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	2104      	movs	r1, #4
 8001696:	400a      	ands	r2, r1
 8001698:	2107      	movs	r1, #7
 800169a:	4091      	lsls	r1, r2
 800169c:	000a      	movs	r2, r1
 800169e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2104      	movs	r1, #4
 80016a4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80016a6:	40da      	lsrs	r2, r3
 80016a8:	0013      	movs	r3, r2
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	23c0      	movs	r3, #192	@ 0xc0
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4013      	ands	r3, r2
 80016c4:	d101      	bne.n	80016ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	211f      	movs	r1, #31
 80016e8:	400a      	ands	r2, r1
 80016ea:	210f      	movs	r1, #15
 80016ec:	4091      	lsls	r1, r2
 80016ee:	000a      	movs	r2, r1
 80016f0:	43d2      	mvns	r2, r2
 80016f2:	401a      	ands	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	0e9b      	lsrs	r3, r3, #26
 80016f8:	210f      	movs	r1, #15
 80016fa:	4019      	ands	r1, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	201f      	movs	r0, #31
 8001700:	4003      	ands	r3, r0
 8001702:	4099      	lsls	r1, r3
 8001704:	000b      	movs	r3, r1
 8001706:	431a      	orrs	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b004      	add	sp, #16
 8001712:	bd80      	pop	{r7, pc}

08001714 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	035b      	lsls	r3, r3, #13
 8001726:	0b5b      	lsrs	r3, r3, #13
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}

08001736 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	0352      	lsls	r2, r2, #13
 8001748:	0b52      	lsrs	r2, r2, #13
 800174a:	43d2      	mvns	r2, r2
 800174c:	401a      	ands	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	0212      	lsls	r2, r2, #8
 8001770:	43d2      	mvns	r2, r2
 8001772:	401a      	ands	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	400b      	ands	r3, r1
 800177c:	4904      	ldr	r1, [pc, #16]	@ (8001790 <LL_ADC_SetChannelSamplingTime+0x34>)
 800177e:	400b      	ands	r3, r1
 8001780:	431a      	orrs	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	07ffff00 	.word	0x07ffff00

08001794 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	2280      	movs	r2, #128	@ 0x80
 80017a6:	0552      	lsls	r2, r2, #21
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	6fffffe8 	.word	0x6fffffe8

080017bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	055b      	lsls	r3, r3, #21
 80017cc:	401a      	ands	r2, r3
 80017ce:	2380      	movs	r3, #128	@ 0x80
 80017d0:	055b      	lsls	r3, r3, #21
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d101      	bne.n	80017da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <LL_ADC_Enable+0x20>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	2201      	movs	r2, #1
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017fc:	46c0      	nop			@ (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	7fffffe8 	.word	0x7fffffe8

08001808 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <LL_ADC_Disable+0x20>)
 8001816:	4013      	ands	r3, r2
 8001818:	2202      	movs	r2, #2
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001820:	46c0      	nop			@ (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}
 8001828:	7fffffe8 	.word	0x7fffffe8

0800182c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <LL_ADC_IsEnabled+0x18>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <LL_ADC_IsEnabled+0x1a>
 8001844:	2300      	movs	r3, #0
}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}

0800184e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d101      	bne.n	8001866 <LL_ADC_IsDisableOngoing+0x18>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <LL_ADC_IsDisableOngoing+0x1a>
 8001866:	2300      	movs	r3, #0
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <LL_ADC_REG_StartConversion+0x20>)
 800187e:	4013      	ands	r3, r2
 8001880:	2204      	movs	r2, #4
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001888:	46c0      	nop			@ (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}
 8001890:	7fffffe8 	.word	0x7fffffe8

08001894 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2204      	movs	r2, #4
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d101      	bne.n	80018ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c0:	231f      	movs	r3, #31
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e17f      	b.n	8001bde <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff fcab 	bl	8001244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2254      	movs	r2, #84	@ 0x54
 80018f8:	2100      	movs	r1, #0
 80018fa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0018      	movs	r0, r3
 8001902:	f7ff ff5b 	bl	80017bc <LL_ADC_IsInternalRegulatorEnabled>
 8001906:	1e03      	subs	r3, r0, #0
 8001908:	d115      	bne.n	8001936 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0018      	movs	r0, r3
 8001910:	f7ff ff40 	bl	8001794 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001914:	4bb4      	ldr	r3, [pc, #720]	@ (8001be8 <HAL_ADC_Init+0x330>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	49b4      	ldr	r1, [pc, #720]	@ (8001bec <HAL_ADC_Init+0x334>)
 800191a:	0018      	movs	r0, r3
 800191c:	f7fe fbfc 	bl	8000118 <__udivsi3>
 8001920:	0003      	movs	r3, r0
 8001922:	3301      	adds	r3, #1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001928:	e002      	b.n	8001930 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3b01      	subs	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	0018      	movs	r0, r3
 800193c:	f7ff ff3e 	bl	80017bc <LL_ADC_IsInternalRegulatorEnabled>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d10f      	bne.n	8001964 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	2210      	movs	r2, #16
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001954:	2201      	movs	r2, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800195c:	231f      	movs	r3, #31
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff ff93 	bl	8001894 <LL_ADC_REG_IsConversionOngoing>
 800196e:	0003      	movs	r3, r0
 8001970:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	2210      	movs	r2, #16
 8001978:	4013      	ands	r3, r2
 800197a:	d000      	beq.n	800197e <HAL_ADC_Init+0xc6>
 800197c:	e122      	b.n	8001bc4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d000      	beq.n	8001986 <HAL_ADC_Init+0xce>
 8001984:	e11e      	b.n	8001bc4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	4a99      	ldr	r2, [pc, #612]	@ (8001bf0 <HAL_ADC_Init+0x338>)
 800198c:	4013      	ands	r3, r2
 800198e:	2202      	movs	r2, #2
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0018      	movs	r0, r3
 800199c:	f7ff ff46 	bl	800182c <LL_ADC_IsEnabled>
 80019a0:	1e03      	subs	r3, r0, #0
 80019a2:	d000      	beq.n	80019a6 <HAL_ADC_Init+0xee>
 80019a4:	e0ad      	b.n	8001b02 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7e1b      	ldrb	r3, [r3, #24]
 80019ae:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80019b0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7e5b      	ldrb	r3, [r3, #25]
 80019b6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80019b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7e9b      	ldrb	r3, [r3, #26]
 80019be:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80019c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HAL_ADC_Init+0x118>
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	015b      	lsls	r3, r3, #5
 80019ce:	e000      	b.n	80019d2 <HAL_ADC_Init+0x11a>
 80019d0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80019d2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80019d8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da04      	bge.n	80019ec <HAL_ADC_Init+0x134>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	e001      	b.n	80019f0 <HAL_ADC_Init+0x138>
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80019f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	212c      	movs	r1, #44	@ 0x2c
 80019f6:	5c5b      	ldrb	r3, [r3, r1]
 80019f8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019fa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	5c9b      	ldrb	r3, [r3, r2]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d115      	bne.n	8001a38 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e9b      	ldrb	r3, [r3, #26]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	0252      	lsls	r2, r2, #9
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e00b      	b.n	8001a38 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	2220      	movs	r2, #32
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a30:	2201      	movs	r2, #1
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00a      	beq.n	8001a56 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a44:	23e0      	movs	r3, #224	@ 0xe0
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a65      	ldr	r2, [pc, #404]	@ (8001bf4 <HAL_ADC_Init+0x33c>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	0019      	movs	r1, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	0f9b      	lsrs	r3, r3, #30
 8001a72:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	223c      	movs	r2, #60	@ 0x3c
 8001a84:	5c9b      	ldrb	r3, [r3, r2]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d111      	bne.n	8001aae <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	0f9b      	lsrs	r3, r3, #30
 8001a90:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a96:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001a9c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001aa2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	4a50      	ldr	r2, [pc, #320]	@ (8001bf8 <HAL_ADC_Init+0x340>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	23c0      	movs	r3, #192	@ 0xc0
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d018      	beq.n	8001b02 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	05db      	lsls	r3, r3, #23
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d012      	beq.n	8001b02 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	061b      	lsls	r3, r3, #24
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d00c      	beq.n	8001b02 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ae8:	4b44      	ldr	r3, [pc, #272]	@ (8001bfc <HAL_ADC_Init+0x344>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a44      	ldr	r2, [pc, #272]	@ (8001c00 <HAL_ADC_Init+0x348>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	23f0      	movs	r3, #240	@ 0xf0
 8001af8:	039b      	lsls	r3, r3, #14
 8001afa:	401a      	ands	r2, r3
 8001afc:	4b3f      	ldr	r3, [pc, #252]	@ (8001bfc <HAL_ADC_Init+0x344>)
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f7ff fd9c 	bl	800164a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1a:	493a      	ldr	r1, [pc, #232]	@ (8001c04 <HAL_ADC_Init+0x34c>)
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	f7ff fd94 	bl	800164a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2110      	movs	r1, #16
 8001b36:	4249      	negs	r1, r1
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b3c:	e018      	b.n	8001b70 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	039b      	lsls	r3, r3, #14
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d112      	bne.n	8001b70 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	221c      	movs	r2, #28
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	4252      	negs	r2, r2
 8001b60:	409a      	lsls	r2, r3
 8001b62:	0011      	movs	r1, r2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2100      	movs	r1, #0
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff fd84 	bl	8001684 <LL_ADC_GetSamplingTimeCommonChannels>
 8001b7c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d10b      	bne.n	8001b9e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b90:	2203      	movs	r2, #3
 8001b92:	4393      	bics	r3, r2
 8001b94:	2201      	movs	r2, #1
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b9c:	e01c      	b.n	8001bd8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba2:	2212      	movs	r2, #18
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001bba:	231f      	movs	r3, #31
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001bc2:	e009      	b.n	8001bd8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc8:	2210      	movs	r2, #16
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001bd0:	231f      	movs	r3, #31
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001bd8:	231f      	movs	r3, #31
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	781b      	ldrb	r3, [r3, #0]
}
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b008      	add	sp, #32
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	20000000 	.word	0x20000000
 8001bec:	00030d40 	.word	0x00030d40
 8001bf0:	fffffefd 	.word	0xfffffefd
 8001bf4:	ffde0201 	.word	0xffde0201
 8001bf8:	1ffffc02 	.word	0x1ffffc02
 8001bfc:	40012708 	.word	0x40012708
 8001c00:	ffc3ffff 	.word	0xffc3ffff
 8001c04:	07ffff04 	.word	0x07ffff04

08001c08 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff fe3d 	bl	8001894 <LL_ADC_REG_IsConversionOngoing>
 8001c1a:	1e03      	subs	r3, r0, #0
 8001c1c:	d135      	bne.n	8001c8a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2254      	movs	r2, #84	@ 0x54
 8001c22:	5c9b      	ldrb	r3, [r3, r2]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_Start+0x24>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e035      	b.n	8001c98 <HAL_ADC_Start+0x90>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2254      	movs	r2, #84	@ 0x54
 8001c30:	2101      	movs	r1, #1
 8001c32:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c34:	250f      	movs	r5, #15
 8001c36:	197c      	adds	r4, r7, r5
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 fab0 	bl	80021a0 <ADC_Enable>
 8001c40:	0003      	movs	r3, r0
 8001c42:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c44:	197b      	adds	r3, r7, r5
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d119      	bne.n	8001c80 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	4a13      	ldr	r2, [pc, #76]	@ (8001ca0 <HAL_ADC_Start+0x98>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	0052      	lsls	r2, r2, #1
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	221c      	movs	r2, #28
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2254      	movs	r2, #84	@ 0x54
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff fdf9 	bl	8001870 <LL_ADC_REG_StartConversion>
 8001c7e:	e008      	b.n	8001c92 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2254      	movs	r2, #84	@ 0x54
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]
 8001c88:	e003      	b.n	8001c92 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c8a:	230f      	movs	r3, #15
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001c92:	230f      	movs	r3, #15
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	781b      	ldrb	r3, [r3, #0]
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b004      	add	sp, #16
 8001c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca0:	fffff0fe 	.word	0xfffff0fe

08001ca4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ca4:	b5b0      	push	{r4, r5, r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff fded 	bl	8001894 <LL_ADC_REG_IsConversionOngoing>
 8001cba:	1e03      	subs	r3, r0, #0
 8001cbc:	d16c      	bne.n	8001d98 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2254      	movs	r2, #84	@ 0x54
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_Start_DMA+0x28>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e06c      	b.n	8001da6 <HAL_ADC_Start_DMA+0x102>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2254      	movs	r2, #84	@ 0x54
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d113      	bne.n	8001d08 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff fda1 	bl	800182c <LL_ADC_IsEnabled>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d004      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff fd88 	bl	8001808 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	430a      	orrs	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d08:	2517      	movs	r5, #23
 8001d0a:	197c      	adds	r4, r7, r5
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 fa46 	bl	80021a0 <ADC_Enable>
 8001d14:	0003      	movs	r3, r0
 8001d16:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d18:	002c      	movs	r4, r5
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d13e      	bne.n	8001da0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d26:	4a22      	ldr	r2, [pc, #136]	@ (8001db0 <HAL_ADC_Start_DMA+0x10c>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	0052      	lsls	r2, r2, #1
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <HAL_ADC_Start_DMA+0x110>)
 8001d40:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d46:	4a1c      	ldr	r2, [pc, #112]	@ (8001db8 <HAL_ADC_Start_DMA+0x114>)
 8001d48:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dbc <HAL_ADC_Start_DMA+0x118>)
 8001d50:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	221c      	movs	r2, #28
 8001d58:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2254      	movs	r2, #84	@ 0x54
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2110      	movs	r1, #16
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3340      	adds	r3, #64	@ 0x40
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	193c      	adds	r4, r7, r4
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f000 fe9c 	bl	8002ac0 <HAL_DMA_Start_IT>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7ff fd6d 	bl	8001870 <LL_ADC_REG_StartConversion>
 8001d96:	e003      	b.n	8001da0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d98:	2317      	movs	r3, #23
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001da0:	2317      	movs	r3, #23
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	781b      	ldrb	r3, [r3, #0]
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b006      	add	sp, #24
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	fffff0fe 	.word	0xfffff0fe
 8001db4:	08002369 	.word	0x08002369
 8001db8:	08002431 	.word	0x08002431
 8001dbc:	0800244f 	.word	0x0800244f

08001dc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b002      	add	sp, #8
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfa:	2317      	movs	r3, #23
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2254      	movs	r2, #84	@ 0x54
 8001e0a:	5c9b      	ldrb	r3, [r3, r2]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x24>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e1c0      	b.n	8002196 <HAL_ADC_ConfigChannel+0x3a6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2254      	movs	r2, #84	@ 0x54
 8001e18:	2101      	movs	r1, #1
 8001e1a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff fd37 	bl	8001894 <LL_ADC_REG_IsConversionOngoing>
 8001e26:	1e03      	subs	r3, r0, #0
 8001e28:	d000      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0x3c>
 8001e2a:	e1a3      	b.n	8002174 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d100      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x46>
 8001e34:	e143      	b.n	80020be <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	2380      	movs	r3, #128	@ 0x80
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d004      	beq.n	8001e4c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e46:	4ac1      	ldr	r2, [pc, #772]	@ (800214c <HAL_ADC_ConfigChannel+0x35c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d108      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0019      	movs	r1, r3
 8001e56:	0010      	movs	r0, r2
 8001e58:	f7ff fc5c 	bl	8001714 <LL_ADC_REG_SetSequencerChAdd>
 8001e5c:	e0c9      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	211f      	movs	r1, #31
 8001e68:	400b      	ands	r3, r1
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	4099      	lsls	r1, r3
 8001e6e:	000b      	movs	r3, r1
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	035b      	lsls	r3, r3, #13
 8001e7c:	0b5b      	lsrs	r3, r3, #13
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x9c>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	221f      	movs	r2, #31
 8001e88:	4013      	ands	r3, r2
 8001e8a:	e098      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d000      	beq.n	8001e98 <HAL_ADC_ConfigChannel+0xa8>
 8001e96:	e091      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1cc>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d000      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0xb4>
 8001ea2:	e089      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x1c8>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d000      	beq.n	8001eb0 <HAL_ADC_ConfigChannel+0xc0>
 8001eae:	e081      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1c4>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d000      	beq.n	8001ebc <HAL_ADC_ConfigChannel+0xcc>
 8001eba:	e079      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x1c0>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d000      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd8>
 8001ec6:	e071      	b.n	8001fac <HAL_ADC_ConfigChannel+0x1bc>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d000      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0xe4>
 8001ed2:	e069      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x1b8>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2240      	movs	r2, #64	@ 0x40
 8001eda:	4013      	ands	r3, r2
 8001edc:	d000      	beq.n	8001ee0 <HAL_ADC_ConfigChannel+0xf0>
 8001ede:	e061      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x1b4>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2280      	movs	r2, #128	@ 0x80
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d000      	beq.n	8001eec <HAL_ADC_ConfigChannel+0xfc>
 8001eea:	e059      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x1b0>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d151      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1ac>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	d149      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1a8>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d141      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x1a4>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d139      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1a0>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	@ 0x80
 8001f22:	015b      	lsls	r3, r3, #5
 8001f24:	4013      	ands	r3, r2
 8001f26:	d131      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x19c>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	019b      	lsls	r3, r3, #6
 8001f30:	4013      	ands	r3, r2
 8001f32:	d129      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x198>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	01db      	lsls	r3, r3, #7
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d121      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x194>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d119      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x190>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	4013      	ands	r3, r2
 8001f56:	d111      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x18c>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d109      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x188>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	02db      	lsls	r3, r3, #11
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d001      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x184>
 8001f70:	2312      	movs	r3, #18
 8001f72:	e024      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f74:	2300      	movs	r3, #0
 8001f76:	e022      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f78:	2311      	movs	r3, #17
 8001f7a:	e020      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	e01e      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f80:	230f      	movs	r3, #15
 8001f82:	e01c      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f84:	230e      	movs	r3, #14
 8001f86:	e01a      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f88:	230d      	movs	r3, #13
 8001f8a:	e018      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f8c:	230c      	movs	r3, #12
 8001f8e:	e016      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f90:	230b      	movs	r3, #11
 8001f92:	e014      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f94:	230a      	movs	r3, #10
 8001f96:	e012      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f98:	2309      	movs	r3, #9
 8001f9a:	e010      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	e00e      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	e00c      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001fa4:	2306      	movs	r3, #6
 8001fa6:	e00a      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001fa8:	2305      	movs	r3, #5
 8001faa:	e008      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001fac:	2304      	movs	r3, #4
 8001fae:	e006      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e004      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1ce>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	6852      	ldr	r2, [r2, #4]
 8001fc2:	201f      	movs	r0, #31
 8001fc4:	4002      	ands	r2, r0
 8001fc6:	4093      	lsls	r3, r2
 8001fc8:	000a      	movs	r2, r1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d808      	bhi.n	8001ff2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	001a      	movs	r2, r3
 8001fee:	f7ff fb71 	bl	80016d4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	001a      	movs	r2, r3
 8002000:	f7ff fbac 	bl	800175c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db00      	blt.n	800200e <HAL_ADC_ConfigChannel+0x21e>
 800200c:	e0bc      	b.n	8002188 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800200e:	4b50      	ldr	r3, [pc, #320]	@ (8002150 <HAL_ADC_ConfigChannel+0x360>)
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff fb0d 	bl	8001630 <LL_ADC_GetCommonPathInternalCh>
 8002016:	0003      	movs	r3, r0
 8002018:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a4d      	ldr	r2, [pc, #308]	@ (8002154 <HAL_ADC_ConfigChannel+0x364>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d122      	bne.n	800206a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800202c:	d11d      	bne.n	800206a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2280      	movs	r2, #128	@ 0x80
 8002032:	0412      	lsls	r2, r2, #16
 8002034:	4313      	orrs	r3, r2
 8002036:	4a46      	ldr	r2, [pc, #280]	@ (8002150 <HAL_ADC_ConfigChannel+0x360>)
 8002038:	0019      	movs	r1, r3
 800203a:	0010      	movs	r0, r2
 800203c:	f7ff fae4 	bl	8001608 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002040:	4b45      	ldr	r3, [pc, #276]	@ (8002158 <HAL_ADC_ConfigChannel+0x368>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4945      	ldr	r1, [pc, #276]	@ (800215c <HAL_ADC_ConfigChannel+0x36c>)
 8002046:	0018      	movs	r0, r3
 8002048:	f7fe f866 	bl	8000118 <__udivsi3>
 800204c:	0003      	movs	r3, r0
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	0013      	movs	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	189b      	adds	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800205a:	e002      	b.n	8002062 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3b01      	subs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f9      	bne.n	800205c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002068:	e08e      	b.n	8002188 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a3c      	ldr	r2, [pc, #240]	@ (8002160 <HAL_ADC_ConfigChannel+0x370>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d10e      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	045b      	lsls	r3, r3, #17
 800207a:	4013      	ands	r3, r2
 800207c:	d109      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	0452      	lsls	r2, r2, #17
 8002084:	4313      	orrs	r3, r2
 8002086:	4a32      	ldr	r2, [pc, #200]	@ (8002150 <HAL_ADC_ConfigChannel+0x360>)
 8002088:	0019      	movs	r1, r3
 800208a:	0010      	movs	r0, r2
 800208c:	f7ff fabc 	bl	8001608 <LL_ADC_SetCommonPathInternalCh>
 8002090:	e07a      	b.n	8002188 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a33      	ldr	r2, [pc, #204]	@ (8002164 <HAL_ADC_ConfigChannel+0x374>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d000      	beq.n	800209e <HAL_ADC_ConfigChannel+0x2ae>
 800209c:	e074      	b.n	8002188 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	2380      	movs	r3, #128	@ 0x80
 80020a2:	03db      	lsls	r3, r3, #15
 80020a4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80020a6:	d000      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x2ba>
 80020a8:	e06e      	b.n	8002188 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2280      	movs	r2, #128	@ 0x80
 80020ae:	03d2      	lsls	r2, r2, #15
 80020b0:	4313      	orrs	r3, r2
 80020b2:	4a27      	ldr	r2, [pc, #156]	@ (8002150 <HAL_ADC_ConfigChannel+0x360>)
 80020b4:	0019      	movs	r1, r3
 80020b6:	0010      	movs	r0, r2
 80020b8:	f7ff faa6 	bl	8001608 <LL_ADC_SetCommonPathInternalCh>
 80020bc:	e064      	b.n	8002188 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d004      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020ce:	4a1f      	ldr	r2, [pc, #124]	@ (800214c <HAL_ADC_ConfigChannel+0x35c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d107      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0019      	movs	r1, r3
 80020de:	0010      	movs	r0, r2
 80020e0:	f7ff fb29 	bl	8001736 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da4d      	bge.n	8002188 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <HAL_ADC_ConfigChannel+0x360>)
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff fa9e 	bl	8001630 <LL_ADC_GetCommonPathInternalCh>
 80020f4:	0003      	movs	r3, r0
 80020f6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a15      	ldr	r2, [pc, #84]	@ (8002154 <HAL_ADC_ConfigChannel+0x364>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d108      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4a18      	ldr	r2, [pc, #96]	@ (8002168 <HAL_ADC_ConfigChannel+0x378>)
 8002106:	4013      	ands	r3, r2
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <HAL_ADC_ConfigChannel+0x360>)
 800210a:	0019      	movs	r1, r3
 800210c:	0010      	movs	r0, r2
 800210e:	f7ff fa7b 	bl	8001608 <LL_ADC_SetCommonPathInternalCh>
 8002112:	e039      	b.n	8002188 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <HAL_ADC_ConfigChannel+0x370>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4a12      	ldr	r2, [pc, #72]	@ (800216c <HAL_ADC_ConfigChannel+0x37c>)
 8002122:	4013      	ands	r3, r2
 8002124:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <HAL_ADC_ConfigChannel+0x360>)
 8002126:	0019      	movs	r1, r3
 8002128:	0010      	movs	r0, r2
 800212a:	f7ff fa6d 	bl	8001608 <LL_ADC_SetCommonPathInternalCh>
 800212e:	e02b      	b.n	8002188 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0b      	ldr	r2, [pc, #44]	@ (8002164 <HAL_ADC_ConfigChannel+0x374>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d126      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4a0c      	ldr	r2, [pc, #48]	@ (8002170 <HAL_ADC_ConfigChannel+0x380>)
 800213e:	4013      	ands	r3, r2
 8002140:	4a03      	ldr	r2, [pc, #12]	@ (8002150 <HAL_ADC_ConfigChannel+0x360>)
 8002142:	0019      	movs	r1, r3
 8002144:	0010      	movs	r0, r2
 8002146:	f7ff fa5f 	bl	8001608 <LL_ADC_SetCommonPathInternalCh>
 800214a:	e01d      	b.n	8002188 <HAL_ADC_ConfigChannel+0x398>
 800214c:	80000004 	.word	0x80000004
 8002150:	40012708 	.word	0x40012708
 8002154:	b0001000 	.word	0xb0001000
 8002158:	20000000 	.word	0x20000000
 800215c:	00030d40 	.word	0x00030d40
 8002160:	b8004000 	.word	0xb8004000
 8002164:	b4002000 	.word	0xb4002000
 8002168:	ff7fffff 	.word	0xff7fffff
 800216c:	feffffff 	.word	0xfeffffff
 8002170:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	2220      	movs	r2, #32
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002180:	2317      	movs	r3, #23
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2254      	movs	r2, #84	@ 0x54
 800218c:	2100      	movs	r1, #0
 800218e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002190:	2317      	movs	r3, #23
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b006      	add	sp, #24
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)

080021a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7ff fb3b 	bl	800182c <LL_ADC_IsEnabled>
 80021b6:	1e03      	subs	r3, r0, #0
 80021b8:	d000      	beq.n	80021bc <ADC_Enable+0x1c>
 80021ba:	e069      	b.n	8002290 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4a36      	ldr	r2, [pc, #216]	@ (800229c <ADC_Enable+0xfc>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	d00d      	beq.n	80021e4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	2210      	movs	r2, #16
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	2201      	movs	r2, #1
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e056      	b.n	8002292 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff fafb 	bl	80017e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80021ee:	4b2c      	ldr	r3, [pc, #176]	@ (80022a0 <ADC_Enable+0x100>)
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff fa1d 	bl	8001630 <LL_ADC_GetCommonPathInternalCh>
 80021f6:	0002      	movs	r2, r0
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	4013      	ands	r3, r2
 80021fe:	d00f      	beq.n	8002220 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <ADC_Enable+0x104>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4928      	ldr	r1, [pc, #160]	@ (80022a8 <ADC_Enable+0x108>)
 8002206:	0018      	movs	r0, r3
 8002208:	f7fd ff86 	bl	8000118 <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002210:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002212:	e002      	b.n	800221a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3b01      	subs	r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f9      	bne.n	8002214 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e5b      	ldrb	r3, [r3, #25]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d033      	beq.n	8002290 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002228:	f7ff f988 	bl	800153c <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002230:	e027      	b.n	8002282 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff faf8 	bl	800182c <LL_ADC_IsEnabled>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d104      	bne.n	800224a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff facd 	bl	80017e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800224a:	f7ff f977 	bl	800153c <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d914      	bls.n	8002282 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	4013      	ands	r3, r2
 8002262:	2b01      	cmp	r3, #1
 8002264:	d00d      	beq.n	8002282 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	2210      	movs	r2, #16
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2201      	movs	r2, #1
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e007      	b.n	8002292 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2201      	movs	r2, #1
 800228a:	4013      	ands	r3, r2
 800228c:	2b01      	cmp	r3, #1
 800228e:	d1d0      	bne.n	8002232 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	0018      	movs	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	b004      	add	sp, #16
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	80000017 	.word	0x80000017
 80022a0:	40012708 	.word	0x40012708
 80022a4:	20000000 	.word	0x20000000
 80022a8:	00030d40 	.word	0x00030d40

080022ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff fac8 	bl	800184e <LL_ADC_IsDisableOngoing>
 80022be:	0003      	movs	r3, r0
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff fab0 	bl	800182c <LL_ADC_IsEnabled>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d046      	beq.n	800235e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d143      	bne.n	800235e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2205      	movs	r2, #5
 80022de:	4013      	ands	r3, r2
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10d      	bne.n	8002300 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7ff fa8d 	bl	8001808 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2203      	movs	r2, #3
 80022f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022f6:	f7ff f921 	bl	800153c <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022fe:	e028      	b.n	8002352 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	2210      	movs	r2, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002310:	2201      	movs	r2, #1
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e021      	b.n	8002360 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800231c:	f7ff f90e 	bl	800153c <HAL_GetTick>
 8002320:	0002      	movs	r2, r0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d913      	bls.n	8002352 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2201      	movs	r2, #1
 8002332:	4013      	ands	r3, r2
 8002334:	d00d      	beq.n	8002352 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	2210      	movs	r2, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	2201      	movs	r2, #1
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e006      	b.n	8002360 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2201      	movs	r2, #1
 800235a:	4013      	ands	r3, r2
 800235c:	d1de      	bne.n	800231c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}

08002368 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	2250      	movs	r2, #80	@ 0x50
 800237c:	4013      	ands	r3, r2
 800237e:	d141      	bne.n	8002404 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	2280      	movs	r2, #128	@ 0x80
 8002386:	0092      	lsls	r2, r2, #2
 8002388:	431a      	orrs	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff f98d 	bl	80016b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002398:	1e03      	subs	r3, r0, #0
 800239a:	d02e      	beq.n	80023fa <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	7e9b      	ldrb	r3, [r3, #26]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d12a      	bne.n	80023fa <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2208      	movs	r2, #8
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d123      	bne.n	80023fa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff fa6c 	bl	8001894 <LL_ADC_REG_IsConversionOngoing>
 80023bc:	1e03      	subs	r3, r0, #0
 80023be:	d110      	bne.n	80023e2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	210c      	movs	r1, #12
 80023cc:	438a      	bics	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	4a15      	ldr	r2, [pc, #84]	@ (800242c <ADC_DMAConvCplt+0xc4>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	2201      	movs	r2, #1
 80023da:	431a      	orrs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	659a      	str	r2, [r3, #88]	@ 0x58
 80023e0:	e00b      	b.n	80023fa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	2220      	movs	r2, #32
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f2:	2201      	movs	r2, #1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff fcdf 	bl	8001dc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002402:	e00f      	b.n	8002424 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002408:	2210      	movs	r2, #16
 800240a:	4013      	ands	r3, r2
 800240c:	d004      	beq.n	8002418 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff fce5 	bl	8001de0 <HAL_ADC_ErrorCallback>
}
 8002416:	e005      	b.n	8002424 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	0010      	movs	r0, r2
 8002422:	4798      	blx	r3
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b004      	add	sp, #16
 800242a:	bd80      	pop	{r7, pc}
 800242c:	fffffefe 	.word	0xfffffefe

08002430 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff fcc5 	bl	8001dd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b004      	add	sp, #16
 800244c:	bd80      	pop	{r7, pc}

0800244e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	2240      	movs	r2, #64	@ 0x40
 8002462:	431a      	orrs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246c:	2204      	movs	r2, #4
 800246e:	431a      	orrs	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	0018      	movs	r0, r3
 8002478:	f7ff fcb2 	bl	8001de0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800247c:	46c0      	nop			@ (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b004      	add	sp, #16
 8002482:	bd80      	pop	{r7, pc}

08002484 <LL_ADC_GetCommonClock>:
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	23f0      	movs	r3, #240	@ 0xf0
 8002492:	039b      	lsls	r3, r3, #14
 8002494:	4013      	ands	r3, r2
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b002      	add	sp, #8
 800249c:	bd80      	pop	{r7, pc}

0800249e <LL_ADC_GetClock>:
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	0f9b      	lsrs	r3, r3, #30
 80024ac:	079b      	lsls	r3, r3, #30
}
 80024ae:	0018      	movs	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b002      	add	sp, #8
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <LL_ADC_SetCalibrationFactor>:
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	22b4      	movs	r2, #180	@ 0xb4
 80024c4:	589b      	ldr	r3, [r3, r2]
 80024c6:	227f      	movs	r2, #127	@ 0x7f
 80024c8:	4393      	bics	r3, r2
 80024ca:	001a      	movs	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	21b4      	movs	r1, #180	@ 0xb4
 80024d4:	505a      	str	r2, [r3, r1]
}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	b002      	add	sp, #8
 80024dc:	bd80      	pop	{r7, pc}

080024de <LL_ADC_GetCalibrationFactor>:
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	22b4      	movs	r2, #180	@ 0xb4
 80024ea:	589b      	ldr	r3, [r3, r2]
 80024ec:	227f      	movs	r2, #127	@ 0x7f
 80024ee:	4013      	ands	r3, r2
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b002      	add	sp, #8
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <LL_ADC_Enable>:
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a04      	ldr	r2, [pc, #16]	@ (8002518 <LL_ADC_Enable+0x20>)
 8002506:	4013      	ands	r3, r2
 8002508:	2201      	movs	r2, #1
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	46c0      	nop			@ (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}
 8002518:	7fffffe8 	.word	0x7fffffe8

0800251c <LL_ADC_Disable>:
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a04      	ldr	r2, [pc, #16]	@ (800253c <LL_ADC_Disable+0x20>)
 800252a:	4013      	ands	r3, r2
 800252c:	2202      	movs	r2, #2
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	46c0      	nop			@ (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}
 800253c:	7fffffe8 	.word	0x7fffffe8

08002540 <LL_ADC_IsEnabled>:
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <LL_ADC_IsEnabled+0x18>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <LL_ADC_IsEnabled+0x1a>
 8002558:	2300      	movs	r3, #0
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <LL_ADC_StartCalibration>:
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a05      	ldr	r2, [pc, #20]	@ (8002588 <LL_ADC_StartCalibration+0x24>)
 8002572:	4013      	ands	r3, r2
 8002574:	2280      	movs	r2, #128	@ 0x80
 8002576:	0612      	lsls	r2, r2, #24
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]
}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	7fffffe8 	.word	0x7fffffe8

0800258c <LL_ADC_IsCalibrationOnGoing>:
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	0fdb      	lsrs	r3, r3, #31
 800259a:	07da      	lsls	r2, r3, #31
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d101      	bne.n	80025a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <LL_ADC_IsCalibrationOnGoing+0x1e>
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b08b      	sub	sp, #44	@ 0x2c
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2254      	movs	r2, #84	@ 0x54
 80025c8:	5c9b      	ldrb	r3, [r3, r2]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0dd      	b.n	800278e <HAL_ADCEx_Calibration_Start+0x1da>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2254      	movs	r2, #84	@ 0x54
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80025da:	231f      	movs	r3, #31
 80025dc:	18fc      	adds	r4, r7, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff fe63 	bl	80022ac <ADC_Disable>
 80025e6:	0003      	movs	r3, r0
 80025e8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7ff ffa6 	bl	8002540 <LL_ADC_IsEnabled>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d000      	beq.n	80025fa <HAL_ADCEx_Calibration_Start+0x46>
 80025f8:	e0bc      	b.n	8002774 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	4a66      	ldr	r2, [pc, #408]	@ (8002798 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002600:	4013      	ands	r3, r2
 8002602:	2202      	movs	r2, #2
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a62      	ldr	r2, [pc, #392]	@ (800279c <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	495f      	ldr	r1, [pc, #380]	@ (80027a0 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002622:	400a      	ands	r2, r1
 8002624:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
 800262a:	e02d      	b.n	8002688 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0018      	movs	r0, r3
 8002632:	f7ff ff97 	bl	8002564 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002636:	e014      	b.n	8002662 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3301      	adds	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a58      	ldr	r2, [pc, #352]	@ (80027a4 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d90d      	bls.n	8002662 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	2212      	movs	r2, #18
 800264c:	4393      	bics	r3, r2
 800264e:	2210      	movs	r2, #16
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2254      	movs	r2, #84	@ 0x54
 800265a:	2100      	movs	r1, #0
 800265c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e095      	b.n	800278e <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0018      	movs	r0, r3
 8002668:	f7ff ff90 	bl	800258c <LL_ADC_IsCalibrationOnGoing>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d1e3      	bne.n	8002638 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff ff32 	bl	80024de <LL_ADC_GetCalibrationFactor>
 800267a:	0002      	movs	r2, r0
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	189b      	adds	r3, r3, r2
 8002680:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	3301      	adds	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	2b07      	cmp	r3, #7
 800268c:	d9ce      	bls.n	800262c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800268e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002690:	6a38      	ldr	r0, [r7, #32]
 8002692:	f7fd fd41 	bl	8000118 <__udivsi3>
 8002696:	0003      	movs	r3, r0
 8002698:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff2a 	bl	80024f8 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7ff fef8 	bl	800249e <LL_ADC_GetClock>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d11b      	bne.n	80026ea <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b2:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff fee5 	bl	8002484 <LL_ADC_GetCommonClock>
 80026ba:	0003      	movs	r3, r0
 80026bc:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	23e0      	movs	r3, #224	@ 0xe0
 80026c2:	035b      	lsls	r3, r3, #13
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d310      	bcc.n	80026ea <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	0c9b      	lsrs	r3, r3, #18
 80026cc:	3b03      	subs	r3, #3
 80026ce:	2201      	movs	r2, #1
 80026d0:	409a      	lsls	r2, r3
 80026d2:	0013      	movs	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80026dc:	e002      	b.n	80026e4 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a3a      	ldr	r2, [r7, #32]
 80026f0:	0011      	movs	r1, r2
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7ff fedf 	bl	80024b6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff ff0d 	bl	800251c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002702:	f7fe ff1b 	bl	800153c <HAL_GetTick>
 8002706:	0003      	movs	r3, r0
 8002708:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800270a:	e01b      	b.n	8002744 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800270c:	f7fe ff16 	bl	800153c <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d914      	bls.n	8002744 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0018      	movs	r0, r3
 8002720:	f7ff ff0e 	bl	8002540 <LL_ADC_IsEnabled>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d00d      	beq.n	8002744 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	2210      	movs	r2, #16
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002738:	2201      	movs	r2, #1
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e024      	b.n	800278e <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0018      	movs	r0, r3
 800274a:	f7ff fef9 	bl	8002540 <LL_ADC_IsEnabled>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d1dc      	bne.n	800270c <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68d9      	ldr	r1, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	430a      	orrs	r2, r1
 8002760:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002766:	2203      	movs	r2, #3
 8002768:	4393      	bics	r3, r2
 800276a:	2201      	movs	r2, #1
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	659a      	str	r2, [r3, #88]	@ 0x58
 8002772:	e005      	b.n	8002780 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002778:	2210      	movs	r2, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2254      	movs	r2, #84	@ 0x54
 8002784:	2100      	movs	r1, #0
 8002786:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002788:	231f      	movs	r3, #31
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	781b      	ldrb	r3, [r3, #0]
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b00b      	add	sp, #44	@ 0x2c
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	fffffefd 	.word	0xfffffefd
 800279c:	00008003 	.word	0x00008003
 80027a0:	ffff7ffc 	.word	0xffff7ffc
 80027a4:	0002f1ff 	.word	0x0002f1ff
 80027a8:	40012708 	.word	0x40012708

080027ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	0002      	movs	r2, r0
 80027b4:	1dfb      	adds	r3, r7, #7
 80027b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80027be:	d809      	bhi.n	80027d4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c0:	1dfb      	adds	r3, r7, #7
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	001a      	movs	r2, r3
 80027c6:	231f      	movs	r3, #31
 80027c8:	401a      	ands	r2, r3
 80027ca:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <__NVIC_EnableIRQ+0x30>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	4091      	lsls	r1, r2
 80027d0:	000a      	movs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80027d4:	46c0      	nop			@ (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b002      	add	sp, #8
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	0002      	movs	r2, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80027f4:	d828      	bhi.n	8002848 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f6:	4a2f      	ldr	r2, [pc, #188]	@ (80028b4 <__NVIC_SetPriority+0xd4>)
 80027f8:	1dfb      	adds	r3, r7, #7
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	33c0      	adds	r3, #192	@ 0xc0
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	589b      	ldr	r3, [r3, r2]
 8002806:	1dfa      	adds	r2, r7, #7
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	0011      	movs	r1, r2
 800280c:	2203      	movs	r2, #3
 800280e:	400a      	ands	r2, r1
 8002810:	00d2      	lsls	r2, r2, #3
 8002812:	21ff      	movs	r1, #255	@ 0xff
 8002814:	4091      	lsls	r1, r2
 8002816:	000a      	movs	r2, r1
 8002818:	43d2      	mvns	r2, r2
 800281a:	401a      	ands	r2, r3
 800281c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	22ff      	movs	r2, #255	@ 0xff
 8002824:	401a      	ands	r2, r3
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	2303      	movs	r3, #3
 800282e:	4003      	ands	r3, r0
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002834:	481f      	ldr	r0, [pc, #124]	@ (80028b4 <__NVIC_SetPriority+0xd4>)
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b25b      	sxtb	r3, r3
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	430a      	orrs	r2, r1
 8002840:	33c0      	adds	r3, #192	@ 0xc0
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002846:	e031      	b.n	80028ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002848:	4a1b      	ldr	r2, [pc, #108]	@ (80028b8 <__NVIC_SetPriority+0xd8>)
 800284a:	1dfb      	adds	r3, r7, #7
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	0019      	movs	r1, r3
 8002850:	230f      	movs	r3, #15
 8002852:	400b      	ands	r3, r1
 8002854:	3b08      	subs	r3, #8
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3306      	adds	r3, #6
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	18d3      	adds	r3, r2, r3
 800285e:	3304      	adds	r3, #4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	1dfa      	adds	r2, r7, #7
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	0011      	movs	r1, r2
 8002868:	2203      	movs	r2, #3
 800286a:	400a      	ands	r2, r1
 800286c:	00d2      	lsls	r2, r2, #3
 800286e:	21ff      	movs	r1, #255	@ 0xff
 8002870:	4091      	lsls	r1, r2
 8002872:	000a      	movs	r2, r1
 8002874:	43d2      	mvns	r2, r2
 8002876:	401a      	ands	r2, r3
 8002878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	22ff      	movs	r2, #255	@ 0xff
 8002880:	401a      	ands	r2, r3
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	0018      	movs	r0, r3
 8002888:	2303      	movs	r3, #3
 800288a:	4003      	ands	r3, r0
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002890:	4809      	ldr	r0, [pc, #36]	@ (80028b8 <__NVIC_SetPriority+0xd8>)
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	001c      	movs	r4, r3
 8002898:	230f      	movs	r3, #15
 800289a:	4023      	ands	r3, r4
 800289c:	3b08      	subs	r3, #8
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	430a      	orrs	r2, r1
 80028a2:	3306      	adds	r3, #6
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	18c3      	adds	r3, r0, r3
 80028a8:	3304      	adds	r3, #4
 80028aa:	601a      	str	r2, [r3, #0]
}
 80028ac:	46c0      	nop			@ (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b003      	add	sp, #12
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	2380      	movs	r3, #128	@ 0x80
 80028ca:	045b      	lsls	r3, r3, #17
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d301      	bcc.n	80028d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d0:	2301      	movs	r3, #1
 80028d2:	e010      	b.n	80028f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <SysTick_Config+0x44>)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	3a01      	subs	r2, #1
 80028da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028dc:	2301      	movs	r3, #1
 80028de:	425b      	negs	r3, r3
 80028e0:	2103      	movs	r1, #3
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7ff ff7c 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <SysTick_Config+0x44>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <SysTick_Config+0x44>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b002      	add	sp, #8
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	210f      	movs	r1, #15
 8002910:	187b      	adds	r3, r7, r1
 8002912:	1c02      	adds	r2, r0, #0
 8002914:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	187b      	adds	r3, r7, r1
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b25b      	sxtb	r3, r3
 800291e:	0011      	movs	r1, r2
 8002920:	0018      	movs	r0, r3
 8002922:	f7ff ff5d 	bl	80027e0 <__NVIC_SetPriority>
}
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b004      	add	sp, #16
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	0002      	movs	r2, r0
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293a:	1dfb      	adds	r3, r7, #7
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	b25b      	sxtb	r3, r3
 8002940:	0018      	movs	r0, r3
 8002942:	f7ff ff33 	bl	80027ac <__NVIC_EnableIRQ>
}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f7ff ffaf 	bl	80028bc <SysTick_Config>
 800295e:	0003      	movs	r3, r0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b002      	add	sp, #8
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e091      	b.n	8002a9e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	001a      	movs	r2, r3
 8002980:	4b49      	ldr	r3, [pc, #292]	@ (8002aa8 <HAL_DMA_Init+0x140>)
 8002982:	429a      	cmp	r2, r3
 8002984:	d810      	bhi.n	80029a8 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a48      	ldr	r2, [pc, #288]	@ (8002aac <HAL_DMA_Init+0x144>)
 800298c:	4694      	mov	ip, r2
 800298e:	4463      	add	r3, ip
 8002990:	2114      	movs	r1, #20
 8002992:	0018      	movs	r0, r3
 8002994:	f7fd fbc0 	bl	8000118 <__udivsi3>
 8002998:	0003      	movs	r3, r0
 800299a:	009a      	lsls	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a43      	ldr	r2, [pc, #268]	@ (8002ab0 <HAL_DMA_Init+0x148>)
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80029a6:	e00f      	b.n	80029c8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a41      	ldr	r2, [pc, #260]	@ (8002ab4 <HAL_DMA_Init+0x14c>)
 80029ae:	4694      	mov	ip, r2
 80029b0:	4463      	add	r3, ip
 80029b2:	2114      	movs	r1, #20
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7fd fbaf 	bl	8000118 <__udivsi3>
 80029ba:	0003      	movs	r3, r0
 80029bc:	009a      	lsls	r2, r3, #2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ab8 <HAL_DMA_Init+0x150>)
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2225      	movs	r2, #37	@ 0x25
 80029cc:	2102      	movs	r1, #2
 80029ce:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4938      	ldr	r1, [pc, #224]	@ (8002abc <HAL_DMA_Init+0x154>)
 80029dc:	400a      	ands	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 f9d7 	bl	8002dcc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	01db      	lsls	r3, r3, #7
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d102      	bne.n	8002a30 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a38:	217f      	movs	r1, #127	@ 0x7f
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a46:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d011      	beq.n	8002a74 <HAL_DMA_Init+0x10c>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d80d      	bhi.n	8002a74 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fa00 	bl	8002e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	e008      	b.n	8002a86 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2225      	movs	r2, #37	@ 0x25
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2224      	movs	r2, #36	@ 0x24
 8002a98:	2100      	movs	r1, #0
 8002a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b002      	add	sp, #8
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	40020407 	.word	0x40020407
 8002aac:	bffdfff8 	.word	0xbffdfff8
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	bffdfbf8 	.word	0xbffdfbf8
 8002ab8:	40020400 	.word	0x40020400
 8002abc:	ffff800f 	.word	0xffff800f

08002ac0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2317      	movs	r3, #23
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2224      	movs	r2, #36	@ 0x24
 8002ada:	5c9b      	ldrb	r3, [r3, r2]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Start_IT+0x24>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e06f      	b.n	8002bc4 <HAL_DMA_Start_IT+0x104>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2224      	movs	r2, #36	@ 0x24
 8002ae8:	2101      	movs	r1, #1
 8002aea:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2225      	movs	r2, #37	@ 0x25
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d157      	bne.n	8002ba8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2225      	movs	r2, #37	@ 0x25
 8002afc:	2102      	movs	r1, #2
 8002afe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	438a      	bics	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f919 	bl	8002d54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	210e      	movs	r1, #14
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e00f      	b.n	8002b5c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2104      	movs	r1, #4
 8002b48:	438a      	bics	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	210a      	movs	r1, #10
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	025b      	lsls	r3, r3, #9
 8002b66:	4013      	ands	r3, r2
 8002b68:	d008      	beq.n	8002b7c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b74:	2180      	movs	r1, #128	@ 0x80
 8002b76:	0049      	lsls	r1, r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	2180      	movs	r1, #128	@ 0x80
 8002b90:	0049      	lsls	r1, r1, #1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e00a      	b.n	8002bbe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2224      	movs	r2, #36	@ 0x24
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002bb6:	2317      	movs	r3, #23
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002bbe:	2317      	movs	r3, #23
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be8:	221c      	movs	r2, #28
 8002bea:	4013      	ands	r3, r2
 8002bec:	2204      	movs	r2, #4
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d026      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x7a>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2220      	movs	r2, #32
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d107      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2104      	movs	r1, #4
 8002c18:	438a      	bics	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c20:	221c      	movs	r2, #28
 8002c22:	401a      	ands	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	2104      	movs	r1, #4
 8002c2a:	4091      	lsls	r1, r2
 8002c2c:	000a      	movs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d100      	bne.n	8002c3a <HAL_DMA_IRQHandler+0x6e>
 8002c38:	e080      	b.n	8002d3c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	0010      	movs	r0, r2
 8002c42:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002c44:	e07a      	b.n	8002d3c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	221c      	movs	r2, #28
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2202      	movs	r2, #2
 8002c50:	409a      	lsls	r2, r3
 8002c52:	0013      	movs	r3, r2
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	d03c      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x108>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d038      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d10b      	bne.n	8002c86 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	210a      	movs	r1, #10
 8002c7a:	438a      	bics	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2225      	movs	r2, #37	@ 0x25
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d48 <HAL_DMA_IRQHandler+0x17c>)
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d909      	bls.n	8002ca6 <HAL_DMA_IRQHandler+0xda>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	221c      	movs	r2, #28
 8002c98:	401a      	ands	r2, r3
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <HAL_DMA_IRQHandler+0x180>)
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	4091      	lsls	r1, r2
 8002ca0:	000a      	movs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	e008      	b.n	8002cb8 <HAL_DMA_IRQHandler+0xec>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	221c      	movs	r2, #28
 8002cac:	401a      	ands	r2, r3
 8002cae:	4b28      	ldr	r3, [pc, #160]	@ (8002d50 <HAL_DMA_IRQHandler+0x184>)
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	4091      	lsls	r1, r2
 8002cb4:	000a      	movs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2224      	movs	r2, #36	@ 0x24
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d039      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	0010      	movs	r0, r2
 8002cd0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002cd2:	e033      	b.n	8002d3c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd8:	221c      	movs	r2, #28
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2208      	movs	r2, #8
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d02a      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x172>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2208      	movs	r2, #8
 8002cec:	4013      	ands	r3, r2
 8002cee:	d026      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	210e      	movs	r1, #14
 8002cfc:	438a      	bics	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d04:	221c      	movs	r2, #28
 8002d06:	401a      	ands	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4091      	lsls	r1, r2
 8002d10:	000a      	movs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2225      	movs	r2, #37	@ 0x25
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2224      	movs	r2, #36	@ 0x24
 8002d26:	2100      	movs	r1, #0
 8002d28:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	0010      	movs	r0, r2
 8002d3a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46c0      	nop			@ (mov r8, r8)
}
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	40020080 	.word	0x40020080
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40020000 	.word	0x40020000

08002d54 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d6a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d7c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	221c      	movs	r2, #28
 8002d84:	401a      	ands	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4091      	lsls	r1, r2
 8002d8e:	000a      	movs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d108      	bne.n	8002db4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002db2:	e007      	b.n	8002dc4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]
}
 8002dc4:	46c0      	nop			@ (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	001a      	movs	r2, r3
 8002dda:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d814      	bhi.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002dea:	189a      	adds	r2, r3, r2
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	001a      	movs	r2, r3
 8002df6:	23ff      	movs	r3, #255	@ 0xff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	3b08      	subs	r3, #8
 8002dfc:	2114      	movs	r1, #20
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7fd f98a 	bl	8000118 <__udivsi3>
 8002e04:	0003      	movs	r3, r0
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e014      	b.n	8002e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002e14:	189a      	adds	r2, r3, r2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	001a      	movs	r2, r3
 8002e20:	23ff      	movs	r3, #255	@ 0xff
 8002e22:	4013      	ands	r3, r2
 8002e24:	3b08      	subs	r3, #8
 8002e26:	2114      	movs	r1, #20
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7fd f975 	bl	8000118 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	3307      	adds	r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a09      	ldr	r2, [pc, #36]	@ (8002e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002e38:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	221f      	movs	r2, #31
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2201      	movs	r2, #1
 8002e42:	409a      	lsls	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b004      	add	sp, #16
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40020407 	.word	0x40020407
 8002e54:	40020800 	.word	0x40020800
 8002e58:	4002081c 	.word	0x4002081c
 8002e5c:	40020880 	.word	0x40020880

08002e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	227f      	movs	r2, #127	@ 0x7f
 8002e6e:	4013      	ands	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e76:	4694      	mov	ip, r2
 8002e78:	4463      	add	r3, ip
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a07      	ldr	r2, [pc, #28]	@ (8002ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e86:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002e98:	46c0      	nop			@ (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b004      	add	sp, #16
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	1000823f 	.word	0x1000823f
 8002ea4:	40020940 	.word	0x40020940

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb6:	e14d      	b.n	8003154 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4091      	lsls	r1, r2
 8002ec2:	000a      	movs	r2, r1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d100      	bne.n	8002ed0 <HAL_GPIO_Init+0x28>
 8002ece:	e13e      	b.n	800314e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d005      	beq.n	8002ee8 <HAL_GPIO_Init+0x40>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d130      	bne.n	8002f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	0013      	movs	r3, r2
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1e:	2201      	movs	r2, #1
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
 8002f24:	0013      	movs	r3, r2
 8002f26:	43da      	mvns	r2, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	2201      	movs	r2, #1
 8002f36:	401a      	ands	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d017      	beq.n	8002f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	409a      	lsls	r2, r3
 8002f64:	0013      	movs	r3, r2
 8002f66:	43da      	mvns	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	409a      	lsls	r2, r3
 8002f78:	0013      	movs	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d123      	bne.n	8002fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	0092      	lsls	r2, r2, #2
 8002f9c:	58d3      	ldr	r3, [r2, r3]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	409a      	lsls	r2, r3
 8002fac:	0013      	movs	r3, r2
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2107      	movs	r1, #7
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	0013      	movs	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	6939      	ldr	r1, [r7, #16]
 8002fd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	0013      	movs	r3, r2
 8002fea:	43da      	mvns	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	409a      	lsls	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	23c0      	movs	r3, #192	@ 0xc0
 8003014:	029b      	lsls	r3, r3, #10
 8003016:	4013      	ands	r3, r2
 8003018:	d100      	bne.n	800301c <HAL_GPIO_Init+0x174>
 800301a:	e098      	b.n	800314e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800301c:	4a53      	ldr	r2, [pc, #332]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	3318      	adds	r3, #24
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	589b      	ldr	r3, [r3, r2]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2203      	movs	r2, #3
 800302e:	4013      	ands	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	220f      	movs	r2, #15
 8003034:	409a      	lsls	r2, r3
 8003036:	0013      	movs	r3, r2
 8003038:	43da      	mvns	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	23a0      	movs	r3, #160	@ 0xa0
 8003044:	05db      	lsls	r3, r3, #23
 8003046:	429a      	cmp	r2, r3
 8003048:	d019      	beq.n	800307e <HAL_GPIO_Init+0x1d6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a48      	ldr	r2, [pc, #288]	@ (8003170 <HAL_GPIO_Init+0x2c8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_GPIO_Init+0x1d2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a47      	ldr	r2, [pc, #284]	@ (8003174 <HAL_GPIO_Init+0x2cc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00d      	beq.n	8003076 <HAL_GPIO_Init+0x1ce>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a46      	ldr	r2, [pc, #280]	@ (8003178 <HAL_GPIO_Init+0x2d0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <HAL_GPIO_Init+0x1ca>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a45      	ldr	r2, [pc, #276]	@ (800317c <HAL_GPIO_Init+0x2d4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_GPIO_Init+0x1c6>
 800306a:	2304      	movs	r3, #4
 800306c:	e008      	b.n	8003080 <HAL_GPIO_Init+0x1d8>
 800306e:	2305      	movs	r3, #5
 8003070:	e006      	b.n	8003080 <HAL_GPIO_Init+0x1d8>
 8003072:	2303      	movs	r3, #3
 8003074:	e004      	b.n	8003080 <HAL_GPIO_Init+0x1d8>
 8003076:	2302      	movs	r3, #2
 8003078:	e002      	b.n	8003080 <HAL_GPIO_Init+0x1d8>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_GPIO_Init+0x1d8>
 800307e:	2300      	movs	r3, #0
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	2103      	movs	r1, #3
 8003084:	400a      	ands	r2, r1
 8003086:	00d2      	lsls	r2, r2, #3
 8003088:	4093      	lsls	r3, r2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003090:	4936      	ldr	r1, [pc, #216]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	3318      	adds	r3, #24
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800309e:	4b33      	ldr	r3, [pc, #204]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43da      	mvns	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	035b      	lsls	r3, r3, #13
 80030b6:	4013      	ands	r3, r2
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030c2:	4b2a      	ldr	r3, [pc, #168]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80030c8:	4b28      	ldr	r3, [pc, #160]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	43da      	mvns	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	2380      	movs	r3, #128	@ 0x80
 80030de:	039b      	lsls	r3, r3, #14
 80030e0:	4013      	ands	r3, r2
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ec:	4b1f      	ldr	r3, [pc, #124]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030f2:	4a1e      	ldr	r2, [pc, #120]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 80030f4:	2384      	movs	r3, #132	@ 0x84
 80030f6:	58d3      	ldr	r3, [r2, r3]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43da      	mvns	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	029b      	lsls	r3, r3, #10
 800310c:	4013      	ands	r3, r2
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003118:	4914      	ldr	r1, [pc, #80]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 800311a:	2284      	movs	r2, #132	@ 0x84
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003120:	4a12      	ldr	r2, [pc, #72]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	58d3      	ldr	r3, [r2, r3]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43da      	mvns	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	025b      	lsls	r3, r3, #9
 800313a:	4013      	ands	r3, r2
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003146:	4909      	ldr	r1, [pc, #36]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3301      	adds	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	40da      	lsrs	r2, r3
 800315c:	1e13      	subs	r3, r2, #0
 800315e:	d000      	beq.n	8003162 <HAL_GPIO_Init+0x2ba>
 8003160:	e6aa      	b.n	8002eb8 <HAL_GPIO_Init+0x10>
  }
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b006      	add	sp, #24
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021800 	.word	0x40021800
 8003170:	50000400 	.word	0x50000400
 8003174:	50000800 	.word	0x50000800
 8003178:	50000c00 	.word	0x50000c00
 800317c:	50001000 	.word	0x50001000

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	0008      	movs	r0, r1
 800318a:	0011      	movs	r1, r2
 800318c:	1cbb      	adds	r3, r7, #2
 800318e:	1c02      	adds	r2, r0, #0
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	1c7b      	adds	r3, r7, #1
 8003194:	1c0a      	adds	r2, r1, #0
 8003196:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003198:	1c7b      	adds	r3, r7, #1
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031a0:	1cbb      	adds	r3, r7, #2
 80031a2:	881a      	ldrh	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031a8:	e003      	b.n	80031b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031aa:	1cbb      	adds	r3, r7, #2
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b002      	add	sp, #8
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a19      	ldr	r2, [pc, #100]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	4b17      	ldr	r3, [pc, #92]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	2380      	movs	r3, #128	@ 0x80
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d11f      	bne.n	8003220 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80031e0:	4b14      	ldr	r3, [pc, #80]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	0013      	movs	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4912      	ldr	r1, [pc, #72]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7fc ff92 	bl	8000118 <__udivsi3>
 80031f4:	0003      	movs	r3, r0
 80031f6:	3301      	adds	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031fa:	e008      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3b01      	subs	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e001      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e009      	b.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800320e:	4b07      	ldr	r3, [pc, #28]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	401a      	ands	r2, r3
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	429a      	cmp	r2, r3
 800321e:	d0ed      	beq.n	80031fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	40007000 	.word	0x40007000
 8003230:	fffff9ff 	.word	0xfffff9ff
 8003234:	20000000 	.word	0x20000000
 8003238:	000f4240 	.word	0x000f4240

0800323c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f000 fb50 	bl	80038f0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	4013      	ands	r3, r2
 8003258:	d100      	bne.n	800325c <HAL_RCC_OscConfig+0x20>
 800325a:	e07c      	b.n	8003356 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325c:	4bc3      	ldr	r3, [pc, #780]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2238      	movs	r2, #56	@ 0x38
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003266:	4bc1      	ldr	r3, [pc, #772]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2203      	movs	r2, #3
 800326c:	4013      	ands	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b10      	cmp	r3, #16
 8003274:	d102      	bne.n	800327c <HAL_RCC_OscConfig+0x40>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d002      	beq.n	8003282 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b08      	cmp	r3, #8
 8003280:	d10b      	bne.n	800329a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003282:	4bba      	ldr	r3, [pc, #744]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	2380      	movs	r3, #128	@ 0x80
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	4013      	ands	r3, r2
 800328c:	d062      	beq.n	8003354 <HAL_RCC_OscConfig+0x118>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d15e      	bne.n	8003354 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e32a      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	025b      	lsls	r3, r3, #9
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_OscConfig+0x7a>
 80032a6:	4bb1      	ldr	r3, [pc, #708]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4bb0      	ldr	r3, [pc, #704]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032ac:	2180      	movs	r1, #128	@ 0x80
 80032ae:	0249      	lsls	r1, r1, #9
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e020      	b.n	80032f8 <HAL_RCC_OscConfig+0xbc>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	23a0      	movs	r3, #160	@ 0xa0
 80032bc:	02db      	lsls	r3, r3, #11
 80032be:	429a      	cmp	r2, r3
 80032c0:	d10e      	bne.n	80032e0 <HAL_RCC_OscConfig+0xa4>
 80032c2:	4baa      	ldr	r3, [pc, #680]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4ba9      	ldr	r3, [pc, #676]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032c8:	2180      	movs	r1, #128	@ 0x80
 80032ca:	02c9      	lsls	r1, r1, #11
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	4ba6      	ldr	r3, [pc, #664]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4ba5      	ldr	r3, [pc, #660]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032d6:	2180      	movs	r1, #128	@ 0x80
 80032d8:	0249      	lsls	r1, r1, #9
 80032da:	430a      	orrs	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0xbc>
 80032e0:	4ba2      	ldr	r3, [pc, #648]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4ba1      	ldr	r3, [pc, #644]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032e6:	49a2      	ldr	r1, [pc, #648]	@ (8003570 <HAL_RCC_OscConfig+0x334>)
 80032e8:	400a      	ands	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	4b9f      	ldr	r3, [pc, #636]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b9e      	ldr	r3, [pc, #632]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80032f2:	49a0      	ldr	r1, [pc, #640]	@ (8003574 <HAL_RCC_OscConfig+0x338>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d014      	beq.n	800332a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe f91c 	bl	800153c <HAL_GetTick>
 8003304:	0003      	movs	r3, r0
 8003306:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330a:	f7fe f917 	bl	800153c <HAL_GetTick>
 800330e:	0002      	movs	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	@ 0x64
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e2e9      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331c:	4b93      	ldr	r3, [pc, #588]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	029b      	lsls	r3, r3, #10
 8003324:	4013      	ands	r3, r2
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0xce>
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fe f907 	bl	800153c <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe f902 	bl	800153c <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e2d4      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003346:	4b89      	ldr	r3, [pc, #548]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	029b      	lsls	r3, r3, #10
 800334e:	4013      	ands	r3, r2
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0xf8>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2202      	movs	r2, #2
 800335c:	4013      	ands	r3, r2
 800335e:	d100      	bne.n	8003362 <HAL_RCC_OscConfig+0x126>
 8003360:	e099      	b.n	8003496 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003362:	4b82      	ldr	r3, [pc, #520]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2238      	movs	r2, #56	@ 0x38
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336c:	4b7f      	ldr	r3, [pc, #508]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2203      	movs	r2, #3
 8003372:	4013      	ands	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d102      	bne.n	8003382 <HAL_RCC_OscConfig+0x146>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d002      	beq.n	8003388 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d135      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003388:	4b78      	ldr	r3, [pc, #480]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4013      	ands	r3, r2
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_OscConfig+0x164>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e2a7      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b72      	ldr	r3, [pc, #456]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a74      	ldr	r2, [pc, #464]	@ (8003578 <HAL_RCC_OscConfig+0x33c>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	021a      	lsls	r2, r3, #8
 80033b0:	4b6e      	ldr	r3, [pc, #440]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d112      	bne.n	80033e2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80033bc:	4b6b      	ldr	r3, [pc, #428]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6e      	ldr	r2, [pc, #440]	@ (800357c <HAL_RCC_OscConfig+0x340>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	4b68      	ldr	r3, [pc, #416]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80033d0:	4b66      	ldr	r3, [pc, #408]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0adb      	lsrs	r3, r3, #11
 80033d6:	2207      	movs	r2, #7
 80033d8:	4013      	ands	r3, r2
 80033da:	4a69      	ldr	r2, [pc, #420]	@ (8003580 <HAL_RCC_OscConfig+0x344>)
 80033dc:	40da      	lsrs	r2, r3
 80033de:	4b69      	ldr	r3, [pc, #420]	@ (8003584 <HAL_RCC_OscConfig+0x348>)
 80033e0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033e2:	4b69      	ldr	r3, [pc, #420]	@ (8003588 <HAL_RCC_OscConfig+0x34c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7fe f84c 	bl	8001484 <HAL_InitTick>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d051      	beq.n	8003494 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e27d      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d030      	beq.n	800345e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80033fc:	4b5b      	ldr	r3, [pc, #364]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a5e      	ldr	r2, [pc, #376]	@ (800357c <HAL_RCC_OscConfig+0x340>)
 8003402:	4013      	ands	r3, r2
 8003404:	0019      	movs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	4b58      	ldr	r3, [pc, #352]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b56      	ldr	r3, [pc, #344]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b55      	ldr	r3, [pc, #340]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003416:	2180      	movs	r1, #128	@ 0x80
 8003418:	0049      	lsls	r1, r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fe f88d 	bl	800153c <HAL_GetTick>
 8003422:	0003      	movs	r3, r0
 8003424:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003428:	f7fe f888 	bl	800153c <HAL_GetTick>
 800342c:	0002      	movs	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e25a      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343a:	4b4c      	ldr	r3, [pc, #304]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	2380      	movs	r3, #128	@ 0x80
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4013      	ands	r3, r2
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b49      	ldr	r3, [pc, #292]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4a4b      	ldr	r2, [pc, #300]	@ (8003578 <HAL_RCC_OscConfig+0x33c>)
 800344c:	4013      	ands	r3, r2
 800344e:	0019      	movs	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	021a      	lsls	r2, r3, #8
 8003456:	4b45      	ldr	r3, [pc, #276]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	e01b      	b.n	8003496 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b43      	ldr	r3, [pc, #268]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b42      	ldr	r3, [pc, #264]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003464:	4949      	ldr	r1, [pc, #292]	@ (800358c <HAL_RCC_OscConfig+0x350>)
 8003466:	400a      	ands	r2, r1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fe f867 	bl	800153c <HAL_GetTick>
 800346e:	0003      	movs	r3, r0
 8003470:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003474:	f7fe f862 	bl	800153c <HAL_GetTick>
 8003478:	0002      	movs	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e234      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003486:	4b39      	ldr	r3, [pc, #228]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4013      	ands	r3, r2
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x238>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003494:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2208      	movs	r2, #8
 800349c:	4013      	ands	r3, r2
 800349e:	d047      	beq.n	8003530 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80034a0:	4b32      	ldr	r3, [pc, #200]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2238      	movs	r2, #56	@ 0x38
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b18      	cmp	r3, #24
 80034aa:	d10a      	bne.n	80034c2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80034ac:	4b2f      	ldr	r3, [pc, #188]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	2202      	movs	r2, #2
 80034b2:	4013      	ands	r3, r2
 80034b4:	d03c      	beq.n	8003530 <HAL_RCC_OscConfig+0x2f4>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d138      	bne.n	8003530 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e216      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d019      	beq.n	80034fe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80034ca:	4b28      	ldr	r3, [pc, #160]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80034cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034ce:	4b27      	ldr	r3, [pc, #156]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80034d0:	2101      	movs	r1, #1
 80034d2:	430a      	orrs	r2, r1
 80034d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fe f831 	bl	800153c <HAL_GetTick>
 80034da:	0003      	movs	r3, r0
 80034dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e0:	f7fe f82c 	bl	800153c <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1fe      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f2:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 80034f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f6:	2202      	movs	r2, #2
 80034f8:	4013      	ands	r3, r2
 80034fa:	d0f1      	beq.n	80034e0 <HAL_RCC_OscConfig+0x2a4>
 80034fc:	e018      	b.n	8003530 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80034fe:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003500:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003502:	4b1a      	ldr	r3, [pc, #104]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003504:	2101      	movs	r1, #1
 8003506:	438a      	bics	r2, r1
 8003508:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe f817 	bl	800153c <HAL_GetTick>
 800350e:	0003      	movs	r3, r0
 8003510:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003514:	f7fe f812 	bl	800153c <HAL_GetTick>
 8003518:	0002      	movs	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1e4      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003526:	4b11      	ldr	r3, [pc, #68]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352a:	2202      	movs	r2, #2
 800352c:	4013      	ands	r3, r2
 800352e:	d1f1      	bne.n	8003514 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2204      	movs	r2, #4
 8003536:	4013      	ands	r3, r2
 8003538:	d100      	bne.n	800353c <HAL_RCC_OscConfig+0x300>
 800353a:	e0c7      	b.n	80036cc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353c:	231f      	movs	r3, #31
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2238      	movs	r2, #56	@ 0x38
 800354a:	4013      	ands	r3, r2
 800354c:	2b20      	cmp	r3, #32
 800354e:	d11f      	bne.n	8003590 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003550:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_RCC_OscConfig+0x330>)
 8003552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003554:	2202      	movs	r2, #2
 8003556:	4013      	ands	r3, r2
 8003558:	d100      	bne.n	800355c <HAL_RCC_OscConfig+0x320>
 800355a:	e0b7      	b.n	80036cc <HAL_RCC_OscConfig+0x490>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d000      	beq.n	8003566 <HAL_RCC_OscConfig+0x32a>
 8003564:	e0b2      	b.n	80036cc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e1c2      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	40021000 	.word	0x40021000
 8003570:	fffeffff 	.word	0xfffeffff
 8003574:	fffbffff 	.word	0xfffbffff
 8003578:	ffff80ff 	.word	0xffff80ff
 800357c:	ffffc7ff 	.word	0xffffc7ff
 8003580:	00f42400 	.word	0x00f42400
 8003584:	20000000 	.word	0x20000000
 8003588:	20000004 	.word	0x20000004
 800358c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003590:	4bb5      	ldr	r3, [pc, #724]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003592:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	055b      	lsls	r3, r3, #21
 8003598:	4013      	ands	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_OscConfig+0x364>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x366>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d011      	beq.n	80035ca <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	4bb0      	ldr	r3, [pc, #704]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80035a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035aa:	4baf      	ldr	r3, [pc, #700]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80035ac:	2180      	movs	r1, #128	@ 0x80
 80035ae:	0549      	lsls	r1, r1, #21
 80035b0:	430a      	orrs	r2, r1
 80035b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035b4:	4bac      	ldr	r3, [pc, #688]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80035b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035b8:	2380      	movs	r3, #128	@ 0x80
 80035ba:	055b      	lsls	r3, r3, #21
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80035c2:	231f      	movs	r3, #31
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ca:	4ba8      	ldr	r3, [pc, #672]	@ (800386c <HAL_RCC_OscConfig+0x630>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4013      	ands	r3, r2
 80035d4:	d11a      	bne.n	800360c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d6:	4ba5      	ldr	r3, [pc, #660]	@ (800386c <HAL_RCC_OscConfig+0x630>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4ba4      	ldr	r3, [pc, #656]	@ (800386c <HAL_RCC_OscConfig+0x630>)
 80035dc:	2180      	movs	r1, #128	@ 0x80
 80035de:	0049      	lsls	r1, r1, #1
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80035e4:	f7fd ffaa 	bl	800153c <HAL_GetTick>
 80035e8:	0003      	movs	r3, r0
 80035ea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fd ffa5 	bl	800153c <HAL_GetTick>
 80035f2:	0002      	movs	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e177      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003600:	4b9a      	ldr	r3, [pc, #616]	@ (800386c <HAL_RCC_OscConfig+0x630>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4013      	ands	r3, r2
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x3e6>
 8003614:	4b94      	ldr	r3, [pc, #592]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003616:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003618:	4b93      	ldr	r3, [pc, #588]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800361a:	2101      	movs	r1, #1
 800361c:	430a      	orrs	r2, r1
 800361e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003620:	e01c      	b.n	800365c <HAL_RCC_OscConfig+0x420>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b05      	cmp	r3, #5
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x408>
 800362a:	4b8f      	ldr	r3, [pc, #572]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800362c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800362e:	4b8e      	ldr	r3, [pc, #568]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003630:	2104      	movs	r1, #4
 8003632:	430a      	orrs	r2, r1
 8003634:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003636:	4b8c      	ldr	r3, [pc, #560]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003638:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800363a:	4b8b      	ldr	r3, [pc, #556]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800363c:	2101      	movs	r1, #1
 800363e:	430a      	orrs	r2, r1
 8003640:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003642:	e00b      	b.n	800365c <HAL_RCC_OscConfig+0x420>
 8003644:	4b88      	ldr	r3, [pc, #544]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003646:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003648:	4b87      	ldr	r3, [pc, #540]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800364a:	2101      	movs	r1, #1
 800364c:	438a      	bics	r2, r1
 800364e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003650:	4b85      	ldr	r3, [pc, #532]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003652:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003654:	4b84      	ldr	r3, [pc, #528]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003656:	2104      	movs	r1, #4
 8003658:	438a      	bics	r2, r1
 800365a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d014      	beq.n	800368e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd ff6a 	bl	800153c <HAL_GetTick>
 8003668:	0003      	movs	r3, r0
 800366a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366c:	e009      	b.n	8003682 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fd ff65 	bl	800153c <HAL_GetTick>
 8003672:	0002      	movs	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	4a7d      	ldr	r2, [pc, #500]	@ (8003870 <HAL_RCC_OscConfig+0x634>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e136      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003682:	4b79      	ldr	r3, [pc, #484]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003686:	2202      	movs	r2, #2
 8003688:	4013      	ands	r3, r2
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x432>
 800368c:	e013      	b.n	80036b6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fd ff55 	bl	800153c <HAL_GetTick>
 8003692:	0003      	movs	r3, r0
 8003694:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003696:	e009      	b.n	80036ac <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fd ff50 	bl	800153c <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	4a73      	ldr	r2, [pc, #460]	@ (8003870 <HAL_RCC_OscConfig+0x634>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e121      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ac:	4b6e      	ldr	r3, [pc, #440]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80036ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b0:	2202      	movs	r2, #2
 80036b2:	4013      	ands	r3, r2
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80036b6:	231f      	movs	r3, #31
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b69      	ldr	r3, [pc, #420]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80036c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036c4:	4b68      	ldr	r3, [pc, #416]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80036c6:	496b      	ldr	r1, [pc, #428]	@ (8003874 <HAL_RCC_OscConfig+0x638>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2220      	movs	r2, #32
 80036d2:	4013      	ands	r3, r2
 80036d4:	d039      	beq.n	800374a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01b      	beq.n	8003716 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036de:	4b62      	ldr	r3, [pc, #392]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b61      	ldr	r3, [pc, #388]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80036e4:	2180      	movs	r1, #128	@ 0x80
 80036e6:	03c9      	lsls	r1, r1, #15
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fd ff26 	bl	800153c <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036f6:	f7fd ff21 	bl	800153c <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0f3      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003708:	4b57      	ldr	r3, [pc, #348]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2380      	movs	r3, #128	@ 0x80
 800370e:	041b      	lsls	r3, r3, #16
 8003710:	4013      	ands	r3, r2
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x4ba>
 8003714:	e019      	b.n	800374a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003716:	4b54      	ldr	r3, [pc, #336]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b53      	ldr	r3, [pc, #332]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800371c:	4956      	ldr	r1, [pc, #344]	@ (8003878 <HAL_RCC_OscConfig+0x63c>)
 800371e:	400a      	ands	r2, r1
 8003720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fd ff0b 	bl	800153c <HAL_GetTick>
 8003726:	0003      	movs	r3, r0
 8003728:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800372c:	f7fd ff06 	bl	800153c <HAL_GetTick>
 8003730:	0002      	movs	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0d8      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800373e:	4b4a      	ldr	r3, [pc, #296]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	2380      	movs	r3, #128	@ 0x80
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	4013      	ands	r3, r2
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d100      	bne.n	8003754 <HAL_RCC_OscConfig+0x518>
 8003752:	e0cc      	b.n	80038ee <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003754:	4b44      	ldr	r3, [pc, #272]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2238      	movs	r2, #56	@ 0x38
 800375a:	4013      	ands	r3, r2
 800375c:	2b10      	cmp	r3, #16
 800375e:	d100      	bne.n	8003762 <HAL_RCC_OscConfig+0x526>
 8003760:	e07b      	b.n	800385a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d156      	bne.n	8003818 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	4b3f      	ldr	r3, [pc, #252]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b3e      	ldr	r3, [pc, #248]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003770:	4942      	ldr	r1, [pc, #264]	@ (800387c <HAL_RCC_OscConfig+0x640>)
 8003772:	400a      	ands	r2, r1
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fd fee1 	bl	800153c <HAL_GetTick>
 800377a:	0003      	movs	r3, r0
 800377c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003780:	f7fd fedc 	bl	800153c <HAL_GetTick>
 8003784:	0002      	movs	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0ae      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003792:	4b35      	ldr	r3, [pc, #212]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	2380      	movs	r3, #128	@ 0x80
 8003798:	049b      	lsls	r3, r3, #18
 800379a:	4013      	ands	r3, r2
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800379e:	4b32      	ldr	r3, [pc, #200]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4a37      	ldr	r2, [pc, #220]	@ (8003880 <HAL_RCC_OscConfig+0x644>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	0019      	movs	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	431a      	orrs	r2, r3
 80037cc:	4b26      	ldr	r3, [pc, #152]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d2:	4b25      	ldr	r3, [pc, #148]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b24      	ldr	r3, [pc, #144]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80037d8:	2180      	movs	r1, #128	@ 0x80
 80037da:	0449      	lsls	r1, r1, #17
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80037e0:	4b21      	ldr	r3, [pc, #132]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 80037e6:	2180      	movs	r1, #128	@ 0x80
 80037e8:	0549      	lsls	r1, r1, #21
 80037ea:	430a      	orrs	r2, r1
 80037ec:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fd fea5 	bl	800153c <HAL_GetTick>
 80037f2:	0003      	movs	r3, r0
 80037f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fd fea0 	bl	800153c <HAL_GetTick>
 80037fc:	0002      	movs	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e072      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380a:	4b17      	ldr	r3, [pc, #92]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	2380      	movs	r3, #128	@ 0x80
 8003810:	049b      	lsls	r3, r3, #18
 8003812:	4013      	ands	r3, r2
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x5bc>
 8003816:	e06a      	b.n	80038ee <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003818:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800381e:	4917      	ldr	r1, [pc, #92]	@ (800387c <HAL_RCC_OscConfig+0x640>)
 8003820:	400a      	ands	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fd fe8a 	bl	800153c <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382e:	f7fd fe85 	bl	800153c <HAL_GetTick>
 8003832:	0002      	movs	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e057      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003840:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	049b      	lsls	r3, r3, #18
 8003848:	4013      	ands	r3, r2
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800384c:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_RCC_OscConfig+0x62c>)
 8003852:	490c      	ldr	r1, [pc, #48]	@ (8003884 <HAL_RCC_OscConfig+0x648>)
 8003854:	400a      	ands	r2, r1
 8003856:	60da      	str	r2, [r3, #12]
 8003858:	e049      	b.n	80038ee <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d112      	bne.n	8003888 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e044      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	40021000 	.word	0x40021000
 800386c:	40007000 	.word	0x40007000
 8003870:	00001388 	.word	0x00001388
 8003874:	efffffff 	.word	0xefffffff
 8003878:	ffbfffff 	.word	0xffbfffff
 800387c:	feffffff 	.word	0xfeffffff
 8003880:	11c1808c 	.word	0x11c1808c
 8003884:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003888:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <HAL_RCC_OscConfig+0x6bc>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2203      	movs	r2, #3
 8003892:	401a      	ands	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	429a      	cmp	r2, r3
 800389a:	d126      	bne.n	80038ea <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2270      	movs	r2, #112	@ 0x70
 80038a0:	401a      	ands	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d11f      	bne.n	80038ea <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	23fe      	movs	r3, #254	@ 0xfe
 80038ae:	01db      	lsls	r3, r3, #7
 80038b0:	401a      	ands	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d116      	bne.n	80038ea <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	23f8      	movs	r3, #248	@ 0xf8
 80038c0:	039b      	lsls	r3, r3, #14
 80038c2:	401a      	ands	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d10e      	bne.n	80038ea <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	23e0      	movs	r3, #224	@ 0xe0
 80038d0:	051b      	lsls	r3, r3, #20
 80038d2:	401a      	ands	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	0f5b      	lsrs	r3, r3, #29
 80038e0:	075a      	lsls	r2, r3, #29
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b008      	add	sp, #32
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000

080038fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0e9      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003910:	4b76      	ldr	r3, [pc, #472]	@ (8003aec <HAL_RCC_ClockConfig+0x1f0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2207      	movs	r2, #7
 8003916:	4013      	ands	r3, r2
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d91e      	bls.n	800395c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b73      	ldr	r3, [pc, #460]	@ (8003aec <HAL_RCC_ClockConfig+0x1f0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2207      	movs	r2, #7
 8003924:	4393      	bics	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	4b70      	ldr	r3, [pc, #448]	@ (8003aec <HAL_RCC_ClockConfig+0x1f0>)
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003930:	f7fd fe04 	bl	800153c <HAL_GetTick>
 8003934:	0003      	movs	r3, r0
 8003936:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003938:	e009      	b.n	800394e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393a:	f7fd fdff 	bl	800153c <HAL_GetTick>
 800393e:	0002      	movs	r2, r0
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	4a6a      	ldr	r2, [pc, #424]	@ (8003af0 <HAL_RCC_ClockConfig+0x1f4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0ca      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800394e:	4b67      	ldr	r3, [pc, #412]	@ (8003aec <HAL_RCC_ClockConfig+0x1f0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2207      	movs	r2, #7
 8003954:	4013      	ands	r3, r2
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d1ee      	bne.n	800393a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2202      	movs	r2, #2
 8003962:	4013      	ands	r3, r2
 8003964:	d015      	beq.n	8003992 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2204      	movs	r2, #4
 800396c:	4013      	ands	r3, r2
 800396e:	d006      	beq.n	800397e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003970:	4b60      	ldr	r3, [pc, #384]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	4b5f      	ldr	r3, [pc, #380]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 8003976:	21e0      	movs	r1, #224	@ 0xe0
 8003978:	01c9      	lsls	r1, r1, #7
 800397a:	430a      	orrs	r2, r1
 800397c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800397e:	4b5d      	ldr	r3, [pc, #372]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	4a5d      	ldr	r2, [pc, #372]	@ (8003af8 <HAL_RCC_ClockConfig+0x1fc>)
 8003984:	4013      	ands	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	4b59      	ldr	r3, [pc, #356]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2201      	movs	r2, #1
 8003998:	4013      	ands	r3, r2
 800399a:	d057      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a4:	4b53      	ldr	r3, [pc, #332]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	@ 0x80
 80039aa:	029b      	lsls	r3, r3, #10
 80039ac:	4013      	ands	r3, r2
 80039ae:	d12b      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e097      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039bc:	4b4d      	ldr	r3, [pc, #308]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	049b      	lsls	r3, r3, #18
 80039c4:	4013      	ands	r3, r2
 80039c6:	d11f      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e08b      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d4:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	2380      	movs	r3, #128	@ 0x80
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4013      	ands	r3, r2
 80039de:	d113      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e07f      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ec:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 80039ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f0:	2202      	movs	r2, #2
 80039f2:	4013      	ands	r3, r2
 80039f4:	d108      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e074      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fa:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	2202      	movs	r2, #2
 8003a00:	4013      	ands	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e06d      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a08:	4b3a      	ldr	r3, [pc, #232]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2207      	movs	r2, #7
 8003a0e:	4393      	bics	r3, r2
 8003a10:	0019      	movs	r1, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fd8e 	bl	800153c <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a24:	e009      	b.n	8003a3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a26:	f7fd fd89 	bl	800153c <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	4a2f      	ldr	r2, [pc, #188]	@ (8003af0 <HAL_RCC_ClockConfig+0x1f4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e054      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2238      	movs	r2, #56	@ 0x38
 8003a40:	401a      	ands	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1ec      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b27      	ldr	r3, [pc, #156]	@ (8003aec <HAL_RCC_ClockConfig+0x1f0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2207      	movs	r2, #7
 8003a52:	4013      	ands	r3, r2
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d21e      	bcs.n	8003a98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b24      	ldr	r3, [pc, #144]	@ (8003aec <HAL_RCC_ClockConfig+0x1f0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2207      	movs	r2, #7
 8003a60:	4393      	bics	r3, r2
 8003a62:	0019      	movs	r1, r3
 8003a64:	4b21      	ldr	r3, [pc, #132]	@ (8003aec <HAL_RCC_ClockConfig+0x1f0>)
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a6c:	f7fd fd66 	bl	800153c <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a74:	e009      	b.n	8003a8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a76:	f7fd fd61 	bl	800153c <HAL_GetTick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	4a1b      	ldr	r2, [pc, #108]	@ (8003af0 <HAL_RCC_ClockConfig+0x1f4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e02c      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a8a:	4b18      	ldr	r3, [pc, #96]	@ (8003aec <HAL_RCC_ClockConfig+0x1f0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2207      	movs	r2, #7
 8003a90:	4013      	ands	r3, r2
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1ee      	bne.n	8003a76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa2:	4b14      	ldr	r3, [pc, #80]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	4a15      	ldr	r2, [pc, #84]	@ (8003afc <HAL_RCC_ClockConfig+0x200>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ab6:	f000 f829 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8003aba:	0001      	movs	r1, r0
 8003abc:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <HAL_RCC_ClockConfig+0x1f8>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b00 <HAL_RCC_ClockConfig+0x204>)
 8003ac8:	0092      	lsls	r2, r2, #2
 8003aca:	58d3      	ldr	r3, [r2, r3]
 8003acc:	221f      	movs	r2, #31
 8003ace:	4013      	ands	r3, r2
 8003ad0:	000a      	movs	r2, r1
 8003ad2:	40da      	lsrs	r2, r3
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_RCC_ClockConfig+0x208>)
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <HAL_RCC_ClockConfig+0x20c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7fd fcd1 	bl	8001484 <HAL_InitTick>
 8003ae2:	0003      	movs	r3, r0
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b004      	add	sp, #16
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40022000 	.word	0x40022000
 8003af0:	00001388 	.word	0x00001388
 8003af4:	40021000 	.word	0x40021000
 8003af8:	fffff0ff 	.word	0xfffff0ff
 8003afc:	ffff8fff 	.word	0xffff8fff
 8003b00:	08004914 	.word	0x08004914
 8003b04:	20000000 	.word	0x20000000
 8003b08:	20000004 	.word	0x20000004

08003b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b12:	4b3c      	ldr	r3, [pc, #240]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2238      	movs	r2, #56	@ 0x38
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d10f      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b1c:	4b39      	ldr	r3, [pc, #228]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0adb      	lsrs	r3, r3, #11
 8003b22:	2207      	movs	r2, #7
 8003b24:	4013      	ands	r3, r2
 8003b26:	2201      	movs	r2, #1
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b2e:	6839      	ldr	r1, [r7, #0]
 8003b30:	4835      	ldr	r0, [pc, #212]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b32:	f7fc faf1 	bl	8000118 <__udivsi3>
 8003b36:	0003      	movs	r3, r0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	e05d      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b3c:	4b31      	ldr	r3, [pc, #196]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2238      	movs	r2, #56	@ 0x38
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d102      	bne.n	8003b4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b48:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x100>)
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e054      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2238      	movs	r2, #56	@ 0x38
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d138      	bne.n	8003bcc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	4013      	ands	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b64:	4b27      	ldr	r3, [pc, #156]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	2207      	movs	r2, #7
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d10d      	bne.n	8003b94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4824      	ldr	r0, [pc, #144]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x100>)
 8003b7c:	f7fc facc 	bl	8000118 <__udivsi3>
 8003b80:	0003      	movs	r3, r0
 8003b82:	0019      	movs	r1, r3
 8003b84:	4b1f      	ldr	r3, [pc, #124]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	227f      	movs	r2, #127	@ 0x7f
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	434b      	muls	r3, r1
 8003b90:	617b      	str	r3, [r7, #20]
        break;
 8003b92:	e00d      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	481c      	ldr	r0, [pc, #112]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b98:	f7fc fabe 	bl	8000118 <__udivsi3>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	4b18      	ldr	r3, [pc, #96]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	227f      	movs	r2, #127	@ 0x7f
 8003ba8:	4013      	ands	r3, r2
 8003baa:	434b      	muls	r3, r1
 8003bac:	617b      	str	r3, [r7, #20]
        break;
 8003bae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003bb0:	4b14      	ldr	r3, [pc, #80]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	0f5b      	lsrs	r3, r3, #29
 8003bb6:	2207      	movs	r2, #7
 8003bb8:	4013      	ands	r3, r2
 8003bba:	3301      	adds	r3, #1
 8003bbc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	6978      	ldr	r0, [r7, #20]
 8003bc2:	f7fc faa9 	bl	8000118 <__udivsi3>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	e015      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2238      	movs	r2, #56	@ 0x38
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d103      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003be0:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2238      	movs	r2, #56	@ 0x38
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b18      	cmp	r3, #24
 8003bea:	d103      	bne.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003bec:	23fa      	movs	r3, #250	@ 0xfa
 8003bee:	01db      	lsls	r3, r3, #7
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	e001      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bf8:	693b      	ldr	r3, [r7, #16]
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b006      	add	sp, #24
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	40021000 	.word	0x40021000
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	007a1200 	.word	0x007a1200

08003c10 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8003c14:	201e      	movs	r0, #30
 8003c16:	f7fd fc9b 	bl	8001550 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8003c1a:	23a0      	movs	r3, #160	@ 0xa0
 8003c1c:	05db      	lsls	r3, r3, #23
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2104      	movs	r1, #4
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7ff faac 	bl	8003180 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8003c28:	23a0      	movs	r3, #160	@ 0xa0
 8003c2a:	05db      	lsls	r3, r3, #23
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	2108      	movs	r1, #8
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7ff faa5 	bl	8003180 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8003c36:	23a0      	movs	r3, #160	@ 0xa0
 8003c38:	05db      	lsls	r3, r3, #23
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2110      	movs	r1, #16
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff fa9e 	bl	8003180 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8003c44:	23a0      	movs	r3, #160	@ 0xa0
 8003c46:	05db      	lsls	r3, r3, #23
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2120      	movs	r1, #32
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f7ff fa97 	bl	8003180 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8003c52:	23a0      	movs	r3, #160	@ 0xa0
 8003c54:	05db      	lsls	r3, r3, #23
 8003c56:	2200      	movs	r2, #0
 8003c58:	2101      	movs	r1, #1
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7ff fa90 	bl	8003180 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8003c60:	23a0      	movs	r3, #160	@ 0xa0
 8003c62:	05db      	lsls	r3, r3, #23
 8003c64:	2201      	movs	r2, #1
 8003c66:	2102      	movs	r1, #2
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7ff fa89 	bl	8003180 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8003c6e:	23a0      	movs	r3, #160	@ 0xa0
 8003c70:	05db      	lsls	r3, r3, #23
 8003c72:	2200      	movs	r2, #0
 8003c74:	2102      	movs	r1, #2
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff fa82 	bl	8003180 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8003c7c:	2128      	movs	r1, #40	@ 0x28
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f000 f80f 	bl	8003ca2 <lcd_write>
	lcd_write(0,0x0c);
 8003c84:	210c      	movs	r1, #12
 8003c86:	2000      	movs	r0, #0
 8003c88:	f000 f80b 	bl	8003ca2 <lcd_write>
	lcd_write(0,0x06);
 8003c8c:	2106      	movs	r1, #6
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f000 f807 	bl	8003ca2 <lcd_write>
	lcd_write(0,0x01);
 8003c94:	2101      	movs	r1, #1
 8003c96:	2000      	movs	r0, #0
 8003c98:	f000 f803 	bl	8003ca2 <lcd_write>
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	0002      	movs	r2, r0
 8003caa:	1dfb      	adds	r3, r7, #7
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	1dbb      	adds	r3, r7, #6
 8003cb0:	1c0a      	adds	r2, r1, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8003cb4:	2002      	movs	r0, #2
 8003cb6:	f7fd fc4b 	bl	8001550 <HAL_Delay>
	if(type)
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8003cc2:	23a0      	movs	r3, #160	@ 0xa0
 8003cc4:	05db      	lsls	r3, r3, #23
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	2101      	movs	r1, #1
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7ff fa58 	bl	8003180 <HAL_GPIO_WritePin>
 8003cd0:	e006      	b.n	8003ce0 <lcd_write+0x3e>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8003cd2:	23a0      	movs	r3, #160	@ 0xa0
 8003cd4:	05db      	lsls	r3, r3, #23
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2101      	movs	r1, #1
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7ff fa50 	bl	8003180 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8003ce0:	1dbb      	adds	r3, r7, #6
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b25b      	sxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da07      	bge.n	8003cfa <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8003cea:	23a0      	movs	r3, #160	@ 0xa0
 8003cec:	05db      	lsls	r3, r3, #23
 8003cee:	2201      	movs	r2, #1
 8003cf0:	2120      	movs	r1, #32
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7ff fa44 	bl	8003180 <HAL_GPIO_WritePin>
 8003cf8:	e006      	b.n	8003d08 <lcd_write+0x66>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8003cfa:	23a0      	movs	r3, #160	@ 0xa0
 8003cfc:	05db      	lsls	r3, r3, #23
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2120      	movs	r1, #32
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7ff fa3c 	bl	8003180 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8003d08:	1dbb      	adds	r3, r7, #6
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2240      	movs	r2, #64	@ 0x40
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d007      	beq.n	8003d22 <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8003d12:	23a0      	movs	r3, #160	@ 0xa0
 8003d14:	05db      	lsls	r3, r3, #23
 8003d16:	2201      	movs	r2, #1
 8003d18:	2110      	movs	r1, #16
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7ff fa30 	bl	8003180 <HAL_GPIO_WritePin>
 8003d20:	e006      	b.n	8003d30 <lcd_write+0x8e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8003d22:	23a0      	movs	r3, #160	@ 0xa0
 8003d24:	05db      	lsls	r3, r3, #23
 8003d26:	2200      	movs	r2, #0
 8003d28:	2110      	movs	r1, #16
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff fa28 	bl	8003180 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8003d30:	1dbb      	adds	r3, r7, #6
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2220      	movs	r2, #32
 8003d36:	4013      	ands	r3, r2
 8003d38:	d007      	beq.n	8003d4a <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8003d3a:	23a0      	movs	r3, #160	@ 0xa0
 8003d3c:	05db      	lsls	r3, r3, #23
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2108      	movs	r1, #8
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7ff fa1c 	bl	8003180 <HAL_GPIO_WritePin>
 8003d48:	e006      	b.n	8003d58 <lcd_write+0xb6>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8003d4a:	23a0      	movs	r3, #160	@ 0xa0
 8003d4c:	05db      	lsls	r3, r3, #23
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2108      	movs	r1, #8
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7ff fa14 	bl	8003180 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8003d58:	1dbb      	adds	r3, r7, #6
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d007      	beq.n	8003d72 <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8003d62:	23a0      	movs	r3, #160	@ 0xa0
 8003d64:	05db      	lsls	r3, r3, #23
 8003d66:	2201      	movs	r2, #1
 8003d68:	2104      	movs	r1, #4
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff fa08 	bl	8003180 <HAL_GPIO_WritePin>
 8003d70:	e006      	b.n	8003d80 <lcd_write+0xde>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8003d72:	23a0      	movs	r3, #160	@ 0xa0
 8003d74:	05db      	lsls	r3, r3, #23
 8003d76:	2200      	movs	r2, #0
 8003d78:	2104      	movs	r1, #4
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fa00 	bl	8003180 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8003d80:	23a0      	movs	r3, #160	@ 0xa0
 8003d82:	05db      	lsls	r3, r3, #23
 8003d84:	2201      	movs	r2, #1
 8003d86:	2102      	movs	r1, #2
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7ff f9f9 	bl	8003180 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8003d8e:	23a0      	movs	r3, #160	@ 0xa0
 8003d90:	05db      	lsls	r3, r3, #23
 8003d92:	2200      	movs	r2, #0
 8003d94:	2102      	movs	r1, #2
 8003d96:	0018      	movs	r0, r3
 8003d98:	f7ff f9f2 	bl	8003180 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 8003d9c:	1dbb      	adds	r3, r7, #6
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2208      	movs	r2, #8
 8003da2:	4013      	ands	r3, r2
 8003da4:	d007      	beq.n	8003db6 <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8003da6:	23a0      	movs	r3, #160	@ 0xa0
 8003da8:	05db      	lsls	r3, r3, #23
 8003daa:	2201      	movs	r2, #1
 8003dac:	2120      	movs	r1, #32
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7ff f9e6 	bl	8003180 <HAL_GPIO_WritePin>
 8003db4:	e006      	b.n	8003dc4 <lcd_write+0x122>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8003db6:	23a0      	movs	r3, #160	@ 0xa0
 8003db8:	05db      	lsls	r3, r3, #23
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7ff f9de 	bl	8003180 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 8003dc4:	1dbb      	adds	r3, r7, #6
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d007      	beq.n	8003dde <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8003dce:	23a0      	movs	r3, #160	@ 0xa0
 8003dd0:	05db      	lsls	r3, r3, #23
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	2110      	movs	r1, #16
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7ff f9d2 	bl	8003180 <HAL_GPIO_WritePin>
 8003ddc:	e006      	b.n	8003dec <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8003dde:	23a0      	movs	r3, #160	@ 0xa0
 8003de0:	05db      	lsls	r3, r3, #23
 8003de2:	2200      	movs	r2, #0
 8003de4:	2110      	movs	r1, #16
 8003de6:	0018      	movs	r0, r3
 8003de8:	f7ff f9ca 	bl	8003180 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8003dec:	1dbb      	adds	r3, r7, #6
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2202      	movs	r2, #2
 8003df2:	4013      	ands	r3, r2
 8003df4:	d007      	beq.n	8003e06 <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8003df6:	23a0      	movs	r3, #160	@ 0xa0
 8003df8:	05db      	lsls	r3, r3, #23
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2108      	movs	r1, #8
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff f9be 	bl	8003180 <HAL_GPIO_WritePin>
 8003e04:	e006      	b.n	8003e14 <lcd_write+0x172>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8003e06:	23a0      	movs	r3, #160	@ 0xa0
 8003e08:	05db      	lsls	r3, r3, #23
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2108      	movs	r1, #8
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7ff f9b6 	bl	8003180 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8003e14:	1dbb      	adds	r3, r7, #6
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8003e1e:	23a0      	movs	r3, #160	@ 0xa0
 8003e20:	05db      	lsls	r3, r3, #23
 8003e22:	2201      	movs	r2, #1
 8003e24:	2104      	movs	r1, #4
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7ff f9aa 	bl	8003180 <HAL_GPIO_WritePin>
 8003e2c:	e006      	b.n	8003e3c <lcd_write+0x19a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8003e2e:	23a0      	movs	r3, #160	@ 0xa0
 8003e30:	05db      	lsls	r3, r3, #23
 8003e32:	2200      	movs	r2, #0
 8003e34:	2104      	movs	r1, #4
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7ff f9a2 	bl	8003180 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8003e3c:	23a0      	movs	r3, #160	@ 0xa0
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	2201      	movs	r2, #1
 8003e42:	2102      	movs	r1, #2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff f99b 	bl	8003180 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8003e4a:	23a0      	movs	r3, #160	@ 0xa0
 8003e4c:	05db      	lsls	r3, r3, #23
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2102      	movs	r1, #2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f7ff f994 	bl	8003180 <HAL_GPIO_WritePin>
}
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, char *string)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	603a      	str	r2, [r7, #0]
 8003e68:	1dfb      	adds	r3, r7, #7
 8003e6a:	1c02      	adds	r2, r0, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	1dbb      	adds	r3, r7, #6
 8003e70:	1c0a      	adds	r2, r1, #0
 8003e72:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8003e74:	1dfb      	adds	r3, r7, #7
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d023      	beq.n	8003ec4 <lcd_puts+0x64>
 8003e7c:	dc35      	bgt.n	8003eea <lcd_puts+0x8a>
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d017      	beq.n	8003eb2 <lcd_puts+0x52>
 8003e82:	dc32      	bgt.n	8003eea <lcd_puts+0x8a>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <lcd_puts+0x2e>
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d009      	beq.n	8003ea0 <lcd_puts+0x40>
 8003e8c:	e023      	b.n	8003ed6 <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8003e8e:	1dbb      	adds	r3, r7, #6
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	3b80      	subs	r3, #128	@ 0x80
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	0019      	movs	r1, r3
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7ff ff02 	bl	8003ca2 <lcd_write>
			break;
 8003e9e:	e01a      	b.n	8003ed6 <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8003ea0:	1dbb      	adds	r3, r7, #6
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	3b40      	subs	r3, #64	@ 0x40
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	0019      	movs	r1, r3
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f7ff fef9 	bl	8003ca2 <lcd_write>
			break;
 8003eb0:	e011      	b.n	8003ed6 <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8003eb2:	1dbb      	adds	r3, r7, #6
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	3b70      	subs	r3, #112	@ 0x70
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	0019      	movs	r1, r3
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7ff fef0 	bl	8003ca2 <lcd_write>
			break;
 8003ec2:	e008      	b.n	8003ed6 <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8003ec4:	1dbb      	adds	r3, r7, #6
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	3b30      	subs	r3, #48	@ 0x30
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	0019      	movs	r1, r3
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f7ff fee7 	bl	8003ca2 <lcd_write>
			break;
 8003ed4:	46c0      	nop			@ (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8003ed6:	e008      	b.n	8003eea <lcd_puts+0x8a>
	{
		lcd_write(1,*string);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	0019      	movs	r1, r3
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f7ff fedf 	bl	8003ca2 <lcd_write>
		string++;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	603b      	str	r3, [r7, #0]
	while(*string)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f2      	bne.n	8003ed8 <lcd_puts+0x78>
	}
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	46c0      	nop			@ (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}

08003efc <lcd_clear>:
void lcd_clear(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8003f00:	2101      	movs	r1, #1
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7ff fecd 	bl	8003ca2 <lcd_write>
}
 8003f08:	46c0      	nop			@ (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <siprintf>:
 8003f10:	b40e      	push	{r1, r2, r3}
 8003f12:	b500      	push	{lr}
 8003f14:	490b      	ldr	r1, [pc, #44]	@ (8003f44 <siprintf+0x34>)
 8003f16:	b09c      	sub	sp, #112	@ 0x70
 8003f18:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f1a:	9002      	str	r0, [sp, #8]
 8003f1c:	9006      	str	r0, [sp, #24]
 8003f1e:	9107      	str	r1, [sp, #28]
 8003f20:	9104      	str	r1, [sp, #16]
 8003f22:	4809      	ldr	r0, [pc, #36]	@ (8003f48 <siprintf+0x38>)
 8003f24:	4909      	ldr	r1, [pc, #36]	@ (8003f4c <siprintf+0x3c>)
 8003f26:	cb04      	ldmia	r3!, {r2}
 8003f28:	9105      	str	r1, [sp, #20]
 8003f2a:	6800      	ldr	r0, [r0, #0]
 8003f2c:	a902      	add	r1, sp, #8
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	f000 f99e 	bl	8004270 <_svfiprintf_r>
 8003f34:	2200      	movs	r2, #0
 8003f36:	9b02      	ldr	r3, [sp, #8]
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	b01c      	add	sp, #112	@ 0x70
 8003f3c:	bc08      	pop	{r3}
 8003f3e:	b003      	add	sp, #12
 8003f40:	4718      	bx	r3
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	7fffffff 	.word	0x7fffffff
 8003f48:	2000000c 	.word	0x2000000c
 8003f4c:	ffff0208 	.word	0xffff0208

08003f50 <memset>:
 8003f50:	0003      	movs	r3, r0
 8003f52:	1882      	adds	r2, r0, r2
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d100      	bne.n	8003f5a <memset+0xa>
 8003f58:	4770      	bx	lr
 8003f5a:	7019      	strb	r1, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	e7f9      	b.n	8003f54 <memset+0x4>

08003f60 <__errno>:
 8003f60:	4b01      	ldr	r3, [pc, #4]	@ (8003f68 <__errno+0x8>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	4770      	bx	lr
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	2000000c 	.word	0x2000000c

08003f6c <__libc_init_array>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	2600      	movs	r6, #0
 8003f70:	4c0c      	ldr	r4, [pc, #48]	@ (8003fa4 <__libc_init_array+0x38>)
 8003f72:	4d0d      	ldr	r5, [pc, #52]	@ (8003fa8 <__libc_init_array+0x3c>)
 8003f74:	1b64      	subs	r4, r4, r5
 8003f76:	10a4      	asrs	r4, r4, #2
 8003f78:	42a6      	cmp	r6, r4
 8003f7a:	d109      	bne.n	8003f90 <__libc_init_array+0x24>
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	f000 fc65 	bl	800484c <_init>
 8003f82:	4c0a      	ldr	r4, [pc, #40]	@ (8003fac <__libc_init_array+0x40>)
 8003f84:	4d0a      	ldr	r5, [pc, #40]	@ (8003fb0 <__libc_init_array+0x44>)
 8003f86:	1b64      	subs	r4, r4, r5
 8003f88:	10a4      	asrs	r4, r4, #2
 8003f8a:	42a6      	cmp	r6, r4
 8003f8c:	d105      	bne.n	8003f9a <__libc_init_array+0x2e>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	00b3      	lsls	r3, r6, #2
 8003f92:	58eb      	ldr	r3, [r5, r3]
 8003f94:	4798      	blx	r3
 8003f96:	3601      	adds	r6, #1
 8003f98:	e7ee      	b.n	8003f78 <__libc_init_array+0xc>
 8003f9a:	00b3      	lsls	r3, r6, #2
 8003f9c:	58eb      	ldr	r3, [r5, r3]
 8003f9e:	4798      	blx	r3
 8003fa0:	3601      	adds	r6, #1
 8003fa2:	e7f2      	b.n	8003f8a <__libc_init_array+0x1e>
 8003fa4:	08004988 	.word	0x08004988
 8003fa8:	08004988 	.word	0x08004988
 8003fac:	0800498c 	.word	0x0800498c
 8003fb0:	08004988 	.word	0x08004988

08003fb4 <__retarget_lock_acquire_recursive>:
 8003fb4:	4770      	bx	lr

08003fb6 <__retarget_lock_release_recursive>:
 8003fb6:	4770      	bx	lr

08003fb8 <_free_r>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	0005      	movs	r5, r0
 8003fbc:	1e0c      	subs	r4, r1, #0
 8003fbe:	d010      	beq.n	8003fe2 <_free_r+0x2a>
 8003fc0:	3c04      	subs	r4, #4
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	da00      	bge.n	8003fca <_free_r+0x12>
 8003fc8:	18e4      	adds	r4, r4, r3
 8003fca:	0028      	movs	r0, r5
 8003fcc:	f000 f8e0 	bl	8004190 <__malloc_lock>
 8003fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004048 <_free_r+0x90>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <_free_r+0x2c>
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	6014      	str	r4, [r2, #0]
 8003fdc:	0028      	movs	r0, r5
 8003fde:	f000 f8df 	bl	80041a0 <__malloc_unlock>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	42a3      	cmp	r3, r4
 8003fe6:	d908      	bls.n	8003ffa <_free_r+0x42>
 8003fe8:	6820      	ldr	r0, [r4, #0]
 8003fea:	1821      	adds	r1, r4, r0
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d1f3      	bne.n	8003fd8 <_free_r+0x20>
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	1809      	adds	r1, r1, r0
 8003ff6:	6021      	str	r1, [r4, #0]
 8003ff8:	e7ee      	b.n	8003fd8 <_free_r+0x20>
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <_free_r+0x4e>
 8004002:	42a3      	cmp	r3, r4
 8004004:	d9f9      	bls.n	8003ffa <_free_r+0x42>
 8004006:	6811      	ldr	r1, [r2, #0]
 8004008:	1850      	adds	r0, r2, r1
 800400a:	42a0      	cmp	r0, r4
 800400c:	d10b      	bne.n	8004026 <_free_r+0x6e>
 800400e:	6820      	ldr	r0, [r4, #0]
 8004010:	1809      	adds	r1, r1, r0
 8004012:	1850      	adds	r0, r2, r1
 8004014:	6011      	str	r1, [r2, #0]
 8004016:	4283      	cmp	r3, r0
 8004018:	d1e0      	bne.n	8003fdc <_free_r+0x24>
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	1841      	adds	r1, r0, r1
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	6053      	str	r3, [r2, #4]
 8004024:	e7da      	b.n	8003fdc <_free_r+0x24>
 8004026:	42a0      	cmp	r0, r4
 8004028:	d902      	bls.n	8004030 <_free_r+0x78>
 800402a:	230c      	movs	r3, #12
 800402c:	602b      	str	r3, [r5, #0]
 800402e:	e7d5      	b.n	8003fdc <_free_r+0x24>
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	1821      	adds	r1, r4, r0
 8004034:	428b      	cmp	r3, r1
 8004036:	d103      	bne.n	8004040 <_free_r+0x88>
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	1809      	adds	r1, r1, r0
 800403e:	6021      	str	r1, [r4, #0]
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	6054      	str	r4, [r2, #4]
 8004044:	e7ca      	b.n	8003fdc <_free_r+0x24>
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	200002ac 	.word	0x200002ac

0800404c <sbrk_aligned>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4e0f      	ldr	r6, [pc, #60]	@ (800408c <sbrk_aligned+0x40>)
 8004050:	000d      	movs	r5, r1
 8004052:	6831      	ldr	r1, [r6, #0]
 8004054:	0004      	movs	r4, r0
 8004056:	2900      	cmp	r1, #0
 8004058:	d102      	bne.n	8004060 <sbrk_aligned+0x14>
 800405a:	f000 fb99 	bl	8004790 <_sbrk_r>
 800405e:	6030      	str	r0, [r6, #0]
 8004060:	0029      	movs	r1, r5
 8004062:	0020      	movs	r0, r4
 8004064:	f000 fb94 	bl	8004790 <_sbrk_r>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d103      	bne.n	8004074 <sbrk_aligned+0x28>
 800406c:	2501      	movs	r5, #1
 800406e:	426d      	negs	r5, r5
 8004070:	0028      	movs	r0, r5
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	2303      	movs	r3, #3
 8004076:	1cc5      	adds	r5, r0, #3
 8004078:	439d      	bics	r5, r3
 800407a:	42a8      	cmp	r0, r5
 800407c:	d0f8      	beq.n	8004070 <sbrk_aligned+0x24>
 800407e:	1a29      	subs	r1, r5, r0
 8004080:	0020      	movs	r0, r4
 8004082:	f000 fb85 	bl	8004790 <_sbrk_r>
 8004086:	3001      	adds	r0, #1
 8004088:	d1f2      	bne.n	8004070 <sbrk_aligned+0x24>
 800408a:	e7ef      	b.n	800406c <sbrk_aligned+0x20>
 800408c:	200002a8 	.word	0x200002a8

08004090 <_malloc_r>:
 8004090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004092:	2203      	movs	r2, #3
 8004094:	1ccb      	adds	r3, r1, #3
 8004096:	4393      	bics	r3, r2
 8004098:	3308      	adds	r3, #8
 800409a:	0005      	movs	r5, r0
 800409c:	001f      	movs	r7, r3
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	d234      	bcs.n	800410c <_malloc_r+0x7c>
 80040a2:	270c      	movs	r7, #12
 80040a4:	42b9      	cmp	r1, r7
 80040a6:	d833      	bhi.n	8004110 <_malloc_r+0x80>
 80040a8:	0028      	movs	r0, r5
 80040aa:	f000 f871 	bl	8004190 <__malloc_lock>
 80040ae:	4e37      	ldr	r6, [pc, #220]	@ (800418c <_malloc_r+0xfc>)
 80040b0:	6833      	ldr	r3, [r6, #0]
 80040b2:	001c      	movs	r4, r3
 80040b4:	2c00      	cmp	r4, #0
 80040b6:	d12f      	bne.n	8004118 <_malloc_r+0x88>
 80040b8:	0039      	movs	r1, r7
 80040ba:	0028      	movs	r0, r5
 80040bc:	f7ff ffc6 	bl	800404c <sbrk_aligned>
 80040c0:	0004      	movs	r4, r0
 80040c2:	1c43      	adds	r3, r0, #1
 80040c4:	d15f      	bne.n	8004186 <_malloc_r+0xf6>
 80040c6:	6834      	ldr	r4, [r6, #0]
 80040c8:	9400      	str	r4, [sp, #0]
 80040ca:	9b00      	ldr	r3, [sp, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d14a      	bne.n	8004166 <_malloc_r+0xd6>
 80040d0:	2c00      	cmp	r4, #0
 80040d2:	d052      	beq.n	800417a <_malloc_r+0xea>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	0028      	movs	r0, r5
 80040d8:	18e3      	adds	r3, r4, r3
 80040da:	9900      	ldr	r1, [sp, #0]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	f000 fb57 	bl	8004790 <_sbrk_r>
 80040e2:	9b01      	ldr	r3, [sp, #4]
 80040e4:	4283      	cmp	r3, r0
 80040e6:	d148      	bne.n	800417a <_malloc_r+0xea>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	0028      	movs	r0, r5
 80040ec:	1aff      	subs	r7, r7, r3
 80040ee:	0039      	movs	r1, r7
 80040f0:	f7ff ffac 	bl	800404c <sbrk_aligned>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d040      	beq.n	800417a <_malloc_r+0xea>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	6833      	ldr	r3, [r6, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	2a00      	cmp	r2, #0
 8004104:	d133      	bne.n	800416e <_malloc_r+0xde>
 8004106:	9b00      	ldr	r3, [sp, #0]
 8004108:	6033      	str	r3, [r6, #0]
 800410a:	e019      	b.n	8004140 <_malloc_r+0xb0>
 800410c:	2b00      	cmp	r3, #0
 800410e:	dac9      	bge.n	80040a4 <_malloc_r+0x14>
 8004110:	230c      	movs	r3, #12
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	2000      	movs	r0, #0
 8004116:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004118:	6821      	ldr	r1, [r4, #0]
 800411a:	1bc9      	subs	r1, r1, r7
 800411c:	d420      	bmi.n	8004160 <_malloc_r+0xd0>
 800411e:	290b      	cmp	r1, #11
 8004120:	d90a      	bls.n	8004138 <_malloc_r+0xa8>
 8004122:	19e2      	adds	r2, r4, r7
 8004124:	6027      	str	r7, [r4, #0]
 8004126:	42a3      	cmp	r3, r4
 8004128:	d104      	bne.n	8004134 <_malloc_r+0xa4>
 800412a:	6032      	str	r2, [r6, #0]
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	6011      	str	r1, [r2, #0]
 8004130:	6053      	str	r3, [r2, #4]
 8004132:	e005      	b.n	8004140 <_malloc_r+0xb0>
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	e7f9      	b.n	800412c <_malloc_r+0x9c>
 8004138:	6862      	ldr	r2, [r4, #4]
 800413a:	42a3      	cmp	r3, r4
 800413c:	d10e      	bne.n	800415c <_malloc_r+0xcc>
 800413e:	6032      	str	r2, [r6, #0]
 8004140:	0028      	movs	r0, r5
 8004142:	f000 f82d 	bl	80041a0 <__malloc_unlock>
 8004146:	0020      	movs	r0, r4
 8004148:	2207      	movs	r2, #7
 800414a:	300b      	adds	r0, #11
 800414c:	1d23      	adds	r3, r4, #4
 800414e:	4390      	bics	r0, r2
 8004150:	1ac2      	subs	r2, r0, r3
 8004152:	4298      	cmp	r0, r3
 8004154:	d0df      	beq.n	8004116 <_malloc_r+0x86>
 8004156:	1a1b      	subs	r3, r3, r0
 8004158:	50a3      	str	r3, [r4, r2]
 800415a:	e7dc      	b.n	8004116 <_malloc_r+0x86>
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	e7ef      	b.n	8004140 <_malloc_r+0xb0>
 8004160:	0023      	movs	r3, r4
 8004162:	6864      	ldr	r4, [r4, #4]
 8004164:	e7a6      	b.n	80040b4 <_malloc_r+0x24>
 8004166:	9c00      	ldr	r4, [sp, #0]
 8004168:	6863      	ldr	r3, [r4, #4]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	e7ad      	b.n	80040ca <_malloc_r+0x3a>
 800416e:	001a      	movs	r2, r3
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	42a3      	cmp	r3, r4
 8004174:	d1fb      	bne.n	800416e <_malloc_r+0xde>
 8004176:	2300      	movs	r3, #0
 8004178:	e7da      	b.n	8004130 <_malloc_r+0xa0>
 800417a:	230c      	movs	r3, #12
 800417c:	0028      	movs	r0, r5
 800417e:	602b      	str	r3, [r5, #0]
 8004180:	f000 f80e 	bl	80041a0 <__malloc_unlock>
 8004184:	e7c6      	b.n	8004114 <_malloc_r+0x84>
 8004186:	6007      	str	r7, [r0, #0]
 8004188:	e7da      	b.n	8004140 <_malloc_r+0xb0>
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	200002ac 	.word	0x200002ac

08004190 <__malloc_lock>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4802      	ldr	r0, [pc, #8]	@ (800419c <__malloc_lock+0xc>)
 8004194:	f7ff ff0e 	bl	8003fb4 <__retarget_lock_acquire_recursive>
 8004198:	bd10      	pop	{r4, pc}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	200002a4 	.word	0x200002a4

080041a0 <__malloc_unlock>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4802      	ldr	r0, [pc, #8]	@ (80041ac <__malloc_unlock+0xc>)
 80041a4:	f7ff ff07 	bl	8003fb6 <__retarget_lock_release_recursive>
 80041a8:	bd10      	pop	{r4, pc}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	200002a4 	.word	0x200002a4

080041b0 <__ssputs_r>:
 80041b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b2:	688e      	ldr	r6, [r1, #8]
 80041b4:	b085      	sub	sp, #20
 80041b6:	001f      	movs	r7, r3
 80041b8:	000c      	movs	r4, r1
 80041ba:	680b      	ldr	r3, [r1, #0]
 80041bc:	9002      	str	r0, [sp, #8]
 80041be:	9203      	str	r2, [sp, #12]
 80041c0:	42be      	cmp	r6, r7
 80041c2:	d830      	bhi.n	8004226 <__ssputs_r+0x76>
 80041c4:	210c      	movs	r1, #12
 80041c6:	5e62      	ldrsh	r2, [r4, r1]
 80041c8:	2190      	movs	r1, #144	@ 0x90
 80041ca:	00c9      	lsls	r1, r1, #3
 80041cc:	420a      	tst	r2, r1
 80041ce:	d028      	beq.n	8004222 <__ssputs_r+0x72>
 80041d0:	2003      	movs	r0, #3
 80041d2:	6921      	ldr	r1, [r4, #16]
 80041d4:	1a5b      	subs	r3, r3, r1
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	6963      	ldr	r3, [r4, #20]
 80041da:	4343      	muls	r3, r0
 80041dc:	9801      	ldr	r0, [sp, #4]
 80041de:	0fdd      	lsrs	r5, r3, #31
 80041e0:	18ed      	adds	r5, r5, r3
 80041e2:	1c7b      	adds	r3, r7, #1
 80041e4:	181b      	adds	r3, r3, r0
 80041e6:	106d      	asrs	r5, r5, #1
 80041e8:	42ab      	cmp	r3, r5
 80041ea:	d900      	bls.n	80041ee <__ssputs_r+0x3e>
 80041ec:	001d      	movs	r5, r3
 80041ee:	0552      	lsls	r2, r2, #21
 80041f0:	d528      	bpl.n	8004244 <__ssputs_r+0x94>
 80041f2:	0029      	movs	r1, r5
 80041f4:	9802      	ldr	r0, [sp, #8]
 80041f6:	f7ff ff4b 	bl	8004090 <_malloc_r>
 80041fa:	1e06      	subs	r6, r0, #0
 80041fc:	d02c      	beq.n	8004258 <__ssputs_r+0xa8>
 80041fe:	9a01      	ldr	r2, [sp, #4]
 8004200:	6921      	ldr	r1, [r4, #16]
 8004202:	f000 fae2 	bl	80047ca <memcpy>
 8004206:	89a2      	ldrh	r2, [r4, #12]
 8004208:	4b18      	ldr	r3, [pc, #96]	@ (800426c <__ssputs_r+0xbc>)
 800420a:	401a      	ands	r2, r3
 800420c:	2380      	movs	r3, #128	@ 0x80
 800420e:	4313      	orrs	r3, r2
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	9b01      	ldr	r3, [sp, #4]
 8004214:	6126      	str	r6, [r4, #16]
 8004216:	18f6      	adds	r6, r6, r3
 8004218:	6026      	str	r6, [r4, #0]
 800421a:	003e      	movs	r6, r7
 800421c:	6165      	str	r5, [r4, #20]
 800421e:	1aed      	subs	r5, r5, r3
 8004220:	60a5      	str	r5, [r4, #8]
 8004222:	42be      	cmp	r6, r7
 8004224:	d900      	bls.n	8004228 <__ssputs_r+0x78>
 8004226:	003e      	movs	r6, r7
 8004228:	0032      	movs	r2, r6
 800422a:	9903      	ldr	r1, [sp, #12]
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	f000 fa9b 	bl	8004768 <memmove>
 8004232:	2000      	movs	r0, #0
 8004234:	68a3      	ldr	r3, [r4, #8]
 8004236:	1b9b      	subs	r3, r3, r6
 8004238:	60a3      	str	r3, [r4, #8]
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	199b      	adds	r3, r3, r6
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	b005      	add	sp, #20
 8004242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004244:	002a      	movs	r2, r5
 8004246:	9802      	ldr	r0, [sp, #8]
 8004248:	f000 fac8 	bl	80047dc <_realloc_r>
 800424c:	1e06      	subs	r6, r0, #0
 800424e:	d1e0      	bne.n	8004212 <__ssputs_r+0x62>
 8004250:	6921      	ldr	r1, [r4, #16]
 8004252:	9802      	ldr	r0, [sp, #8]
 8004254:	f7ff feb0 	bl	8003fb8 <_free_r>
 8004258:	230c      	movs	r3, #12
 800425a:	2001      	movs	r0, #1
 800425c:	9a02      	ldr	r2, [sp, #8]
 800425e:	4240      	negs	r0, r0
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	89a2      	ldrh	r2, [r4, #12]
 8004264:	3334      	adds	r3, #52	@ 0x34
 8004266:	4313      	orrs	r3, r2
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	e7e9      	b.n	8004240 <__ssputs_r+0x90>
 800426c:	fffffb7f 	.word	0xfffffb7f

08004270 <_svfiprintf_r>:
 8004270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004272:	b0a1      	sub	sp, #132	@ 0x84
 8004274:	9003      	str	r0, [sp, #12]
 8004276:	001d      	movs	r5, r3
 8004278:	898b      	ldrh	r3, [r1, #12]
 800427a:	000f      	movs	r7, r1
 800427c:	0016      	movs	r6, r2
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	d511      	bpl.n	80042a6 <_svfiprintf_r+0x36>
 8004282:	690b      	ldr	r3, [r1, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10e      	bne.n	80042a6 <_svfiprintf_r+0x36>
 8004288:	2140      	movs	r1, #64	@ 0x40
 800428a:	f7ff ff01 	bl	8004090 <_malloc_r>
 800428e:	6038      	str	r0, [r7, #0]
 8004290:	6138      	str	r0, [r7, #16]
 8004292:	2800      	cmp	r0, #0
 8004294:	d105      	bne.n	80042a2 <_svfiprintf_r+0x32>
 8004296:	230c      	movs	r3, #12
 8004298:	9a03      	ldr	r2, [sp, #12]
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	2001      	movs	r0, #1
 800429e:	4240      	negs	r0, r0
 80042a0:	e0cf      	b.n	8004442 <_svfiprintf_r+0x1d2>
 80042a2:	2340      	movs	r3, #64	@ 0x40
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	2300      	movs	r3, #0
 80042a8:	ac08      	add	r4, sp, #32
 80042aa:	6163      	str	r3, [r4, #20]
 80042ac:	3320      	adds	r3, #32
 80042ae:	7663      	strb	r3, [r4, #25]
 80042b0:	3310      	adds	r3, #16
 80042b2:	76a3      	strb	r3, [r4, #26]
 80042b4:	9507      	str	r5, [sp, #28]
 80042b6:	0035      	movs	r5, r6
 80042b8:	782b      	ldrb	r3, [r5, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <_svfiprintf_r+0x52>
 80042be:	2b25      	cmp	r3, #37	@ 0x25
 80042c0:	d148      	bne.n	8004354 <_svfiprintf_r+0xe4>
 80042c2:	1bab      	subs	r3, r5, r6
 80042c4:	9305      	str	r3, [sp, #20]
 80042c6:	42b5      	cmp	r5, r6
 80042c8:	d00b      	beq.n	80042e2 <_svfiprintf_r+0x72>
 80042ca:	0032      	movs	r2, r6
 80042cc:	0039      	movs	r1, r7
 80042ce:	9803      	ldr	r0, [sp, #12]
 80042d0:	f7ff ff6e 	bl	80041b0 <__ssputs_r>
 80042d4:	3001      	adds	r0, #1
 80042d6:	d100      	bne.n	80042da <_svfiprintf_r+0x6a>
 80042d8:	e0ae      	b.n	8004438 <_svfiprintf_r+0x1c8>
 80042da:	6963      	ldr	r3, [r4, #20]
 80042dc:	9a05      	ldr	r2, [sp, #20]
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	6163      	str	r3, [r4, #20]
 80042e2:	782b      	ldrb	r3, [r5, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d100      	bne.n	80042ea <_svfiprintf_r+0x7a>
 80042e8:	e0a6      	b.n	8004438 <_svfiprintf_r+0x1c8>
 80042ea:	2201      	movs	r2, #1
 80042ec:	2300      	movs	r3, #0
 80042ee:	4252      	negs	r2, r2
 80042f0:	6062      	str	r2, [r4, #4]
 80042f2:	a904      	add	r1, sp, #16
 80042f4:	3254      	adds	r2, #84	@ 0x54
 80042f6:	1852      	adds	r2, r2, r1
 80042f8:	1c6e      	adds	r6, r5, #1
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	60e3      	str	r3, [r4, #12]
 80042fe:	60a3      	str	r3, [r4, #8]
 8004300:	7013      	strb	r3, [r2, #0]
 8004302:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004304:	4b54      	ldr	r3, [pc, #336]	@ (8004458 <_svfiprintf_r+0x1e8>)
 8004306:	2205      	movs	r2, #5
 8004308:	0018      	movs	r0, r3
 800430a:	7831      	ldrb	r1, [r6, #0]
 800430c:	9305      	str	r3, [sp, #20]
 800430e:	f000 fa51 	bl	80047b4 <memchr>
 8004312:	1c75      	adds	r5, r6, #1
 8004314:	2800      	cmp	r0, #0
 8004316:	d11f      	bne.n	8004358 <_svfiprintf_r+0xe8>
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	06d3      	lsls	r3, r2, #27
 800431c:	d504      	bpl.n	8004328 <_svfiprintf_r+0xb8>
 800431e:	2353      	movs	r3, #83	@ 0x53
 8004320:	a904      	add	r1, sp, #16
 8004322:	185b      	adds	r3, r3, r1
 8004324:	2120      	movs	r1, #32
 8004326:	7019      	strb	r1, [r3, #0]
 8004328:	0713      	lsls	r3, r2, #28
 800432a:	d504      	bpl.n	8004336 <_svfiprintf_r+0xc6>
 800432c:	2353      	movs	r3, #83	@ 0x53
 800432e:	a904      	add	r1, sp, #16
 8004330:	185b      	adds	r3, r3, r1
 8004332:	212b      	movs	r1, #43	@ 0x2b
 8004334:	7019      	strb	r1, [r3, #0]
 8004336:	7833      	ldrb	r3, [r6, #0]
 8004338:	2b2a      	cmp	r3, #42	@ 0x2a
 800433a:	d016      	beq.n	800436a <_svfiprintf_r+0xfa>
 800433c:	0035      	movs	r5, r6
 800433e:	2100      	movs	r1, #0
 8004340:	200a      	movs	r0, #10
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	782a      	ldrb	r2, [r5, #0]
 8004346:	1c6e      	adds	r6, r5, #1
 8004348:	3a30      	subs	r2, #48	@ 0x30
 800434a:	2a09      	cmp	r2, #9
 800434c:	d950      	bls.n	80043f0 <_svfiprintf_r+0x180>
 800434e:	2900      	cmp	r1, #0
 8004350:	d111      	bne.n	8004376 <_svfiprintf_r+0x106>
 8004352:	e017      	b.n	8004384 <_svfiprintf_r+0x114>
 8004354:	3501      	adds	r5, #1
 8004356:	e7af      	b.n	80042b8 <_svfiprintf_r+0x48>
 8004358:	9b05      	ldr	r3, [sp, #20]
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	1ac0      	subs	r0, r0, r3
 800435e:	2301      	movs	r3, #1
 8004360:	4083      	lsls	r3, r0
 8004362:	4313      	orrs	r3, r2
 8004364:	002e      	movs	r6, r5
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	e7cc      	b.n	8004304 <_svfiprintf_r+0x94>
 800436a:	9b07      	ldr	r3, [sp, #28]
 800436c:	1d19      	adds	r1, r3, #4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	9107      	str	r1, [sp, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db01      	blt.n	800437a <_svfiprintf_r+0x10a>
 8004376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004378:	e004      	b.n	8004384 <_svfiprintf_r+0x114>
 800437a:	425b      	negs	r3, r3
 800437c:	60e3      	str	r3, [r4, #12]
 800437e:	2302      	movs	r3, #2
 8004380:	4313      	orrs	r3, r2
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	782b      	ldrb	r3, [r5, #0]
 8004386:	2b2e      	cmp	r3, #46	@ 0x2e
 8004388:	d10c      	bne.n	80043a4 <_svfiprintf_r+0x134>
 800438a:	786b      	ldrb	r3, [r5, #1]
 800438c:	2b2a      	cmp	r3, #42	@ 0x2a
 800438e:	d134      	bne.n	80043fa <_svfiprintf_r+0x18a>
 8004390:	9b07      	ldr	r3, [sp, #28]
 8004392:	3502      	adds	r5, #2
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	9207      	str	r2, [sp, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	da01      	bge.n	80043a2 <_svfiprintf_r+0x132>
 800439e:	2301      	movs	r3, #1
 80043a0:	425b      	negs	r3, r3
 80043a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043a4:	4e2d      	ldr	r6, [pc, #180]	@ (800445c <_svfiprintf_r+0x1ec>)
 80043a6:	2203      	movs	r2, #3
 80043a8:	0030      	movs	r0, r6
 80043aa:	7829      	ldrb	r1, [r5, #0]
 80043ac:	f000 fa02 	bl	80047b4 <memchr>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d006      	beq.n	80043c2 <_svfiprintf_r+0x152>
 80043b4:	2340      	movs	r3, #64	@ 0x40
 80043b6:	1b80      	subs	r0, r0, r6
 80043b8:	4083      	lsls	r3, r0
 80043ba:	6822      	ldr	r2, [r4, #0]
 80043bc:	3501      	adds	r5, #1
 80043be:	4313      	orrs	r3, r2
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	7829      	ldrb	r1, [r5, #0]
 80043c4:	2206      	movs	r2, #6
 80043c6:	4826      	ldr	r0, [pc, #152]	@ (8004460 <_svfiprintf_r+0x1f0>)
 80043c8:	1c6e      	adds	r6, r5, #1
 80043ca:	7621      	strb	r1, [r4, #24]
 80043cc:	f000 f9f2 	bl	80047b4 <memchr>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d038      	beq.n	8004446 <_svfiprintf_r+0x1d6>
 80043d4:	4b23      	ldr	r3, [pc, #140]	@ (8004464 <_svfiprintf_r+0x1f4>)
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d122      	bne.n	8004420 <_svfiprintf_r+0x1b0>
 80043da:	2207      	movs	r2, #7
 80043dc:	9b07      	ldr	r3, [sp, #28]
 80043de:	3307      	adds	r3, #7
 80043e0:	4393      	bics	r3, r2
 80043e2:	3308      	adds	r3, #8
 80043e4:	9307      	str	r3, [sp, #28]
 80043e6:	6963      	ldr	r3, [r4, #20]
 80043e8:	9a04      	ldr	r2, [sp, #16]
 80043ea:	189b      	adds	r3, r3, r2
 80043ec:	6163      	str	r3, [r4, #20]
 80043ee:	e762      	b.n	80042b6 <_svfiprintf_r+0x46>
 80043f0:	4343      	muls	r3, r0
 80043f2:	0035      	movs	r5, r6
 80043f4:	2101      	movs	r1, #1
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	e7a4      	b.n	8004344 <_svfiprintf_r+0xd4>
 80043fa:	2300      	movs	r3, #0
 80043fc:	200a      	movs	r0, #10
 80043fe:	0019      	movs	r1, r3
 8004400:	3501      	adds	r5, #1
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	782a      	ldrb	r2, [r5, #0]
 8004406:	1c6e      	adds	r6, r5, #1
 8004408:	3a30      	subs	r2, #48	@ 0x30
 800440a:	2a09      	cmp	r2, #9
 800440c:	d903      	bls.n	8004416 <_svfiprintf_r+0x1a6>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0c8      	beq.n	80043a4 <_svfiprintf_r+0x134>
 8004412:	9109      	str	r1, [sp, #36]	@ 0x24
 8004414:	e7c6      	b.n	80043a4 <_svfiprintf_r+0x134>
 8004416:	4341      	muls	r1, r0
 8004418:	0035      	movs	r5, r6
 800441a:	2301      	movs	r3, #1
 800441c:	1889      	adds	r1, r1, r2
 800441e:	e7f1      	b.n	8004404 <_svfiprintf_r+0x194>
 8004420:	aa07      	add	r2, sp, #28
 8004422:	9200      	str	r2, [sp, #0]
 8004424:	0021      	movs	r1, r4
 8004426:	003a      	movs	r2, r7
 8004428:	4b0f      	ldr	r3, [pc, #60]	@ (8004468 <_svfiprintf_r+0x1f8>)
 800442a:	9803      	ldr	r0, [sp, #12]
 800442c:	e000      	b.n	8004430 <_svfiprintf_r+0x1c0>
 800442e:	bf00      	nop
 8004430:	9004      	str	r0, [sp, #16]
 8004432:	9b04      	ldr	r3, [sp, #16]
 8004434:	3301      	adds	r3, #1
 8004436:	d1d6      	bne.n	80043e6 <_svfiprintf_r+0x176>
 8004438:	89bb      	ldrh	r3, [r7, #12]
 800443a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800443c:	065b      	lsls	r3, r3, #25
 800443e:	d500      	bpl.n	8004442 <_svfiprintf_r+0x1d2>
 8004440:	e72c      	b.n	800429c <_svfiprintf_r+0x2c>
 8004442:	b021      	add	sp, #132	@ 0x84
 8004444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004446:	aa07      	add	r2, sp, #28
 8004448:	9200      	str	r2, [sp, #0]
 800444a:	0021      	movs	r1, r4
 800444c:	003a      	movs	r2, r7
 800444e:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <_svfiprintf_r+0x1f8>)
 8004450:	9803      	ldr	r0, [sp, #12]
 8004452:	f000 f87b 	bl	800454c <_printf_i>
 8004456:	e7eb      	b.n	8004430 <_svfiprintf_r+0x1c0>
 8004458:	08004954 	.word	0x08004954
 800445c:	0800495a 	.word	0x0800495a
 8004460:	0800495e 	.word	0x0800495e
 8004464:	00000000 	.word	0x00000000
 8004468:	080041b1 	.word	0x080041b1

0800446c <_printf_common>:
 800446c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800446e:	0016      	movs	r6, r2
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	688a      	ldr	r2, [r1, #8]
 8004474:	690b      	ldr	r3, [r1, #16]
 8004476:	000c      	movs	r4, r1
 8004478:	9000      	str	r0, [sp, #0]
 800447a:	4293      	cmp	r3, r2
 800447c:	da00      	bge.n	8004480 <_printf_common+0x14>
 800447e:	0013      	movs	r3, r2
 8004480:	0022      	movs	r2, r4
 8004482:	6033      	str	r3, [r6, #0]
 8004484:	3243      	adds	r2, #67	@ 0x43
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	2a00      	cmp	r2, #0
 800448a:	d001      	beq.n	8004490 <_printf_common+0x24>
 800448c:	3301      	adds	r3, #1
 800448e:	6033      	str	r3, [r6, #0]
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	069b      	lsls	r3, r3, #26
 8004494:	d502      	bpl.n	800449c <_printf_common+0x30>
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	3302      	adds	r3, #2
 800449a:	6033      	str	r3, [r6, #0]
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	2306      	movs	r3, #6
 80044a0:	0015      	movs	r5, r2
 80044a2:	401d      	ands	r5, r3
 80044a4:	421a      	tst	r2, r3
 80044a6:	d027      	beq.n	80044f8 <_printf_common+0x8c>
 80044a8:	0023      	movs	r3, r4
 80044aa:	3343      	adds	r3, #67	@ 0x43
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	1e5a      	subs	r2, r3, #1
 80044b0:	4193      	sbcs	r3, r2
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	0692      	lsls	r2, r2, #26
 80044b6:	d430      	bmi.n	800451a <_printf_common+0xae>
 80044b8:	0022      	movs	r2, r4
 80044ba:	9901      	ldr	r1, [sp, #4]
 80044bc:	9800      	ldr	r0, [sp, #0]
 80044be:	9d08      	ldr	r5, [sp, #32]
 80044c0:	3243      	adds	r2, #67	@ 0x43
 80044c2:	47a8      	blx	r5
 80044c4:	3001      	adds	r0, #1
 80044c6:	d025      	beq.n	8004514 <_printf_common+0xa8>
 80044c8:	2206      	movs	r2, #6
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	2500      	movs	r5, #0
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d105      	bne.n	80044e0 <_printf_common+0x74>
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	68e5      	ldr	r5, [r4, #12]
 80044d8:	1aed      	subs	r5, r5, r3
 80044da:	43eb      	mvns	r3, r5
 80044dc:	17db      	asrs	r3, r3, #31
 80044de:	401d      	ands	r5, r3
 80044e0:	68a3      	ldr	r3, [r4, #8]
 80044e2:	6922      	ldr	r2, [r4, #16]
 80044e4:	4293      	cmp	r3, r2
 80044e6:	dd01      	ble.n	80044ec <_printf_common+0x80>
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	18ed      	adds	r5, r5, r3
 80044ec:	2600      	movs	r6, #0
 80044ee:	42b5      	cmp	r5, r6
 80044f0:	d120      	bne.n	8004534 <_printf_common+0xc8>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e010      	b.n	8004518 <_printf_common+0xac>
 80044f6:	3501      	adds	r5, #1
 80044f8:	68e3      	ldr	r3, [r4, #12]
 80044fa:	6832      	ldr	r2, [r6, #0]
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	42ab      	cmp	r3, r5
 8004500:	ddd2      	ble.n	80044a8 <_printf_common+0x3c>
 8004502:	0022      	movs	r2, r4
 8004504:	2301      	movs	r3, #1
 8004506:	9901      	ldr	r1, [sp, #4]
 8004508:	9800      	ldr	r0, [sp, #0]
 800450a:	9f08      	ldr	r7, [sp, #32]
 800450c:	3219      	adds	r2, #25
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	d1f0      	bne.n	80044f6 <_printf_common+0x8a>
 8004514:	2001      	movs	r0, #1
 8004516:	4240      	negs	r0, r0
 8004518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800451a:	2030      	movs	r0, #48	@ 0x30
 800451c:	18e1      	adds	r1, r4, r3
 800451e:	3143      	adds	r1, #67	@ 0x43
 8004520:	7008      	strb	r0, [r1, #0]
 8004522:	0021      	movs	r1, r4
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	3145      	adds	r1, #69	@ 0x45
 8004528:	7809      	ldrb	r1, [r1, #0]
 800452a:	18a2      	adds	r2, r4, r2
 800452c:	3243      	adds	r2, #67	@ 0x43
 800452e:	3302      	adds	r3, #2
 8004530:	7011      	strb	r1, [r2, #0]
 8004532:	e7c1      	b.n	80044b8 <_printf_common+0x4c>
 8004534:	0022      	movs	r2, r4
 8004536:	2301      	movs	r3, #1
 8004538:	9901      	ldr	r1, [sp, #4]
 800453a:	9800      	ldr	r0, [sp, #0]
 800453c:	9f08      	ldr	r7, [sp, #32]
 800453e:	321a      	adds	r2, #26
 8004540:	47b8      	blx	r7
 8004542:	3001      	adds	r0, #1
 8004544:	d0e6      	beq.n	8004514 <_printf_common+0xa8>
 8004546:	3601      	adds	r6, #1
 8004548:	e7d1      	b.n	80044ee <_printf_common+0x82>
	...

0800454c <_printf_i>:
 800454c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454e:	b08b      	sub	sp, #44	@ 0x2c
 8004550:	9206      	str	r2, [sp, #24]
 8004552:	000a      	movs	r2, r1
 8004554:	3243      	adds	r2, #67	@ 0x43
 8004556:	9307      	str	r3, [sp, #28]
 8004558:	9005      	str	r0, [sp, #20]
 800455a:	9203      	str	r2, [sp, #12]
 800455c:	7e0a      	ldrb	r2, [r1, #24]
 800455e:	000c      	movs	r4, r1
 8004560:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004562:	2a78      	cmp	r2, #120	@ 0x78
 8004564:	d809      	bhi.n	800457a <_printf_i+0x2e>
 8004566:	2a62      	cmp	r2, #98	@ 0x62
 8004568:	d80b      	bhi.n	8004582 <_printf_i+0x36>
 800456a:	2a00      	cmp	r2, #0
 800456c:	d100      	bne.n	8004570 <_printf_i+0x24>
 800456e:	e0bc      	b.n	80046ea <_printf_i+0x19e>
 8004570:	497b      	ldr	r1, [pc, #492]	@ (8004760 <_printf_i+0x214>)
 8004572:	9104      	str	r1, [sp, #16]
 8004574:	2a58      	cmp	r2, #88	@ 0x58
 8004576:	d100      	bne.n	800457a <_printf_i+0x2e>
 8004578:	e090      	b.n	800469c <_printf_i+0x150>
 800457a:	0025      	movs	r5, r4
 800457c:	3542      	adds	r5, #66	@ 0x42
 800457e:	702a      	strb	r2, [r5, #0]
 8004580:	e022      	b.n	80045c8 <_printf_i+0x7c>
 8004582:	0010      	movs	r0, r2
 8004584:	3863      	subs	r0, #99	@ 0x63
 8004586:	2815      	cmp	r0, #21
 8004588:	d8f7      	bhi.n	800457a <_printf_i+0x2e>
 800458a:	f7fb fdbb 	bl	8000104 <__gnu_thumb1_case_shi>
 800458e:	0016      	.short	0x0016
 8004590:	fff6001f 	.word	0xfff6001f
 8004594:	fff6fff6 	.word	0xfff6fff6
 8004598:	001ffff6 	.word	0x001ffff6
 800459c:	fff6fff6 	.word	0xfff6fff6
 80045a0:	fff6fff6 	.word	0xfff6fff6
 80045a4:	003600a1 	.word	0x003600a1
 80045a8:	fff60080 	.word	0xfff60080
 80045ac:	00b2fff6 	.word	0x00b2fff6
 80045b0:	0036fff6 	.word	0x0036fff6
 80045b4:	fff6fff6 	.word	0xfff6fff6
 80045b8:	0084      	.short	0x0084
 80045ba:	0025      	movs	r5, r4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	3542      	adds	r5, #66	@ 0x42
 80045c0:	1d11      	adds	r1, r2, #4
 80045c2:	6019      	str	r1, [r3, #0]
 80045c4:	6813      	ldr	r3, [r2, #0]
 80045c6:	702b      	strb	r3, [r5, #0]
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0a0      	b.n	800470e <_printf_i+0x1c2>
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	6809      	ldr	r1, [r1, #0]
 80045d0:	1d02      	adds	r2, r0, #4
 80045d2:	060d      	lsls	r5, r1, #24
 80045d4:	d50b      	bpl.n	80045ee <_printf_i+0xa2>
 80045d6:	6806      	ldr	r6, [r0, #0]
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	2e00      	cmp	r6, #0
 80045dc:	da03      	bge.n	80045e6 <_printf_i+0x9a>
 80045de:	232d      	movs	r3, #45	@ 0x2d
 80045e0:	9a03      	ldr	r2, [sp, #12]
 80045e2:	4276      	negs	r6, r6
 80045e4:	7013      	strb	r3, [r2, #0]
 80045e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004760 <_printf_i+0x214>)
 80045e8:	270a      	movs	r7, #10
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	e018      	b.n	8004620 <_printf_i+0xd4>
 80045ee:	6806      	ldr	r6, [r0, #0]
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	0649      	lsls	r1, r1, #25
 80045f4:	d5f1      	bpl.n	80045da <_printf_i+0x8e>
 80045f6:	b236      	sxth	r6, r6
 80045f8:	e7ef      	b.n	80045da <_printf_i+0x8e>
 80045fa:	6808      	ldr	r0, [r1, #0]
 80045fc:	6819      	ldr	r1, [r3, #0]
 80045fe:	c940      	ldmia	r1!, {r6}
 8004600:	0605      	lsls	r5, r0, #24
 8004602:	d402      	bmi.n	800460a <_printf_i+0xbe>
 8004604:	0640      	lsls	r0, r0, #25
 8004606:	d500      	bpl.n	800460a <_printf_i+0xbe>
 8004608:	b2b6      	uxth	r6, r6
 800460a:	6019      	str	r1, [r3, #0]
 800460c:	4b54      	ldr	r3, [pc, #336]	@ (8004760 <_printf_i+0x214>)
 800460e:	270a      	movs	r7, #10
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	2a6f      	cmp	r2, #111	@ 0x6f
 8004614:	d100      	bne.n	8004618 <_printf_i+0xcc>
 8004616:	3f02      	subs	r7, #2
 8004618:	0023      	movs	r3, r4
 800461a:	2200      	movs	r2, #0
 800461c:	3343      	adds	r3, #67	@ 0x43
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	60a3      	str	r3, [r4, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	db03      	blt.n	8004630 <_printf_i+0xe4>
 8004628:	2104      	movs	r1, #4
 800462a:	6822      	ldr	r2, [r4, #0]
 800462c:	438a      	bics	r2, r1
 800462e:	6022      	str	r2, [r4, #0]
 8004630:	2e00      	cmp	r6, #0
 8004632:	d102      	bne.n	800463a <_printf_i+0xee>
 8004634:	9d03      	ldr	r5, [sp, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <_printf_i+0x108>
 800463a:	9d03      	ldr	r5, [sp, #12]
 800463c:	0030      	movs	r0, r6
 800463e:	0039      	movs	r1, r7
 8004640:	f7fb fdf0 	bl	8000224 <__aeabi_uidivmod>
 8004644:	9b04      	ldr	r3, [sp, #16]
 8004646:	3d01      	subs	r5, #1
 8004648:	5c5b      	ldrb	r3, [r3, r1]
 800464a:	702b      	strb	r3, [r5, #0]
 800464c:	0033      	movs	r3, r6
 800464e:	0006      	movs	r6, r0
 8004650:	429f      	cmp	r7, r3
 8004652:	d9f3      	bls.n	800463c <_printf_i+0xf0>
 8004654:	2f08      	cmp	r7, #8
 8004656:	d109      	bne.n	800466c <_printf_i+0x120>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	07db      	lsls	r3, r3, #31
 800465c:	d506      	bpl.n	800466c <_printf_i+0x120>
 800465e:	6862      	ldr	r2, [r4, #4]
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	429a      	cmp	r2, r3
 8004664:	dc02      	bgt.n	800466c <_printf_i+0x120>
 8004666:	2330      	movs	r3, #48	@ 0x30
 8004668:	3d01      	subs	r5, #1
 800466a:	702b      	strb	r3, [r5, #0]
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	1b5b      	subs	r3, r3, r5
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	9b07      	ldr	r3, [sp, #28]
 8004674:	0021      	movs	r1, r4
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	9805      	ldr	r0, [sp, #20]
 800467a:	9b06      	ldr	r3, [sp, #24]
 800467c:	aa09      	add	r2, sp, #36	@ 0x24
 800467e:	f7ff fef5 	bl	800446c <_printf_common>
 8004682:	3001      	adds	r0, #1
 8004684:	d148      	bne.n	8004718 <_printf_i+0x1cc>
 8004686:	2001      	movs	r0, #1
 8004688:	4240      	negs	r0, r0
 800468a:	b00b      	add	sp, #44	@ 0x2c
 800468c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800468e:	2220      	movs	r2, #32
 8004690:	6809      	ldr	r1, [r1, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	6022      	str	r2, [r4, #0]
 8004696:	2278      	movs	r2, #120	@ 0x78
 8004698:	4932      	ldr	r1, [pc, #200]	@ (8004764 <_printf_i+0x218>)
 800469a:	9104      	str	r1, [sp, #16]
 800469c:	0021      	movs	r1, r4
 800469e:	3145      	adds	r1, #69	@ 0x45
 80046a0:	700a      	strb	r2, [r1, #0]
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6822      	ldr	r2, [r4, #0]
 80046a6:	c940      	ldmia	r1!, {r6}
 80046a8:	0610      	lsls	r0, r2, #24
 80046aa:	d402      	bmi.n	80046b2 <_printf_i+0x166>
 80046ac:	0650      	lsls	r0, r2, #25
 80046ae:	d500      	bpl.n	80046b2 <_printf_i+0x166>
 80046b0:	b2b6      	uxth	r6, r6
 80046b2:	6019      	str	r1, [r3, #0]
 80046b4:	07d3      	lsls	r3, r2, #31
 80046b6:	d502      	bpl.n	80046be <_printf_i+0x172>
 80046b8:	2320      	movs	r3, #32
 80046ba:	4313      	orrs	r3, r2
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	2e00      	cmp	r6, #0
 80046c0:	d001      	beq.n	80046c6 <_printf_i+0x17a>
 80046c2:	2710      	movs	r7, #16
 80046c4:	e7a8      	b.n	8004618 <_printf_i+0xcc>
 80046c6:	2220      	movs	r2, #32
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	4393      	bics	r3, r2
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	e7f8      	b.n	80046c2 <_printf_i+0x176>
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	680d      	ldr	r5, [r1, #0]
 80046d4:	1d10      	adds	r0, r2, #4
 80046d6:	6949      	ldr	r1, [r1, #20]
 80046d8:	6018      	str	r0, [r3, #0]
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	062e      	lsls	r6, r5, #24
 80046de:	d501      	bpl.n	80046e4 <_printf_i+0x198>
 80046e0:	6019      	str	r1, [r3, #0]
 80046e2:	e002      	b.n	80046ea <_printf_i+0x19e>
 80046e4:	066d      	lsls	r5, r5, #25
 80046e6:	d5fb      	bpl.n	80046e0 <_printf_i+0x194>
 80046e8:	8019      	strh	r1, [r3, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	9d03      	ldr	r5, [sp, #12]
 80046ee:	6123      	str	r3, [r4, #16]
 80046f0:	e7bf      	b.n	8004672 <_printf_i+0x126>
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	1d11      	adds	r1, r2, #4
 80046f6:	6019      	str	r1, [r3, #0]
 80046f8:	6815      	ldr	r5, [r2, #0]
 80046fa:	2100      	movs	r1, #0
 80046fc:	0028      	movs	r0, r5
 80046fe:	6862      	ldr	r2, [r4, #4]
 8004700:	f000 f858 	bl	80047b4 <memchr>
 8004704:	2800      	cmp	r0, #0
 8004706:	d001      	beq.n	800470c <_printf_i+0x1c0>
 8004708:	1b40      	subs	r0, r0, r5
 800470a:	6060      	str	r0, [r4, #4]
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	6123      	str	r3, [r4, #16]
 8004710:	2300      	movs	r3, #0
 8004712:	9a03      	ldr	r2, [sp, #12]
 8004714:	7013      	strb	r3, [r2, #0]
 8004716:	e7ac      	b.n	8004672 <_printf_i+0x126>
 8004718:	002a      	movs	r2, r5
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	9906      	ldr	r1, [sp, #24]
 800471e:	9805      	ldr	r0, [sp, #20]
 8004720:	9d07      	ldr	r5, [sp, #28]
 8004722:	47a8      	blx	r5
 8004724:	3001      	adds	r0, #1
 8004726:	d0ae      	beq.n	8004686 <_printf_i+0x13a>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	079b      	lsls	r3, r3, #30
 800472c:	d415      	bmi.n	800475a <_printf_i+0x20e>
 800472e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004730:	68e0      	ldr	r0, [r4, #12]
 8004732:	4298      	cmp	r0, r3
 8004734:	daa9      	bge.n	800468a <_printf_i+0x13e>
 8004736:	0018      	movs	r0, r3
 8004738:	e7a7      	b.n	800468a <_printf_i+0x13e>
 800473a:	0022      	movs	r2, r4
 800473c:	2301      	movs	r3, #1
 800473e:	9906      	ldr	r1, [sp, #24]
 8004740:	9805      	ldr	r0, [sp, #20]
 8004742:	9e07      	ldr	r6, [sp, #28]
 8004744:	3219      	adds	r2, #25
 8004746:	47b0      	blx	r6
 8004748:	3001      	adds	r0, #1
 800474a:	d09c      	beq.n	8004686 <_printf_i+0x13a>
 800474c:	3501      	adds	r5, #1
 800474e:	68e3      	ldr	r3, [r4, #12]
 8004750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	42ab      	cmp	r3, r5
 8004756:	dcf0      	bgt.n	800473a <_printf_i+0x1ee>
 8004758:	e7e9      	b.n	800472e <_printf_i+0x1e2>
 800475a:	2500      	movs	r5, #0
 800475c:	e7f7      	b.n	800474e <_printf_i+0x202>
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	08004965 	.word	0x08004965
 8004764:	08004976 	.word	0x08004976

08004768 <memmove>:
 8004768:	b510      	push	{r4, lr}
 800476a:	4288      	cmp	r0, r1
 800476c:	d806      	bhi.n	800477c <memmove+0x14>
 800476e:	2300      	movs	r3, #0
 8004770:	429a      	cmp	r2, r3
 8004772:	d008      	beq.n	8004786 <memmove+0x1e>
 8004774:	5ccc      	ldrb	r4, [r1, r3]
 8004776:	54c4      	strb	r4, [r0, r3]
 8004778:	3301      	adds	r3, #1
 800477a:	e7f9      	b.n	8004770 <memmove+0x8>
 800477c:	188b      	adds	r3, r1, r2
 800477e:	4298      	cmp	r0, r3
 8004780:	d2f5      	bcs.n	800476e <memmove+0x6>
 8004782:	3a01      	subs	r2, #1
 8004784:	d200      	bcs.n	8004788 <memmove+0x20>
 8004786:	bd10      	pop	{r4, pc}
 8004788:	5c8b      	ldrb	r3, [r1, r2]
 800478a:	5483      	strb	r3, [r0, r2]
 800478c:	e7f9      	b.n	8004782 <memmove+0x1a>
	...

08004790 <_sbrk_r>:
 8004790:	2300      	movs	r3, #0
 8004792:	b570      	push	{r4, r5, r6, lr}
 8004794:	4d06      	ldr	r5, [pc, #24]	@ (80047b0 <_sbrk_r+0x20>)
 8004796:	0004      	movs	r4, r0
 8004798:	0008      	movs	r0, r1
 800479a:	602b      	str	r3, [r5, #0]
 800479c:	f7fc fdec 	bl	8001378 <_sbrk>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d103      	bne.n	80047ac <_sbrk_r+0x1c>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d000      	beq.n	80047ac <_sbrk_r+0x1c>
 80047aa:	6023      	str	r3, [r4, #0]
 80047ac:	bd70      	pop	{r4, r5, r6, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	200002a0 	.word	0x200002a0

080047b4 <memchr>:
 80047b4:	b2c9      	uxtb	r1, r1
 80047b6:	1882      	adds	r2, r0, r2
 80047b8:	4290      	cmp	r0, r2
 80047ba:	d101      	bne.n	80047c0 <memchr+0xc>
 80047bc:	2000      	movs	r0, #0
 80047be:	4770      	bx	lr
 80047c0:	7803      	ldrb	r3, [r0, #0]
 80047c2:	428b      	cmp	r3, r1
 80047c4:	d0fb      	beq.n	80047be <memchr+0xa>
 80047c6:	3001      	adds	r0, #1
 80047c8:	e7f6      	b.n	80047b8 <memchr+0x4>

080047ca <memcpy>:
 80047ca:	2300      	movs	r3, #0
 80047cc:	b510      	push	{r4, lr}
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d100      	bne.n	80047d4 <memcpy+0xa>
 80047d2:	bd10      	pop	{r4, pc}
 80047d4:	5ccc      	ldrb	r4, [r1, r3]
 80047d6:	54c4      	strb	r4, [r0, r3]
 80047d8:	3301      	adds	r3, #1
 80047da:	e7f8      	b.n	80047ce <memcpy+0x4>

080047dc <_realloc_r>:
 80047dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047de:	0006      	movs	r6, r0
 80047e0:	000c      	movs	r4, r1
 80047e2:	0015      	movs	r5, r2
 80047e4:	2900      	cmp	r1, #0
 80047e6:	d105      	bne.n	80047f4 <_realloc_r+0x18>
 80047e8:	0011      	movs	r1, r2
 80047ea:	f7ff fc51 	bl	8004090 <_malloc_r>
 80047ee:	0004      	movs	r4, r0
 80047f0:	0020      	movs	r0, r4
 80047f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047f4:	2a00      	cmp	r2, #0
 80047f6:	d103      	bne.n	8004800 <_realloc_r+0x24>
 80047f8:	f7ff fbde 	bl	8003fb8 <_free_r>
 80047fc:	2400      	movs	r4, #0
 80047fe:	e7f7      	b.n	80047f0 <_realloc_r+0x14>
 8004800:	f000 f81b 	bl	800483a <_malloc_usable_size_r>
 8004804:	0007      	movs	r7, r0
 8004806:	4285      	cmp	r5, r0
 8004808:	d802      	bhi.n	8004810 <_realloc_r+0x34>
 800480a:	0843      	lsrs	r3, r0, #1
 800480c:	42ab      	cmp	r3, r5
 800480e:	d3ef      	bcc.n	80047f0 <_realloc_r+0x14>
 8004810:	0029      	movs	r1, r5
 8004812:	0030      	movs	r0, r6
 8004814:	f7ff fc3c 	bl	8004090 <_malloc_r>
 8004818:	9001      	str	r0, [sp, #4]
 800481a:	2800      	cmp	r0, #0
 800481c:	d0ee      	beq.n	80047fc <_realloc_r+0x20>
 800481e:	002a      	movs	r2, r5
 8004820:	42bd      	cmp	r5, r7
 8004822:	d900      	bls.n	8004826 <_realloc_r+0x4a>
 8004824:	003a      	movs	r2, r7
 8004826:	0021      	movs	r1, r4
 8004828:	9801      	ldr	r0, [sp, #4]
 800482a:	f7ff ffce 	bl	80047ca <memcpy>
 800482e:	0021      	movs	r1, r4
 8004830:	0030      	movs	r0, r6
 8004832:	f7ff fbc1 	bl	8003fb8 <_free_r>
 8004836:	9c01      	ldr	r4, [sp, #4]
 8004838:	e7da      	b.n	80047f0 <_realloc_r+0x14>

0800483a <_malloc_usable_size_r>:
 800483a:	1f0b      	subs	r3, r1, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	1f18      	subs	r0, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	da01      	bge.n	8004848 <_malloc_usable_size_r+0xe>
 8004844:	580b      	ldr	r3, [r1, r0]
 8004846:	18c0      	adds	r0, r0, r3
 8004848:	4770      	bx	lr
	...

0800484c <_init>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr

08004858 <_fini>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr
