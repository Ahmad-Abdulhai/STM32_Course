
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003688  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037cc  080037cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037cc  080037cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037d4  080037d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002910  2000000c  080037e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000291c  080037e8  0002291c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c346  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc6  00000000  00000000  0002c37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002e040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b408  00000000  00000000  0002f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdb2  00000000  00000000  0004a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b04e1  00000000  00000000  000563d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001068b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002018  00000000  00000000  00106904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800372c 	.word	0x0800372c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800372c 	.word	0x0800372c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000622:	f000 fa55 	bl	8000ad0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000626:	f000 f833 	bl	8000690 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800062a:	f000 f8fb 	bl	8000824 <MX_GPIO_Init>
	MX_DMA_Init();
 800062e:	f000 f8db 	bl	80007e8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000632:	f000 f88b 	bl	800074c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	/*given values to the matrix*/
	for (uint32_t i = 0; i < 10240Ul; i++) {
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e009      	b.n	8000650 <main+0x34>
		data[i] = i & (0xff);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	b2d9      	uxtb	r1, r3
 8000640:	4a10      	ldr	r2, [pc, #64]	; (8000684 <main+0x68>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	18d3      	adds	r3, r2, r3
 8000646:	1c0a      	adds	r2, r1, #0
 8000648:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 10240Ul; i++) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	23a0      	movs	r3, #160	; 0xa0
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	429a      	cmp	r2, r3
 8000658:	d3f0      	bcc.n	800063c <main+0x20>
	}
	/*Transmit data Via UART2 using DMA[Circular] mode*/
	HAL_UART_Transmit_DMA(&huart2, data, sizeof(data));
 800065a:	23a0      	movs	r3, #160	; 0xa0
 800065c:	019a      	lsls	r2, r3, #6
 800065e:	4909      	ldr	r1, [pc, #36]	; (8000684 <main+0x68>)
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <main+0x6c>)
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fffe 	bl	8002664 <HAL_UART_Transmit_DMA>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/*Toggle PC13 LED on board*/
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	019b      	lsls	r3, r3, #6
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <main+0x70>)
 800066e:	0019      	movs	r1, r3
 8000670:	0010      	movs	r0, r2
 8000672:	f000 fff4 	bl	800165e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000676:	23fa      	movs	r3, #250	; 0xfa
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	0018      	movs	r0, r3
 800067c:	f000 faae 	bl	8000bdc <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000680:	e7f2      	b.n	8000668 <main+0x4c>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000118 	.word	0x20000118
 8000688:	20000028 	.word	0x20000028
 800068c:	50000800 	.word	0x50000800

08000690 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b095      	sub	sp, #84	; 0x54
 8000694:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000696:	2414      	movs	r4, #20
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	233c      	movs	r3, #60	; 0x3c
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f003 f83b 	bl	800371c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	0018      	movs	r0, r3
 80006aa:	2310      	movs	r3, #16
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f003 f834 	bl	800371c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 ffeb 	bl	8001694 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2202      	movs	r2, #2
 80006c2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0052      	lsls	r2, r2, #1
 80006ca:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006cc:	0021      	movs	r1, r4
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2240      	movs	r2, #64	; 0x40
 80006d8:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2202      	movs	r2, #2
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 9;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2209      	movs	r2, #9
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0292      	lsls	r2, r2, #10
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0492      	lsls	r2, r2, #18
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	05d2      	lsls	r2, r2, #23
 8000708:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800070a:	187b      	adds	r3, r7, r1
 800070c:	0018      	movs	r0, r3
 800070e:	f001 f80d 	bl	800172c <HAL_RCC_OscConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x8a>
		Error_Handler();
 8000716:	f000 f8cb 	bl	80008b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2202      	movs	r2, #2
 8000724:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2101      	movs	r1, #1
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fb58 	bl	8001dec <HAL_RCC_ClockConfig>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xb4>
		Error_Handler();
 8000740:	f000 f8b6 	bl	80008b0 <Error_Handler>
	}
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b015      	add	sp, #84	; 0x54
 800074a:	bd90      	pop	{r4, r7, pc}

0800074c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <MX_USART2_UART_Init+0x98>)
 8000754:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000758:	22e1      	movs	r2, #225	; 0xe1
 800075a:	0252      	lsls	r2, r2, #9
 800075c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000796:	0018      	movs	r0, r3
 8000798:	f001 ff0e 	bl	80025b8 <HAL_UART_Init>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 80007a0:	f000 f886 	bl	80008b0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 feb3 	bl	8003514 <HAL_UARTEx_SetTxFifoThreshold>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80007b2:	f000 f87d 	bl	80008b0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 feea 	bl	8003594 <HAL_UARTEx_SetRxFifoThreshold>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80007c4:	f000 f874 	bl	80008b0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 fe68 	bl	80034a0 <HAL_UARTEx_DisableFifoMode>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80007d4:	f000 f86c 	bl	80008b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000028 	.word	0x20000028
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_DMA_Init+0x38>)
 80007f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_DMA_Init+0x38>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	639a      	str	r2, [r3, #56]	; 0x38
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_DMA_Init+0x38>)
 80007fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2009      	movs	r0, #9
 800080c:	f000 facc 	bl	8000da8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000810:	2009      	movs	r0, #9
 8000812:	f000 fade 	bl	8000dd2 <HAL_NVIC_EnableIRQ>

}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40021000 	.word	0x40021000

08000824 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800082a:	240c      	movs	r4, #12
 800082c:	193b      	adds	r3, r7, r4
 800082e:	0018      	movs	r0, r3
 8000830:	2314      	movs	r3, #20
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f002 ff71 	bl	800371c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_GPIO_Init+0x84>)
 800083c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_GPIO_Init+0x84>)
 8000840:	2104      	movs	r1, #4
 8000842:	430a      	orrs	r2, r1
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_GPIO_Init+0x84>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084a:	2204      	movs	r2, #4
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_GPIO_Init+0x84>)
 8000854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_GPIO_Init+0x84>)
 8000858:	2101      	movs	r1, #1
 800085a:	430a      	orrs	r2, r1
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_GPIO_Init+0x84>)
 8000860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000862:	2201      	movs	r2, #1
 8000864:	4013      	ands	r3, r2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <MX_GPIO_Init+0x88>)
 8000870:	2200      	movs	r2, #0
 8000872:	0019      	movs	r1, r3
 8000874:	f000 fed6 	bl	8001624 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	0192      	lsls	r2, r2, #6
 800087e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2201      	movs	r2, #1
 8000884:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	193b      	adds	r3, r7, r4
 8000894:	4a05      	ldr	r2, [pc, #20]	; (80008ac <MX_GPIO_Init+0x88>)
 8000896:	0019      	movs	r1, r3
 8000898:	0010      	movs	r0, r2
 800089a:	f000 fd57 	bl	800134c <HAL_GPIO_Init>

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b009      	add	sp, #36	; 0x24
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000800 	.word	0x50000800

080008b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_MspInit+0x4c>)
 80008c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	2101      	movs	r1, #1
 80008ca:	430a      	orrs	r2, r1
 80008cc:	641a      	str	r2, [r3, #64]	; 0x40
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	2201      	movs	r2, #1
 80008d4:	4013      	ands	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_MspInit+0x4c>)
 80008dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_MspInit+0x4c>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	0549      	lsls	r1, r1, #21
 80008e4:	430a      	orrs	r2, r1
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <HAL_MspInit+0x4c>)
 80008ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	055b      	lsls	r3, r3, #21
 80008f0:	4013      	ands	r3, r2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008f6:	23c0      	movs	r3, #192	; 0xc0
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 f992 	bl	8000c24 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b09d      	sub	sp, #116	; 0x74
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	235c      	movs	r3, #92	; 0x5c
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 fefc 	bl	800371c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	2410      	movs	r4, #16
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0018      	movs	r0, r3
 800092a:	234c      	movs	r3, #76	; 0x4c
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 fef4 	bl	800371c <memset>
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a37      	ldr	r2, [pc, #220]	; (8000a18 <HAL_UART_MspInit+0x10c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d167      	bne.n	8000a0e <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2202      	movs	r2, #2
 8000942:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094a:	193b      	adds	r3, r7, r4
 800094c:	0018      	movs	r0, r3
 800094e:	f001 fbf7 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000956:	f7ff ffab 	bl	80008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <HAL_UART_MspInit+0x110>)
 800095c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <HAL_UART_MspInit+0x110>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0289      	lsls	r1, r1, #10
 8000964:	430a      	orrs	r2, r1
 8000966:	63da      	str	r2, [r3, #60]	; 0x3c
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <HAL_UART_MspInit+0x110>)
 800096a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	029b      	lsls	r3, r3, #10
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <HAL_UART_MspInit+0x110>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <HAL_UART_MspInit+0x110>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <HAL_UART_MspInit+0x110>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098e:	215c      	movs	r1, #92	; 0x5c
 8000990:	187b      	adds	r3, r7, r1
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2202      	movs	r2, #2
 800099a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	187a      	adds	r2, r7, r1
 80009b0:	23a0      	movs	r3, #160	; 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fcc8 	bl	800134c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0x118>)
 80009c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009c4:	2235      	movs	r2, #53	; 0x35
 80009c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009ca:	2210      	movs	r2, #16
 80009cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009e8:	2220      	movs	r2, #32
 80009ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_UART_MspInit+0x114>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fa09 	bl	8000e0c <HAL_DMA_Init>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 80009fe:	f7ff ff57 	bl	80008b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_UART_MspInit+0x114>)
 8000a06:	679a      	str	r2, [r3, #120]	; 0x78
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_UART_MspInit+0x114>)
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b01d      	add	sp, #116	; 0x74
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40004400 	.word	0x40004400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	200000b8 	.word	0x200000b8
 8000a24:	40020008 	.word	0x40020008

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 f8aa 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <DMA1_Channel1_IRQHandler+0x14>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 fb06 	bl	8001070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	200000b8 	.word	0x200000b8

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a80:	f7ff fff6 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aaa:	f002 fe13 	bl	80036d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000aae:	f7ff fdb5 	bl	800061c <main>

08000ab2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   r0, =_estack
 8000ab4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac0:	080037dc 	.word	0x080037dc
  ldr r2, =_sbss
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac8:	2000291c 	.word	0x2000291c

08000acc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_COMP_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_Init+0x3c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_Init+0x3c>)
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	0049      	lsls	r1, r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aea:	2003      	movs	r0, #3
 8000aec:	f000 f810 	bl	8000b10 <HAL_InitTick>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d003      	beq.n	8000afc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e001      	b.n	8000b00 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fede 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_InitTick+0x88>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d02b      	beq.n	8000b80 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_InitTick+0x8c>)
 8000b2a:	681c      	ldr	r4, [r3, #0]
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_InitTick+0x88>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	0019      	movs	r1, r3
 8000b32:	23fa      	movs	r3, #250	; 0xfa
 8000b34:	0098      	lsls	r0, r3, #2
 8000b36:	f7ff fae5 	bl	8000104 <__udivsi3>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	0020      	movs	r0, r4
 8000b40:	f7ff fae0 	bl	8000104 <__udivsi3>
 8000b44:	0003      	movs	r3, r0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f953 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d112      	bne.n	8000b76 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d80a      	bhi.n	8000b6c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 f922 	bl	8000da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_InitTick+0x90>)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e00d      	b.n	8000b88 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	e008      	b.n	8000b88 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b76:	230f      	movs	r3, #15
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e003      	b.n	8000b88 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b80:	230f      	movs	r3, #15
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	781b      	ldrb	r3, [r3, #0]
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b005      	add	sp, #20
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	001a      	movs	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	18d2      	adds	r2, r2, r3
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	601a      	str	r2, [r3, #0]
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20002918 	.word	0x20002918

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20002918 	.word	0x20002918

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff0 	bl	8000bc8 <HAL_GetTick>
 8000be8:	0003      	movs	r3, r0
 8000bea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	189b      	adds	r3, r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	f7ff ffe0 	bl	8000bc8 <HAL_GetTick>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	20000008 	.word	0x20000008

08000c24 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	0019      	movs	r1, r3
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	601a      	str	r2, [r3, #0]
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	fffff9ff 	.word	0xfffff9ff

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	0002      	movs	r2, r0
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b7f      	cmp	r3, #127	; 0x7f
 8000c62:	d809      	bhi.n	8000c78 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	001a      	movs	r2, r3
 8000c6a:	231f      	movs	r3, #31
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_EnableIRQ+0x30>)
 8000c70:	2101      	movs	r1, #1
 8000c72:	4091      	lsls	r1, r2
 8000c74:	000a      	movs	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b7f      	cmp	r3, #127	; 0x7f
 8000c98:	d828      	bhi.n	8000cec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9a:	4a2f      	ldr	r2, [pc, #188]	; (8000d58 <__NVIC_SetPriority+0xd4>)
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	33c0      	adds	r3, #192	; 0xc0
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	589b      	ldr	r3, [r3, r2]
 8000caa:	1dfa      	adds	r2, r7, #7
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	0011      	movs	r1, r2
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	00d2      	lsls	r2, r2, #3
 8000cb6:	21ff      	movs	r1, #255	; 0xff
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	22ff      	movs	r2, #255	; 0xff
 8000cc8:	401a      	ands	r2, r3
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	4003      	ands	r3, r0
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd8:	481f      	ldr	r0, [pc, #124]	; (8000d58 <__NVIC_SetPriority+0xd4>)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	33c0      	adds	r3, #192	; 0xc0
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cea:	e031      	b.n	8000d50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <__NVIC_SetPriority+0xd8>)
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	3b08      	subs	r3, #8
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3306      	adds	r3, #6
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	3304      	adds	r3, #4
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1dfa      	adds	r2, r7, #7
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	400a      	ands	r2, r1
 8000d10:	00d2      	lsls	r2, r2, #3
 8000d12:	21ff      	movs	r1, #255	; 0xff
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	43d2      	mvns	r2, r2
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	019b      	lsls	r3, r3, #6
 8000d22:	22ff      	movs	r2, #255	; 0xff
 8000d24:	401a      	ands	r2, r3
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	4003      	ands	r3, r0
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <__NVIC_SetPriority+0xd8>)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	001c      	movs	r4, r3
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	4023      	ands	r3, r4
 8000d40:	3b08      	subs	r3, #8
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	430a      	orrs	r2, r1
 8000d46:	3306      	adds	r3, #6
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	18c3      	adds	r3, r0, r3
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	601a      	str	r2, [r3, #0]
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b003      	add	sp, #12
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	045b      	lsls	r3, r3, #17
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d301      	bcc.n	8000d78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d74:	2301      	movs	r3, #1
 8000d76:	e010      	b.n	8000d9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <SysTick_Config+0x44>)
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	3a01      	subs	r2, #1
 8000d7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	2103      	movs	r1, #3
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff ff7c 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x44>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x44>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b002      	add	sp, #8
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	210f      	movs	r1, #15
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	1c02      	adds	r2, r0, #0
 8000db8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	0002      	movs	r2, r0
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff33 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff ffaf 	bl	8000d60 <SysTick_Config>
 8000e02:	0003      	movs	r3, r0
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e091      	b.n	8000f42 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	001a      	movs	r2, r3
 8000e24:	4b49      	ldr	r3, [pc, #292]	; (8000f4c <HAL_DMA_Init+0x140>)
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d810      	bhi.n	8000e4c <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a48      	ldr	r2, [pc, #288]	; (8000f50 <HAL_DMA_Init+0x144>)
 8000e30:	4694      	mov	ip, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	2114      	movs	r1, #20
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff f964 	bl	8000104 <__udivsi3>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	009a      	lsls	r2, r3, #2
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a43      	ldr	r2, [pc, #268]	; (8000f54 <HAL_DMA_Init+0x148>)
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40
 8000e4a:	e00f      	b.n	8000e6c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a41      	ldr	r2, [pc, #260]	; (8000f58 <HAL_DMA_Init+0x14c>)
 8000e52:	4694      	mov	ip, r2
 8000e54:	4463      	add	r3, ip
 8000e56:	2114      	movs	r1, #20
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff f953 	bl	8000104 <__udivsi3>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	009a      	lsls	r2, r3, #2
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a3c      	ldr	r2, [pc, #240]	; (8000f5c <HAL_DMA_Init+0x150>)
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2225      	movs	r2, #37	; 0x25
 8000e70:	2102      	movs	r1, #2
 8000e72:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4938      	ldr	r1, [pc, #224]	; (8000f60 <HAL_DMA_Init+0x154>)
 8000e80:	400a      	ands	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f000 f9d7 	bl	8001270 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	01db      	lsls	r3, r3, #7
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d102      	bne.n	8000ed4 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000edc:	217f      	movs	r1, #127	; 0x7f
 8000ede:	400a      	ands	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000eea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d011      	beq.n	8000f18 <HAL_DMA_Init+0x10c>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d80d      	bhi.n	8000f18 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fa00 	bl	8001304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	e008      	b.n	8000f2a <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2225      	movs	r2, #37	; 0x25
 8000f34:	2101      	movs	r1, #1
 8000f36:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40020407 	.word	0x40020407
 8000f50:	bffdfff8 	.word	0xbffdfff8
 8000f54:	40020000 	.word	0x40020000
 8000f58:	bffdfbf8 	.word	0xbffdfbf8
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	ffff800f 	.word	0xffff800f

08000f64 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f72:	2317      	movs	r3, #23
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2224      	movs	r2, #36	; 0x24
 8000f7e:	5c9b      	ldrb	r3, [r3, r2]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_DMA_Start_IT+0x24>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e06f      	b.n	8001068 <HAL_DMA_Start_IT+0x104>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2224      	movs	r2, #36	; 0x24
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2225      	movs	r2, #37	; 0x25
 8000f94:	5c9b      	ldrb	r3, [r3, r2]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d157      	bne.n	800104c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2225      	movs	r2, #37	; 0x25
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	438a      	bics	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 f919 	bl	80011f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d008      	beq.n	8000fe0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	210e      	movs	r1, #14
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e00f      	b.n	8001000 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2104      	movs	r1, #4
 8000fec:	438a      	bics	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	210a      	movs	r1, #10
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	025b      	lsls	r3, r3, #9
 800100a:	4013      	ands	r3, r2
 800100c:	d008      	beq.n	8001020 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0049      	lsls	r1, r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	0049      	lsls	r1, r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	e00a      	b.n	8001062 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2280      	movs	r2, #128	; 0x80
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2224      	movs	r2, #36	; 0x24
 8001056:	2100      	movs	r1, #0
 8001058:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800105a:	2317      	movs	r3, #23
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001062:	2317      	movs	r3, #23
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	781b      	ldrb	r3, [r3, #0]
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b006      	add	sp, #24
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	221c      	movs	r2, #28
 800108e:	4013      	ands	r3, r2
 8001090:	2204      	movs	r2, #4
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	d026      	beq.n	80010ea <HAL_DMA_IRQHandler+0x7a>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2204      	movs	r2, #4
 80010a0:	4013      	ands	r3, r2
 80010a2:	d022      	beq.n	80010ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2220      	movs	r2, #32
 80010ac:	4013      	ands	r3, r2
 80010ae:	d107      	bne.n	80010c0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2104      	movs	r1, #4
 80010bc:	438a      	bics	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c4:	221c      	movs	r2, #28
 80010c6:	401a      	ands	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	2104      	movs	r1, #4
 80010ce:	4091      	lsls	r1, r2
 80010d0:	000a      	movs	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d100      	bne.n	80010de <HAL_DMA_IRQHandler+0x6e>
 80010dc:	e080      	b.n	80011e0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	0010      	movs	r0, r2
 80010e6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80010e8:	e07a      	b.n	80011e0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	221c      	movs	r2, #28
 80010f0:	4013      	ands	r3, r2
 80010f2:	2202      	movs	r2, #2
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4013      	ands	r3, r2
 80010fc:	d03c      	beq.n	8001178 <HAL_DMA_IRQHandler+0x108>
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2202      	movs	r2, #2
 8001102:	4013      	ands	r3, r2
 8001104:	d038      	beq.n	8001178 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2220      	movs	r2, #32
 800110e:	4013      	ands	r3, r2
 8001110:	d10b      	bne.n	800112a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	210a      	movs	r1, #10
 800111e:	438a      	bics	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2225      	movs	r2, #37	; 0x25
 8001126:	2101      	movs	r1, #1
 8001128:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	001a      	movs	r2, r3
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <HAL_DMA_IRQHandler+0x17c>)
 8001132:	429a      	cmp	r2, r3
 8001134:	d909      	bls.n	800114a <HAL_DMA_IRQHandler+0xda>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	221c      	movs	r2, #28
 800113c:	401a      	ands	r2, r3
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <HAL_DMA_IRQHandler+0x180>)
 8001140:	2102      	movs	r1, #2
 8001142:	4091      	lsls	r1, r2
 8001144:	000a      	movs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	e008      	b.n	800115c <HAL_DMA_IRQHandler+0xec>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	221c      	movs	r2, #28
 8001150:	401a      	ands	r2, r3
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <HAL_DMA_IRQHandler+0x184>)
 8001154:	2102      	movs	r1, #2
 8001156:	4091      	lsls	r1, r2
 8001158:	000a      	movs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	2100      	movs	r1, #0
 8001162:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2b00      	cmp	r3, #0
 800116a:	d039      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	0010      	movs	r0, r2
 8001174:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001176:	e033      	b.n	80011e0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	221c      	movs	r2, #28
 800117e:	4013      	ands	r3, r2
 8001180:	2208      	movs	r2, #8
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	d02a      	beq.n	80011e2 <HAL_DMA_IRQHandler+0x172>
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2208      	movs	r2, #8
 8001190:	4013      	ands	r3, r2
 8001192:	d026      	beq.n	80011e2 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	210e      	movs	r1, #14
 80011a0:	438a      	bics	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	221c      	movs	r2, #28
 80011aa:	401a      	ands	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	2101      	movs	r1, #1
 80011b2:	4091      	lsls	r1, r2
 80011b4:	000a      	movs	r2, r1
 80011b6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2225      	movs	r2, #37	; 0x25
 80011c2:	2101      	movs	r1, #1
 80011c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2224      	movs	r2, #36	; 0x24
 80011ca:	2100      	movs	r1, #0
 80011cc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	0010      	movs	r0, r2
 80011de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46c0      	nop			; (mov r8, r8)
}
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b004      	add	sp, #16
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	40020080 	.word	0x40020080
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020000 	.word	0x40020000

080011f8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800120e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001214:	2b00      	cmp	r3, #0
 8001216:	d004      	beq.n	8001222 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001220:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	221c      	movs	r2, #28
 8001228:	401a      	ands	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2101      	movs	r1, #1
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b10      	cmp	r3, #16
 8001244:	d108      	bne.n	8001258 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001256:	e007      	b.n	8001268 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	60da      	str	r2, [r3, #12]
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b004      	add	sp, #16
 800126e:	bd80      	pop	{r7, pc}

08001270 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	001a      	movs	r2, r3
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001280:	429a      	cmp	r2, r3
 8001282:	d814      	bhi.n	80012ae <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800128e:	189a      	adds	r2, r3, r2
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	001a      	movs	r2, r3
 800129a:	23ff      	movs	r3, #255	; 0xff
 800129c:	4013      	ands	r3, r2
 800129e:	3b08      	subs	r3, #8
 80012a0:	2114      	movs	r1, #20
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7fe ff2e 	bl	8000104 <__udivsi3>
 80012a8:	0003      	movs	r3, r0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e014      	b.n	80012d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80012b8:	189a      	adds	r2, r3, r2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	001a      	movs	r2, r3
 80012c4:	23ff      	movs	r3, #255	; 0xff
 80012c6:	4013      	ands	r3, r2
 80012c8:	3b08      	subs	r3, #8
 80012ca:	2114      	movs	r1, #20
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7fe ff19 	bl	8000104 <__udivsi3>
 80012d2:	0003      	movs	r3, r0
 80012d4:	3307      	adds	r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80012dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	221f      	movs	r2, #31
 80012e2:	4013      	ands	r3, r2
 80012e4:	2201      	movs	r2, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b004      	add	sp, #16
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020407 	.word	0x40020407
 80012f8:	40020800 	.word	0x40020800
 80012fc:	4002081c 	.word	0x4002081c
 8001300:	40020880 	.word	0x40020880

08001304 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	227f      	movs	r2, #127	; 0x7f
 8001312:	4013      	ands	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800131a:	4694      	mov	ip, r2
 800131c:	4463      	add	r3, ip
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	001a      	movs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800132a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3b01      	subs	r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	4013      	ands	r3, r2
 8001334:	2201      	movs	r2, #1
 8001336:	409a      	lsls	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b004      	add	sp, #16
 8001342:	bd80      	pop	{r7, pc}
 8001344:	1000823f 	.word	0x1000823f
 8001348:	40020940 	.word	0x40020940

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e14d      	b.n	80015f8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4091      	lsls	r1, r2
 8001366:	000a      	movs	r2, r1
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <HAL_GPIO_Init+0x28>
 8001372:	e13e      	b.n	80015f2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	4013      	ands	r3, r2
 800137c:	2b01      	cmp	r3, #1
 800137e:	d005      	beq.n	800138c <HAL_GPIO_Init+0x40>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
 8001388:	2b02      	cmp	r3, #2
 800138a:	d130      	bne.n	80013ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	43da      	mvns	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	409a      	lsls	r2, r3
 80013ae:	0013      	movs	r3, r2
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c2:	2201      	movs	r2, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	43da      	mvns	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	2201      	movs	r2, #1
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d017      	beq.n	800142a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	409a      	lsls	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	43da      	mvns	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	4013      	ands	r3, r2
 8001432:	2b02      	cmp	r3, #2
 8001434:	d123      	bne.n	800147e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	58d3      	ldr	r3, [r2, r3]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2207      	movs	r2, #7
 8001448:	4013      	ands	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2107      	movs	r1, #7
 8001462:	400b      	ands	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	6939      	ldr	r1, [r7, #16]
 800147c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	401a      	ands	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	23c0      	movs	r3, #192	; 0xc0
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	4013      	ands	r3, r2
 80014bc:	d100      	bne.n	80014c0 <HAL_GPIO_Init+0x174>
 80014be:	e098      	b.n	80015f2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014c0:	4a53      	ldr	r2, [pc, #332]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3318      	adds	r3, #24
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	589b      	ldr	r3, [r3, r2]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2203      	movs	r2, #3
 80014d2:	4013      	ands	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	220f      	movs	r2, #15
 80014d8:	409a      	lsls	r2, r3
 80014da:	0013      	movs	r3, r2
 80014dc:	43da      	mvns	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	23a0      	movs	r3, #160	; 0xa0
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x1d6>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a48      	ldr	r2, [pc, #288]	; (8001614 <HAL_GPIO_Init+0x2c8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x1d2>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a47      	ldr	r2, [pc, #284]	; (8001618 <HAL_GPIO_Init+0x2cc>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x1ce>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a46      	ldr	r2, [pc, #280]	; (800161c <HAL_GPIO_Init+0x2d0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x1ca>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a45      	ldr	r2, [pc, #276]	; (8001620 <HAL_GPIO_Init+0x2d4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x1c6>
 800150e:	2304      	movs	r3, #4
 8001510:	e008      	b.n	8001524 <HAL_GPIO_Init+0x1d8>
 8001512:	2305      	movs	r3, #5
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x1d8>
 8001516:	2303      	movs	r3, #3
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x1d8>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x1d8>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x1d8>
 8001522:	2300      	movs	r3, #0
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	2103      	movs	r1, #3
 8001528:	400a      	ands	r2, r1
 800152a:	00d2      	lsls	r2, r2, #3
 800152c:	4093      	lsls	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001534:	4936      	ldr	r1, [pc, #216]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3318      	adds	r3, #24
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001542:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43da      	mvns	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	035b      	lsls	r3, r3, #13
 800155a:	4013      	ands	r3, r2
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	039b      	lsls	r3, r3, #14
 8001584:	4013      	ands	r3, r2
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 8001598:	2384      	movs	r3, #132	; 0x84
 800159a:	58d3      	ldr	r3, [r2, r3]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	4013      	ands	r3, r2
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015bc:	4914      	ldr	r1, [pc, #80]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 80015be:	2284      	movs	r2, #132	; 0x84
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	58d3      	ldr	r3, [r2, r3]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	4013      	ands	r3, r2
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ea:	4909      	ldr	r1, [pc, #36]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	40da      	lsrs	r2, r3
 8001600:	1e13      	subs	r3, r2, #0
 8001602:	d000      	beq.n	8001606 <HAL_GPIO_Init+0x2ba>
 8001604:	e6aa      	b.n	800135c <HAL_GPIO_Init+0x10>
  }
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b006      	add	sp, #24
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021800 	.word	0x40021800
 8001614:	50000400 	.word	0x50000400
 8001618:	50000800 	.word	0x50000800
 800161c:	50000c00 	.word	0x50000c00
 8001620:	50001000 	.word	0x50001000

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	0008      	movs	r0, r1
 800162e:	0011      	movs	r1, r2
 8001630:	1cbb      	adds	r3, r7, #2
 8001632:	1c02      	adds	r2, r0, #0
 8001634:	801a      	strh	r2, [r3, #0]
 8001636:	1c7b      	adds	r3, r7, #1
 8001638:	1c0a      	adds	r2, r1, #0
 800163a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163c:	1c7b      	adds	r3, r7, #1
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001644:	1cbb      	adds	r3, r7, #2
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800164e:	1cbb      	adds	r3, r7, #2
 8001650:	881a      	ldrh	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	000a      	movs	r2, r1
 8001668:	1cbb      	adds	r3, r7, #2
 800166a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001672:	1cbb      	adds	r3, r7, #2
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	041a      	lsls	r2, r3, #16
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	1cb9      	adds	r1, r7, #2
 8001682:	8809      	ldrh	r1, [r1, #0]
 8001684:	400b      	ands	r3, r1
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b004      	add	sp, #16
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d11f      	bne.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	0013      	movs	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	189b      	adds	r3, r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4912      	ldr	r1, [pc, #72]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7fe fd1c 	bl	8000104 <__udivsi3>
 80016cc:	0003      	movs	r3, r0
 80016ce:	3301      	adds	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016d2:	e008      	b.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e001      	b.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e009      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	401a      	ands	r2, r3
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d0ed      	beq.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b004      	add	sp, #16
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40007000 	.word	0x40007000
 8001708:	fffff9ff 	.word	0xfffff9ff
 800170c:	20000000 	.word	0x20000000
 8001710:	000f4240 	.word	0x000f4240

08001714 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <LL_RCC_GetAPB1Prescaler+0x14>)
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	23e0      	movs	r3, #224	; 0xe0
 800171e:	01db      	lsls	r3, r3, #7
 8001720:	4013      	ands	r3, r2
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	f000 fb50 	bl	8001de0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4013      	ands	r3, r2
 8001748:	d100      	bne.n	800174c <HAL_RCC_OscConfig+0x20>
 800174a:	e07c      	b.n	8001846 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174c:	4bc3      	ldr	r3, [pc, #780]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2238      	movs	r2, #56	; 0x38
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001756:	4bc1      	ldr	r3, [pc, #772]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d102      	bne.n	800176c <HAL_RCC_OscConfig+0x40>
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d002      	beq.n	8001772 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b08      	cmp	r3, #8
 8001770:	d10b      	bne.n	800178a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001772:	4bba      	ldr	r3, [pc, #744]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	029b      	lsls	r3, r3, #10
 800177a:	4013      	ands	r3, r2
 800177c:	d062      	beq.n	8001844 <HAL_RCC_OscConfig+0x118>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d15e      	bne.n	8001844 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e32a      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	025b      	lsls	r3, r3, #9
 8001792:	429a      	cmp	r2, r3
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_OscConfig+0x7a>
 8001796:	4bb1      	ldr	r3, [pc, #708]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4bb0      	ldr	r3, [pc, #704]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	0249      	lsls	r1, r1, #9
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e020      	b.n	80017e8 <HAL_RCC_OscConfig+0xbc>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	23a0      	movs	r3, #160	; 0xa0
 80017ac:	02db      	lsls	r3, r3, #11
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d10e      	bne.n	80017d0 <HAL_RCC_OscConfig+0xa4>
 80017b2:	4baa      	ldr	r3, [pc, #680]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4ba9      	ldr	r3, [pc, #676]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	02c9      	lsls	r1, r1, #11
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	4ba6      	ldr	r3, [pc, #664]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4ba5      	ldr	r3, [pc, #660]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0249      	lsls	r1, r1, #9
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0xbc>
 80017d0:	4ba2      	ldr	r3, [pc, #648]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4ba1      	ldr	r3, [pc, #644]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017d6:	49a2      	ldr	r1, [pc, #648]	; (8001a60 <HAL_RCC_OscConfig+0x334>)
 80017d8:	400a      	ands	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4b9f      	ldr	r3, [pc, #636]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017e2:	49a0      	ldr	r1, [pc, #640]	; (8001a64 <HAL_RCC_OscConfig+0x338>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d014      	beq.n	800181a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff f9ea 	bl	8000bc8 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fa:	f7ff f9e5 	bl	8000bc8 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b64      	cmp	r3, #100	; 0x64
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e2e9      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180c:	4b93      	ldr	r3, [pc, #588]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	029b      	lsls	r3, r3, #10
 8001814:	4013      	ands	r3, r2
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0xce>
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff f9d5 	bl	8000bc8 <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff f9d0 	bl	8000bc8 <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e2d4      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001836:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	029b      	lsls	r3, r3, #10
 800183e:	4013      	ands	r3, r2
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0xf8>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2202      	movs	r2, #2
 800184c:	4013      	ands	r3, r2
 800184e:	d100      	bne.n	8001852 <HAL_RCC_OscConfig+0x126>
 8001850:	e099      	b.n	8001986 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001852:	4b82      	ldr	r3, [pc, #520]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2238      	movs	r2, #56	; 0x38
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185c:	4b7f      	ldr	r3, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2203      	movs	r2, #3
 8001862:	4013      	ands	r3, r2
 8001864:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b10      	cmp	r3, #16
 800186a:	d102      	bne.n	8001872 <HAL_RCC_OscConfig+0x146>
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d002      	beq.n	8001878 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d135      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001878:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4013      	ands	r3, r2
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x164>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e2a7      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b72      	ldr	r3, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a74      	ldr	r2, [pc, #464]	; (8001a68 <HAL_RCC_OscConfig+0x33c>)
 8001896:	4013      	ands	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	021a      	lsls	r2, r3, #8
 80018a0:	4b6e      	ldr	r3, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d112      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6e      	ldr	r2, [pc, #440]	; (8001a6c <HAL_RCC_OscConfig+0x340>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018c0:	4b66      	ldr	r3, [pc, #408]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0adb      	lsrs	r3, r3, #11
 80018c6:	2207      	movs	r2, #7
 80018c8:	4013      	ands	r3, r2
 80018ca:	4a69      	ldr	r2, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x344>)
 80018cc:	40da      	lsrs	r2, r3
 80018ce:	4b69      	ldr	r3, [pc, #420]	; (8001a74 <HAL_RCC_OscConfig+0x348>)
 80018d0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018d2:	4b69      	ldr	r3, [pc, #420]	; (8001a78 <HAL_RCC_OscConfig+0x34c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff f91a 	bl	8000b10 <HAL_InitTick>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d051      	beq.n	8001984 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e27d      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d030      	beq.n	800194e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018ec:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a5e      	ldr	r2, [pc, #376]	; (8001a6c <HAL_RCC_OscConfig+0x340>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001900:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b55      	ldr	r3, [pc, #340]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0049      	lsls	r1, r1, #1
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff f95b 	bl	8000bc8 <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff f956 	bl	8000bc8 <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e25a      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192a:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4013      	ands	r3, r2
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a4b      	ldr	r2, [pc, #300]	; (8001a68 <HAL_RCC_OscConfig+0x33c>)
 800193c:	4013      	ands	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	021a      	lsls	r2, r3, #8
 8001946:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	e01b      	b.n	8001986 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001954:	4949      	ldr	r1, [pc, #292]	; (8001a7c <HAL_RCC_OscConfig+0x350>)
 8001956:	400a      	ands	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f935 	bl	8000bc8 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff f930 	bl	8000bc8 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e234      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001976:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4013      	ands	r3, r2
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x238>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001984:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2208      	movs	r2, #8
 800198c:	4013      	ands	r3, r2
 800198e:	d047      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2238      	movs	r2, #56	; 0x38
 8001996:	4013      	ands	r3, r2
 8001998:	2b18      	cmp	r3, #24
 800199a:	d10a      	bne.n	80019b2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800199c:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800199e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a0:	2202      	movs	r2, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d03c      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2f4>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d138      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e216      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d019      	beq.n	80019ee <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80019bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80019c0:	2101      	movs	r1, #1
 80019c2:	430a      	orrs	r2, r1
 80019c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff f8ff 	bl	8000bc8 <HAL_GetTick>
 80019ca:	0003      	movs	r3, r0
 80019cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d0:	f7ff f8fa 	bl	8000bc8 <HAL_GetTick>
 80019d4:	0002      	movs	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1fe      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	2202      	movs	r2, #2
 80019e8:	4013      	ands	r3, r2
 80019ea:	d0f1      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2a4>
 80019ec:	e018      	b.n	8001a20 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80019f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80019f4:	2101      	movs	r1, #1
 80019f6:	438a      	bics	r2, r1
 80019f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff f8e5 	bl	8000bc8 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a04:	f7ff f8e0 	bl	8000bc8 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1e4      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d1f1      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2204      	movs	r2, #4
 8001a26:	4013      	ands	r3, r2
 8001a28:	d100      	bne.n	8001a2c <HAL_RCC_OscConfig+0x300>
 8001a2a:	e0c7      	b.n	8001bbc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2c:	231f      	movs	r3, #31
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2238      	movs	r2, #56	; 0x38
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	d11f      	bne.n	8001a80 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a44:	2202      	movs	r2, #2
 8001a46:	4013      	ands	r3, r2
 8001a48:	d100      	bne.n	8001a4c <HAL_RCC_OscConfig+0x320>
 8001a4a:	e0b7      	b.n	8001bbc <HAL_RCC_OscConfig+0x490>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d000      	beq.n	8001a56 <HAL_RCC_OscConfig+0x32a>
 8001a54:	e0b2      	b.n	8001bbc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1c2      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	fffeffff 	.word	0xfffeffff
 8001a64:	fffbffff 	.word	0xfffbffff
 8001a68:	ffff80ff 	.word	0xffff80ff
 8001a6c:	ffffc7ff 	.word	0xffffc7ff
 8001a70:	00f42400 	.word	0x00f42400
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a80:	4bb5      	ldr	r3, [pc, #724]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	055b      	lsls	r3, r3, #21
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_OscConfig+0x364>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x366>
 8001a90:	2300      	movs	r3, #0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d011      	beq.n	8001aba <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4bb0      	ldr	r3, [pc, #704]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a9a:	4baf      	ldr	r3, [pc, #700]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	0549      	lsls	r1, r1, #21
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aa4:	4bac      	ldr	r3, [pc, #688]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	055b      	lsls	r3, r3, #21
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ab2:	231f      	movs	r3, #31
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aba:	4ba8      	ldr	r3, [pc, #672]	; (8001d5c <HAL_RCC_OscConfig+0x630>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d11a      	bne.n	8001afc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac6:	4ba5      	ldr	r3, [pc, #660]	; (8001d5c <HAL_RCC_OscConfig+0x630>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4ba4      	ldr	r3, [pc, #656]	; (8001d5c <HAL_RCC_OscConfig+0x630>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0049      	lsls	r1, r1, #1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f878 	bl	8000bc8 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff f873 	bl	8000bc8 <HAL_GetTick>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e177      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	4b9a      	ldr	r3, [pc, #616]	; (8001d5c <HAL_RCC_OscConfig+0x630>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4013      	ands	r3, r2
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3e6>
 8001b04:	4b94      	ldr	r3, [pc, #592]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b08:	4b93      	ldr	r3, [pc, #588]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b10:	e01c      	b.n	8001b4c <HAL_RCC_OscConfig+0x420>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x408>
 8001b1a:	4b8f      	ldr	r3, [pc, #572]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b1e:	4b8e      	ldr	r3, [pc, #568]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b20:	2104      	movs	r1, #4
 8001b22:	430a      	orrs	r2, r1
 8001b24:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b26:	4b8c      	ldr	r3, [pc, #560]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b2a:	4b8b      	ldr	r3, [pc, #556]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0x420>
 8001b34:	4b88      	ldr	r3, [pc, #544]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b38:	4b87      	ldr	r3, [pc, #540]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b40:	4b85      	ldr	r3, [pc, #532]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b44:	4b84      	ldr	r3, [pc, #528]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b46:	2104      	movs	r1, #4
 8001b48:	438a      	bics	r2, r1
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d014      	beq.n	8001b7e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f838 	bl	8000bc8 <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5c:	e009      	b.n	8001b72 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5e:	f7ff f833 	bl	8000bc8 <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	4a7d      	ldr	r2, [pc, #500]	; (8001d60 <HAL_RCC_OscConfig+0x634>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e136      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b72:	4b79      	ldr	r3, [pc, #484]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x432>
 8001b7c:	e013      	b.n	8001ba6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f823 	bl	8000bc8 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b86:	e009      	b.n	8001b9c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff f81e 	bl	8000bc8 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	4a73      	ldr	r2, [pc, #460]	; (8001d60 <HAL_RCC_OscConfig+0x634>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e121      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b9c:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ba6:	231f      	movs	r3, #31
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001bb0:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001bb6:	496b      	ldr	r1, [pc, #428]	; (8001d64 <HAL_RCC_OscConfig+0x638>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d039      	beq.n	8001c3a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01b      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bce:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	03c9      	lsls	r1, r1, #15
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7fe fff4 	bl	8000bc8 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be6:	f7fe ffef 	bl	8000bc8 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e0f3      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001bf8:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	4013      	ands	r3, r2
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x4ba>
 8001c04:	e019      	b.n	8001c3a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c06:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c0c:	4956      	ldr	r1, [pc, #344]	; (8001d68 <HAL_RCC_OscConfig+0x63c>)
 8001c0e:	400a      	ands	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7fe ffd9 	bl	8000bc8 <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c1c:	f7fe ffd4 	bl	8000bc8 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0d8      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c2e:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	041b      	lsls	r3, r3, #16
 8001c36:	4013      	ands	r3, r2
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d100      	bne.n	8001c44 <HAL_RCC_OscConfig+0x518>
 8001c42:	e0cc      	b.n	8001dde <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c44:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2238      	movs	r2, #56	; 0x38
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d100      	bne.n	8001c52 <HAL_RCC_OscConfig+0x526>
 8001c50:	e07b      	b.n	8001d4a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d156      	bne.n	8001d08 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c60:	4942      	ldr	r1, [pc, #264]	; (8001d6c <HAL_RCC_OscConfig+0x640>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7fe ffaf 	bl	8000bc8 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7fe ffaa 	bl	8000bc8 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e0ae      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	049b      	lsls	r3, r3, #18
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	4a37      	ldr	r2, [pc, #220]	; (8001d70 <HAL_RCC_OscConfig+0x644>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	0449      	lsls	r1, r1, #17
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	0549      	lsls	r1, r1, #21
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7fe ff73 	bl	8000bc8 <HAL_GetTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7fe ff6e 	bl	8000bc8 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e072      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	049b      	lsls	r3, r3, #18
 8001d02:	4013      	ands	r3, r2
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x5bc>
 8001d06:	e06a      	b.n	8001dde <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001d0e:	4917      	ldr	r1, [pc, #92]	; (8001d6c <HAL_RCC_OscConfig+0x640>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7fe ff58 	bl	8000bc8 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7fe ff53 	bl	8000bc8 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e057      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	049b      	lsls	r3, r3, #18
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <HAL_RCC_OscConfig+0x648>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	e049      	b.n	8001dde <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d112      	bne.n	8001d78 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e044      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	00001388 	.word	0x00001388
 8001d64:	efffffff 	.word	0xefffffff
 8001d68:	ffbfffff 	.word	0xffbfffff
 8001d6c:	feffffff 	.word	0xfeffffff
 8001d70:	11c1808c 	.word	0x11c1808c
 8001d74:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_RCC_OscConfig+0x6bc>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2203      	movs	r2, #3
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d126      	bne.n	8001dda <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2270      	movs	r2, #112	; 0x70
 8001d90:	401a      	ands	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11f      	bne.n	8001dda <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	23fe      	movs	r3, #254	; 0xfe
 8001d9e:	01db      	lsls	r3, r3, #7
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d116      	bne.n	8001dda <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	23f8      	movs	r3, #248	; 0xf8
 8001db0:	039b      	lsls	r3, r3, #14
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d10e      	bne.n	8001dda <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	23e0      	movs	r3, #224	; 0xe0
 8001dc0:	051b      	lsls	r3, r3, #20
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	0f5b      	lsrs	r3, r3, #29
 8001dd0:	075a      	lsls	r2, r3, #29
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b008      	add	sp, #32
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0e9      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2207      	movs	r2, #7
 8001e06:	4013      	ands	r3, r2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d91e      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2207      	movs	r2, #7
 8001e14:	4393      	bics	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e20:	f7fe fed2 	bl	8000bc8 <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2a:	f7fe fecd 	bl	8000bc8 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a6a      	ldr	r2, [pc, #424]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0ca      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2207      	movs	r2, #7
 8001e44:	4013      	ands	r3, r2
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d015      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d006      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e60:	4b60      	ldr	r3, [pc, #384]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	21e0      	movs	r1, #224	; 0xe0
 8001e68:	01c9      	lsls	r1, r1, #7
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d057      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e94:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d12b      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e097      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eac:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	049b      	lsls	r3, r3, #18
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d11f      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e08b      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec4:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d113      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e07f      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001edc:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e074      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e06d      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2207      	movs	r2, #7
 8001efe:	4393      	bics	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fe5c 	bl	8000bc8 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f14:	e009      	b.n	8001f2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7fe fe57 	bl	8000bc8 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e054      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2238      	movs	r2, #56	; 0x38
 8001f30:	401a      	ands	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1ec      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2207      	movs	r2, #7
 8001f42:	4013      	ands	r3, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d21e      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2207      	movs	r2, #7
 8001f50:	4393      	bics	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fe34 	bl	8000bc8 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f64:	e009      	b.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f66:	f7fe fe2f 	bl	8000bc8 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e02c      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d009      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <HAL_RCC_ClockConfig+0x200>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fa6:	f000 f829 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001faa:	0001      	movs	r1, r0
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x204>)
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	58d3      	ldr	r3, [r2, r3]
 8001fbc:	221f      	movs	r2, #31
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	40da      	lsrs	r2, r3
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_ClockConfig+0x208>)
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x20c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7fe fd9f 	bl	8000b10 <HAL_InitTick>
 8001fd2:	0003      	movs	r3, r0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	00001388 	.word	0x00001388
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	fffff0ff 	.word	0xfffff0ff
 8001fec:	ffff8fff 	.word	0xffff8fff
 8001ff0:	08003744 	.word	0x08003744
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2238      	movs	r2, #56	; 0x38
 8002008:	4013      	ands	r3, r2
 800200a:	d10f      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0adb      	lsrs	r3, r3, #11
 8002012:	2207      	movs	r2, #7
 8002014:	4013      	ands	r3, r2
 8002016:	2201      	movs	r2, #1
 8002018:	409a      	lsls	r2, r3
 800201a:	0013      	movs	r3, r2
 800201c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	4835      	ldr	r0, [pc, #212]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002022:	f7fe f86f 	bl	8000104 <__udivsi3>
 8002026:	0003      	movs	r3, r0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e05d      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2238      	movs	r2, #56	; 0x38
 8002032:	4013      	ands	r3, r2
 8002034:	2b08      	cmp	r3, #8
 8002036:	d102      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCC_GetSysClockFreq+0x100>)
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	e054      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2238      	movs	r2, #56	; 0x38
 8002044:	4013      	ands	r3, r2
 8002046:	2b10      	cmp	r3, #16
 8002048:	d138      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2203      	movs	r2, #3
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	2207      	movs	r2, #7
 800205c:	4013      	ands	r3, r2
 800205e:	3301      	adds	r3, #1
 8002060:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d10d      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	4824      	ldr	r0, [pc, #144]	; (80020fc <HAL_RCC_GetSysClockFreq+0x100>)
 800206c:	f7fe f84a 	bl	8000104 <__udivsi3>
 8002070:	0003      	movs	r3, r0
 8002072:	0019      	movs	r1, r3
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	227f      	movs	r2, #127	; 0x7f
 800207c:	4013      	ands	r3, r2
 800207e:	434b      	muls	r3, r1
 8002080:	617b      	str	r3, [r7, #20]
        break;
 8002082:	e00d      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	481c      	ldr	r0, [pc, #112]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002088:	f7fe f83c 	bl	8000104 <__udivsi3>
 800208c:	0003      	movs	r3, r0
 800208e:	0019      	movs	r1, r3
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	227f      	movs	r2, #127	; 0x7f
 8002098:	4013      	ands	r3, r2
 800209a:	434b      	muls	r3, r1
 800209c:	617b      	str	r3, [r7, #20]
        break;
 800209e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0f5b      	lsrs	r3, r3, #29
 80020a6:	2207      	movs	r2, #7
 80020a8:	4013      	ands	r3, r2
 80020aa:	3301      	adds	r3, #1
 80020ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	6978      	ldr	r0, [r7, #20]
 80020b2:	f7fe f827 	bl	8000104 <__udivsi3>
 80020b6:	0003      	movs	r3, r0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e015      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2238      	movs	r2, #56	; 0x38
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d103      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2238      	movs	r2, #56	; 0x38
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b18      	cmp	r3, #24
 80020da:	d103      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020dc:	23fa      	movs	r3, #250	; 0xfa
 80020de:	01db      	lsls	r3, r3, #7
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	e001      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020e8:	693b      	ldr	r3, [r7, #16]
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b006      	add	sp, #24
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_RCC_GetHCLKFreq+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002118:	f7ff fff2 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800211c:	0004      	movs	r4, r0
 800211e:	f7ff faf9 	bl	8001714 <LL_RCC_GetAPB1Prescaler>
 8002122:	0003      	movs	r3, r0
 8002124:	0b1a      	lsrs	r2, r3, #12
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	58d3      	ldr	r3, [r2, r3]
 800212c:	221f      	movs	r2, #31
 800212e:	4013      	ands	r3, r2
 8002130:	40dc      	lsrs	r4, r3
 8002132:	0023      	movs	r3, r4
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	bdb0      	pop	{r4, r5, r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	08003784 	.word	0x08003784

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002148:	2313      	movs	r3, #19
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002150:	2312      	movs	r3, #18
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	029b      	lsls	r3, r3, #10
 8002160:	4013      	ands	r3, r2
 8002162:	d100      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002164:	e0ad      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2011      	movs	r0, #17
 8002168:	183b      	adds	r3, r7, r0
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	055b      	lsls	r3, r3, #21
 8002176:	4013      	ands	r3, r2
 8002178:	d110      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800217c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0549      	lsls	r1, r1, #21
 8002184:	430a      	orrs	r2, r1
 8002186:	63da      	str	r2, [r3, #60]	; 0x3c
 8002188:	4b40      	ldr	r3, [pc, #256]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800218a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	055b      	lsls	r3, r3, #21
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002196:	183b      	adds	r3, r7, r0
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	0049      	lsls	r1, r1, #1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021aa:	f7fe fd0d 	bl	8000bc8 <HAL_GetTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021b2:	e00b      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe fd08 	bl	8000bc8 <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d904      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021c2:	2313      	movs	r3, #19
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2203      	movs	r2, #3
 80021c8:	701a      	strb	r2, [r3, #0]
        break;
 80021ca:	e005      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d0ed      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021d8:	2313      	movs	r3, #19
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15e      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021e6:	23c0      	movs	r3, #192	; 0xc0
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4013      	ands	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d019      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d014      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	4a24      	ldr	r2, [pc, #144]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002204:	4013      	ands	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800220a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	0249      	lsls	r1, r1, #9
 8002212:	430a      	orrs	r2, r1
 8002214:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800221c:	491e      	ldr	r1, [pc, #120]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800221e:	400a      	ands	r2, r1
 8002220:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d016      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fcca 	bl	8000bc8 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	e00c      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fcc5 	bl	8000bc8 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d904      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800224a:	2313      	movs	r3, #19
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	2203      	movs	r2, #3
 8002250:	701a      	strb	r2, [r3, #0]
            break;
 8002252:	e004      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	2202      	movs	r2, #2
 800225a:	4013      	ands	r3, r2
 800225c:	d0ed      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800225e:	2313      	movs	r3, #19
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10a      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	4a09      	ldr	r2, [pc, #36]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800226e:	4013      	ands	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002278:	430a      	orrs	r2, r1
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
 800227c:	e016      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800227e:	2312      	movs	r3, #18
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2213      	movs	r2, #19
 8002284:	18ba      	adds	r2, r7, r2
 8002286:	7812      	ldrb	r2, [r2, #0]
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e00f      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	fffffcff 	.word	0xfffffcff
 8002298:	fffeffff 	.word	0xfffeffff
 800229c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a0:	2312      	movs	r3, #18
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2213      	movs	r2, #19
 80022a6:	18ba      	adds	r2, r7, r2
 80022a8:	7812      	ldrb	r2, [r2, #0]
 80022aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ac:	2311      	movs	r3, #17
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4bb6      	ldr	r3, [pc, #728]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ba:	4bb5      	ldr	r3, [pc, #724]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022bc:	49b5      	ldr	r1, [pc, #724]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80022be:	400a      	ands	r2, r1
 80022c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022cc:	4bb0      	ldr	r3, [pc, #704]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	2203      	movs	r2, #3
 80022d2:	4393      	bics	r3, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	4bad      	ldr	r3, [pc, #692]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ea:	4ba9      	ldr	r3, [pc, #676]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	220c      	movs	r2, #12
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4ba5      	ldr	r3, [pc, #660]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2204      	movs	r2, #4
 8002304:	4013      	ands	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002308:	4ba1      	ldr	r3, [pc, #644]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	2230      	movs	r2, #48	; 0x30
 800230e:	4393      	bics	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	4b9e      	ldr	r3, [pc, #632]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002318:	430a      	orrs	r2, r1
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2210      	movs	r2, #16
 8002322:	4013      	ands	r3, r2
 8002324:	d009      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002326:	4b9a      	ldr	r3, [pc, #616]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	4a9b      	ldr	r2, [pc, #620]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800232c:	4013      	ands	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	4b96      	ldr	r3, [pc, #600]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002336:	430a      	orrs	r2, r1
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	015b      	lsls	r3, r3, #5
 8002342:	4013      	ands	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002346:	4b92      	ldr	r3, [pc, #584]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	4a94      	ldr	r2, [pc, #592]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	4b8e      	ldr	r3, [pc, #568]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002356:	430a      	orrs	r2, r1
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002366:	4b8a      	ldr	r3, [pc, #552]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	4a8d      	ldr	r2, [pc, #564]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800236c:	4013      	ands	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002374:	4b86      	ldr	r3, [pc, #536]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002376:	430a      	orrs	r2, r1
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4013      	ands	r3, r2
 8002384:	d009      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002386:	4b82      	ldr	r3, [pc, #520]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	4a86      	ldr	r2, [pc, #536]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	4b7e      	ldr	r3, [pc, #504]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002396:	430a      	orrs	r2, r1
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2220      	movs	r2, #32
 80023a0:	4013      	ands	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a4:	4b7a      	ldr	r3, [pc, #488]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	4a7f      	ldr	r2, [pc, #508]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	4b77      	ldr	r3, [pc, #476]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023b4:	430a      	orrs	r2, r1
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	4013      	ands	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c2:	4b73      	ldr	r3, [pc, #460]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	4a79      	ldr	r2, [pc, #484]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	4b6f      	ldr	r3, [pc, #444]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	01db      	lsls	r3, r3, #7
 80023de:	4013      	ands	r3, r2
 80023e0:	d015      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023e2:	4b6b      	ldr	r3, [pc, #428]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	0899      	lsrs	r1, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ee:	4b68      	ldr	r3, [pc, #416]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	05db      	lsls	r3, r3, #23
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d106      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002400:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0249      	lsls	r1, r1, #9
 800240a:	430a      	orrs	r2, r1
 800240c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	031b      	lsls	r3, r3, #12
 8002416:	4013      	ands	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800241a:	4b5d      	ldr	r3, [pc, #372]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	2240      	movs	r2, #64	; 0x40
 8002420:	4393      	bics	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002428:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800242a:	430a      	orrs	r2, r1
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	039b      	lsls	r3, r3, #14
 8002436:	4013      	ands	r3, r2
 8002438:	d016      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800243a:	4b55      	ldr	r3, [pc, #340]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	4a5c      	ldr	r2, [pc, #368]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002448:	4b51      	ldr	r3, [pc, #324]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800244a:	430a      	orrs	r2, r1
 800244c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	03db      	lsls	r3, r3, #15
 8002456:	429a      	cmp	r2, r3
 8002458:	d106      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800245a:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	0449      	lsls	r1, r1, #17
 8002464:	430a      	orrs	r2, r1
 8002466:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	03db      	lsls	r3, r3, #15
 8002470:	4013      	ands	r3, r2
 8002472:	d016      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	4a4e      	ldr	r2, [pc, #312]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002482:	4b43      	ldr	r3, [pc, #268]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002484:	430a      	orrs	r2, r1
 8002486:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	045b      	lsls	r3, r3, #17
 8002490:	429a      	cmp	r2, r3
 8002492:	d106      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002494:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	0449      	lsls	r1, r1, #17
 800249e:	430a      	orrs	r2, r1
 80024a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	4013      	ands	r3, r2
 80024ac:	d014      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	2203      	movs	r2, #3
 80024b4:	4393      	bics	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d106      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0249      	lsls	r1, r1, #9
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	019b      	lsls	r3, r3, #6
 80024e0:	4013      	ands	r3, r2
 80024e2:	d014      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80024e4:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	220c      	movs	r2, #12
 80024ea:	4393      	bics	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d106      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	0249      	lsls	r1, r1, #9
 800250a:	430a      	orrs	r2, r1
 800250c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	045b      	lsls	r3, r3, #17
 8002516:	4013      	ands	r3, r2
 8002518:	d016      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002520:	4013      	ands	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252a:	430a      	orrs	r2, r1
 800252c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	019b      	lsls	r3, r3, #6
 8002536:	429a      	cmp	r2, r3
 8002538:	d106      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	4b14      	ldr	r3, [pc, #80]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002540:	2180      	movs	r1, #128	; 0x80
 8002542:	0449      	lsls	r1, r1, #17
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	049b      	lsls	r3, r3, #18
 8002550:	4013      	ands	r3, r2
 8002552:	d016      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	4a10      	ldr	r2, [pc, #64]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002564:	430a      	orrs	r2, r1
 8002566:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	0449      	lsls	r1, r1, #17
 800257e:	430a      	orrs	r2, r1
 8002580:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002582:	2312      	movs	r3, #18
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	781b      	ldrb	r3, [r3, #0]
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b006      	add	sp, #24
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	efffffff 	.word	0xefffffff
 8002598:	fffff3ff 	.word	0xfffff3ff
 800259c:	fffffcff 	.word	0xfffffcff
 80025a0:	fff3ffff 	.word	0xfff3ffff
 80025a4:	ffcfffff 	.word	0xffcfffff
 80025a8:	ffffcfff 	.word	0xffffcfff
 80025ac:	ffff3fff 	.word	0xffff3fff
 80025b0:	ffbfffff 	.word	0xffbfffff
 80025b4:	feffffff 	.word	0xfeffffff

080025b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e046      	b.n	8002658 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2284      	movs	r2, #132	; 0x84
 80025ce:	589b      	ldr	r3, [r3, r2]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	2100      	movs	r1, #0
 80025da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f7fe f994 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2284      	movs	r2, #132	; 0x84
 80025e8:	2124      	movs	r1, #36	; 0x24
 80025ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	438a      	bics	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 f8ee 	bl	80027e0 <UART_SetConfig>
 8002604:	0003      	movs	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e024      	b.n	8002658 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f000 fc37 	bl	8002e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	490d      	ldr	r1, [pc, #52]	; (8002660 <HAL_UART_Init+0xa8>)
 800262a:	400a      	ands	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	212a      	movs	r1, #42	; 0x2a
 800263a:	438a      	bics	r2, r1
 800263c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fccf 	bl	8002ff4 <UART_CheckIdleState>
 8002656:	0003      	movs	r3, r0
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}
 8002660:	ffffb7ff 	.word	0xffffb7ff

08002664 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	1dbb      	adds	r3, r7, #6
 8002670:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2284      	movs	r2, #132	; 0x84
 8002676:	589b      	ldr	r3, [r3, r2]
 8002678:	2b20      	cmp	r3, #32
 800267a:	d000      	beq.n	800267e <HAL_UART_Transmit_DMA+0x1a>
 800267c:	e08c      	b.n	8002798 <HAL_UART_Transmit_DMA+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_UART_Transmit_DMA+0x28>
 8002684:	1dbb      	adds	r3, r7, #6
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e084      	b.n	800279a <HAL_UART_Transmit_DMA+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	015b      	lsls	r3, r3, #5
 8002698:	429a      	cmp	r2, r3
 800269a:	d109      	bne.n	80026b0 <HAL_UART_Transmit_DMA+0x4c>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2201      	movs	r2, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e074      	b.n	800279a <HAL_UART_Transmit_DMA+0x136>
      }
    }

    __HAL_LOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	5c9b      	ldrb	r3, [r3, r2]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_UART_Transmit_DMA+0x5a>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e06d      	b.n	800279a <HAL_UART_Transmit_DMA+0x136>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1dba      	adds	r2, r7, #6
 80026d0:	2154      	movs	r1, #84	; 0x54
 80026d2:	8812      	ldrh	r2, [r2, #0]
 80026d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1dba      	adds	r2, r7, #6
 80026da:	2156      	movs	r1, #86	; 0x56
 80026dc:	8812      	ldrh	r2, [r2, #0]
 80026de:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	228c      	movs	r2, #140	; 0x8c
 80026e4:	2100      	movs	r1, #0
 80026e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2284      	movs	r2, #132	; 0x84
 80026ec:	2121      	movs	r1, #33	; 0x21
 80026ee:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d02c      	beq.n	8002752 <HAL_UART_Transmit_DMA+0xee>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026fc:	4a29      	ldr	r2, [pc, #164]	; (80027a4 <HAL_UART_Transmit_DMA+0x140>)
 80026fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002704:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <HAL_UART_Transmit_DMA+0x144>)
 8002706:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_UART_Transmit_DMA+0x148>)
 800270e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002714:	2200      	movs	r2, #0
 8002716:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002720:	0019      	movs	r1, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3328      	adds	r3, #40	; 0x28
 8002728:	001a      	movs	r2, r3
 800272a:	1dbb      	adds	r3, r7, #6
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	f7fe fc19 	bl	8000f64 <HAL_DMA_Start_IT>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d00d      	beq.n	8002752 <HAL_UART_Transmit_DMA+0xee>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	228c      	movs	r2, #140	; 0x8c
 800273a:	2110      	movs	r1, #16
 800273c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2284      	movs	r2, #132	; 0x84
 800274a:	2120      	movs	r1, #32
 800274c:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e023      	b.n	800279a <HAL_UART_Transmit_DMA+0x136>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2240      	movs	r2, #64	; 0x40
 8002758:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	2100      	movs	r1, #0
 8002760:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002762:	f3ef 8310 	mrs	r3, PRIMASK
 8002766:	613b      	str	r3, [r7, #16]
  return(result);
 8002768:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	2301      	movs	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f383 8810 	msr	PRIMASK, r3
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f383 8810 	msr	PRIMASK, r3
}
 8002792:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_UART_Transmit_DMA+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b008      	add	sp, #32
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	08003365 	.word	0x08003365
 80027a8:	080033fd 	.word	0x080033fd
 80027ac:	0800341b 	.word	0x0800341b

080027b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}

080027e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b090      	sub	sp, #64	; 0x40
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027e8:	231a      	movs	r3, #26
 80027ea:	2220      	movs	r2, #32
 80027ec:	189b      	adds	r3, r3, r2
 80027ee:	19db      	adds	r3, r3, r7
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	431a      	orrs	r2, r3
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	4313      	orrs	r3, r2
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4ac1      	ldr	r2, [pc, #772]	; (8002b18 <UART_SetConfig+0x338>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281e:	430b      	orrs	r3, r1
 8002820:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4abc      	ldr	r2, [pc, #752]	; (8002b1c <UART_SetConfig+0x33c>)
 800282a:	4013      	ands	r3, r2
 800282c:	0018      	movs	r0, r3
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	68d9      	ldr	r1, [r3, #12]
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	0003      	movs	r3, r0
 8002838:	430b      	orrs	r3, r1
 800283a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4ab6      	ldr	r2, [pc, #728]	; (8002b20 <UART_SetConfig+0x340>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <UART_SetConfig+0x80>
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4ab4      	ldr	r2, [pc, #720]	; (8002b24 <UART_SetConfig+0x344>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800285c:	4313      	orrs	r3, r2
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4ab0      	ldr	r2, [pc, #704]	; (8002b28 <UART_SetConfig+0x348>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002872:	430b      	orrs	r3, r1
 8002874:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	220f      	movs	r2, #15
 800287e:	4393      	bics	r3, r2
 8002880:	0018      	movs	r0, r3
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	0003      	movs	r3, r0
 800288c:	430b      	orrs	r3, r1
 800288e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4aa5      	ldr	r2, [pc, #660]	; (8002b2c <UART_SetConfig+0x34c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d131      	bne.n	80028fe <UART_SetConfig+0x11e>
 800289a:	4ba5      	ldr	r3, [pc, #660]	; (8002b30 <UART_SetConfig+0x350>)
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	2203      	movs	r2, #3
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d01d      	beq.n	80028e2 <UART_SetConfig+0x102>
 80028a6:	d823      	bhi.n	80028f0 <UART_SetConfig+0x110>
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d00c      	beq.n	80028c6 <UART_SetConfig+0xe6>
 80028ac:	d820      	bhi.n	80028f0 <UART_SetConfig+0x110>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <UART_SetConfig+0xd8>
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d00e      	beq.n	80028d4 <UART_SetConfig+0xf4>
 80028b6:	e01b      	b.n	80028f0 <UART_SetConfig+0x110>
 80028b8:	231b      	movs	r3, #27
 80028ba:	2220      	movs	r2, #32
 80028bc:	189b      	adds	r3, r3, r2
 80028be:	19db      	adds	r3, r3, r7
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	e154      	b.n	8002b70 <UART_SetConfig+0x390>
 80028c6:	231b      	movs	r3, #27
 80028c8:	2220      	movs	r2, #32
 80028ca:	189b      	adds	r3, r3, r2
 80028cc:	19db      	adds	r3, r3, r7
 80028ce:	2202      	movs	r2, #2
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e14d      	b.n	8002b70 <UART_SetConfig+0x390>
 80028d4:	231b      	movs	r3, #27
 80028d6:	2220      	movs	r2, #32
 80028d8:	189b      	adds	r3, r3, r2
 80028da:	19db      	adds	r3, r3, r7
 80028dc:	2204      	movs	r2, #4
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e146      	b.n	8002b70 <UART_SetConfig+0x390>
 80028e2:	231b      	movs	r3, #27
 80028e4:	2220      	movs	r2, #32
 80028e6:	189b      	adds	r3, r3, r2
 80028e8:	19db      	adds	r3, r3, r7
 80028ea:	2208      	movs	r2, #8
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e13f      	b.n	8002b70 <UART_SetConfig+0x390>
 80028f0:	231b      	movs	r3, #27
 80028f2:	2220      	movs	r2, #32
 80028f4:	189b      	adds	r3, r3, r2
 80028f6:	19db      	adds	r3, r3, r7
 80028f8:	2210      	movs	r2, #16
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e138      	b.n	8002b70 <UART_SetConfig+0x390>
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a8c      	ldr	r2, [pc, #560]	; (8002b34 <UART_SetConfig+0x354>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d131      	bne.n	800296c <UART_SetConfig+0x18c>
 8002908:	4b89      	ldr	r3, [pc, #548]	; (8002b30 <UART_SetConfig+0x350>)
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	220c      	movs	r2, #12
 800290e:	4013      	ands	r3, r2
 8002910:	2b0c      	cmp	r3, #12
 8002912:	d01d      	beq.n	8002950 <UART_SetConfig+0x170>
 8002914:	d823      	bhi.n	800295e <UART_SetConfig+0x17e>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d00c      	beq.n	8002934 <UART_SetConfig+0x154>
 800291a:	d820      	bhi.n	800295e <UART_SetConfig+0x17e>
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <UART_SetConfig+0x146>
 8002920:	2b04      	cmp	r3, #4
 8002922:	d00e      	beq.n	8002942 <UART_SetConfig+0x162>
 8002924:	e01b      	b.n	800295e <UART_SetConfig+0x17e>
 8002926:	231b      	movs	r3, #27
 8002928:	2220      	movs	r2, #32
 800292a:	189b      	adds	r3, r3, r2
 800292c:	19db      	adds	r3, r3, r7
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e11d      	b.n	8002b70 <UART_SetConfig+0x390>
 8002934:	231b      	movs	r3, #27
 8002936:	2220      	movs	r2, #32
 8002938:	189b      	adds	r3, r3, r2
 800293a:	19db      	adds	r3, r3, r7
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e116      	b.n	8002b70 <UART_SetConfig+0x390>
 8002942:	231b      	movs	r3, #27
 8002944:	2220      	movs	r2, #32
 8002946:	189b      	adds	r3, r3, r2
 8002948:	19db      	adds	r3, r3, r7
 800294a:	2204      	movs	r2, #4
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	e10f      	b.n	8002b70 <UART_SetConfig+0x390>
 8002950:	231b      	movs	r3, #27
 8002952:	2220      	movs	r2, #32
 8002954:	189b      	adds	r3, r3, r2
 8002956:	19db      	adds	r3, r3, r7
 8002958:	2208      	movs	r2, #8
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e108      	b.n	8002b70 <UART_SetConfig+0x390>
 800295e:	231b      	movs	r3, #27
 8002960:	2220      	movs	r2, #32
 8002962:	189b      	adds	r3, r3, r2
 8002964:	19db      	adds	r3, r3, r7
 8002966:	2210      	movs	r2, #16
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e101      	b.n	8002b70 <UART_SetConfig+0x390>
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a71      	ldr	r2, [pc, #452]	; (8002b38 <UART_SetConfig+0x358>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d131      	bne.n	80029da <UART_SetConfig+0x1fa>
 8002976:	4b6e      	ldr	r3, [pc, #440]	; (8002b30 <UART_SetConfig+0x350>)
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	2230      	movs	r2, #48	; 0x30
 800297c:	4013      	ands	r3, r2
 800297e:	2b30      	cmp	r3, #48	; 0x30
 8002980:	d01d      	beq.n	80029be <UART_SetConfig+0x1de>
 8002982:	d823      	bhi.n	80029cc <UART_SetConfig+0x1ec>
 8002984:	2b20      	cmp	r3, #32
 8002986:	d00c      	beq.n	80029a2 <UART_SetConfig+0x1c2>
 8002988:	d820      	bhi.n	80029cc <UART_SetConfig+0x1ec>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <UART_SetConfig+0x1b4>
 800298e:	2b10      	cmp	r3, #16
 8002990:	d00e      	beq.n	80029b0 <UART_SetConfig+0x1d0>
 8002992:	e01b      	b.n	80029cc <UART_SetConfig+0x1ec>
 8002994:	231b      	movs	r3, #27
 8002996:	2220      	movs	r2, #32
 8002998:	189b      	adds	r3, r3, r2
 800299a:	19db      	adds	r3, r3, r7
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e0e6      	b.n	8002b70 <UART_SetConfig+0x390>
 80029a2:	231b      	movs	r3, #27
 80029a4:	2220      	movs	r2, #32
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	19db      	adds	r3, r3, r7
 80029aa:	2202      	movs	r2, #2
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e0df      	b.n	8002b70 <UART_SetConfig+0x390>
 80029b0:	231b      	movs	r3, #27
 80029b2:	2220      	movs	r2, #32
 80029b4:	189b      	adds	r3, r3, r2
 80029b6:	19db      	adds	r3, r3, r7
 80029b8:	2204      	movs	r2, #4
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e0d8      	b.n	8002b70 <UART_SetConfig+0x390>
 80029be:	231b      	movs	r3, #27
 80029c0:	2220      	movs	r2, #32
 80029c2:	189b      	adds	r3, r3, r2
 80029c4:	19db      	adds	r3, r3, r7
 80029c6:	2208      	movs	r2, #8
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e0d1      	b.n	8002b70 <UART_SetConfig+0x390>
 80029cc:	231b      	movs	r3, #27
 80029ce:	2220      	movs	r2, #32
 80029d0:	189b      	adds	r3, r3, r2
 80029d2:	19db      	adds	r3, r3, r7
 80029d4:	2210      	movs	r2, #16
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e0ca      	b.n	8002b70 <UART_SetConfig+0x390>
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <UART_SetConfig+0x35c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d106      	bne.n	80029f2 <UART_SetConfig+0x212>
 80029e4:	231b      	movs	r3, #27
 80029e6:	2220      	movs	r2, #32
 80029e8:	189b      	adds	r3, r3, r2
 80029ea:	19db      	adds	r3, r3, r7
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e0be      	b.n	8002b70 <UART_SetConfig+0x390>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <UART_SetConfig+0x360>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d106      	bne.n	8002a0a <UART_SetConfig+0x22a>
 80029fc:	231b      	movs	r3, #27
 80029fe:	2220      	movs	r2, #32
 8002a00:	189b      	adds	r3, r3, r2
 8002a02:	19db      	adds	r3, r3, r7
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e0b2      	b.n	8002b70 <UART_SetConfig+0x390>
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a4d      	ldr	r2, [pc, #308]	; (8002b44 <UART_SetConfig+0x364>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d106      	bne.n	8002a22 <UART_SetConfig+0x242>
 8002a14:	231b      	movs	r3, #27
 8002a16:	2220      	movs	r2, #32
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	19db      	adds	r3, r3, r7
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e0a6      	b.n	8002b70 <UART_SetConfig+0x390>
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a3e      	ldr	r2, [pc, #248]	; (8002b20 <UART_SetConfig+0x340>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d13e      	bne.n	8002aaa <UART_SetConfig+0x2ca>
 8002a2c:	4b40      	ldr	r3, [pc, #256]	; (8002b30 <UART_SetConfig+0x350>)
 8002a2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a30:	23c0      	movs	r3, #192	; 0xc0
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4013      	ands	r3, r2
 8002a36:	22c0      	movs	r2, #192	; 0xc0
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d027      	beq.n	8002a8e <UART_SetConfig+0x2ae>
 8002a3e:	22c0      	movs	r2, #192	; 0xc0
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d82a      	bhi.n	8002a9c <UART_SetConfig+0x2bc>
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	0112      	lsls	r2, r2, #4
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d011      	beq.n	8002a72 <UART_SetConfig+0x292>
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d822      	bhi.n	8002a9c <UART_SetConfig+0x2bc>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d004      	beq.n	8002a64 <UART_SetConfig+0x284>
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	00d2      	lsls	r2, r2, #3
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00e      	beq.n	8002a80 <UART_SetConfig+0x2a0>
 8002a62:	e01b      	b.n	8002a9c <UART_SetConfig+0x2bc>
 8002a64:	231b      	movs	r3, #27
 8002a66:	2220      	movs	r2, #32
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	19db      	adds	r3, r3, r7
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e07e      	b.n	8002b70 <UART_SetConfig+0x390>
 8002a72:	231b      	movs	r3, #27
 8002a74:	2220      	movs	r2, #32
 8002a76:	189b      	adds	r3, r3, r2
 8002a78:	19db      	adds	r3, r3, r7
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e077      	b.n	8002b70 <UART_SetConfig+0x390>
 8002a80:	231b      	movs	r3, #27
 8002a82:	2220      	movs	r2, #32
 8002a84:	189b      	adds	r3, r3, r2
 8002a86:	19db      	adds	r3, r3, r7
 8002a88:	2204      	movs	r2, #4
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e070      	b.n	8002b70 <UART_SetConfig+0x390>
 8002a8e:	231b      	movs	r3, #27
 8002a90:	2220      	movs	r2, #32
 8002a92:	189b      	adds	r3, r3, r2
 8002a94:	19db      	adds	r3, r3, r7
 8002a96:	2208      	movs	r2, #8
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e069      	b.n	8002b70 <UART_SetConfig+0x390>
 8002a9c:	231b      	movs	r3, #27
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	189b      	adds	r3, r3, r2
 8002aa2:	19db      	adds	r3, r3, r7
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e062      	b.n	8002b70 <UART_SetConfig+0x390>
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <UART_SetConfig+0x344>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d157      	bne.n	8002b64 <UART_SetConfig+0x384>
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <UART_SetConfig+0x350>)
 8002ab6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ab8:	23c0      	movs	r3, #192	; 0xc0
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	22c0      	movs	r2, #192	; 0xc0
 8002ac0:	0092      	lsls	r2, r2, #2
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d040      	beq.n	8002b48 <UART_SetConfig+0x368>
 8002ac6:	22c0      	movs	r2, #192	; 0xc0
 8002ac8:	0092      	lsls	r2, r2, #2
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d843      	bhi.n	8002b56 <UART_SetConfig+0x376>
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	0092      	lsls	r2, r2, #2
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d011      	beq.n	8002afa <UART_SetConfig+0x31a>
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	0092      	lsls	r2, r2, #2
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d83b      	bhi.n	8002b56 <UART_SetConfig+0x376>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <UART_SetConfig+0x30c>
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	0052      	lsls	r2, r2, #1
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00e      	beq.n	8002b08 <UART_SetConfig+0x328>
 8002aea:	e034      	b.n	8002b56 <UART_SetConfig+0x376>
 8002aec:	231b      	movs	r3, #27
 8002aee:	2220      	movs	r2, #32
 8002af0:	189b      	adds	r3, r3, r2
 8002af2:	19db      	adds	r3, r3, r7
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e03a      	b.n	8002b70 <UART_SetConfig+0x390>
 8002afa:	231b      	movs	r3, #27
 8002afc:	2220      	movs	r2, #32
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	19db      	adds	r3, r3, r7
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e033      	b.n	8002b70 <UART_SetConfig+0x390>
 8002b08:	231b      	movs	r3, #27
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	189b      	adds	r3, r3, r2
 8002b0e:	19db      	adds	r3, r3, r7
 8002b10:	2204      	movs	r2, #4
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e02c      	b.n	8002b70 <UART_SetConfig+0x390>
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	cfff69f3 	.word	0xcfff69f3
 8002b1c:	ffffcfff 	.word	0xffffcfff
 8002b20:	40008000 	.word	0x40008000
 8002b24:	40008400 	.word	0x40008400
 8002b28:	11fff4ff 	.word	0x11fff4ff
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40004400 	.word	0x40004400
 8002b38:	40004800 	.word	0x40004800
 8002b3c:	40004c00 	.word	0x40004c00
 8002b40:	40005000 	.word	0x40005000
 8002b44:	40013c00 	.word	0x40013c00
 8002b48:	231b      	movs	r3, #27
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	189b      	adds	r3, r3, r2
 8002b4e:	19db      	adds	r3, r3, r7
 8002b50:	2208      	movs	r2, #8
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e00c      	b.n	8002b70 <UART_SetConfig+0x390>
 8002b56:	231b      	movs	r3, #27
 8002b58:	2220      	movs	r2, #32
 8002b5a:	189b      	adds	r3, r3, r2
 8002b5c:	19db      	adds	r3, r3, r7
 8002b5e:	2210      	movs	r2, #16
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e005      	b.n	8002b70 <UART_SetConfig+0x390>
 8002b64:	231b      	movs	r3, #27
 8002b66:	2220      	movs	r2, #32
 8002b68:	189b      	adds	r3, r3, r2
 8002b6a:	19db      	adds	r3, r3, r7
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4ac1      	ldr	r2, [pc, #772]	; (8002e7c <UART_SetConfig+0x69c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d005      	beq.n	8002b86 <UART_SetConfig+0x3a6>
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4ac0      	ldr	r2, [pc, #768]	; (8002e80 <UART_SetConfig+0x6a0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d000      	beq.n	8002b86 <UART_SetConfig+0x3a6>
 8002b84:	e093      	b.n	8002cae <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b86:	231b      	movs	r3, #27
 8002b88:	2220      	movs	r2, #32
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d015      	beq.n	8002bc0 <UART_SetConfig+0x3e0>
 8002b94:	dc18      	bgt.n	8002bc8 <UART_SetConfig+0x3e8>
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d00d      	beq.n	8002bb6 <UART_SetConfig+0x3d6>
 8002b9a:	dc15      	bgt.n	8002bc8 <UART_SetConfig+0x3e8>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <UART_SetConfig+0x3c6>
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d005      	beq.n	8002bb0 <UART_SetConfig+0x3d0>
 8002ba4:	e010      	b.n	8002bc8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba6:	f7ff fab5 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8002baa:	0003      	movs	r3, r0
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bae:	e014      	b.n	8002bda <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb0:	4bb4      	ldr	r3, [pc, #720]	; (8002e84 <UART_SetConfig+0x6a4>)
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bb4:	e011      	b.n	8002bda <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb6:	f7ff fa21 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bbe:	e00c      	b.n	8002bda <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bc6:	e008      	b.n	8002bda <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002bcc:	231a      	movs	r3, #26
 8002bce:	2220      	movs	r2, #32
 8002bd0:	189b      	adds	r3, r3, r2
 8002bd2:	19db      	adds	r3, r3, r7
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
        break;
 8002bd8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d100      	bne.n	8002be2 <UART_SetConfig+0x402>
 8002be0:	e135      	b.n	8002e4e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be6:	4ba8      	ldr	r3, [pc, #672]	; (8002e88 <UART_SetConfig+0x6a8>)
 8002be8:	0052      	lsls	r2, r2, #1
 8002bea:	5ad3      	ldrh	r3, [r2, r3]
 8002bec:	0019      	movs	r1, r3
 8002bee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bf0:	f7fd fa88 	bl	8000104 <__udivsi3>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	0013      	movs	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	189b      	adds	r3, r3, r2
 8002c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d305      	bcc.n	8002c14 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d906      	bls.n	8002c22 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002c14:	231a      	movs	r3, #26
 8002c16:	2220      	movs	r2, #32
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	19db      	adds	r3, r3, r7
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e044      	b.n	8002cac <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2e:	4b96      	ldr	r3, [pc, #600]	; (8002e88 <UART_SetConfig+0x6a8>)
 8002c30:	0052      	lsls	r2, r2, #1
 8002c32:	5ad3      	ldrh	r3, [r2, r3]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	69b8      	ldr	r0, [r7, #24]
 8002c40:	69f9      	ldr	r1, [r7, #28]
 8002c42:	f7fd fbd5 	bl	80003f0 <__aeabi_uldivmod>
 8002c46:	0002      	movs	r2, r0
 8002c48:	000b      	movs	r3, r1
 8002c4a:	0e11      	lsrs	r1, r2, #24
 8002c4c:	021d      	lsls	r5, r3, #8
 8002c4e:	430d      	orrs	r5, r1
 8002c50:	0214      	lsls	r4, r2, #8
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68b8      	ldr	r0, [r7, #8]
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	1900      	adds	r0, r0, r4
 8002c64:	4169      	adcs	r1, r5
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f7fd fbbc 	bl	80003f0 <__aeabi_uldivmod>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	000b      	movs	r3, r1
 8002c7c:	0013      	movs	r3, r2
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c82:	23c0      	movs	r3, #192	; 0xc0
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d309      	bcc.n	8002c9e <UART_SetConfig+0x4be>
 8002c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	035b      	lsls	r3, r3, #13
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d204      	bcs.n	8002c9e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	e006      	b.n	8002cac <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002c9e:	231a      	movs	r3, #26
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	19db      	adds	r3, r3, r7
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002caa:	e0d0      	b.n	8002e4e <UART_SetConfig+0x66e>
 8002cac:	e0cf      	b.n	8002e4e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d000      	beq.n	8002cbc <UART_SetConfig+0x4dc>
 8002cba:	e070      	b.n	8002d9e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002cbc:	231b      	movs	r3, #27
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	189b      	adds	r3, r3, r2
 8002cc2:	19db      	adds	r3, r3, r7
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d015      	beq.n	8002cf6 <UART_SetConfig+0x516>
 8002cca:	dc18      	bgt.n	8002cfe <UART_SetConfig+0x51e>
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d00d      	beq.n	8002cec <UART_SetConfig+0x50c>
 8002cd0:	dc15      	bgt.n	8002cfe <UART_SetConfig+0x51e>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <UART_SetConfig+0x4fc>
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d005      	beq.n	8002ce6 <UART_SetConfig+0x506>
 8002cda:	e010      	b.n	8002cfe <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cdc:	f7ff fa1a 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ce4:	e014      	b.n	8002d10 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <UART_SetConfig+0x6a4>)
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cea:	e011      	b.n	8002d10 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cec:	f7ff f986 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cf4:	e00c      	b.n	8002d10 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cfc:	e008      	b.n	8002d10 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002d02:	231a      	movs	r3, #26
 8002d04:	2220      	movs	r2, #32
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	19db      	adds	r3, r3, r7
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
        break;
 8002d0e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d100      	bne.n	8002d18 <UART_SetConfig+0x538>
 8002d16:	e09a      	b.n	8002e4e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1c:	4b5a      	ldr	r3, [pc, #360]	; (8002e88 <UART_SetConfig+0x6a8>)
 8002d1e:	0052      	lsls	r2, r2, #1
 8002d20:	5ad3      	ldrh	r3, [r2, r3]
 8002d22:	0019      	movs	r1, r3
 8002d24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d26:	f7fd f9ed 	bl	8000104 <__udivsi3>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	005a      	lsls	r2, r3, #1
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	18d2      	adds	r2, r2, r3
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	0010      	movs	r0, r2
 8002d3e:	f7fd f9e1 	bl	8000104 <__udivsi3>
 8002d42:	0003      	movs	r3, r0
 8002d44:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	2b0f      	cmp	r3, #15
 8002d4a:	d921      	bls.n	8002d90 <UART_SetConfig+0x5b0>
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	025b      	lsls	r3, r3, #9
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d21c      	bcs.n	8002d90 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	200e      	movs	r0, #14
 8002d5c:	2420      	movs	r4, #32
 8002d5e:	1903      	adds	r3, r0, r4
 8002d60:	19db      	adds	r3, r3, r7
 8002d62:	210f      	movs	r1, #15
 8002d64:	438a      	bics	r2, r1
 8002d66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2207      	movs	r2, #7
 8002d70:	4013      	ands	r3, r2
 8002d72:	b299      	uxth	r1, r3
 8002d74:	1903      	adds	r3, r0, r4
 8002d76:	19db      	adds	r3, r3, r7
 8002d78:	1902      	adds	r2, r0, r4
 8002d7a:	19d2      	adds	r2, r2, r7
 8002d7c:	8812      	ldrh	r2, [r2, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	1902      	adds	r2, r0, r4
 8002d88:	19d2      	adds	r2, r2, r7
 8002d8a:	8812      	ldrh	r2, [r2, #0]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	e05e      	b.n	8002e4e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002d90:	231a      	movs	r3, #26
 8002d92:	2220      	movs	r2, #32
 8002d94:	189b      	adds	r3, r3, r2
 8002d96:	19db      	adds	r3, r3, r7
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e057      	b.n	8002e4e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d9e:	231b      	movs	r3, #27
 8002da0:	2220      	movs	r2, #32
 8002da2:	189b      	adds	r3, r3, r2
 8002da4:	19db      	adds	r3, r3, r7
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d015      	beq.n	8002dd8 <UART_SetConfig+0x5f8>
 8002dac:	dc18      	bgt.n	8002de0 <UART_SetConfig+0x600>
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d00d      	beq.n	8002dce <UART_SetConfig+0x5ee>
 8002db2:	dc15      	bgt.n	8002de0 <UART_SetConfig+0x600>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <UART_SetConfig+0x5de>
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d005      	beq.n	8002dc8 <UART_SetConfig+0x5e8>
 8002dbc:	e010      	b.n	8002de0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dbe:	f7ff f9a9 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dc6:	e014      	b.n	8002df2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc8:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <UART_SetConfig+0x6a4>)
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dcc:	e011      	b.n	8002df2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dce:	f7ff f915 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dd6:	e00c      	b.n	8002df2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dde:	e008      	b.n	8002df2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002de4:	231a      	movs	r3, #26
 8002de6:	2220      	movs	r2, #32
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	19db      	adds	r3, r3, r7
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
        break;
 8002df0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02a      	beq.n	8002e4e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <UART_SetConfig+0x6a8>)
 8002dfe:	0052      	lsls	r2, r2, #1
 8002e00:	5ad3      	ldrh	r3, [r2, r3]
 8002e02:	0019      	movs	r1, r3
 8002e04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e06:	f7fd f97d 	bl	8000104 <__udivsi3>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	18d2      	adds	r2, r2, r3
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	0010      	movs	r0, r2
 8002e1e:	f7fd f971 	bl	8000104 <__udivsi3>
 8002e22:	0003      	movs	r3, r0
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d90a      	bls.n	8002e42 <UART_SetConfig+0x662>
 8002e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	025b      	lsls	r3, r3, #9
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d205      	bcs.n	8002e42 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	e005      	b.n	8002e4e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002e42:	231a      	movs	r3, #26
 8002e44:	2220      	movs	r2, #32
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	19db      	adds	r3, r3, r7
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	226a      	movs	r2, #106	; 0x6a
 8002e52:	2101      	movs	r1, #1
 8002e54:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	2268      	movs	r2, #104	; 0x68
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	2200      	movs	r2, #0
 8002e62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	2200      	movs	r2, #0
 8002e68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002e6a:	231a      	movs	r3, #26
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	189b      	adds	r3, r3, r2
 8002e70:	19db      	adds	r3, r3, r7
 8002e72:	781b      	ldrb	r3, [r3, #0]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b010      	add	sp, #64	; 0x40
 8002e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7c:	40008000 	.word	0x40008000
 8002e80:	40008400 	.word	0x40008400
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	080037a4 	.word	0x080037a4

08002e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	; (8002fd0 <UART_AdvFeatureConfig+0x144>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	2202      	movs	r2, #2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4a43      	ldr	r2, [pc, #268]	; (8002fd4 <UART_AdvFeatureConfig+0x148>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	2204      	movs	r2, #4
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a3b      	ldr	r2, [pc, #236]	; (8002fd8 <UART_AdvFeatureConfig+0x14c>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	2208      	movs	r2, #8
 8002f00:	4013      	ands	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <UART_AdvFeatureConfig+0x150>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	2210      	movs	r2, #16
 8002f22:	4013      	ands	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <UART_AdvFeatureConfig+0x154>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	2220      	movs	r2, #32
 8002f44:	4013      	ands	r3, r2
 8002f46:	d00b      	beq.n	8002f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4a25      	ldr	r2, [pc, #148]	; (8002fe4 <UART_AdvFeatureConfig+0x158>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	4013      	ands	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <UART_AdvFeatureConfig+0x15c>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	035b      	lsls	r3, r3, #13
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d10b      	bne.n	8002fa6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a15      	ldr	r2, [pc, #84]	; (8002fec <UART_AdvFeatureConfig+0x160>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	4013      	ands	r3, r2
 8002fae:	d00b      	beq.n	8002fc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <UART_AdvFeatureConfig+0x164>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]
  }
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b002      	add	sp, #8
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	fffdffff 	.word	0xfffdffff
 8002fd4:	fffeffff 	.word	0xfffeffff
 8002fd8:	fffbffff 	.word	0xfffbffff
 8002fdc:	ffff7fff 	.word	0xffff7fff
 8002fe0:	ffffefff 	.word	0xffffefff
 8002fe4:	ffffdfff 	.word	0xffffdfff
 8002fe8:	ffefffff 	.word	0xffefffff
 8002fec:	ff9fffff 	.word	0xff9fffff
 8002ff0:	fff7ffff 	.word	0xfff7ffff

08002ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	228c      	movs	r2, #140	; 0x8c
 8003000:	2100      	movs	r1, #0
 8003002:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003004:	f7fd fde0 	bl	8000bc8 <HAL_GetTick>
 8003008:	0003      	movs	r3, r0
 800300a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2208      	movs	r2, #8
 8003014:	4013      	ands	r3, r2
 8003016:	2b08      	cmp	r3, #8
 8003018:	d10c      	bne.n	8003034 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2280      	movs	r2, #128	; 0x80
 800301e:	0391      	lsls	r1, r2, #14
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4a18      	ldr	r2, [pc, #96]	; (8003084 <UART_CheckIdleState+0x90>)
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	f000 f82e 	bl	8003088 <UART_WaitOnFlagUntilTimeout>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e023      	b.n	800307c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2204      	movs	r2, #4
 800303c:	4013      	ands	r3, r2
 800303e:	2b04      	cmp	r3, #4
 8003040:	d10c      	bne.n	800305c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	03d1      	lsls	r1, r2, #15
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <UART_CheckIdleState+0x90>)
 800304c:	9200      	str	r2, [sp, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	f000 f81a 	bl	8003088 <UART_WaitOnFlagUntilTimeout>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d001      	beq.n	800305c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e00f      	b.n	800307c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2284      	movs	r2, #132	; 0x84
 8003060:	2120      	movs	r1, #32
 8003062:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2288      	movs	r2, #136	; 0x88
 8003068:	2120      	movs	r1, #32
 800306a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bd80      	pop	{r7, pc}
 8003084:	01ffffff 	.word	0x01ffffff

08003088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b094      	sub	sp, #80	; 0x50
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003098:	e0a7      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309c:	3301      	adds	r3, #1
 800309e:	d100      	bne.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80030a0:	e0a3      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a2:	f7fd fd91 	bl	8000bc8 <HAL_GetTick>
 80030a6:	0002      	movs	r2, r0
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d302      	bcc.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d13f      	bne.n	8003138 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b8:	f3ef 8310 	mrs	r3, PRIMASK
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80030c0:	647b      	str	r3, [r7, #68]	; 0x44
 80030c2:	2301      	movs	r3, #1
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	494e      	ldr	r1, [pc, #312]	; (8003214 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80030da:	400a      	ands	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8310 	mrs	r3, PRIMASK
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
 80030f4:	2301      	movs	r3, #1
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	438a      	bics	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003116:	f383 8810 	msr	PRIMASK, r3
}
 800311a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2284      	movs	r2, #132	; 0x84
 8003120:	2120      	movs	r1, #32
 8003122:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2288      	movs	r2, #136	; 0x88
 8003128:	2120      	movs	r1, #32
 800312a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	2100      	movs	r1, #0
 8003132:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e069      	b.n	800320c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2204      	movs	r2, #4
 8003140:	4013      	ands	r3, r2
 8003142:	d052      	beq.n	80031ea <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	401a      	ands	r2, r3
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	429a      	cmp	r2, r3
 8003156:	d148      	bne.n	80031ea <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003162:	f3ef 8310 	mrs	r3, PRIMASK
 8003166:	613b      	str	r3, [r7, #16]
  return(result);
 8003168:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800316c:	2301      	movs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f383 8810 	msr	PRIMASK, r3
}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4924      	ldr	r1, [pc, #144]	; (8003214 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003184:	400a      	ands	r2, r1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f383 8810 	msr	PRIMASK, r3
}
 8003192:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003194:	f3ef 8310 	mrs	r3, PRIMASK
 8003198:	61fb      	str	r3, [r7, #28]
  return(result);
 800319a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319c:	64bb      	str	r3, [r7, #72]	; 0x48
 800319e:	2301      	movs	r3, #1
 80031a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f383 8810 	msr	PRIMASK, r3
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2101      	movs	r1, #1
 80031b6:	438a      	bics	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	f383 8810 	msr	PRIMASK, r3
}
 80031c4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2284      	movs	r2, #132	; 0x84
 80031ca:	2120      	movs	r1, #32
 80031cc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2288      	movs	r2, #136	; 0x88
 80031d2:	2120      	movs	r1, #32
 80031d4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	228c      	movs	r2, #140	; 0x8c
 80031da:	2120      	movs	r1, #32
 80031dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	2100      	movs	r1, #0
 80031e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e010      	b.n	800320c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	4013      	ands	r3, r2
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	425a      	negs	r2, r3
 80031fa:	4153      	adcs	r3, r2
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	001a      	movs	r2, r3
 8003200:	1dfb      	adds	r3, r7, #7
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d100      	bne.n	800320a <UART_WaitOnFlagUntilTimeout+0x182>
 8003208:	e747      	b.n	800309a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	b014      	add	sp, #80	; 0x50
 8003212:	bd80      	pop	{r7, pc}
 8003214:	fffffe5f 	.word	0xfffffe5f

08003218 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003220:	f3ef 8310 	mrs	r3, PRIMASK
 8003224:	60bb      	str	r3, [r7, #8]
  return(result);
 8003226:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
 800322a:	2301      	movs	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	21c0      	movs	r1, #192	; 0xc0
 8003242:	438a      	bics	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f383 8810 	msr	PRIMASK, r3
}
 8003250:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003252:	f3ef 8310 	mrs	r3, PRIMASK
 8003256:	617b      	str	r3, [r7, #20]
  return(result);
 8003258:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800325a:	623b      	str	r3, [r7, #32]
 800325c:	2301      	movs	r3, #1
 800325e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f383 8810 	msr	PRIMASK, r3
}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <UART_EndTxTransfer+0x7c>)
 8003274:	400a      	ands	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f383 8810 	msr	PRIMASK, r3
}
 8003282:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2284      	movs	r2, #132	; 0x84
 8003288:	2120      	movs	r1, #32
 800328a:	5099      	str	r1, [r3, r2]
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b00a      	add	sp, #40	; 0x28
 8003292:	bd80      	pop	{r7, pc}
 8003294:	ff7fffff 	.word	0xff7fffff

08003298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08e      	sub	sp, #56	; 0x38
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a0:	f3ef 8310 	mrs	r3, PRIMASK
 80032a4:	617b      	str	r3, [r7, #20]
  return(result);
 80032a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
 80032aa:	2301      	movs	r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f383 8810 	msr	PRIMASK, r3
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4926      	ldr	r1, [pc, #152]	; (800335c <UART_EndRxTransfer+0xc4>)
 80032c2:	400a      	ands	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d2:	f3ef 8310 	mrs	r3, PRIMASK
 80032d6:	623b      	str	r3, [r7, #32]
  return(result);
 80032d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
 80032dc:	2301      	movs	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	f383 8810 	msr	PRIMASK, r3
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	491b      	ldr	r1, [pc, #108]	; (8003360 <UART_EndRxTransfer+0xc8>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	f383 8810 	msr	PRIMASK, r3
}
 8003302:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d118      	bne.n	800333e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330c:	f3ef 8310 	mrs	r3, PRIMASK
 8003310:	60bb      	str	r3, [r7, #8]
  return(result);
 8003312:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003316:	2301      	movs	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f383 8810 	msr	PRIMASK, r3
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2110      	movs	r1, #16
 800332e:	438a      	bics	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f383 8810 	msr	PRIMASK, r3
}
 800333c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2288      	movs	r2, #136	; 0x88
 8003342:	2120      	movs	r1, #32
 8003344:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	b00e      	add	sp, #56	; 0x38
 8003358:	bd80      	pop	{r7, pc}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	fffffedf 	.word	0xfffffedf
 8003360:	effffffe 	.word	0xeffffffe

08003364 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08c      	sub	sp, #48	; 0x30
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	4013      	ands	r3, r2
 800337c:	d135      	bne.n	80033ea <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	2256      	movs	r2, #86	; 0x56
 8003382:	2100      	movs	r1, #0
 8003384:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	60fb      	str	r3, [r7, #12]
  return(result);
 800338c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003390:	2301      	movs	r3, #1
 8003392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2180      	movs	r1, #128	; 0x80
 80033a8:	438a      	bics	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b8:	f3ef 8310 	mrs	r3, PRIMASK
 80033bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80033be:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
 80033c2:	2301      	movs	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f383 8810 	msr	PRIMASK, r3
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2140      	movs	r1, #64	; 0x40
 80033da:	430a      	orrs	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	e004      	b.n	80033f4 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7ff f9df 	bl	80027b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b00c      	add	sp, #48	; 0x30
 80033fa:	bd80      	pop	{r7, pc}

080033fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	0018      	movs	r0, r3
 800340e:	f7ff f9d7 	bl	80027c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b004      	add	sp, #16
 8003418:	bd80      	pop	{r7, pc}

0800341a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2284      	movs	r2, #132	; 0x84
 800342c:	589b      	ldr	r3, [r3, r2]
 800342e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2288      	movs	r2, #136	; 0x88
 8003434:	589b      	ldr	r3, [r3, r2]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	4013      	ands	r3, r2
 8003442:	2b80      	cmp	r3, #128	; 0x80
 8003444:	d10a      	bne.n	800345c <UART_DMAError+0x42>
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b21      	cmp	r3, #33	; 0x21
 800344a:	d107      	bne.n	800345c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2256      	movs	r2, #86	; 0x56
 8003450:	2100      	movs	r1, #0
 8003452:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff fede 	bl	8003218 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2240      	movs	r2, #64	; 0x40
 8003464:	4013      	ands	r3, r2
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d10a      	bne.n	8003480 <UART_DMAError+0x66>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b22      	cmp	r3, #34	; 0x22
 800346e:	d107      	bne.n	8003480 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	225e      	movs	r2, #94	; 0x5e
 8003474:	2100      	movs	r1, #0
 8003476:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	0018      	movs	r0, r3
 800347c:	f7ff ff0c 	bl	8003298 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	228c      	movs	r2, #140	; 0x8c
 8003484:	589b      	ldr	r3, [r3, r2]
 8003486:	2210      	movs	r2, #16
 8003488:	431a      	orrs	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	218c      	movs	r1, #140	; 0x8c
 800348e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff f99c 	bl	80027d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b006      	add	sp, #24
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2280      	movs	r2, #128	; 0x80
 80034ac:	5c9b      	ldrb	r3, [r3, r2]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e027      	b.n	8003506 <HAL_UARTEx_DisableFifoMode+0x66>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2284      	movs	r2, #132	; 0x84
 80034c2:	2124      	movs	r1, #36	; 0x24
 80034c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2101      	movs	r1, #1
 80034da:	438a      	bics	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a0b      	ldr	r2, [pc, #44]	; (8003510 <HAL_UARTEx_DisableFifoMode+0x70>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2284      	movs	r2, #132	; 0x84
 80034f8:	2120      	movs	r1, #32
 80034fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2280      	movs	r2, #128	; 0x80
 8003500:	2100      	movs	r1, #0
 8003502:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	dfffffff 	.word	0xdfffffff

08003514 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003528:	2302      	movs	r3, #2
 800352a:	e02e      	b.n	800358a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	2101      	movs	r1, #1
 8003532:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2284      	movs	r2, #132	; 0x84
 8003538:	2124      	movs	r1, #36	; 0x24
 800353a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	438a      	bics	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	08d9      	lsrs	r1, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f854 	bl	8003618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2284      	movs	r2, #132	; 0x84
 800357c:	2120      	movs	r1, #32
 800357e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	2100      	movs	r1, #0
 8003586:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b004      	add	sp, #16
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	5c9b      	ldrb	r3, [r3, r2]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e02f      	b.n	800360c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	2101      	movs	r1, #1
 80035b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2284      	movs	r2, #132	; 0x84
 80035b8:	2124      	movs	r1, #36	; 0x24
 80035ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	438a      	bics	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4a0e      	ldr	r2, [pc, #56]	; (8003614 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 f813 	bl	8003618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2284      	movs	r2, #132	; 0x84
 80035fe:	2120      	movs	r1, #32
 8003600:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}
 8003614:	f1ffffff 	.word	0xf1ffffff

08003618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	226a      	movs	r2, #106	; 0x6a
 800362c:	2101      	movs	r1, #1
 800362e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2268      	movs	r2, #104	; 0x68
 8003634:	2101      	movs	r1, #1
 8003636:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003638:	e043      	b.n	80036c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800363a:	260f      	movs	r6, #15
 800363c:	19bb      	adds	r3, r7, r6
 800363e:	2208      	movs	r2, #8
 8003640:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003642:	200e      	movs	r0, #14
 8003644:	183b      	adds	r3, r7, r0
 8003646:	2208      	movs	r2, #8
 8003648:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	0e5b      	lsrs	r3, r3, #25
 8003652:	b2da      	uxtb	r2, r3
 8003654:	240d      	movs	r4, #13
 8003656:	193b      	adds	r3, r7, r4
 8003658:	2107      	movs	r1, #7
 800365a:	400a      	ands	r2, r1
 800365c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	0f5b      	lsrs	r3, r3, #29
 8003666:	b2da      	uxtb	r2, r3
 8003668:	250c      	movs	r5, #12
 800366a:	197b      	adds	r3, r7, r5
 800366c:	2107      	movs	r1, #7
 800366e:	400a      	ands	r2, r1
 8003670:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003672:	183b      	adds	r3, r7, r0
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	197a      	adds	r2, r7, r5
 8003678:	7812      	ldrb	r2, [r2, #0]
 800367a:	4914      	ldr	r1, [pc, #80]	; (80036cc <UARTEx_SetNbDataToProcess+0xb4>)
 800367c:	5c8a      	ldrb	r2, [r1, r2]
 800367e:	435a      	muls	r2, r3
 8003680:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003682:	197b      	adds	r3, r7, r5
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800368a:	0019      	movs	r1, r3
 800368c:	f7fc fdc4 	bl	8000218 <__divsi3>
 8003690:	0003      	movs	r3, r0
 8003692:	b299      	uxth	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	226a      	movs	r2, #106	; 0x6a
 8003698:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800369a:	19bb      	adds	r3, r7, r6
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	193a      	adds	r2, r7, r4
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	490a      	ldr	r1, [pc, #40]	; (80036cc <UARTEx_SetNbDataToProcess+0xb4>)
 80036a4:	5c8a      	ldrb	r2, [r1, r2]
 80036a6:	435a      	muls	r2, r3
 80036a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80036b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036b2:	0019      	movs	r1, r3
 80036b4:	f7fc fdb0 	bl	8000218 <__divsi3>
 80036b8:	0003      	movs	r3, r0
 80036ba:	b299      	uxth	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2268      	movs	r2, #104	; 0x68
 80036c0:	5299      	strh	r1, [r3, r2]
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b005      	add	sp, #20
 80036c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	080037bc 	.word	0x080037bc
 80036d0:	080037c4 	.word	0x080037c4

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	2600      	movs	r6, #0
 80036d8:	4d0c      	ldr	r5, [pc, #48]	; (800370c <__libc_init_array+0x38>)
 80036da:	4c0d      	ldr	r4, [pc, #52]	; (8003710 <__libc_init_array+0x3c>)
 80036dc:	1b64      	subs	r4, r4, r5
 80036de:	10a4      	asrs	r4, r4, #2
 80036e0:	42a6      	cmp	r6, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	2600      	movs	r6, #0
 80036e6:	f000 f821 	bl	800372c <_init>
 80036ea:	4d0a      	ldr	r5, [pc, #40]	; (8003714 <__libc_init_array+0x40>)
 80036ec:	4c0a      	ldr	r4, [pc, #40]	; (8003718 <__libc_init_array+0x44>)
 80036ee:	1b64      	subs	r4, r4, r5
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	42a6      	cmp	r6, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	00b3      	lsls	r3, r6, #2
 80036fa:	58eb      	ldr	r3, [r5, r3]
 80036fc:	4798      	blx	r3
 80036fe:	3601      	adds	r6, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	00b3      	lsls	r3, r6, #2
 8003704:	58eb      	ldr	r3, [r5, r3]
 8003706:	4798      	blx	r3
 8003708:	3601      	adds	r6, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	080037d4 	.word	0x080037d4
 8003710:	080037d4 	.word	0x080037d4
 8003714:	080037d4 	.word	0x080037d4
 8003718:	080037d8 	.word	0x080037d8

0800371c <memset>:
 800371c:	0003      	movs	r3, r0
 800371e:	1882      	adds	r2, r0, r2
 8003720:	4293      	cmp	r3, r2
 8003722:	d100      	bne.n	8003726 <memset+0xa>
 8003724:	4770      	bx	lr
 8003726:	7019      	strb	r1, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	e7f9      	b.n	8003720 <memset+0x4>

0800372c <_init>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003732:	bc08      	pop	{r3}
 8003734:	469e      	mov	lr, r3
 8003736:	4770      	bx	lr

08003738 <_fini>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373e:	bc08      	pop	{r3}
 8003740:	469e      	mov	lr, r3
 8003742:	4770      	bx	lr
