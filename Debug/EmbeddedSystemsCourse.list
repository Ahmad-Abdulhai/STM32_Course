
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cdc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f64  08005f64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005f64  08005f64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f64  08005f64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08005fdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08005fdc  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df35  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217b  00000000  00000000  0002dfcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00030148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00030fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d854  00000000  00000000  00031d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f917  00000000  00000000  0004f554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf7c7  00000000  00000000  0005ee6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e632  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003904  00000000  00000000  0011e684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005d80 	.word	0x08005d80

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08005d80 	.word	0x08005d80

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_f2uiz>:
 8000404:	219e      	movs	r1, #158	; 0x9e
 8000406:	b510      	push	{r4, lr}
 8000408:	05c9      	lsls	r1, r1, #23
 800040a:	1c04      	adds	r4, r0, #0
 800040c:	f000 fc90 	bl	8000d30 <__aeabi_fcmpge>
 8000410:	2800      	cmp	r0, #0
 8000412:	d103      	bne.n	800041c <__aeabi_f2uiz+0x18>
 8000414:	1c20      	adds	r0, r4, #0
 8000416:	f000 fbf9 	bl	8000c0c <__aeabi_f2iz>
 800041a:	bd10      	pop	{r4, pc}
 800041c:	219e      	movs	r1, #158	; 0x9e
 800041e:	1c20      	adds	r0, r4, #0
 8000420:	05c9      	lsls	r1, r1, #23
 8000422:	f000 fa45 	bl	80008b0 <__aeabi_fsub>
 8000426:	f000 fbf1 	bl	8000c0c <__aeabi_f2iz>
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	061b      	lsls	r3, r3, #24
 800042e:	469c      	mov	ip, r3
 8000430:	4460      	add	r0, ip
 8000432:	e7f2      	b.n	800041a <__aeabi_f2uiz+0x16>

08000434 <__aeabi_fdiv>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	0245      	lsls	r5, r0, #9
 800043e:	b5c0      	push	{r6, r7, lr}
 8000440:	0047      	lsls	r7, r0, #1
 8000442:	1c0c      	adds	r4, r1, #0
 8000444:	0a6d      	lsrs	r5, r5, #9
 8000446:	0e3f      	lsrs	r7, r7, #24
 8000448:	0fc6      	lsrs	r6, r0, #31
 800044a:	2f00      	cmp	r7, #0
 800044c:	d100      	bne.n	8000450 <__aeabi_fdiv+0x1c>
 800044e:	e070      	b.n	8000532 <__aeabi_fdiv+0xfe>
 8000450:	2fff      	cmp	r7, #255	; 0xff
 8000452:	d100      	bne.n	8000456 <__aeabi_fdiv+0x22>
 8000454:	e075      	b.n	8000542 <__aeabi_fdiv+0x10e>
 8000456:	00eb      	lsls	r3, r5, #3
 8000458:	2580      	movs	r5, #128	; 0x80
 800045a:	04ed      	lsls	r5, r5, #19
 800045c:	431d      	orrs	r5, r3
 800045e:	2300      	movs	r3, #0
 8000460:	4699      	mov	r9, r3
 8000462:	469a      	mov	sl, r3
 8000464:	3f7f      	subs	r7, #127	; 0x7f
 8000466:	0260      	lsls	r0, r4, #9
 8000468:	0a43      	lsrs	r3, r0, #9
 800046a:	4698      	mov	r8, r3
 800046c:	0063      	lsls	r3, r4, #1
 800046e:	0e1b      	lsrs	r3, r3, #24
 8000470:	0fe4      	lsrs	r4, r4, #31
 8000472:	2b00      	cmp	r3, #0
 8000474:	d04e      	beq.n	8000514 <__aeabi_fdiv+0xe0>
 8000476:	2bff      	cmp	r3, #255	; 0xff
 8000478:	d046      	beq.n	8000508 <__aeabi_fdiv+0xd4>
 800047a:	4642      	mov	r2, r8
 800047c:	00d0      	lsls	r0, r2, #3
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	04d2      	lsls	r2, r2, #19
 8000482:	4302      	orrs	r2, r0
 8000484:	4690      	mov	r8, r2
 8000486:	2200      	movs	r2, #0
 8000488:	3b7f      	subs	r3, #127	; 0x7f
 800048a:	0031      	movs	r1, r6
 800048c:	1aff      	subs	r7, r7, r3
 800048e:	464b      	mov	r3, r9
 8000490:	4061      	eors	r1, r4
 8000492:	b2c9      	uxtb	r1, r1
 8000494:	4313      	orrs	r3, r2
 8000496:	2b0f      	cmp	r3, #15
 8000498:	d900      	bls.n	800049c <__aeabi_fdiv+0x68>
 800049a:	e0b5      	b.n	8000608 <__aeabi_fdiv+0x1d4>
 800049c:	486e      	ldr	r0, [pc, #440]	; (8000658 <__aeabi_fdiv+0x224>)
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	58c3      	ldr	r3, [r0, r3]
 80004a2:	469f      	mov	pc, r3
 80004a4:	2300      	movs	r3, #0
 80004a6:	4698      	mov	r8, r3
 80004a8:	0026      	movs	r6, r4
 80004aa:	4645      	mov	r5, r8
 80004ac:	4692      	mov	sl, r2
 80004ae:	4653      	mov	r3, sl
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fdiv+0x82>
 80004b4:	e089      	b.n	80005ca <__aeabi_fdiv+0x196>
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	d100      	bne.n	80004bc <__aeabi_fdiv+0x88>
 80004ba:	e09e      	b.n	80005fa <__aeabi_fdiv+0x1c6>
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d018      	beq.n	80004f2 <__aeabi_fdiv+0xbe>
 80004c0:	003b      	movs	r3, r7
 80004c2:	337f      	adds	r3, #127	; 0x7f
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	dd69      	ble.n	800059c <__aeabi_fdiv+0x168>
 80004c8:	076a      	lsls	r2, r5, #29
 80004ca:	d004      	beq.n	80004d6 <__aeabi_fdiv+0xa2>
 80004cc:	220f      	movs	r2, #15
 80004ce:	402a      	ands	r2, r5
 80004d0:	2a04      	cmp	r2, #4
 80004d2:	d000      	beq.n	80004d6 <__aeabi_fdiv+0xa2>
 80004d4:	3504      	adds	r5, #4
 80004d6:	012a      	lsls	r2, r5, #4
 80004d8:	d503      	bpl.n	80004e2 <__aeabi_fdiv+0xae>
 80004da:	4b60      	ldr	r3, [pc, #384]	; (800065c <__aeabi_fdiv+0x228>)
 80004dc:	401d      	ands	r5, r3
 80004de:	003b      	movs	r3, r7
 80004e0:	3380      	adds	r3, #128	; 0x80
 80004e2:	2bfe      	cmp	r3, #254	; 0xfe
 80004e4:	dd00      	ble.n	80004e8 <__aeabi_fdiv+0xb4>
 80004e6:	e070      	b.n	80005ca <__aeabi_fdiv+0x196>
 80004e8:	01ad      	lsls	r5, r5, #6
 80004ea:	0a6d      	lsrs	r5, r5, #9
 80004ec:	b2d8      	uxtb	r0, r3
 80004ee:	e002      	b.n	80004f6 <__aeabi_fdiv+0xc2>
 80004f0:	000e      	movs	r6, r1
 80004f2:	2000      	movs	r0, #0
 80004f4:	2500      	movs	r5, #0
 80004f6:	05c0      	lsls	r0, r0, #23
 80004f8:	4328      	orrs	r0, r5
 80004fa:	07f6      	lsls	r6, r6, #31
 80004fc:	4330      	orrs	r0, r6
 80004fe:	bce0      	pop	{r5, r6, r7}
 8000500:	46ba      	mov	sl, r7
 8000502:	46b1      	mov	r9, r6
 8000504:	46a8      	mov	r8, r5
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	4643      	mov	r3, r8
 800050a:	2b00      	cmp	r3, #0
 800050c:	d13f      	bne.n	800058e <__aeabi_fdiv+0x15a>
 800050e:	2202      	movs	r2, #2
 8000510:	3fff      	subs	r7, #255	; 0xff
 8000512:	e003      	b.n	800051c <__aeabi_fdiv+0xe8>
 8000514:	4643      	mov	r3, r8
 8000516:	2b00      	cmp	r3, #0
 8000518:	d12d      	bne.n	8000576 <__aeabi_fdiv+0x142>
 800051a:	2201      	movs	r2, #1
 800051c:	0031      	movs	r1, r6
 800051e:	464b      	mov	r3, r9
 8000520:	4061      	eors	r1, r4
 8000522:	b2c9      	uxtb	r1, r1
 8000524:	4313      	orrs	r3, r2
 8000526:	2b0f      	cmp	r3, #15
 8000528:	d834      	bhi.n	8000594 <__aeabi_fdiv+0x160>
 800052a:	484d      	ldr	r0, [pc, #308]	; (8000660 <__aeabi_fdiv+0x22c>)
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	58c3      	ldr	r3, [r0, r3]
 8000530:	469f      	mov	pc, r3
 8000532:	2d00      	cmp	r5, #0
 8000534:	d113      	bne.n	800055e <__aeabi_fdiv+0x12a>
 8000536:	2304      	movs	r3, #4
 8000538:	4699      	mov	r9, r3
 800053a:	3b03      	subs	r3, #3
 800053c:	2700      	movs	r7, #0
 800053e:	469a      	mov	sl, r3
 8000540:	e791      	b.n	8000466 <__aeabi_fdiv+0x32>
 8000542:	2d00      	cmp	r5, #0
 8000544:	d105      	bne.n	8000552 <__aeabi_fdiv+0x11e>
 8000546:	2308      	movs	r3, #8
 8000548:	4699      	mov	r9, r3
 800054a:	3b06      	subs	r3, #6
 800054c:	27ff      	movs	r7, #255	; 0xff
 800054e:	469a      	mov	sl, r3
 8000550:	e789      	b.n	8000466 <__aeabi_fdiv+0x32>
 8000552:	230c      	movs	r3, #12
 8000554:	4699      	mov	r9, r3
 8000556:	3b09      	subs	r3, #9
 8000558:	27ff      	movs	r7, #255	; 0xff
 800055a:	469a      	mov	sl, r3
 800055c:	e783      	b.n	8000466 <__aeabi_fdiv+0x32>
 800055e:	0028      	movs	r0, r5
 8000560:	f000 fbf0 	bl	8000d44 <__clzsi2>
 8000564:	2776      	movs	r7, #118	; 0x76
 8000566:	1f43      	subs	r3, r0, #5
 8000568:	409d      	lsls	r5, r3
 800056a:	2300      	movs	r3, #0
 800056c:	427f      	negs	r7, r7
 800056e:	4699      	mov	r9, r3
 8000570:	469a      	mov	sl, r3
 8000572:	1a3f      	subs	r7, r7, r0
 8000574:	e777      	b.n	8000466 <__aeabi_fdiv+0x32>
 8000576:	4640      	mov	r0, r8
 8000578:	f000 fbe4 	bl	8000d44 <__clzsi2>
 800057c:	4642      	mov	r2, r8
 800057e:	1f43      	subs	r3, r0, #5
 8000580:	409a      	lsls	r2, r3
 8000582:	2376      	movs	r3, #118	; 0x76
 8000584:	425b      	negs	r3, r3
 8000586:	4690      	mov	r8, r2
 8000588:	1a1b      	subs	r3, r3, r0
 800058a:	2200      	movs	r2, #0
 800058c:	e77d      	b.n	800048a <__aeabi_fdiv+0x56>
 800058e:	23ff      	movs	r3, #255	; 0xff
 8000590:	2203      	movs	r2, #3
 8000592:	e77a      	b.n	800048a <__aeabi_fdiv+0x56>
 8000594:	000e      	movs	r6, r1
 8000596:	20ff      	movs	r0, #255	; 0xff
 8000598:	2500      	movs	r5, #0
 800059a:	e7ac      	b.n	80004f6 <__aeabi_fdiv+0xc2>
 800059c:	2001      	movs	r0, #1
 800059e:	1ac0      	subs	r0, r0, r3
 80005a0:	281b      	cmp	r0, #27
 80005a2:	dca6      	bgt.n	80004f2 <__aeabi_fdiv+0xbe>
 80005a4:	379e      	adds	r7, #158	; 0x9e
 80005a6:	002a      	movs	r2, r5
 80005a8:	40bd      	lsls	r5, r7
 80005aa:	40c2      	lsrs	r2, r0
 80005ac:	1e6b      	subs	r3, r5, #1
 80005ae:	419d      	sbcs	r5, r3
 80005b0:	4315      	orrs	r5, r2
 80005b2:	076b      	lsls	r3, r5, #29
 80005b4:	d004      	beq.n	80005c0 <__aeabi_fdiv+0x18c>
 80005b6:	230f      	movs	r3, #15
 80005b8:	402b      	ands	r3, r5
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fdiv+0x18c>
 80005be:	3504      	adds	r5, #4
 80005c0:	016b      	lsls	r3, r5, #5
 80005c2:	d544      	bpl.n	800064e <__aeabi_fdiv+0x21a>
 80005c4:	2001      	movs	r0, #1
 80005c6:	2500      	movs	r5, #0
 80005c8:	e795      	b.n	80004f6 <__aeabi_fdiv+0xc2>
 80005ca:	20ff      	movs	r0, #255	; 0xff
 80005cc:	2500      	movs	r5, #0
 80005ce:	e792      	b.n	80004f6 <__aeabi_fdiv+0xc2>
 80005d0:	2580      	movs	r5, #128	; 0x80
 80005d2:	2600      	movs	r6, #0
 80005d4:	20ff      	movs	r0, #255	; 0xff
 80005d6:	03ed      	lsls	r5, r5, #15
 80005d8:	e78d      	b.n	80004f6 <__aeabi_fdiv+0xc2>
 80005da:	2300      	movs	r3, #0
 80005dc:	4698      	mov	r8, r3
 80005de:	2080      	movs	r0, #128	; 0x80
 80005e0:	03c0      	lsls	r0, r0, #15
 80005e2:	4205      	tst	r5, r0
 80005e4:	d009      	beq.n	80005fa <__aeabi_fdiv+0x1c6>
 80005e6:	4643      	mov	r3, r8
 80005e8:	4203      	tst	r3, r0
 80005ea:	d106      	bne.n	80005fa <__aeabi_fdiv+0x1c6>
 80005ec:	4645      	mov	r5, r8
 80005ee:	4305      	orrs	r5, r0
 80005f0:	026d      	lsls	r5, r5, #9
 80005f2:	0026      	movs	r6, r4
 80005f4:	20ff      	movs	r0, #255	; 0xff
 80005f6:	0a6d      	lsrs	r5, r5, #9
 80005f8:	e77d      	b.n	80004f6 <__aeabi_fdiv+0xc2>
 80005fa:	2080      	movs	r0, #128	; 0x80
 80005fc:	03c0      	lsls	r0, r0, #15
 80005fe:	4305      	orrs	r5, r0
 8000600:	026d      	lsls	r5, r5, #9
 8000602:	20ff      	movs	r0, #255	; 0xff
 8000604:	0a6d      	lsrs	r5, r5, #9
 8000606:	e776      	b.n	80004f6 <__aeabi_fdiv+0xc2>
 8000608:	4642      	mov	r2, r8
 800060a:	016b      	lsls	r3, r5, #5
 800060c:	0150      	lsls	r0, r2, #5
 800060e:	4283      	cmp	r3, r0
 8000610:	d219      	bcs.n	8000646 <__aeabi_fdiv+0x212>
 8000612:	221b      	movs	r2, #27
 8000614:	2500      	movs	r5, #0
 8000616:	3f01      	subs	r7, #1
 8000618:	2601      	movs	r6, #1
 800061a:	001c      	movs	r4, r3
 800061c:	006d      	lsls	r5, r5, #1
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	2c00      	cmp	r4, #0
 8000622:	db01      	blt.n	8000628 <__aeabi_fdiv+0x1f4>
 8000624:	4298      	cmp	r0, r3
 8000626:	d801      	bhi.n	800062c <__aeabi_fdiv+0x1f8>
 8000628:	1a1b      	subs	r3, r3, r0
 800062a:	4335      	orrs	r5, r6
 800062c:	3a01      	subs	r2, #1
 800062e:	2a00      	cmp	r2, #0
 8000630:	d1f3      	bne.n	800061a <__aeabi_fdiv+0x1e6>
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	4193      	sbcs	r3, r2
 8000636:	431d      	orrs	r5, r3
 8000638:	003b      	movs	r3, r7
 800063a:	337f      	adds	r3, #127	; 0x7f
 800063c:	000e      	movs	r6, r1
 800063e:	2b00      	cmp	r3, #0
 8000640:	dd00      	ble.n	8000644 <__aeabi_fdiv+0x210>
 8000642:	e741      	b.n	80004c8 <__aeabi_fdiv+0x94>
 8000644:	e7aa      	b.n	800059c <__aeabi_fdiv+0x168>
 8000646:	221a      	movs	r2, #26
 8000648:	2501      	movs	r5, #1
 800064a:	1a1b      	subs	r3, r3, r0
 800064c:	e7e4      	b.n	8000618 <__aeabi_fdiv+0x1e4>
 800064e:	01ad      	lsls	r5, r5, #6
 8000650:	2000      	movs	r0, #0
 8000652:	0a6d      	lsrs	r5, r5, #9
 8000654:	e74f      	b.n	80004f6 <__aeabi_fdiv+0xc2>
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	08005ddc 	.word	0x08005ddc
 800065c:	f7ffffff 	.word	0xf7ffffff
 8000660:	08005e1c 	.word	0x08005e1c

08000664 <__aeabi_fmul>:
 8000664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000666:	464f      	mov	r7, r9
 8000668:	4646      	mov	r6, r8
 800066a:	46d6      	mov	lr, sl
 800066c:	0244      	lsls	r4, r0, #9
 800066e:	0045      	lsls	r5, r0, #1
 8000670:	b5c0      	push	{r6, r7, lr}
 8000672:	0a64      	lsrs	r4, r4, #9
 8000674:	1c0f      	adds	r7, r1, #0
 8000676:	0e2d      	lsrs	r5, r5, #24
 8000678:	0fc6      	lsrs	r6, r0, #31
 800067a:	2d00      	cmp	r5, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fmul+0x1c>
 800067e:	e08d      	b.n	800079c <__aeabi_fmul+0x138>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fmul+0x22>
 8000684:	e092      	b.n	80007ac <__aeabi_fmul+0x148>
 8000686:	2300      	movs	r3, #0
 8000688:	2080      	movs	r0, #128	; 0x80
 800068a:	4699      	mov	r9, r3
 800068c:	469a      	mov	sl, r3
 800068e:	00e4      	lsls	r4, r4, #3
 8000690:	04c0      	lsls	r0, r0, #19
 8000692:	4304      	orrs	r4, r0
 8000694:	3d7f      	subs	r5, #127	; 0x7f
 8000696:	0278      	lsls	r0, r7, #9
 8000698:	0a43      	lsrs	r3, r0, #9
 800069a:	4698      	mov	r8, r3
 800069c:	007b      	lsls	r3, r7, #1
 800069e:	0e1b      	lsrs	r3, r3, #24
 80006a0:	0fff      	lsrs	r7, r7, #31
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fmul+0x44>
 80006a6:	e070      	b.n	800078a <__aeabi_fmul+0x126>
 80006a8:	2bff      	cmp	r3, #255	; 0xff
 80006aa:	d100      	bne.n	80006ae <__aeabi_fmul+0x4a>
 80006ac:	e086      	b.n	80007bc <__aeabi_fmul+0x158>
 80006ae:	4642      	mov	r2, r8
 80006b0:	00d0      	lsls	r0, r2, #3
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	3b7f      	subs	r3, #127	; 0x7f
 80006b6:	18ed      	adds	r5, r5, r3
 80006b8:	2300      	movs	r3, #0
 80006ba:	04d2      	lsls	r2, r2, #19
 80006bc:	4302      	orrs	r2, r0
 80006be:	4690      	mov	r8, r2
 80006c0:	469c      	mov	ip, r3
 80006c2:	0031      	movs	r1, r6
 80006c4:	464b      	mov	r3, r9
 80006c6:	4079      	eors	r1, r7
 80006c8:	1c68      	adds	r0, r5, #1
 80006ca:	2b0f      	cmp	r3, #15
 80006cc:	d81c      	bhi.n	8000708 <__aeabi_fmul+0xa4>
 80006ce:	4a76      	ldr	r2, [pc, #472]	; (80008a8 <__aeabi_fmul+0x244>)
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	58d3      	ldr	r3, [r2, r3]
 80006d4:	469f      	mov	pc, r3
 80006d6:	0039      	movs	r1, r7
 80006d8:	4644      	mov	r4, r8
 80006da:	46e2      	mov	sl, ip
 80006dc:	4653      	mov	r3, sl
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d00f      	beq.n	8000702 <__aeabi_fmul+0x9e>
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fmul+0x84>
 80006e6:	e0d7      	b.n	8000898 <__aeabi_fmul+0x234>
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d137      	bne.n	800075c <__aeabi_fmul+0xf8>
 80006ec:	2000      	movs	r0, #0
 80006ee:	2400      	movs	r4, #0
 80006f0:	05c0      	lsls	r0, r0, #23
 80006f2:	4320      	orrs	r0, r4
 80006f4:	07c9      	lsls	r1, r1, #31
 80006f6:	4308      	orrs	r0, r1
 80006f8:	bce0      	pop	{r5, r6, r7}
 80006fa:	46ba      	mov	sl, r7
 80006fc:	46b1      	mov	r9, r6
 80006fe:	46a8      	mov	r8, r5
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	20ff      	movs	r0, #255	; 0xff
 8000704:	2400      	movs	r4, #0
 8000706:	e7f3      	b.n	80006f0 <__aeabi_fmul+0x8c>
 8000708:	0c26      	lsrs	r6, r4, #16
 800070a:	0424      	lsls	r4, r4, #16
 800070c:	0c22      	lsrs	r2, r4, #16
 800070e:	4644      	mov	r4, r8
 8000710:	0424      	lsls	r4, r4, #16
 8000712:	0c24      	lsrs	r4, r4, #16
 8000714:	4643      	mov	r3, r8
 8000716:	0027      	movs	r7, r4
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	4357      	muls	r7, r2
 800071c:	4374      	muls	r4, r6
 800071e:	435a      	muls	r2, r3
 8000720:	435e      	muls	r6, r3
 8000722:	1912      	adds	r2, r2, r4
 8000724:	0c3b      	lsrs	r3, r7, #16
 8000726:	189b      	adds	r3, r3, r2
 8000728:	429c      	cmp	r4, r3
 800072a:	d903      	bls.n	8000734 <__aeabi_fmul+0xd0>
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0252      	lsls	r2, r2, #9
 8000730:	4694      	mov	ip, r2
 8000732:	4466      	add	r6, ip
 8000734:	043f      	lsls	r7, r7, #16
 8000736:	041a      	lsls	r2, r3, #16
 8000738:	0c3f      	lsrs	r7, r7, #16
 800073a:	19d2      	adds	r2, r2, r7
 800073c:	0194      	lsls	r4, r2, #6
 800073e:	1e67      	subs	r7, r4, #1
 8000740:	41bc      	sbcs	r4, r7
 8000742:	0c1b      	lsrs	r3, r3, #16
 8000744:	0e92      	lsrs	r2, r2, #26
 8000746:	199b      	adds	r3, r3, r6
 8000748:	4314      	orrs	r4, r2
 800074a:	019b      	lsls	r3, r3, #6
 800074c:	431c      	orrs	r4, r3
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	d400      	bmi.n	8000754 <__aeabi_fmul+0xf0>
 8000752:	e09b      	b.n	800088c <__aeabi_fmul+0x228>
 8000754:	2301      	movs	r3, #1
 8000756:	0862      	lsrs	r2, r4, #1
 8000758:	401c      	ands	r4, r3
 800075a:	4314      	orrs	r4, r2
 800075c:	0002      	movs	r2, r0
 800075e:	327f      	adds	r2, #127	; 0x7f
 8000760:	2a00      	cmp	r2, #0
 8000762:	dd64      	ble.n	800082e <__aeabi_fmul+0x1ca>
 8000764:	0763      	lsls	r3, r4, #29
 8000766:	d004      	beq.n	8000772 <__aeabi_fmul+0x10e>
 8000768:	230f      	movs	r3, #15
 800076a:	4023      	ands	r3, r4
 800076c:	2b04      	cmp	r3, #4
 800076e:	d000      	beq.n	8000772 <__aeabi_fmul+0x10e>
 8000770:	3404      	adds	r4, #4
 8000772:	0123      	lsls	r3, r4, #4
 8000774:	d503      	bpl.n	800077e <__aeabi_fmul+0x11a>
 8000776:	0002      	movs	r2, r0
 8000778:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <__aeabi_fmul+0x248>)
 800077a:	3280      	adds	r2, #128	; 0x80
 800077c:	401c      	ands	r4, r3
 800077e:	2afe      	cmp	r2, #254	; 0xfe
 8000780:	dcbf      	bgt.n	8000702 <__aeabi_fmul+0x9e>
 8000782:	01a4      	lsls	r4, r4, #6
 8000784:	0a64      	lsrs	r4, r4, #9
 8000786:	b2d0      	uxtb	r0, r2
 8000788:	e7b2      	b.n	80006f0 <__aeabi_fmul+0x8c>
 800078a:	4643      	mov	r3, r8
 800078c:	2b00      	cmp	r3, #0
 800078e:	d13d      	bne.n	800080c <__aeabi_fmul+0x1a8>
 8000790:	464a      	mov	r2, r9
 8000792:	3301      	adds	r3, #1
 8000794:	431a      	orrs	r2, r3
 8000796:	4691      	mov	r9, r2
 8000798:	469c      	mov	ip, r3
 800079a:	e792      	b.n	80006c2 <__aeabi_fmul+0x5e>
 800079c:	2c00      	cmp	r4, #0
 800079e:	d129      	bne.n	80007f4 <__aeabi_fmul+0x190>
 80007a0:	2304      	movs	r3, #4
 80007a2:	4699      	mov	r9, r3
 80007a4:	3b03      	subs	r3, #3
 80007a6:	2500      	movs	r5, #0
 80007a8:	469a      	mov	sl, r3
 80007aa:	e774      	b.n	8000696 <__aeabi_fmul+0x32>
 80007ac:	2c00      	cmp	r4, #0
 80007ae:	d11b      	bne.n	80007e8 <__aeabi_fmul+0x184>
 80007b0:	2308      	movs	r3, #8
 80007b2:	4699      	mov	r9, r3
 80007b4:	3b06      	subs	r3, #6
 80007b6:	25ff      	movs	r5, #255	; 0xff
 80007b8:	469a      	mov	sl, r3
 80007ba:	e76c      	b.n	8000696 <__aeabi_fmul+0x32>
 80007bc:	4643      	mov	r3, r8
 80007be:	35ff      	adds	r5, #255	; 0xff
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10b      	bne.n	80007dc <__aeabi_fmul+0x178>
 80007c4:	2302      	movs	r3, #2
 80007c6:	464a      	mov	r2, r9
 80007c8:	431a      	orrs	r2, r3
 80007ca:	4691      	mov	r9, r2
 80007cc:	469c      	mov	ip, r3
 80007ce:	e778      	b.n	80006c2 <__aeabi_fmul+0x5e>
 80007d0:	4653      	mov	r3, sl
 80007d2:	0031      	movs	r1, r6
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d000      	beq.n	80007da <__aeabi_fmul+0x176>
 80007d8:	e783      	b.n	80006e2 <__aeabi_fmul+0x7e>
 80007da:	e792      	b.n	8000702 <__aeabi_fmul+0x9e>
 80007dc:	2303      	movs	r3, #3
 80007de:	464a      	mov	r2, r9
 80007e0:	431a      	orrs	r2, r3
 80007e2:	4691      	mov	r9, r2
 80007e4:	469c      	mov	ip, r3
 80007e6:	e76c      	b.n	80006c2 <__aeabi_fmul+0x5e>
 80007e8:	230c      	movs	r3, #12
 80007ea:	4699      	mov	r9, r3
 80007ec:	3b09      	subs	r3, #9
 80007ee:	25ff      	movs	r5, #255	; 0xff
 80007f0:	469a      	mov	sl, r3
 80007f2:	e750      	b.n	8000696 <__aeabi_fmul+0x32>
 80007f4:	0020      	movs	r0, r4
 80007f6:	f000 faa5 	bl	8000d44 <__clzsi2>
 80007fa:	2576      	movs	r5, #118	; 0x76
 80007fc:	1f43      	subs	r3, r0, #5
 80007fe:	409c      	lsls	r4, r3
 8000800:	2300      	movs	r3, #0
 8000802:	426d      	negs	r5, r5
 8000804:	4699      	mov	r9, r3
 8000806:	469a      	mov	sl, r3
 8000808:	1a2d      	subs	r5, r5, r0
 800080a:	e744      	b.n	8000696 <__aeabi_fmul+0x32>
 800080c:	4640      	mov	r0, r8
 800080e:	f000 fa99 	bl	8000d44 <__clzsi2>
 8000812:	4642      	mov	r2, r8
 8000814:	1f43      	subs	r3, r0, #5
 8000816:	409a      	lsls	r2, r3
 8000818:	2300      	movs	r3, #0
 800081a:	1a2d      	subs	r5, r5, r0
 800081c:	4690      	mov	r8, r2
 800081e:	469c      	mov	ip, r3
 8000820:	3d76      	subs	r5, #118	; 0x76
 8000822:	e74e      	b.n	80006c2 <__aeabi_fmul+0x5e>
 8000824:	2480      	movs	r4, #128	; 0x80
 8000826:	2100      	movs	r1, #0
 8000828:	20ff      	movs	r0, #255	; 0xff
 800082a:	03e4      	lsls	r4, r4, #15
 800082c:	e760      	b.n	80006f0 <__aeabi_fmul+0x8c>
 800082e:	2301      	movs	r3, #1
 8000830:	1a9b      	subs	r3, r3, r2
 8000832:	2b1b      	cmp	r3, #27
 8000834:	dd00      	ble.n	8000838 <__aeabi_fmul+0x1d4>
 8000836:	e759      	b.n	80006ec <__aeabi_fmul+0x88>
 8000838:	0022      	movs	r2, r4
 800083a:	309e      	adds	r0, #158	; 0x9e
 800083c:	40da      	lsrs	r2, r3
 800083e:	4084      	lsls	r4, r0
 8000840:	0013      	movs	r3, r2
 8000842:	1e62      	subs	r2, r4, #1
 8000844:	4194      	sbcs	r4, r2
 8000846:	431c      	orrs	r4, r3
 8000848:	0763      	lsls	r3, r4, #29
 800084a:	d004      	beq.n	8000856 <__aeabi_fmul+0x1f2>
 800084c:	230f      	movs	r3, #15
 800084e:	4023      	ands	r3, r4
 8000850:	2b04      	cmp	r3, #4
 8000852:	d000      	beq.n	8000856 <__aeabi_fmul+0x1f2>
 8000854:	3404      	adds	r4, #4
 8000856:	0163      	lsls	r3, r4, #5
 8000858:	d51a      	bpl.n	8000890 <__aeabi_fmul+0x22c>
 800085a:	2001      	movs	r0, #1
 800085c:	2400      	movs	r4, #0
 800085e:	e747      	b.n	80006f0 <__aeabi_fmul+0x8c>
 8000860:	2080      	movs	r0, #128	; 0x80
 8000862:	03c0      	lsls	r0, r0, #15
 8000864:	4204      	tst	r4, r0
 8000866:	d009      	beq.n	800087c <__aeabi_fmul+0x218>
 8000868:	4643      	mov	r3, r8
 800086a:	4203      	tst	r3, r0
 800086c:	d106      	bne.n	800087c <__aeabi_fmul+0x218>
 800086e:	4644      	mov	r4, r8
 8000870:	4304      	orrs	r4, r0
 8000872:	0264      	lsls	r4, r4, #9
 8000874:	0039      	movs	r1, r7
 8000876:	20ff      	movs	r0, #255	; 0xff
 8000878:	0a64      	lsrs	r4, r4, #9
 800087a:	e739      	b.n	80006f0 <__aeabi_fmul+0x8c>
 800087c:	2080      	movs	r0, #128	; 0x80
 800087e:	03c0      	lsls	r0, r0, #15
 8000880:	4304      	orrs	r4, r0
 8000882:	0264      	lsls	r4, r4, #9
 8000884:	0031      	movs	r1, r6
 8000886:	20ff      	movs	r0, #255	; 0xff
 8000888:	0a64      	lsrs	r4, r4, #9
 800088a:	e731      	b.n	80006f0 <__aeabi_fmul+0x8c>
 800088c:	0028      	movs	r0, r5
 800088e:	e765      	b.n	800075c <__aeabi_fmul+0xf8>
 8000890:	01a4      	lsls	r4, r4, #6
 8000892:	2000      	movs	r0, #0
 8000894:	0a64      	lsrs	r4, r4, #9
 8000896:	e72b      	b.n	80006f0 <__aeabi_fmul+0x8c>
 8000898:	2080      	movs	r0, #128	; 0x80
 800089a:	03c0      	lsls	r0, r0, #15
 800089c:	4304      	orrs	r4, r0
 800089e:	0264      	lsls	r4, r4, #9
 80008a0:	20ff      	movs	r0, #255	; 0xff
 80008a2:	0a64      	lsrs	r4, r4, #9
 80008a4:	e724      	b.n	80006f0 <__aeabi_fmul+0x8c>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	08005e5c 	.word	0x08005e5c
 80008ac:	f7ffffff 	.word	0xf7ffffff

080008b0 <__aeabi_fsub>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	46ce      	mov	lr, r9
 80008b4:	4647      	mov	r7, r8
 80008b6:	0243      	lsls	r3, r0, #9
 80008b8:	0a5b      	lsrs	r3, r3, #9
 80008ba:	024e      	lsls	r6, r1, #9
 80008bc:	00da      	lsls	r2, r3, #3
 80008be:	4694      	mov	ip, r2
 80008c0:	0a72      	lsrs	r2, r6, #9
 80008c2:	4691      	mov	r9, r2
 80008c4:	0045      	lsls	r5, r0, #1
 80008c6:	004a      	lsls	r2, r1, #1
 80008c8:	b580      	push	{r7, lr}
 80008ca:	0e2d      	lsrs	r5, r5, #24
 80008cc:	001f      	movs	r7, r3
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0e12      	lsrs	r2, r2, #24
 80008d2:	0fc9      	lsrs	r1, r1, #31
 80008d4:	09b6      	lsrs	r6, r6, #6
 80008d6:	2aff      	cmp	r2, #255	; 0xff
 80008d8:	d05b      	beq.n	8000992 <__aeabi_fsub+0xe2>
 80008da:	2001      	movs	r0, #1
 80008dc:	4041      	eors	r1, r0
 80008de:	428c      	cmp	r4, r1
 80008e0:	d039      	beq.n	8000956 <__aeabi_fsub+0xa6>
 80008e2:	1aa8      	subs	r0, r5, r2
 80008e4:	2800      	cmp	r0, #0
 80008e6:	dd5a      	ble.n	800099e <__aeabi_fsub+0xee>
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d06a      	beq.n	80009c2 <__aeabi_fsub+0x112>
 80008ec:	2dff      	cmp	r5, #255	; 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fsub+0x42>
 80008f0:	e0d9      	b.n	8000aa6 <__aeabi_fsub+0x1f6>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	04d2      	lsls	r2, r2, #19
 80008f6:	4316      	orrs	r6, r2
 80008f8:	281b      	cmp	r0, #27
 80008fa:	dc00      	bgt.n	80008fe <__aeabi_fsub+0x4e>
 80008fc:	e0e9      	b.n	8000ad2 <__aeabi_fsub+0x222>
 80008fe:	2001      	movs	r0, #1
 8000900:	4663      	mov	r3, ip
 8000902:	1a18      	subs	r0, r3, r0
 8000904:	0143      	lsls	r3, r0, #5
 8000906:	d400      	bmi.n	800090a <__aeabi_fsub+0x5a>
 8000908:	e0b4      	b.n	8000a74 <__aeabi_fsub+0x1c4>
 800090a:	0180      	lsls	r0, r0, #6
 800090c:	0987      	lsrs	r7, r0, #6
 800090e:	0038      	movs	r0, r7
 8000910:	f000 fa18 	bl	8000d44 <__clzsi2>
 8000914:	3805      	subs	r0, #5
 8000916:	4087      	lsls	r7, r0
 8000918:	4285      	cmp	r5, r0
 800091a:	dc00      	bgt.n	800091e <__aeabi_fsub+0x6e>
 800091c:	e0cc      	b.n	8000ab8 <__aeabi_fsub+0x208>
 800091e:	1a2d      	subs	r5, r5, r0
 8000920:	48b5      	ldr	r0, [pc, #724]	; (8000bf8 <__aeabi_fsub+0x348>)
 8000922:	4038      	ands	r0, r7
 8000924:	0743      	lsls	r3, r0, #29
 8000926:	d004      	beq.n	8000932 <__aeabi_fsub+0x82>
 8000928:	230f      	movs	r3, #15
 800092a:	4003      	ands	r3, r0
 800092c:	2b04      	cmp	r3, #4
 800092e:	d000      	beq.n	8000932 <__aeabi_fsub+0x82>
 8000930:	3004      	adds	r0, #4
 8000932:	0143      	lsls	r3, r0, #5
 8000934:	d400      	bmi.n	8000938 <__aeabi_fsub+0x88>
 8000936:	e0a0      	b.n	8000a7a <__aeabi_fsub+0x1ca>
 8000938:	1c6a      	adds	r2, r5, #1
 800093a:	2dfe      	cmp	r5, #254	; 0xfe
 800093c:	d100      	bne.n	8000940 <__aeabi_fsub+0x90>
 800093e:	e08d      	b.n	8000a5c <__aeabi_fsub+0x1ac>
 8000940:	0180      	lsls	r0, r0, #6
 8000942:	0a47      	lsrs	r7, r0, #9
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	05d0      	lsls	r0, r2, #23
 8000948:	4338      	orrs	r0, r7
 800094a:	07e4      	lsls	r4, r4, #31
 800094c:	4320      	orrs	r0, r4
 800094e:	bcc0      	pop	{r6, r7}
 8000950:	46b9      	mov	r9, r7
 8000952:	46b0      	mov	r8, r6
 8000954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000956:	1aa8      	subs	r0, r5, r2
 8000958:	4680      	mov	r8, r0
 800095a:	2800      	cmp	r0, #0
 800095c:	dd45      	ble.n	80009ea <__aeabi_fsub+0x13a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d070      	beq.n	8000a44 <__aeabi_fsub+0x194>
 8000962:	2dff      	cmp	r5, #255	; 0xff
 8000964:	d100      	bne.n	8000968 <__aeabi_fsub+0xb8>
 8000966:	e09e      	b.n	8000aa6 <__aeabi_fsub+0x1f6>
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	04db      	lsls	r3, r3, #19
 800096c:	431e      	orrs	r6, r3
 800096e:	4643      	mov	r3, r8
 8000970:	2b1b      	cmp	r3, #27
 8000972:	dc00      	bgt.n	8000976 <__aeabi_fsub+0xc6>
 8000974:	e0d2      	b.n	8000b1c <__aeabi_fsub+0x26c>
 8000976:	2001      	movs	r0, #1
 8000978:	4460      	add	r0, ip
 800097a:	0143      	lsls	r3, r0, #5
 800097c:	d57a      	bpl.n	8000a74 <__aeabi_fsub+0x1c4>
 800097e:	3501      	adds	r5, #1
 8000980:	2dff      	cmp	r5, #255	; 0xff
 8000982:	d06b      	beq.n	8000a5c <__aeabi_fsub+0x1ac>
 8000984:	2301      	movs	r3, #1
 8000986:	4a9d      	ldr	r2, [pc, #628]	; (8000bfc <__aeabi_fsub+0x34c>)
 8000988:	4003      	ands	r3, r0
 800098a:	0840      	lsrs	r0, r0, #1
 800098c:	4010      	ands	r0, r2
 800098e:	4318      	orrs	r0, r3
 8000990:	e7c8      	b.n	8000924 <__aeabi_fsub+0x74>
 8000992:	2e00      	cmp	r6, #0
 8000994:	d020      	beq.n	80009d8 <__aeabi_fsub+0x128>
 8000996:	428c      	cmp	r4, r1
 8000998:	d023      	beq.n	80009e2 <__aeabi_fsub+0x132>
 800099a:	0028      	movs	r0, r5
 800099c:	38ff      	subs	r0, #255	; 0xff
 800099e:	2800      	cmp	r0, #0
 80009a0:	d039      	beq.n	8000a16 <__aeabi_fsub+0x166>
 80009a2:	1b57      	subs	r7, r2, r5
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d000      	beq.n	80009aa <__aeabi_fsub+0xfa>
 80009a8:	e09d      	b.n	8000ae6 <__aeabi_fsub+0x236>
 80009aa:	4663      	mov	r3, ip
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fsub+0x102>
 80009b0:	e0db      	b.n	8000b6a <__aeabi_fsub+0x2ba>
 80009b2:	1e7b      	subs	r3, r7, #1
 80009b4:	2f01      	cmp	r7, #1
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0x10a>
 80009b8:	e10d      	b.n	8000bd6 <__aeabi_fsub+0x326>
 80009ba:	2fff      	cmp	r7, #255	; 0xff
 80009bc:	d071      	beq.n	8000aa2 <__aeabi_fsub+0x1f2>
 80009be:	001f      	movs	r7, r3
 80009c0:	e098      	b.n	8000af4 <__aeabi_fsub+0x244>
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fsub+0x118>
 80009c6:	e0a7      	b.n	8000b18 <__aeabi_fsub+0x268>
 80009c8:	1e42      	subs	r2, r0, #1
 80009ca:	2801      	cmp	r0, #1
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fsub+0x120>
 80009ce:	e0e6      	b.n	8000b9e <__aeabi_fsub+0x2ee>
 80009d0:	28ff      	cmp	r0, #255	; 0xff
 80009d2:	d068      	beq.n	8000aa6 <__aeabi_fsub+0x1f6>
 80009d4:	0010      	movs	r0, r2
 80009d6:	e78f      	b.n	80008f8 <__aeabi_fsub+0x48>
 80009d8:	2001      	movs	r0, #1
 80009da:	4041      	eors	r1, r0
 80009dc:	42a1      	cmp	r1, r4
 80009de:	d000      	beq.n	80009e2 <__aeabi_fsub+0x132>
 80009e0:	e77f      	b.n	80008e2 <__aeabi_fsub+0x32>
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	4240      	negs	r0, r0
 80009e6:	4680      	mov	r8, r0
 80009e8:	44a8      	add	r8, r5
 80009ea:	4640      	mov	r0, r8
 80009ec:	2800      	cmp	r0, #0
 80009ee:	d038      	beq.n	8000a62 <__aeabi_fsub+0x1b2>
 80009f0:	1b51      	subs	r1, r2, r5
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fsub+0x148>
 80009f6:	e0ae      	b.n	8000b56 <__aeabi_fsub+0x2a6>
 80009f8:	2aff      	cmp	r2, #255	; 0xff
 80009fa:	d100      	bne.n	80009fe <__aeabi_fsub+0x14e>
 80009fc:	e0df      	b.n	8000bbe <__aeabi_fsub+0x30e>
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	4660      	mov	r0, ip
 8000a02:	04db      	lsls	r3, r3, #19
 8000a04:	4318      	orrs	r0, r3
 8000a06:	4684      	mov	ip, r0
 8000a08:	291b      	cmp	r1, #27
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_fsub+0x15e>
 8000a0c:	e0d9      	b.n	8000bc2 <__aeabi_fsub+0x312>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	0015      	movs	r5, r2
 8000a12:	1980      	adds	r0, r0, r6
 8000a14:	e7b1      	b.n	800097a <__aeabi_fsub+0xca>
 8000a16:	20fe      	movs	r0, #254	; 0xfe
 8000a18:	1c6a      	adds	r2, r5, #1
 8000a1a:	4210      	tst	r0, r2
 8000a1c:	d171      	bne.n	8000b02 <__aeabi_fsub+0x252>
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fsub+0x174>
 8000a22:	e0a6      	b.n	8000b72 <__aeabi_fsub+0x2c2>
 8000a24:	4663      	mov	r3, ip
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fsub+0x17c>
 8000a2a:	e0d9      	b.n	8000be0 <__aeabi_fsub+0x330>
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fsub+0x184>
 8000a32:	e788      	b.n	8000946 <__aeabi_fsub+0x96>
 8000a34:	1b98      	subs	r0, r3, r6
 8000a36:	0143      	lsls	r3, r0, #5
 8000a38:	d400      	bmi.n	8000a3c <__aeabi_fsub+0x18c>
 8000a3a:	e0e1      	b.n	8000c00 <__aeabi_fsub+0x350>
 8000a3c:	4663      	mov	r3, ip
 8000a3e:	000c      	movs	r4, r1
 8000a40:	1af0      	subs	r0, r6, r3
 8000a42:	e76f      	b.n	8000924 <__aeabi_fsub+0x74>
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_fsub+0x19a>
 8000a48:	e0b7      	b.n	8000bba <__aeabi_fsub+0x30a>
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	2801      	cmp	r0, #1
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fsub+0x1a4>
 8000a52:	e09c      	b.n	8000b8e <__aeabi_fsub+0x2de>
 8000a54:	28ff      	cmp	r0, #255	; 0xff
 8000a56:	d026      	beq.n	8000aa6 <__aeabi_fsub+0x1f6>
 8000a58:	4690      	mov	r8, r2
 8000a5a:	e788      	b.n	800096e <__aeabi_fsub+0xbe>
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	2700      	movs	r7, #0
 8000a60:	e771      	b.n	8000946 <__aeabi_fsub+0x96>
 8000a62:	20fe      	movs	r0, #254	; 0xfe
 8000a64:	1c6a      	adds	r2, r5, #1
 8000a66:	4210      	tst	r0, r2
 8000a68:	d064      	beq.n	8000b34 <__aeabi_fsub+0x284>
 8000a6a:	2aff      	cmp	r2, #255	; 0xff
 8000a6c:	d0f6      	beq.n	8000a5c <__aeabi_fsub+0x1ac>
 8000a6e:	0015      	movs	r5, r2
 8000a70:	4466      	add	r6, ip
 8000a72:	0870      	lsrs	r0, r6, #1
 8000a74:	0743      	lsls	r3, r0, #29
 8000a76:	d000      	beq.n	8000a7a <__aeabi_fsub+0x1ca>
 8000a78:	e756      	b.n	8000928 <__aeabi_fsub+0x78>
 8000a7a:	08c3      	lsrs	r3, r0, #3
 8000a7c:	2dff      	cmp	r5, #255	; 0xff
 8000a7e:	d012      	beq.n	8000aa6 <__aeabi_fsub+0x1f6>
 8000a80:	025b      	lsls	r3, r3, #9
 8000a82:	0a5f      	lsrs	r7, r3, #9
 8000a84:	b2ea      	uxtb	r2, r5
 8000a86:	e75e      	b.n	8000946 <__aeabi_fsub+0x96>
 8000a88:	4662      	mov	r2, ip
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x1e0>
 8000a8e:	e096      	b.n	8000bbe <__aeabi_fsub+0x30e>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d008      	beq.n	8000aa6 <__aeabi_fsub+0x1f6>
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	03d2      	lsls	r2, r2, #15
 8000a98:	4213      	tst	r3, r2
 8000a9a:	d004      	beq.n	8000aa6 <__aeabi_fsub+0x1f6>
 8000a9c:	4648      	mov	r0, r9
 8000a9e:	4210      	tst	r0, r2
 8000aa0:	d101      	bne.n	8000aa6 <__aeabi_fsub+0x1f6>
 8000aa2:	000c      	movs	r4, r1
 8000aa4:	464b      	mov	r3, r9
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0d8      	beq.n	8000a5c <__aeabi_fsub+0x1ac>
 8000aaa:	2780      	movs	r7, #128	; 0x80
 8000aac:	03ff      	lsls	r7, r7, #15
 8000aae:	431f      	orrs	r7, r3
 8000ab0:	027f      	lsls	r7, r7, #9
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	0a7f      	lsrs	r7, r7, #9
 8000ab6:	e746      	b.n	8000946 <__aeabi_fsub+0x96>
 8000ab8:	2320      	movs	r3, #32
 8000aba:	003a      	movs	r2, r7
 8000abc:	1b45      	subs	r5, r0, r5
 8000abe:	0038      	movs	r0, r7
 8000ac0:	3501      	adds	r5, #1
 8000ac2:	40ea      	lsrs	r2, r5
 8000ac4:	1b5d      	subs	r5, r3, r5
 8000ac6:	40a8      	lsls	r0, r5
 8000ac8:	1e43      	subs	r3, r0, #1
 8000aca:	4198      	sbcs	r0, r3
 8000acc:	2500      	movs	r5, #0
 8000ace:	4310      	orrs	r0, r2
 8000ad0:	e728      	b.n	8000924 <__aeabi_fsub+0x74>
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	1a1b      	subs	r3, r3, r0
 8000ad6:	0032      	movs	r2, r6
 8000ad8:	409e      	lsls	r6, r3
 8000ada:	40c2      	lsrs	r2, r0
 8000adc:	0030      	movs	r0, r6
 8000ade:	1e43      	subs	r3, r0, #1
 8000ae0:	4198      	sbcs	r0, r3
 8000ae2:	4310      	orrs	r0, r2
 8000ae4:	e70c      	b.n	8000900 <__aeabi_fsub+0x50>
 8000ae6:	2aff      	cmp	r2, #255	; 0xff
 8000ae8:	d0db      	beq.n	8000aa2 <__aeabi_fsub+0x1f2>
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	4660      	mov	r0, ip
 8000aee:	04db      	lsls	r3, r3, #19
 8000af0:	4318      	orrs	r0, r3
 8000af2:	4684      	mov	ip, r0
 8000af4:	2f1b      	cmp	r7, #27
 8000af6:	dd56      	ble.n	8000ba6 <__aeabi_fsub+0x2f6>
 8000af8:	2001      	movs	r0, #1
 8000afa:	000c      	movs	r4, r1
 8000afc:	0015      	movs	r5, r2
 8000afe:	1a30      	subs	r0, r6, r0
 8000b00:	e700      	b.n	8000904 <__aeabi_fsub+0x54>
 8000b02:	4663      	mov	r3, ip
 8000b04:	1b9f      	subs	r7, r3, r6
 8000b06:	017b      	lsls	r3, r7, #5
 8000b08:	d43d      	bmi.n	8000b86 <__aeabi_fsub+0x2d6>
 8000b0a:	2f00      	cmp	r7, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fsub+0x260>
 8000b0e:	e6fe      	b.n	800090e <__aeabi_fsub+0x5e>
 8000b10:	2400      	movs	r4, #0
 8000b12:	2200      	movs	r2, #0
 8000b14:	2700      	movs	r7, #0
 8000b16:	e716      	b.n	8000946 <__aeabi_fsub+0x96>
 8000b18:	0005      	movs	r5, r0
 8000b1a:	e7af      	b.n	8000a7c <__aeabi_fsub+0x1cc>
 8000b1c:	0032      	movs	r2, r6
 8000b1e:	4643      	mov	r3, r8
 8000b20:	4641      	mov	r1, r8
 8000b22:	40da      	lsrs	r2, r3
 8000b24:	2320      	movs	r3, #32
 8000b26:	1a5b      	subs	r3, r3, r1
 8000b28:	409e      	lsls	r6, r3
 8000b2a:	0030      	movs	r0, r6
 8000b2c:	1e43      	subs	r3, r0, #1
 8000b2e:	4198      	sbcs	r0, r3
 8000b30:	4310      	orrs	r0, r2
 8000b32:	e721      	b.n	8000978 <__aeabi_fsub+0xc8>
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d1a7      	bne.n	8000a88 <__aeabi_fsub+0x1d8>
 8000b38:	4663      	mov	r3, ip
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d059      	beq.n	8000bf2 <__aeabi_fsub+0x342>
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2e00      	cmp	r6, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_fsub+0x296>
 8000b44:	e6ff      	b.n	8000946 <__aeabi_fsub+0x96>
 8000b46:	0030      	movs	r0, r6
 8000b48:	4460      	add	r0, ip
 8000b4a:	0143      	lsls	r3, r0, #5
 8000b4c:	d592      	bpl.n	8000a74 <__aeabi_fsub+0x1c4>
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <__aeabi_fsub+0x348>)
 8000b50:	3501      	adds	r5, #1
 8000b52:	4018      	ands	r0, r3
 8000b54:	e78e      	b.n	8000a74 <__aeabi_fsub+0x1c4>
 8000b56:	4663      	mov	r3, ip
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d047      	beq.n	8000bec <__aeabi_fsub+0x33c>
 8000b5c:	1e4b      	subs	r3, r1, #1
 8000b5e:	2901      	cmp	r1, #1
 8000b60:	d015      	beq.n	8000b8e <__aeabi_fsub+0x2de>
 8000b62:	29ff      	cmp	r1, #255	; 0xff
 8000b64:	d02b      	beq.n	8000bbe <__aeabi_fsub+0x30e>
 8000b66:	0019      	movs	r1, r3
 8000b68:	e74e      	b.n	8000a08 <__aeabi_fsub+0x158>
 8000b6a:	000c      	movs	r4, r1
 8000b6c:	464b      	mov	r3, r9
 8000b6e:	003d      	movs	r5, r7
 8000b70:	e784      	b.n	8000a7c <__aeabi_fsub+0x1cc>
 8000b72:	4662      	mov	r2, ip
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	d18b      	bne.n	8000a90 <__aeabi_fsub+0x1e0>
 8000b78:	2e00      	cmp	r6, #0
 8000b7a:	d192      	bne.n	8000aa2 <__aeabi_fsub+0x1f2>
 8000b7c:	2780      	movs	r7, #128	; 0x80
 8000b7e:	2400      	movs	r4, #0
 8000b80:	22ff      	movs	r2, #255	; 0xff
 8000b82:	03ff      	lsls	r7, r7, #15
 8000b84:	e6df      	b.n	8000946 <__aeabi_fsub+0x96>
 8000b86:	4663      	mov	r3, ip
 8000b88:	000c      	movs	r4, r1
 8000b8a:	1af7      	subs	r7, r6, r3
 8000b8c:	e6bf      	b.n	800090e <__aeabi_fsub+0x5e>
 8000b8e:	0030      	movs	r0, r6
 8000b90:	4460      	add	r0, ip
 8000b92:	2501      	movs	r5, #1
 8000b94:	0143      	lsls	r3, r0, #5
 8000b96:	d400      	bmi.n	8000b9a <__aeabi_fsub+0x2ea>
 8000b98:	e76c      	b.n	8000a74 <__aeabi_fsub+0x1c4>
 8000b9a:	2502      	movs	r5, #2
 8000b9c:	e6f2      	b.n	8000984 <__aeabi_fsub+0xd4>
 8000b9e:	4663      	mov	r3, ip
 8000ba0:	2501      	movs	r5, #1
 8000ba2:	1b98      	subs	r0, r3, r6
 8000ba4:	e6ae      	b.n	8000904 <__aeabi_fsub+0x54>
 8000ba6:	2320      	movs	r3, #32
 8000ba8:	4664      	mov	r4, ip
 8000baa:	4660      	mov	r0, ip
 8000bac:	40fc      	lsrs	r4, r7
 8000bae:	1bdf      	subs	r7, r3, r7
 8000bb0:	40b8      	lsls	r0, r7
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	4320      	orrs	r0, r4
 8000bb8:	e79f      	b.n	8000afa <__aeabi_fsub+0x24a>
 8000bba:	0005      	movs	r5, r0
 8000bbc:	e75e      	b.n	8000a7c <__aeabi_fsub+0x1cc>
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	e771      	b.n	8000aa6 <__aeabi_fsub+0x1f6>
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	4665      	mov	r5, ip
 8000bc6:	4660      	mov	r0, ip
 8000bc8:	40cd      	lsrs	r5, r1
 8000bca:	1a59      	subs	r1, r3, r1
 8000bcc:	4088      	lsls	r0, r1
 8000bce:	1e43      	subs	r3, r0, #1
 8000bd0:	4198      	sbcs	r0, r3
 8000bd2:	4328      	orrs	r0, r5
 8000bd4:	e71c      	b.n	8000a10 <__aeabi_fsub+0x160>
 8000bd6:	4663      	mov	r3, ip
 8000bd8:	000c      	movs	r4, r1
 8000bda:	2501      	movs	r5, #1
 8000bdc:	1af0      	subs	r0, r6, r3
 8000bde:	e691      	b.n	8000904 <__aeabi_fsub+0x54>
 8000be0:	2e00      	cmp	r6, #0
 8000be2:	d095      	beq.n	8000b10 <__aeabi_fsub+0x260>
 8000be4:	000c      	movs	r4, r1
 8000be6:	464f      	mov	r7, r9
 8000be8:	2200      	movs	r2, #0
 8000bea:	e6ac      	b.n	8000946 <__aeabi_fsub+0x96>
 8000bec:	464b      	mov	r3, r9
 8000bee:	000d      	movs	r5, r1
 8000bf0:	e744      	b.n	8000a7c <__aeabi_fsub+0x1cc>
 8000bf2:	464f      	mov	r7, r9
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	e6a6      	b.n	8000946 <__aeabi_fsub+0x96>
 8000bf8:	fbffffff 	.word	0xfbffffff
 8000bfc:	7dffffff 	.word	0x7dffffff
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d000      	beq.n	8000c06 <__aeabi_fsub+0x356>
 8000c04:	e736      	b.n	8000a74 <__aeabi_fsub+0x1c4>
 8000c06:	2400      	movs	r4, #0
 8000c08:	2700      	movs	r7, #0
 8000c0a:	e69c      	b.n	8000946 <__aeabi_fsub+0x96>

08000c0c <__aeabi_f2iz>:
 8000c0c:	0241      	lsls	r1, r0, #9
 8000c0e:	0042      	lsls	r2, r0, #1
 8000c10:	0fc3      	lsrs	r3, r0, #31
 8000c12:	0a49      	lsrs	r1, r1, #9
 8000c14:	2000      	movs	r0, #0
 8000c16:	0e12      	lsrs	r2, r2, #24
 8000c18:	2a7e      	cmp	r2, #126	; 0x7e
 8000c1a:	dd03      	ble.n	8000c24 <__aeabi_f2iz+0x18>
 8000c1c:	2a9d      	cmp	r2, #157	; 0x9d
 8000c1e:	dd02      	ble.n	8000c26 <__aeabi_f2iz+0x1a>
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <__aeabi_f2iz+0x3c>)
 8000c22:	1898      	adds	r0, r3, r2
 8000c24:	4770      	bx	lr
 8000c26:	2080      	movs	r0, #128	; 0x80
 8000c28:	0400      	lsls	r0, r0, #16
 8000c2a:	4301      	orrs	r1, r0
 8000c2c:	2a95      	cmp	r2, #149	; 0x95
 8000c2e:	dc07      	bgt.n	8000c40 <__aeabi_f2iz+0x34>
 8000c30:	2096      	movs	r0, #150	; 0x96
 8000c32:	1a82      	subs	r2, r0, r2
 8000c34:	40d1      	lsrs	r1, r2
 8000c36:	4248      	negs	r0, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f3      	bne.n	8000c24 <__aeabi_f2iz+0x18>
 8000c3c:	0008      	movs	r0, r1
 8000c3e:	e7f1      	b.n	8000c24 <__aeabi_f2iz+0x18>
 8000c40:	3a96      	subs	r2, #150	; 0x96
 8000c42:	4091      	lsls	r1, r2
 8000c44:	e7f7      	b.n	8000c36 <__aeabi_f2iz+0x2a>
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	7fffffff 	.word	0x7fffffff

08000c4c <__aeabi_ui2f>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	1e05      	subs	r5, r0, #0
 8000c50:	d00e      	beq.n	8000c70 <__aeabi_ui2f+0x24>
 8000c52:	f000 f877 	bl	8000d44 <__clzsi2>
 8000c56:	239e      	movs	r3, #158	; 0x9e
 8000c58:	0004      	movs	r4, r0
 8000c5a:	1a1b      	subs	r3, r3, r0
 8000c5c:	2b96      	cmp	r3, #150	; 0x96
 8000c5e:	dc0c      	bgt.n	8000c7a <__aeabi_ui2f+0x2e>
 8000c60:	2808      	cmp	r0, #8
 8000c62:	dd01      	ble.n	8000c68 <__aeabi_ui2f+0x1c>
 8000c64:	3c08      	subs	r4, #8
 8000c66:	40a5      	lsls	r5, r4
 8000c68:	026d      	lsls	r5, r5, #9
 8000c6a:	0a6d      	lsrs	r5, r5, #9
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	e001      	b.n	8000c74 <__aeabi_ui2f+0x28>
 8000c70:	2000      	movs	r0, #0
 8000c72:	2500      	movs	r5, #0
 8000c74:	05c0      	lsls	r0, r0, #23
 8000c76:	4328      	orrs	r0, r5
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
 8000c7a:	2b99      	cmp	r3, #153	; 0x99
 8000c7c:	dd09      	ble.n	8000c92 <__aeabi_ui2f+0x46>
 8000c7e:	0002      	movs	r2, r0
 8000c80:	0029      	movs	r1, r5
 8000c82:	321b      	adds	r2, #27
 8000c84:	4091      	lsls	r1, r2
 8000c86:	1e4a      	subs	r2, r1, #1
 8000c88:	4191      	sbcs	r1, r2
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	1a12      	subs	r2, r2, r0
 8000c8e:	40d5      	lsrs	r5, r2
 8000c90:	430d      	orrs	r5, r1
 8000c92:	2c05      	cmp	r4, #5
 8000c94:	dc12      	bgt.n	8000cbc <__aeabi_ui2f+0x70>
 8000c96:	0029      	movs	r1, r5
 8000c98:	4e0c      	ldr	r6, [pc, #48]	; (8000ccc <__aeabi_ui2f+0x80>)
 8000c9a:	4031      	ands	r1, r6
 8000c9c:	076a      	lsls	r2, r5, #29
 8000c9e:	d009      	beq.n	8000cb4 <__aeabi_ui2f+0x68>
 8000ca0:	200f      	movs	r0, #15
 8000ca2:	4028      	ands	r0, r5
 8000ca4:	2804      	cmp	r0, #4
 8000ca6:	d005      	beq.n	8000cb4 <__aeabi_ui2f+0x68>
 8000ca8:	3104      	adds	r1, #4
 8000caa:	014a      	lsls	r2, r1, #5
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_ui2f+0x68>
 8000cae:	239f      	movs	r3, #159	; 0x9f
 8000cb0:	4031      	ands	r1, r6
 8000cb2:	1b1b      	subs	r3, r3, r4
 8000cb4:	0189      	lsls	r1, r1, #6
 8000cb6:	0a4d      	lsrs	r5, r1, #9
 8000cb8:	b2d8      	uxtb	r0, r3
 8000cba:	e7db      	b.n	8000c74 <__aeabi_ui2f+0x28>
 8000cbc:	1f62      	subs	r2, r4, #5
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	0029      	movs	r1, r5
 8000cc2:	4e02      	ldr	r6, [pc, #8]	; (8000ccc <__aeabi_ui2f+0x80>)
 8000cc4:	4031      	ands	r1, r6
 8000cc6:	076a      	lsls	r2, r5, #29
 8000cc8:	d0f4      	beq.n	8000cb4 <__aeabi_ui2f+0x68>
 8000cca:	e7e9      	b.n	8000ca0 <__aeabi_ui2f+0x54>
 8000ccc:	fbffffff 	.word	0xfbffffff

08000cd0 <__aeabi_cfrcmple>:
 8000cd0:	4684      	mov	ip, r0
 8000cd2:	0008      	movs	r0, r1
 8000cd4:	4661      	mov	r1, ip
 8000cd6:	e7ff      	b.n	8000cd8 <__aeabi_cfcmpeq>

08000cd8 <__aeabi_cfcmpeq>:
 8000cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000cda:	f000 f8bd 	bl	8000e58 <__lesf2>
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	d401      	bmi.n	8000ce6 <__aeabi_cfcmpeq+0xe>
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	42c8      	cmn	r0, r1
 8000ce6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ce8 <__aeabi_fcmpeq>:
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	f000 f849 	bl	8000d80 <__eqsf2>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	3001      	adds	r0, #1
 8000cf2:	bd10      	pop	{r4, pc}

08000cf4 <__aeabi_fcmplt>:
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	f000 f8af 	bl	8000e58 <__lesf2>
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	db01      	blt.n	8000d02 <__aeabi_fcmplt+0xe>
 8000cfe:	2000      	movs	r0, #0
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	2001      	movs	r0, #1
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)

08000d08 <__aeabi_fcmple>:
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	f000 f8a5 	bl	8000e58 <__lesf2>
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	dd01      	ble.n	8000d16 <__aeabi_fcmple+0xe>
 8000d12:	2000      	movs	r0, #0
 8000d14:	bd10      	pop	{r4, pc}
 8000d16:	2001      	movs	r0, #1
 8000d18:	bd10      	pop	{r4, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)

08000d1c <__aeabi_fcmpgt>:
 8000d1c:	b510      	push	{r4, lr}
 8000d1e:	f000 f855 	bl	8000dcc <__gesf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	dc01      	bgt.n	8000d2a <__aeabi_fcmpgt+0xe>
 8000d26:	2000      	movs	r0, #0
 8000d28:	bd10      	pop	{r4, pc}
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)

08000d30 <__aeabi_fcmpge>:
 8000d30:	b510      	push	{r4, lr}
 8000d32:	f000 f84b 	bl	8000dcc <__gesf2>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	da01      	bge.n	8000d3e <__aeabi_fcmpge+0xe>
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	2001      	movs	r0, #1
 8000d40:	bd10      	pop	{r4, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)

08000d44 <__clzsi2>:
 8000d44:	211c      	movs	r1, #28
 8000d46:	2301      	movs	r3, #1
 8000d48:	041b      	lsls	r3, r3, #16
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d301      	bcc.n	8000d52 <__clzsi2+0xe>
 8000d4e:	0c00      	lsrs	r0, r0, #16
 8000d50:	3910      	subs	r1, #16
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	4298      	cmp	r0, r3
 8000d56:	d301      	bcc.n	8000d5c <__clzsi2+0x18>
 8000d58:	0a00      	lsrs	r0, r0, #8
 8000d5a:	3908      	subs	r1, #8
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d301      	bcc.n	8000d66 <__clzsi2+0x22>
 8000d62:	0900      	lsrs	r0, r0, #4
 8000d64:	3904      	subs	r1, #4
 8000d66:	a202      	add	r2, pc, #8	; (adr r2, 8000d70 <__clzsi2+0x2c>)
 8000d68:	5c10      	ldrb	r0, [r2, r0]
 8000d6a:	1840      	adds	r0, r0, r1
 8000d6c:	4770      	bx	lr
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	02020304 	.word	0x02020304
 8000d74:	01010101 	.word	0x01010101
	...

08000d80 <__eqsf2>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	0245      	lsls	r5, r0, #9
 8000d86:	024e      	lsls	r6, r1, #9
 8000d88:	004c      	lsls	r4, r1, #1
 8000d8a:	0fc3      	lsrs	r3, r0, #31
 8000d8c:	0a6d      	lsrs	r5, r5, #9
 8000d8e:	2001      	movs	r0, #1
 8000d90:	0e12      	lsrs	r2, r2, #24
 8000d92:	0a76      	lsrs	r6, r6, #9
 8000d94:	0e24      	lsrs	r4, r4, #24
 8000d96:	0fc9      	lsrs	r1, r1, #31
 8000d98:	2aff      	cmp	r2, #255	; 0xff
 8000d9a:	d006      	beq.n	8000daa <__eqsf2+0x2a>
 8000d9c:	2cff      	cmp	r4, #255	; 0xff
 8000d9e:	d003      	beq.n	8000da8 <__eqsf2+0x28>
 8000da0:	42a2      	cmp	r2, r4
 8000da2:	d101      	bne.n	8000da8 <__eqsf2+0x28>
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	d006      	beq.n	8000db6 <__eqsf2+0x36>
 8000da8:	bd70      	pop	{r4, r5, r6, pc}
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d1fc      	bne.n	8000da8 <__eqsf2+0x28>
 8000dae:	2cff      	cmp	r4, #255	; 0xff
 8000db0:	d1fa      	bne.n	8000da8 <__eqsf2+0x28>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d1f8      	bne.n	8000da8 <__eqsf2+0x28>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d006      	beq.n	8000dc8 <__eqsf2+0x48>
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	d1f3      	bne.n	8000da8 <__eqsf2+0x28>
 8000dc0:	0028      	movs	r0, r5
 8000dc2:	1e43      	subs	r3, r0, #1
 8000dc4:	4198      	sbcs	r0, r3
 8000dc6:	e7ef      	b.n	8000da8 <__eqsf2+0x28>
 8000dc8:	2000      	movs	r0, #0
 8000dca:	e7ed      	b.n	8000da8 <__eqsf2+0x28>

08000dcc <__gesf2>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	0042      	lsls	r2, r0, #1
 8000dd0:	0245      	lsls	r5, r0, #9
 8000dd2:	024e      	lsls	r6, r1, #9
 8000dd4:	004c      	lsls	r4, r1, #1
 8000dd6:	0fc3      	lsrs	r3, r0, #31
 8000dd8:	0a6d      	lsrs	r5, r5, #9
 8000dda:	0e12      	lsrs	r2, r2, #24
 8000ddc:	0a76      	lsrs	r6, r6, #9
 8000dde:	0e24      	lsrs	r4, r4, #24
 8000de0:	0fc8      	lsrs	r0, r1, #31
 8000de2:	2aff      	cmp	r2, #255	; 0xff
 8000de4:	d01b      	beq.n	8000e1e <__gesf2+0x52>
 8000de6:	2cff      	cmp	r4, #255	; 0xff
 8000de8:	d00e      	beq.n	8000e08 <__gesf2+0x3c>
 8000dea:	2a00      	cmp	r2, #0
 8000dec:	d11b      	bne.n	8000e26 <__gesf2+0x5a>
 8000dee:	2c00      	cmp	r4, #0
 8000df0:	d101      	bne.n	8000df6 <__gesf2+0x2a>
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	d01c      	beq.n	8000e30 <__gesf2+0x64>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d00c      	beq.n	8000e14 <__gesf2+0x48>
 8000dfa:	4283      	cmp	r3, r0
 8000dfc:	d01c      	beq.n	8000e38 <__gesf2+0x6c>
 8000dfe:	2102      	movs	r1, #2
 8000e00:	1e58      	subs	r0, r3, #1
 8000e02:	4008      	ands	r0, r1
 8000e04:	3801      	subs	r0, #1
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d122      	bne.n	8000e52 <__gesf2+0x86>
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d1f4      	bne.n	8000dfa <__gesf2+0x2e>
 8000e10:	2d00      	cmp	r5, #0
 8000e12:	d1f2      	bne.n	8000dfa <__gesf2+0x2e>
 8000e14:	2800      	cmp	r0, #0
 8000e16:	d1f6      	bne.n	8000e06 <__gesf2+0x3a>
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	e7f3      	b.n	8000e06 <__gesf2+0x3a>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d117      	bne.n	8000e52 <__gesf2+0x86>
 8000e22:	2cff      	cmp	r4, #255	; 0xff
 8000e24:	d0f0      	beq.n	8000e08 <__gesf2+0x3c>
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d1e7      	bne.n	8000dfa <__gesf2+0x2e>
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d1e5      	bne.n	8000dfa <__gesf2+0x2e>
 8000e2e:	e7e6      	b.n	8000dfe <__gesf2+0x32>
 8000e30:	2000      	movs	r0, #0
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e7      	beq.n	8000e06 <__gesf2+0x3a>
 8000e36:	e7e2      	b.n	8000dfe <__gesf2+0x32>
 8000e38:	42a2      	cmp	r2, r4
 8000e3a:	dc05      	bgt.n	8000e48 <__gesf2+0x7c>
 8000e3c:	dbea      	blt.n	8000e14 <__gesf2+0x48>
 8000e3e:	42b5      	cmp	r5, r6
 8000e40:	d802      	bhi.n	8000e48 <__gesf2+0x7c>
 8000e42:	d3e7      	bcc.n	8000e14 <__gesf2+0x48>
 8000e44:	2000      	movs	r0, #0
 8000e46:	e7de      	b.n	8000e06 <__gesf2+0x3a>
 8000e48:	4243      	negs	r3, r0
 8000e4a:	4158      	adcs	r0, r3
 8000e4c:	0040      	lsls	r0, r0, #1
 8000e4e:	3801      	subs	r0, #1
 8000e50:	e7d9      	b.n	8000e06 <__gesf2+0x3a>
 8000e52:	2002      	movs	r0, #2
 8000e54:	4240      	negs	r0, r0
 8000e56:	e7d6      	b.n	8000e06 <__gesf2+0x3a>

08000e58 <__lesf2>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	0042      	lsls	r2, r0, #1
 8000e5c:	0245      	lsls	r5, r0, #9
 8000e5e:	024e      	lsls	r6, r1, #9
 8000e60:	004c      	lsls	r4, r1, #1
 8000e62:	0fc3      	lsrs	r3, r0, #31
 8000e64:	0a6d      	lsrs	r5, r5, #9
 8000e66:	0e12      	lsrs	r2, r2, #24
 8000e68:	0a76      	lsrs	r6, r6, #9
 8000e6a:	0e24      	lsrs	r4, r4, #24
 8000e6c:	0fc8      	lsrs	r0, r1, #31
 8000e6e:	2aff      	cmp	r2, #255	; 0xff
 8000e70:	d00b      	beq.n	8000e8a <__lesf2+0x32>
 8000e72:	2cff      	cmp	r4, #255	; 0xff
 8000e74:	d00d      	beq.n	8000e92 <__lesf2+0x3a>
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	d11f      	bne.n	8000eba <__lesf2+0x62>
 8000e7a:	2c00      	cmp	r4, #0
 8000e7c:	d116      	bne.n	8000eac <__lesf2+0x54>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d114      	bne.n	8000eac <__lesf2+0x54>
 8000e82:	2000      	movs	r0, #0
 8000e84:	2d00      	cmp	r5, #0
 8000e86:	d010      	beq.n	8000eaa <__lesf2+0x52>
 8000e88:	e009      	b.n	8000e9e <__lesf2+0x46>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d10c      	bne.n	8000ea8 <__lesf2+0x50>
 8000e8e:	2cff      	cmp	r4, #255	; 0xff
 8000e90:	d113      	bne.n	8000eba <__lesf2+0x62>
 8000e92:	2e00      	cmp	r6, #0
 8000e94:	d108      	bne.n	8000ea8 <__lesf2+0x50>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d008      	beq.n	8000eac <__lesf2+0x54>
 8000e9a:	4283      	cmp	r3, r0
 8000e9c:	d012      	beq.n	8000ec4 <__lesf2+0x6c>
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	1e58      	subs	r0, r3, #1
 8000ea2:	4008      	ands	r0, r1
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e000      	b.n	8000eaa <__lesf2+0x52>
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	bd70      	pop	{r4, r5, r6, pc}
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d1f4      	bne.n	8000e9a <__lesf2+0x42>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d1fa      	bne.n	8000eaa <__lesf2+0x52>
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	e7f7      	b.n	8000eaa <__lesf2+0x52>
 8000eba:	2c00      	cmp	r4, #0
 8000ebc:	d1ed      	bne.n	8000e9a <__lesf2+0x42>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	d1eb      	bne.n	8000e9a <__lesf2+0x42>
 8000ec2:	e7ec      	b.n	8000e9e <__lesf2+0x46>
 8000ec4:	42a2      	cmp	r2, r4
 8000ec6:	dc05      	bgt.n	8000ed4 <__lesf2+0x7c>
 8000ec8:	dbf2      	blt.n	8000eb0 <__lesf2+0x58>
 8000eca:	42b5      	cmp	r5, r6
 8000ecc:	d802      	bhi.n	8000ed4 <__lesf2+0x7c>
 8000ece:	d3ef      	bcc.n	8000eb0 <__lesf2+0x58>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e7ea      	b.n	8000eaa <__lesf2+0x52>
 8000ed4:	4243      	negs	r3, r0
 8000ed6:	4158      	adcs	r0, r3
 8000ed8:	0040      	lsls	r0, r0, #1
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7e5      	b.n	8000eaa <__lesf2+0x52>
 8000ede:	46c0      	nop			; (mov r8, r8)

08000ee0 <HAL_ADC_ConvCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	/* Read & update The ADC Conversion Result*/
	ADC_RES = HAL_ADC_GetValue(&hadc1);
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_ADC_ConvCpltCallback+0x20>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 f91c 	bl	8002128 <HAL_ADC_GetValue>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_ADC_ConvCpltCallback+0x24>)
 8000ef6:	801a      	strh	r2, [r3, #0]
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b002      	add	sp, #8
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000008c 	.word	0x2000008c
 8000f04:	2000013c 	.word	0x2000013c

08000f08 <HAL_GPIO_EXTI_Falling_Callback>:
/*External interrupt to detection Direction of the motor*/
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_0) {
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d112      	bne.n	8000f42 <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	0099      	lsls	r1, r3, #2
 8000f20:	23a0      	movs	r3, #160	; 0xa0
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	2201      	movs	r2, #1
 8000f26:	0018      	movs	r0, r3
 8000f28:	f002 f8ae 	bl	8003088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	00d9      	lsls	r1, r3, #3
 8000f30:	23a0      	movs	r3, #160	; 0xa0
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	2200      	movs	r2, #0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f002 f8a6 	bl	8003088 <HAL_GPIO_WritePin>
		DiractionCommand = Forward;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]

	}
	if (GPIO_Pin == GPIO_PIN_1) {
 8000f42:	1dbb      	adds	r3, r7, #6
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d112      	bne.n	8000f70 <HAL_GPIO_EXTI_Falling_Callback+0x68>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	0099      	lsls	r1, r3, #2
 8000f4e:	23a0      	movs	r3, #160	; 0xa0
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	2200      	movs	r2, #0
 8000f54:	0018      	movs	r0, r3
 8000f56:	f002 f897 	bl	8003088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	00d9      	lsls	r1, r3, #3
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	2201      	movs	r2, #1
 8000f64:	0018      	movs	r0, r3
 8000f66:	f002 f88f 	bl	8003088 <HAL_GPIO_WritePin>
		DiractionCommand = Backward;
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	701a      	strb	r2, [r3, #0]
	}
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000158 	.word	0x20000158

08000f7c <map>:
 * @param: The lower bound of the output range.
 * @param: The upper bound of the output range.
 * @return The mapped value within the output range.
 */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	0005      	movs	r5, r0
 8000f84:	000c      	movs	r4, r1
 8000f86:	0010      	movs	r0, r2
 8000f88:	0019      	movs	r1, r3
 8000f8a:	1dbb      	adds	r3, r7, #6
 8000f8c:	1c2a      	adds	r2, r5, #0
 8000f8e:	801a      	strh	r2, [r3, #0]
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	1c22      	adds	r2, r4, #0
 8000f94:	801a      	strh	r2, [r3, #0]
 8000f96:	1cbb      	adds	r3, r7, #2
 8000f98:	1c02      	adds	r2, r0, #0
 8000f9a:	801a      	strh	r2, [r3, #0]
 8000f9c:	003b      	movs	r3, r7
 8000f9e:	1c0a      	adds	r2, r1, #0
 8000fa0:	801a      	strh	r2, [r3, #0]
	return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1)
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	881a      	ldrh	r2, [r3, #0]
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	1ad2      	subs	r2, r2, r3
 8000fac:	2318      	movs	r3, #24
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	8819      	ldrh	r1, [r3, #0]
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	1acb      	subs	r3, r1, r3
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4353      	muls	r3, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	1cbb      	adds	r3, r7, #2
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	0019      	movs	r1, r3
 8000fcc:	f7ff f92e 	bl	800022c <__divsi3>
 8000fd0:	0003      	movs	r3, r0
			+ out_min;
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	18d3      	adds	r3, r2, r3
 8000fda:	b29b      	uxth	r3, r3
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bdb0      	pop	{r4, r5, r7, pc}

08000fe4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fea:	f000 fc37 	bl	800185c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fee:	f000 f8a3 	bl	8001138 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ff2:	f000 fa33 	bl	800145c <MX_GPIO_Init>
	MX_ADC1_Init();
 8000ff6:	f000 f8fd 	bl	80011f4 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000ffa:	f000 f963 	bl	80012c4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	/*Start PWM for CH1 Timer1*/
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <main+0x118>)
 8001000:	2100      	movs	r1, #0
 8001002:	0018      	movs	r0, r3
 8001004:	f003 f8b0 	bl	8004168 <HAL_TIM_PWM_Start>
	/*Start calibration for ADC*/
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001008:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <main+0x11c>)
 800100a:	0018      	movs	r0, r3
 800100c:	f001 fcfc 	bl	8002a08 <HAL_ADCEx_Calibration_Start>
	/*Init LCD*/
	lcd_init();
 8001010:	f004 f89a 	bl	8005148 <lcd_init>
	/*Welcome screen lcd */
	lcd_puts(0, 2, "Motor Control");
 8001014:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <main+0x120>)
 8001016:	001a      	movs	r2, r3
 8001018:	2102      	movs	r1, #2
 800101a:	2000      	movs	r0, #0
 800101c:	f004 f9bc 	bl	8005398 <lcd_puts>
	HAL_Delay(2000);
 8001020:	23fa      	movs	r3, #250	; 0xfa
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fc9f 	bl	8001968 <HAL_Delay>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* Start ADC1 Conversion in interrupt mode*/
		HAL_ADC_Start_IT(&hadc1);
 800102a:	4b35      	ldr	r3, [pc, #212]	; (8001100 <main+0x11c>)
 800102c:	0018      	movs	r0, r3
 800102e:	f001 f803 	bl	8002038 <HAL_ADC_Start_IT>
		/* mapping ADC value to CCR value */
		CCR_Value = map(ADC_RES, ADC_MIN, ADC_MAX,CCR_MIN,CCR_MAX);
 8001032:	4b35      	ldr	r3, [pc, #212]	; (8001108 <main+0x124>)
 8001034:	8818      	ldrh	r0, [r3, #0]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	015a      	lsls	r2, r3, #5
 800103a:	4b34      	ldr	r3, [pc, #208]	; (800110c <main+0x128>)
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	2100      	movs	r1, #0
 8001042:	f7ff ff9b 	bl	8000f7c <map>
 8001046:	0003      	movs	r3, r0
 8001048:	001a      	movs	r2, r3
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <main+0x12c>)
 800104c:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = CCR_Value;
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <main+0x12c>)
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <main+0x130>)
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
		/* DutyCycle = CCRx/ARRx[%]*/
		DutyCycle = ((float) CCR_Value / (float) htim1.Init.Period) * 100;
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <main+0x12c>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff fdf6 	bl	8000c4c <__aeabi_ui2f>
 8001060:	1c04      	adds	r4, r0, #0
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <main+0x118>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff fdf0 	bl	8000c4c <__aeabi_ui2f>
 800106c:	1c03      	adds	r3, r0, #0
 800106e:	1c19      	adds	r1, r3, #0
 8001070:	1c20      	adds	r0, r4, #0
 8001072:	f7ff f9df 	bl	8000434 <__aeabi_fdiv>
 8001076:	1c03      	adds	r3, r0, #0
 8001078:	4927      	ldr	r1, [pc, #156]	; (8001118 <main+0x134>)
 800107a:	1c18      	adds	r0, r3, #0
 800107c:	f7ff faf2 	bl	8000664 <__aeabi_fmul>
 8001080:	1c03      	adds	r3, r0, #0
 8001082:	1c1a      	adds	r2, r3, #0
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <main+0x138>)
 8001086:	601a      	str	r2, [r3, #0]
		/*Clear LCD and print a new value*/
		lcd_clear();
 8001088:	f004 f9d4 	bl	8005434 <lcd_clear>
		sprintf(buff, "DutyCycle:%03d%%", (uint16_t) DutyCycle);
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <main+0x138>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	1c18      	adds	r0, r3, #0
 8001092:	f7ff f9b7 	bl	8000404 <__aeabi_f2uiz>
 8001096:	0003      	movs	r3, r0
 8001098:	b29b      	uxth	r3, r3
 800109a:	001a      	movs	r2, r3
 800109c:	4920      	ldr	r1, [pc, #128]	; (8001120 <main+0x13c>)
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <main+0x140>)
 80010a0:	0018      	movs	r0, r3
 80010a2:	f004 fa03 	bl	80054ac <siprintf>
		lcd_puts(0, 1, buff);
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <main+0x140>)
 80010a8:	001a      	movs	r2, r3
 80010aa:	2101      	movs	r1, #1
 80010ac:	2000      	movs	r0, #0
 80010ae:	f004 f973 	bl	8005398 <lcd_puts>
		switch (DiractionCommand) {
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <main+0x144>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d00b      	beq.n	80010d2 <main+0xee>
 80010ba:	dc17      	bgt.n	80010ec <main+0x108>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00f      	beq.n	80010e0 <main+0xfc>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d113      	bne.n	80010ec <main+0x108>
		case Forward:
			lcd_puts(1, 1, "Forward");
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <main+0x148>)
 80010c6:	001a      	movs	r2, r3
 80010c8:	2101      	movs	r1, #1
 80010ca:	2001      	movs	r0, #1
 80010cc:	f004 f964 	bl	8005398 <lcd_puts>
			break;
 80010d0:	e00d      	b.n	80010ee <main+0x10a>
		case Backward:
			lcd_puts(1, 1, "Backward");
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <main+0x14c>)
 80010d4:	001a      	movs	r2, r3
 80010d6:	2101      	movs	r1, #1
 80010d8:	2001      	movs	r0, #1
 80010da:	f004 f95d 	bl	8005398 <lcd_puts>
			break;
 80010de:	e006      	b.n	80010ee <main+0x10a>
		case MotorOff:
			lcd_puts(1, 1, "MotorOff");
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <main+0x150>)
 80010e2:	001a      	movs	r2, r3
 80010e4:	2101      	movs	r1, #1
 80010e6:	2001      	movs	r0, #1
 80010e8:	f004 f956 	bl	8005398 <lcd_puts>
		default:
			break;
 80010ec:	46c0      	nop			; (mov r8, r8)
		}
		HAL_Delay(500);
 80010ee:	23fa      	movs	r3, #250	; 0xfa
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 fc38 	bl	8001968 <HAL_Delay>
		HAL_ADC_Start_IT(&hadc1);
 80010f8:	e797      	b.n	800102a <main+0x46>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	200000f0 	.word	0x200000f0
 8001100:	2000008c 	.word	0x2000008c
 8001104:	08005d98 	.word	0x08005d98
 8001108:	2000013c 	.word	0x2000013c
 800110c:	0000257f 	.word	0x0000257f
 8001110:	20000144 	.word	0x20000144
 8001114:	40012c00 	.word	0x40012c00
 8001118:	42c80000 	.word	0x42c80000
 800111c:	20000140 	.word	0x20000140
 8001120:	08005da8 	.word	0x08005da8
 8001124:	20000148 	.word	0x20000148
 8001128:	20000158 	.word	0x20000158
 800112c:	08005dbc 	.word	0x08005dbc
 8001130:	08005dc4 	.word	0x08005dc4
 8001134:	08005dd0 	.word	0x08005dd0

08001138 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b095      	sub	sp, #84	; 0x54
 800113c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800113e:	2414      	movs	r4, #20
 8001140:	193b      	adds	r3, r7, r4
 8001142:	0018      	movs	r0, r3
 8001144:	233c      	movs	r3, #60	; 0x3c
 8001146:	001a      	movs	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	f004 f9a7 	bl	800549c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	0018      	movs	r0, r3
 8001152:	2310      	movs	r3, #16
 8001154:	001a      	movs	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f004 f9a0 	bl	800549c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	0018      	movs	r0, r3
 8001162:	f001 ffe3 	bl	800312c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001166:	193b      	adds	r3, r7, r4
 8001168:	2202      	movs	r2, #2
 800116a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	193b      	adds	r3, r7, r4
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0052      	lsls	r2, r2, #1
 8001172:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001174:	0021      	movs	r1, r4
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2240      	movs	r2, #64	; 0x40
 8001180:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2202      	movs	r2, #2
 8001186:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2202      	movs	r2, #2
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 9;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2209      	movs	r2, #9
 8001198:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	0292      	lsls	r2, r2, #10
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	0492      	lsls	r2, r2, #18
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	05d2      	lsls	r2, r2, #23
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	0018      	movs	r0, r3
 80011b6:	f001 fff9 	bl	80031ac <HAL_RCC_OscConfig>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x8a>
		Error_Handler();
 80011be:	f000 f9ad 	bl	800151c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2202      	movs	r2, #2
 80011cc:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2101      	movs	r1, #1
 80011de:	0018      	movs	r0, r3
 80011e0:	f002 fb44 	bl	800386c <HAL_RCC_ClockConfig>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xb4>
		Error_Handler();
 80011e8:	f000 f998 	bl	800151c <Error_Handler>
	}
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b015      	add	sp, #84	; 0x54
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	0018      	movs	r0, r3
 80011fe:	230c      	movs	r3, #12
 8001200:	001a      	movs	r2, r3
 8001202:	2100      	movs	r1, #0
 8001204:	f004 f94a 	bl	800549c <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <MX_ADC1_Init+0xc4>)
 800120a:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <MX_ADC1_Init+0xc8>)
 800120c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	05d2      	lsls	r2, r2, #23
 8001214:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <MX_ADC1_Init+0xc4>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_ADC1_Init+0xc4>)
 800122a:	2204      	movs	r2, #4
 800122c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001230:	2200      	movs	r2, #0
 8001232:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001236:	2200      	movs	r2, #0
 8001238:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_ADC1_Init+0xc4>)
 800123c:	2200      	movs	r2, #0
 800123e:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001242:	2201      	movs	r2, #1
 8001244:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_ADC1_Init+0xc4>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001254:	222c      	movs	r2, #44	; 0x2c
 8001256:	2100      	movs	r1, #0
 8001258:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_ADC1_Init+0xc4>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001262:	2200      	movs	r2, #0
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001268:	2200      	movs	r2, #0
 800126a:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_ADC1_Init+0xc4>)
 800126e:	223c      	movs	r2, #60	; 0x3c
 8001270:	2100      	movs	r1, #0
 8001272:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_ADC1_Init+0xc4>)
 8001276:	2200      	movs	r2, #0
 8001278:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_ADC1_Init+0xc4>)
 800127c:	0018      	movs	r0, r3
 800127e:	f000 fd33 	bl	8001ce8 <HAL_ADC_Init>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d001      	beq.n	800128a <MX_ADC1_Init+0x96>
		Error_Handler();
 8001286:	f000 f949 	bl	800151c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <MX_ADC1_Init+0xcc>)
 800128e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800129c:	1d3a      	adds	r2, r7, #4
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_ADC1_Init+0xc4>)
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f001 f874 	bl	8002390 <HAL_ADC_ConfigChannel>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0xbc>
		Error_Handler();
 80012ac:	f000 f936 	bl	800151c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b004      	add	sp, #16
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000008c 	.word	0x2000008c
 80012bc:	40012400 	.word	0x40012400
 80012c0:	18000040 	.word	0x18000040

080012c4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b09c      	sub	sp, #112	; 0x70
 80012c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012ca:	2360      	movs	r3, #96	; 0x60
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	0018      	movs	r0, r3
 80012d0:	2310      	movs	r3, #16
 80012d2:	001a      	movs	r2, r3
 80012d4:	2100      	movs	r1, #0
 80012d6:	f004 f8e1 	bl	800549c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012da:	2354      	movs	r3, #84	; 0x54
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	0018      	movs	r0, r3
 80012e0:	230c      	movs	r3, #12
 80012e2:	001a      	movs	r2, r3
 80012e4:	2100      	movs	r1, #0
 80012e6:	f004 f8d9 	bl	800549c <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80012ea:	2338      	movs	r3, #56	; 0x38
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	0018      	movs	r0, r3
 80012f0:	231c      	movs	r3, #28
 80012f2:	001a      	movs	r2, r3
 80012f4:	2100      	movs	r1, #0
 80012f6:	f004 f8d1 	bl	800549c <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	0018      	movs	r0, r3
 80012fe:	2334      	movs	r3, #52	; 0x34
 8001300:	001a      	movs	r2, r3
 8001302:	2100      	movs	r1, #0
 8001304:	f004 f8ca 	bl	800549c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001308:	4b51      	ldr	r3, [pc, #324]	; (8001450 <MX_TIM1_Init+0x18c>)
 800130a:	4a52      	ldr	r2, [pc, #328]	; (8001454 <MX_TIM1_Init+0x190>)
 800130c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10 - 1;
 800130e:	4b50      	ldr	r3, [pc, #320]	; (8001450 <MX_TIM1_Init+0x18c>)
 8001310:	2209      	movs	r2, #9
 8001312:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <MX_TIM1_Init+0x18c>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9600 - 1;
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <MX_TIM1_Init+0x18c>)
 800131c:	4a4e      	ldr	r2, [pc, #312]	; (8001458 <MX_TIM1_Init+0x194>)
 800131e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <MX_TIM1_Init+0x18c>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <MX_TIM1_Init+0x18c>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b48      	ldr	r3, [pc, #288]	; (8001450 <MX_TIM1_Init+0x18c>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001332:	4b47      	ldr	r3, [pc, #284]	; (8001450 <MX_TIM1_Init+0x18c>)
 8001334:	0018      	movs	r0, r3
 8001336:	f002 fe5f 	bl	8003ff8 <HAL_TIM_Base_Init>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x7e>
		Error_Handler();
 800133e:	f000 f8ed 	bl	800151c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	2160      	movs	r1, #96	; 0x60
 8001344:	187b      	adds	r3, r7, r1
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	0152      	lsls	r2, r2, #5
 800134a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800134c:	187a      	adds	r2, r7, r1
 800134e:	4b40      	ldr	r3, [pc, #256]	; (8001450 <MX_TIM1_Init+0x18c>)
 8001350:	0011      	movs	r1, r2
 8001352:	0018      	movs	r0, r3
 8001354:	f003 f8f8 	bl	8004548 <HAL_TIM_ConfigClockSource>
 8001358:	1e03      	subs	r3, r0, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x9c>
		Error_Handler();
 800135c:	f000 f8de 	bl	800151c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <MX_TIM1_Init+0x18c>)
 8001362:	0018      	movs	r0, r3
 8001364:	f002 fea0 	bl	80040a8 <HAL_TIM_PWM_Init>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0xac>
		Error_Handler();
 800136c:	f000 f8d6 	bl	800151c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2154      	movs	r1, #84	; 0x54
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001378:	187b      	adds	r3, r7, r1
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	187b      	adds	r3, r7, r1
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001384:	187a      	adds	r2, r7, r1
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <MX_TIM1_Init+0x18c>)
 8001388:	0011      	movs	r1, r2
 800138a:	0018      	movs	r0, r3
 800138c:	f003 fdc0 	bl	8004f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	1e03      	subs	r3, r0, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8001394:	f000 f8c2 	bl	800151c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001398:	2138      	movs	r1, #56	; 0x38
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2260      	movs	r2, #96	; 0x60
 800139e:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80013c4:	1879      	adds	r1, r7, r1
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <MX_TIM1_Init+0x18c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	0018      	movs	r0, r3
 80013cc:	f002 ffbc 	bl	8004348 <HAL_TIM_PWM_ConfigChannel>
 80013d0:	1e03      	subs	r3, r0, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 80013d4:	f000 f8a2 	bl	800151c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	0492      	lsls	r2, r2, #18
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800142a:	1d3a      	adds	r2, r7, #4
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_TIM1_Init+0x18c>)
 800142e:	0011      	movs	r1, r2
 8001430:	0018      	movs	r0, r3
 8001432:	f003 fde3 	bl	8004ffc <HAL_TIMEx_ConfigBreakDeadTime>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 800143a:	f000 f86f 	bl	800151c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <MX_TIM1_Init+0x18c>)
 8001440:	0018      	movs	r0, r3
 8001442:	f000 f939 	bl	80016b8 <HAL_TIM_MspPostInit>

}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b01c      	add	sp, #112	; 0x70
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	200000f0 	.word	0x200000f0
 8001454:	40012c00 	.word	0x40012c00
 8001458:	0000257f 	.word	0x0000257f

0800145c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001462:	240c      	movs	r4, #12
 8001464:	193b      	adds	r3, r7, r4
 8001466:	0018      	movs	r0, r3
 8001468:	2314      	movs	r3, #20
 800146a:	001a      	movs	r2, r3
 800146c:	2100      	movs	r1, #0
 800146e:	f004 f815 	bl	800549c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_GPIO_Init+0xb4>)
 8001474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_GPIO_Init+0xb4>)
 8001478:	2101      	movs	r1, #1
 800147a:	430a      	orrs	r2, r1
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_GPIO_Init+0xb4>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001482:	2201      	movs	r2, #1
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <MX_GPIO_Init+0xb4>)
 800148c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <MX_GPIO_Init+0xb4>)
 8001490:	2102      	movs	r1, #2
 8001492:	430a      	orrs	r2, r1
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_GPIO_Init+0xb4>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80014a2:	491c      	ldr	r1, [pc, #112]	; (8001514 <MX_GPIO_Init+0xb8>)
 80014a4:	23a0      	movs	r3, #160	; 0xa0
 80014a6:	05db      	lsls	r3, r3, #23
 80014a8:	2200      	movs	r2, #0
 80014aa:	0018      	movs	r0, r3
 80014ac:	f001 fdec 	bl	8003088 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA2 PA3
	 PA4 PA5 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <MX_GPIO_Init+0xb8>)
 80014b4:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	2201      	movs	r2, #1
 80014ba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	193a      	adds	r2, r7, r4
 80014ca:	23a0      	movs	r3, #160	; 0xa0
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f001 fc6d 	bl	8002db0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80014d6:	0021      	movs	r1, r4
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	2203      	movs	r2, #3
 80014dc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2284      	movs	r2, #132	; 0x84
 80014e2:	0392      	lsls	r2, r2, #14
 80014e4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2201      	movs	r2, #1
 80014ea:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <MX_GPIO_Init+0xbc>)
 80014f0:	0019      	movs	r1, r3
 80014f2:	0010      	movs	r0, r2
 80014f4:	f001 fc5c 	bl	8002db0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2005      	movs	r0, #5
 80014fe:	f001 fc25 	bl	8002d4c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001502:	2005      	movs	r0, #5
 8001504:	f001 fc37 	bl	8002d76 <HAL_NVIC_EnableIRQ>

}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b009      	add	sp, #36	; 0x24
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	0000063f 	.word	0x0000063f
 8001518:	50000400 	.word	0x50000400

0800151c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_MspInit+0x58>)
 8001530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_MspInit+0x58>)
 8001534:	2101      	movs	r1, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_MspInit+0x58>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2201      	movs	r2, #1
 8001540:	4013      	ands	r3, r2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_MspInit+0x58>)
 8001548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_MspInit+0x58>)
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	0549      	lsls	r1, r1, #21
 8001550:	430a      	orrs	r2, r1
 8001552:	63da      	str	r2, [r3, #60]	; 0x3c
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_MspInit+0x58>)
 8001556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	4013      	ands	r3, r2
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001562:	f000 fa39 	bl	80019d8 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001566:	2002      	movs	r0, #2
 8001568:	f000 fa22 	bl	80019b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800156c:	23c0      	movs	r3, #192	; 0xc0
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	0018      	movs	r0, r3
 8001572:	f000 fa3f 	bl	80019f4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b09d      	sub	sp, #116	; 0x74
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	235c      	movs	r3, #92	; 0x5c
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	0018      	movs	r0, r3
 8001592:	2314      	movs	r3, #20
 8001594:	001a      	movs	r2, r3
 8001596:	2100      	movs	r1, #0
 8001598:	f003 ff80 	bl	800549c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800159c:	2410      	movs	r4, #16
 800159e:	193b      	adds	r3, r7, r4
 80015a0:	0018      	movs	r0, r3
 80015a2:	234c      	movs	r3, #76	; 0x4c
 80015a4:	001a      	movs	r2, r3
 80015a6:	2100      	movs	r1, #0
 80015a8:	f003 ff78 	bl	800549c <memset>
  if(hadc->Instance==ADC1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a24      	ldr	r2, [pc, #144]	; (8001644 <HAL_ADC_MspInit+0xc0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d141      	bne.n	800163a <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	01d2      	lsls	r2, r2, #7
 80015bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	0018      	movs	r0, r3
 80015c8:	f002 fada 	bl	8003b80 <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015d0:	f7ff ffa4 	bl	800151c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_ADC_MspInit+0xc4>)
 80015d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_ADC_MspInit+0xc4>)
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	0349      	lsls	r1, r1, #13
 80015de:	430a      	orrs	r2, r1
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_ADC_MspInit+0xc4>)
 80015e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	035b      	lsls	r3, r3, #13
 80015ea:	4013      	ands	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_ADC_MspInit+0xc4>)
 80015f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_ADC_MspInit+0xc4>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	430a      	orrs	r2, r1
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_ADC_MspInit+0xc4>)
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	2201      	movs	r2, #1
 8001602:	4013      	ands	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001608:	215c      	movs	r1, #92	; 0x5c
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001610:	187b      	adds	r3, r7, r1
 8001612:	2203      	movs	r2, #3
 8001614:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	187a      	adds	r2, r7, r1
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	0011      	movs	r1, r2
 8001624:	0018      	movs	r0, r3
 8001626:	f001 fbc3 	bl	8002db0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	200c      	movs	r0, #12
 8001630:	f001 fb8c 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001634:	200c      	movs	r0, #12
 8001636:	f001 fb9e 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b01d      	add	sp, #116	; 0x74
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40012400 	.word	0x40012400
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b097      	sub	sp, #92	; 0x5c
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001654:	240c      	movs	r4, #12
 8001656:	193b      	adds	r3, r7, r4
 8001658:	0018      	movs	r0, r3
 800165a:	234c      	movs	r3, #76	; 0x4c
 800165c:	001a      	movs	r2, r3
 800165e:	2100      	movs	r1, #0
 8001660:	f003 ff1c 	bl	800549c <memset>
  if(htim_base->Instance==TIM1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_TIM_Base_MspInit+0x64>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d11c      	bne.n	80016a8 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800166e:	193b      	adds	r3, r7, r4
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0392      	lsls	r2, r2, #14
 8001674:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001676:	193b      	adds	r3, r7, r4
 8001678:	2200      	movs	r2, #0
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167c:	193b      	adds	r3, r7, r4
 800167e:	0018      	movs	r0, r3
 8001680:	f002 fa7e 	bl	8003b80 <HAL_RCCEx_PeriphCLKConfig>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d001      	beq.n	800168c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001688:	f7ff ff48 	bl	800151c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_TIM_Base_MspInit+0x68>)
 800168e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_TIM_Base_MspInit+0x68>)
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0109      	lsls	r1, r1, #4
 8001696:	430a      	orrs	r2, r1
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_TIM_Base_MspInit+0x68>)
 800169c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4013      	ands	r3, r2
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b017      	add	sp, #92	; 0x5c
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	40021000 	.word	0x40021000

080016b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	240c      	movs	r4, #12
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	0018      	movs	r0, r3
 80016c6:	2314      	movs	r3, #20
 80016c8:	001a      	movs	r2, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	f003 fee6 	bl	800549c <memset>
  if(htim->Instance==TIM1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a15      	ldr	r2, [pc, #84]	; (800172c <HAL_TIM_MspPostInit+0x74>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d123      	bne.n	8001722 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_TIM_MspPostInit+0x78>)
 80016dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_TIM_MspPostInit+0x78>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	430a      	orrs	r2, r1
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_TIM_MspPostInit+0x78>)
 80016e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ea:	2201      	movs	r2, #1
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	0052      	lsls	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	0021      	movs	r1, r4
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2202      	movs	r2, #2
 8001700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	187b      	adds	r3, r7, r1
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2202      	movs	r2, #2
 8001712:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	187a      	adds	r2, r7, r1
 8001716:	23a0      	movs	r3, #160	; 0xa0
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f001 fb47 	bl	8002db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b009      	add	sp, #36	; 0x24
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40021000 	.word	0x40021000

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f8ea 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001766:	2001      	movs	r0, #1
 8001768:	f001 fcac 	bl	80030c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800176c:	2002      	movs	r0, #2
 800176e:	f001 fca9 	bl	80030c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <ADC1_COMP_IRQHandler+0x14>)
 800177e:	0018      	movs	r0, r3
 8001780:	f000 fcde 	bl	8002140 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	2000008c 	.word	0x2000008c

08001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	18d3      	adds	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c0:	f003 fe42 	bl	8005448 <__errno>
 80017c4:	0003      	movs	r3, r0
 80017c6:	220c      	movs	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	425b      	negs	r3, r3
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	18d2      	adds	r2, r2, r3
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <_sbrk+0x64>)
 80017e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b006      	add	sp, #24
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20024000 	.word	0x20024000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	2000015c 	.word	0x2000015c
 80017f8:	20000178 	.word	0x20000178

080017fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800180a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800180c:	f7ff fff6 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <LoopForever+0x6>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LoopForever+0xe>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <LoopForever+0x16>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001836:	f003 fe0d 	bl	8005454 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800183a:	f7ff fbd3 	bl	8000fe4 <main>

0800183e <LoopForever>:

LoopForever:
  b LoopForever
 800183e:	e7fe      	b.n	800183e <LoopForever>
  ldr   r0, =_estack
 8001840:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800184c:	08005f6c 	.word	0x08005f6c
  ldr r2, =_sbss
 8001850:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001854:	20000174 	.word	0x20000174

08001858 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <CEC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_Init+0x3c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Init+0x3c>)
 800186e:	2180      	movs	r1, #128	; 0x80
 8001870:	0049      	lsls	r1, r1, #1
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001876:	2003      	movs	r0, #3
 8001878:	f000 f810 	bl	800189c <HAL_InitTick>
 800187c:	1e03      	subs	r3, r0, #0
 800187e:	d003      	beq.n	8001888 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e001      	b.n	800188c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fe4e 	bl	8001528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	781b      	ldrb	r3, [r3, #0]
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40022000 	.word	0x40022000

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a4:	230f      	movs	r3, #15
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_InitTick+0x88>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d02b      	beq.n	800190c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_InitTick+0x8c>)
 80018b6:	681c      	ldr	r4, [r3, #0]
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_InitTick+0x88>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	0019      	movs	r1, r3
 80018be:	23fa      	movs	r3, #250	; 0xfa
 80018c0:	0098      	lsls	r0, r3, #2
 80018c2:	f7fe fc29 	bl	8000118 <__udivsi3>
 80018c6:	0003      	movs	r3, r0
 80018c8:	0019      	movs	r1, r3
 80018ca:	0020      	movs	r0, r4
 80018cc:	f7fe fc24 	bl	8000118 <__udivsi3>
 80018d0:	0003      	movs	r3, r0
 80018d2:	0018      	movs	r0, r3
 80018d4:	f001 fa5f 	bl	8002d96 <HAL_SYSTICK_Config>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d112      	bne.n	8001902 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d80a      	bhi.n	80018f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	2301      	movs	r3, #1
 80018e6:	425b      	negs	r3, r3
 80018e8:	2200      	movs	r2, #0
 80018ea:	0018      	movs	r0, r3
 80018ec:	f001 fa2e 	bl	8002d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_InitTick+0x90>)
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e00d      	b.n	8001914 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80018f8:	230f      	movs	r3, #15
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e008      	b.n	8001914 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001902:	230f      	movs	r3, #15
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	e003      	b.n	8001914 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800190c:	230f      	movs	r3, #15
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001914:	230f      	movs	r3, #15
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	781b      	ldrb	r3, [r3, #0]
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b005      	add	sp, #20
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	20000008 	.word	0x20000008
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x1c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	001a      	movs	r2, r3
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x20>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	18d2      	adds	r2, r2, r3
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_IncTick+0x20>)
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	20000008 	.word	0x20000008
 8001950:	20000160 	.word	0x20000160

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_GetTick+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	20000160 	.word	0x20000160

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff fff0 	bl	8001954 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	001a      	movs	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	189b      	adds	r3, r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	f7ff ffe0 	bl	8001954 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b004      	add	sp, #16
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2202      	movs	r2, #2
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	40010030 	.word	0x40010030

080019d8 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	438a      	bics	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40010030 	.word	0x40010030

080019f4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	fffff9ff 	.word	0xfffff9ff

08001a20 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001a30:	401a      	ands	r2, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	fe3fffff 	.word	0xfe3fffff

08001a48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	23e0      	movs	r3, #224	; 0xe0
 8001a56:	045b      	lsls	r3, r3, #17
 8001a58:	4013      	ands	r3, r2
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	2104      	movs	r1, #4
 8001a76:	400a      	ands	r2, r1
 8001a78:	2107      	movs	r1, #7
 8001a7a:	4091      	lsls	r1, r2
 8001a7c:	000a      	movs	r2, r1
 8001a7e:	43d2      	mvns	r2, r2
 8001a80:	401a      	ands	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2104      	movs	r1, #4
 8001a86:	400b      	ands	r3, r1
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4099      	lsls	r1, r3
 8001a8c:	000b      	movs	r3, r1
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	2104      	movs	r1, #4
 8001aae:	400a      	ands	r2, r1
 8001ab0:	2107      	movs	r1, #7
 8001ab2:	4091      	lsls	r1, r2
 8001ab4:	000a      	movs	r2, r1
 8001ab6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2104      	movs	r1, #4
 8001abc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001abe:	40da      	lsrs	r2, r3
 8001ac0:	0013      	movs	r3, r2
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4013      	ands	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}

08001aec <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	211f      	movs	r1, #31
 8001b00:	400a      	ands	r2, r1
 8001b02:	210f      	movs	r1, #15
 8001b04:	4091      	lsls	r1, r2
 8001b06:	000a      	movs	r2, r1
 8001b08:	43d2      	mvns	r2, r2
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	0e9b      	lsrs	r3, r3, #26
 8001b10:	210f      	movs	r1, #15
 8001b12:	4019      	ands	r1, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	201f      	movs	r0, #31
 8001b18:	4003      	ands	r3, r0
 8001b1a:	4099      	lsls	r1, r3
 8001b1c:	000b      	movs	r3, r1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b004      	add	sp, #16
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	035b      	lsls	r3, r3, #13
 8001b3e:	0b5b      	lsrs	r3, r3, #13
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	0352      	lsls	r2, r2, #13
 8001b60:	0b52      	lsrs	r2, r2, #13
 8001b62:	43d2      	mvns	r2, r2
 8001b64:	401a      	ands	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b002      	add	sp, #8
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4013      	ands	r3, r2
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	0212      	lsls	r2, r2, #8
 8001ba0:	43d2      	mvns	r2, r2
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	400b      	ands	r3, r1
 8001bac:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001bae:	400b      	ands	r3, r1
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	07ffff00 	.word	0x07ffff00

08001bc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	0552      	lsls	r2, r2, #21
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	6fffffe8 	.word	0x6fffffe8

08001bec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	055b      	lsls	r3, r3, #21
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	055b      	lsls	r3, r3, #21
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d101      	bne.n	8001c0a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <LL_ADC_Enable+0x20>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	2201      	movs	r2, #1
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	7fffffe8 	.word	0x7fffffe8

08001c38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <LL_ADC_Disable+0x20>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	2202      	movs	r2, #2
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	7fffffe8 	.word	0x7fffffe8

08001c5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <LL_ADC_IsEnabled+0x18>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <LL_ADC_IsEnabled+0x1a>
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d101      	bne.n	8001c96 <LL_ADC_IsDisableOngoing+0x18>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_ADC_IsDisableOngoing+0x1a>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <LL_ADC_REG_StartConversion+0x20>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	7fffffe8 	.word	0x7fffffe8

08001cc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d101      	bne.n	8001cdc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b002      	add	sp, #8
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf0:	231f      	movs	r3, #31
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e17f      	b.n	800200e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff fc33 	bl	8001584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2254      	movs	r2, #84	; 0x54
 8001d28:	2100      	movs	r1, #0
 8001d2a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff ff5b 	bl	8001bec <LL_ADC_IsInternalRegulatorEnabled>
 8001d36:	1e03      	subs	r3, r0, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7ff ff40 	bl	8001bc4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d44:	4bb4      	ldr	r3, [pc, #720]	; (8002018 <HAL_ADC_Init+0x330>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	49b4      	ldr	r1, [pc, #720]	; (800201c <HAL_ADC_Init+0x334>)
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7fe f9e4 	bl	8000118 <__udivsi3>
 8001d50:	0003      	movs	r3, r0
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d58:	e002      	b.n	8001d60 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f7ff ff3e 	bl	8001bec <LL_ADC_IsInternalRegulatorEnabled>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d10f      	bne.n	8001d94 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	2210      	movs	r2, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	2201      	movs	r2, #1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d8c:	231f      	movs	r3, #31
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff ff93 	bl	8001cc4 <LL_ADC_REG_IsConversionOngoing>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	2210      	movs	r2, #16
 8001da8:	4013      	ands	r3, r2
 8001daa:	d000      	beq.n	8001dae <HAL_ADC_Init+0xc6>
 8001dac:	e122      	b.n	8001ff4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d000      	beq.n	8001db6 <HAL_ADC_Init+0xce>
 8001db4:	e11e      	b.n	8001ff4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a99      	ldr	r2, [pc, #612]	; (8002020 <HAL_ADC_Init+0x338>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7ff ff46 	bl	8001c5c <LL_ADC_IsEnabled>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d000      	beq.n	8001dd6 <HAL_ADC_Init+0xee>
 8001dd4:	e0ad      	b.n	8001f32 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e1b      	ldrb	r3, [r3, #24]
 8001dde:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001de0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7e5b      	ldrb	r3, [r3, #25]
 8001de6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001de8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7e9b      	ldrb	r3, [r3, #26]
 8001dee:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001df0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_ADC_Init+0x118>
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	015b      	lsls	r3, r3, #5
 8001dfe:	e000      	b.n	8001e02 <HAL_ADC_Init+0x11a>
 8001e00:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e02:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e08:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da04      	bge.n	8001e1c <HAL_ADC_Init+0x134>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	e001      	b.n	8001e20 <HAL_ADC_Init+0x138>
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001e20:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	212c      	movs	r1, #44	; 0x2c
 8001e26:	5c5b      	ldrb	r3, [r3, r1]
 8001e28:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e2a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	5c9b      	ldrb	r3, [r3, r2]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d115      	bne.n	8001e68 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7e9b      	ldrb	r3, [r3, #26]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	0252      	lsls	r2, r2, #9
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	e00b      	b.n	8001e68 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	2220      	movs	r2, #32
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2201      	movs	r2, #1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e74:	23e0      	movs	r3, #224	; 0xe0
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a65      	ldr	r2, [pc, #404]	; (8002024 <HAL_ADC_Init+0x33c>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	0f9b      	lsrs	r3, r3, #30
 8001ea2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	223c      	movs	r2, #60	; 0x3c
 8001eb4:	5c9b      	ldrb	r3, [r3, r2]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d111      	bne.n	8001ede <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	0f9b      	lsrs	r3, r3, #30
 8001ec0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ec6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001ecc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001ed2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	4a50      	ldr	r2, [pc, #320]	; (8002028 <HAL_ADC_Init+0x340>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	0019      	movs	r1, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	23c0      	movs	r3, #192	; 0xc0
 8001efa:	061b      	lsls	r3, r3, #24
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d018      	beq.n	8001f32 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	05db      	lsls	r3, r3, #23
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d012      	beq.n	8001f32 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	061b      	lsls	r3, r3, #24
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d00c      	beq.n	8001f32 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001f18:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_ADC_Init+0x344>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a44      	ldr	r2, [pc, #272]	; (8002030 <HAL_ADC_Init+0x348>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	23f0      	movs	r3, #240	; 0xf0
 8001f28:	039b      	lsls	r3, r3, #14
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_ADC_Init+0x344>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f7ff fd90 	bl	8001a62 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	493a      	ldr	r1, [pc, #232]	; (8002034 <HAL_ADC_Init+0x34c>)
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	f7ff fd88 	bl	8001a62 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2110      	movs	r1, #16
 8001f66:	4249      	negs	r1, r1
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f6c:	e018      	b.n	8001fa0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	039b      	lsls	r3, r3, #14
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d112      	bne.n	8001fa0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	221c      	movs	r2, #28
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	4252      	negs	r2, r2
 8001f90:	409a      	lsls	r2, r3
 8001f92:	0011      	movs	r1, r2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7ff fd78 	bl	8001a9c <LL_ADC_GetSamplingTimeCommonChannels>
 8001fac:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d10b      	bne.n	8001fce <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fcc:	e01c      	b.n	8002008 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	2212      	movs	r2, #18
 8001fd4:	4393      	bics	r3, r2
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001fea:	231f      	movs	r3, #31
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ff2:	e009      	b.n	8002008 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002000:	231f      	movs	r3, #31
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002008:	231f      	movs	r3, #31
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b008      	add	sp, #32
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	20000000 	.word	0x20000000
 800201c:	00030d40 	.word	0x00030d40
 8002020:	fffffefd 	.word	0xfffffefd
 8002024:	fffe0201 	.word	0xfffe0201
 8002028:	1ffffc02 	.word	0x1ffffc02
 800202c:	40012708 	.word	0x40012708
 8002030:	ffc3ffff 	.word	0xffc3ffff
 8002034:	07ffff04 	.word	0x07ffff04

08002038 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0018      	movs	r0, r3
 8002046:	f7ff fe3d 	bl	8001cc4 <LL_ADC_REG_IsConversionOngoing>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d15f      	bne.n	800210e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2254      	movs	r2, #84	; 0x54
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_ADC_Start_IT+0x24>
 8002058:	2302      	movs	r3, #2
 800205a:	e05f      	b.n	800211c <HAL_ADC_Start_IT+0xe4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2254      	movs	r2, #84	; 0x54
 8002060:	2101      	movs	r1, #1
 8002062:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002064:	250f      	movs	r5, #15
 8002066:	197c      	adds	r4, r7, r5
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	0018      	movs	r0, r3
 800206c:	f000 fb68 	bl	8002740 <ADC_Enable>
 8002070:	0003      	movs	r3, r0
 8002072:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002074:	197b      	adds	r3, r7, r5
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d143      	bne.n	8002104 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4a28      	ldr	r2, [pc, #160]	; (8002124 <HAL_ADC_Start_IT+0xec>)
 8002082:	4013      	ands	r3, r2
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	0052      	lsls	r2, r2, #1
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	221c      	movs	r2, #28
 800209a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2254      	movs	r2, #84	; 0x54
 80020a0:	2100      	movs	r1, #0
 80020a2:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	211c      	movs	r1, #28
 80020b0:	438a      	bics	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d108      	bne.n	80020ce <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2108      	movs	r1, #8
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]
          break;
 80020cc:	e008      	b.n	80020e0 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2104      	movs	r1, #4
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
          break;
 80020de:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2110      	movs	r1, #16
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f7ff fdcf 	bl	8001ca0 <LL_ADC_REG_StartConversion>
 8002102:	e008      	b.n	8002116 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2254      	movs	r2, #84	; 0x54
 8002108:	2100      	movs	r1, #0
 800210a:	5499      	strb	r1, [r3, r2]
 800210c:	e003      	b.n	8002116 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800210e:	230f      	movs	r3, #15
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	2202      	movs	r2, #2
 8002114:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002116:	230f      	movs	r3, #15
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781b      	ldrb	r3, [r3, #0]
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b004      	add	sp, #16
 8002122:	bdb0      	pop	{r4, r5, r7, pc}
 8002124:	fffff0fe 	.word	0xfffff0fe

08002128 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2202      	movs	r2, #2
 8002160:	4013      	ands	r3, r2
 8002162:	d017      	beq.n	8002194 <HAL_ADC_IRQHandler+0x54>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2202      	movs	r2, #2
 8002168:	4013      	ands	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	2210      	movs	r2, #16
 8002172:	4013      	ands	r3, r2
 8002174:	d106      	bne.n	8002184 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	0018      	movs	r0, r3
 8002188:	f000 fd24 	bl	8002bd4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2202      	movs	r2, #2
 8002192:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2204      	movs	r2, #4
 8002198:	4013      	ands	r3, r2
 800219a:	d003      	beq.n	80021a4 <HAL_ADC_IRQHandler+0x64>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2204      	movs	r2, #4
 80021a0:	4013      	ands	r3, r2
 80021a2:	d107      	bne.n	80021b4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	2208      	movs	r2, #8
 80021a8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021aa:	d04d      	beq.n	8002248 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2208      	movs	r2, #8
 80021b0:	4013      	ands	r3, r2
 80021b2:	d049      	beq.n	8002248 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	2210      	movs	r2, #16
 80021ba:	4013      	ands	r3, r2
 80021bc:	d106      	bne.n	80021cc <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	0092      	lsls	r2, r2, #2
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff fc7a 	bl	8001aca <LL_ADC_REG_IsTriggerSourceSWStart>
 80021d6:	1e03      	subs	r3, r0, #0
 80021d8:	d02e      	beq.n	8002238 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7e9b      	ldrb	r3, [r3, #26]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d12a      	bne.n	8002238 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2208      	movs	r2, #8
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d123      	bne.n	8002238 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff fd65 	bl	8001cc4 <LL_ADC_REG_IsConversionOngoing>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d110      	bne.n	8002220 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	210c      	movs	r1, #12
 800220a:	438a      	bics	r2, r1
 800220c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	4a56      	ldr	r2, [pc, #344]	; (800236c <HAL_ADC_IRQHandler+0x22c>)
 8002214:	4013      	ands	r3, r2
 8002216:	2201      	movs	r2, #1
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	659a      	str	r2, [r3, #88]	; 0x58
 800221e:	e00b      	b.n	8002238 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	2220      	movs	r2, #32
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	2201      	movs	r2, #1
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0018      	movs	r0, r3
 800223c:	f7fe fe50 	bl	8000ee0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	220c      	movs	r2, #12
 8002246:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	4013      	ands	r3, r2
 800224e:	d012      	beq.n	8002276 <HAL_ADC_IRQHandler+0x136>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	4013      	ands	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	0252      	lsls	r2, r2, #9
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f000 f881 	bl	8002370 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4013      	ands	r3, r2
 800227e:	d014      	beq.n	80022aa <HAL_ADC_IRQHandler+0x16a>
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4013      	ands	r3, r2
 8002288:	d00f      	beq.n	80022aa <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	0292      	lsls	r2, r2, #10
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 fc8a 	bl	8002bb4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	0052      	lsls	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d014      	beq.n	80022de <HAL_ADC_IRQHandler+0x19e>
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4013      	ands	r3, r2
 80022bc:	d00f      	beq.n	80022de <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	02d2      	lsls	r2, r2, #11
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 fc78 	bl	8002bc4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	0092      	lsls	r2, r2, #2
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2210      	movs	r2, #16
 80022e2:	4013      	ands	r3, r2
 80022e4:	d02b      	beq.n	800233e <HAL_ADC_IRQHandler+0x1fe>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2210      	movs	r2, #16
 80022ea:	4013      	ands	r3, r2
 80022ec:	d027      	beq.n	800233e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80022f6:	2301      	movs	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e008      	b.n	800230e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0018      	movs	r0, r3
 8002302:	f7ff fc36 	bl	8001b72 <LL_ADC_REG_GetDMATransfer>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d001      	beq.n	800230e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800230a:	2301      	movs	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d110      	bne.n	8002336 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	00d2      	lsls	r2, r2, #3
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2202      	movs	r2, #2
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 f825 	bl	8002380 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2210      	movs	r2, #16
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	019b      	lsls	r3, r3, #6
 8002344:	4013      	ands	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_ADC_IRQHandler+0x224>
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	019b      	lsls	r3, r3, #6
 800234e:	4013      	ands	r3, r2
 8002350:	d008      	beq.n	8002364 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0018      	movs	r0, r3
 8002356:	f000 fc45 	bl	8002be4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	0192      	lsls	r2, r2, #6
 8002362:	601a      	str	r2, [r3, #0]
  }
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b006      	add	sp, #24
 800236a:	bd80      	pop	{r7, pc}
 800236c:	fffffefe 	.word	0xfffffefe

08002370 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239a:	2317      	movs	r3, #23
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2254      	movs	r2, #84	; 0x54
 80023aa:	5c9b      	ldrb	r3, [r3, r2]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x24>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e1c0      	b.n	8002736 <HAL_ADC_ConfigChannel+0x3a6>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2254      	movs	r2, #84	; 0x54
 80023b8:	2101      	movs	r1, #1
 80023ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7ff fc7f 	bl	8001cc4 <LL_ADC_REG_IsConversionOngoing>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d000      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x3c>
 80023ca:	e1a3      	b.n	8002714 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d100      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x46>
 80023d4:	e143      	b.n	800265e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	429a      	cmp	r2, r3
 80023e0:	d004      	beq.n	80023ec <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023e6:	4ac1      	ldr	r2, [pc, #772]	; (80026ec <HAL_ADC_ConfigChannel+0x35c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d108      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0019      	movs	r1, r3
 80023f6:	0010      	movs	r0, r2
 80023f8:	f7ff fb98 	bl	8001b2c <LL_ADC_REG_SetSequencerChAdd>
 80023fc:	e0c9      	b.n	8002592 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	211f      	movs	r1, #31
 8002408:	400b      	ands	r3, r1
 800240a:	210f      	movs	r1, #15
 800240c:	4099      	lsls	r1, r3
 800240e:	000b      	movs	r3, r1
 8002410:	43db      	mvns	r3, r3
 8002412:	4013      	ands	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	035b      	lsls	r3, r3, #13
 800241c:	0b5b      	lsrs	r3, r3, #13
 800241e:	d105      	bne.n	800242c <HAL_ADC_ConfigChannel+0x9c>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	221f      	movs	r2, #31
 8002428:	4013      	ands	r3, r2
 800242a:	e098      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2201      	movs	r2, #1
 8002432:	4013      	ands	r3, r2
 8002434:	d000      	beq.n	8002438 <HAL_ADC_ConfigChannel+0xa8>
 8002436:	e091      	b.n	800255c <HAL_ADC_ConfigChannel+0x1cc>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d000      	beq.n	8002444 <HAL_ADC_ConfigChannel+0xb4>
 8002442:	e089      	b.n	8002558 <HAL_ADC_ConfigChannel+0x1c8>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2204      	movs	r2, #4
 800244a:	4013      	ands	r3, r2
 800244c:	d000      	beq.n	8002450 <HAL_ADC_ConfigChannel+0xc0>
 800244e:	e081      	b.n	8002554 <HAL_ADC_ConfigChannel+0x1c4>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2208      	movs	r2, #8
 8002456:	4013      	ands	r3, r2
 8002458:	d000      	beq.n	800245c <HAL_ADC_ConfigChannel+0xcc>
 800245a:	e079      	b.n	8002550 <HAL_ADC_ConfigChannel+0x1c0>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2210      	movs	r2, #16
 8002462:	4013      	ands	r3, r2
 8002464:	d000      	beq.n	8002468 <HAL_ADC_ConfigChannel+0xd8>
 8002466:	e071      	b.n	800254c <HAL_ADC_ConfigChannel+0x1bc>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2220      	movs	r2, #32
 800246e:	4013      	ands	r3, r2
 8002470:	d000      	beq.n	8002474 <HAL_ADC_ConfigChannel+0xe4>
 8002472:	e069      	b.n	8002548 <HAL_ADC_ConfigChannel+0x1b8>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2240      	movs	r2, #64	; 0x40
 800247a:	4013      	ands	r3, r2
 800247c:	d000      	beq.n	8002480 <HAL_ADC_ConfigChannel+0xf0>
 800247e:	e061      	b.n	8002544 <HAL_ADC_ConfigChannel+0x1b4>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	4013      	ands	r3, r2
 8002488:	d000      	beq.n	800248c <HAL_ADC_ConfigChannel+0xfc>
 800248a:	e059      	b.n	8002540 <HAL_ADC_ConfigChannel+0x1b0>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4013      	ands	r3, r2
 8002496:	d151      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1ac>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	d149      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1a8>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4013      	ands	r3, r2
 80024ae:	d141      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x1a4>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	4013      	ands	r3, r2
 80024ba:	d139      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1a0>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	4013      	ands	r3, r2
 80024c6:	d131      	bne.n	800252c <HAL_ADC_ConfigChannel+0x19c>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	019b      	lsls	r3, r3, #6
 80024d0:	4013      	ands	r3, r2
 80024d2:	d129      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x198>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	01db      	lsls	r3, r3, #7
 80024dc:	4013      	ands	r3, r2
 80024de:	d121      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x194>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	4013      	ands	r3, r2
 80024ea:	d119      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x190>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	025b      	lsls	r3, r3, #9
 80024f4:	4013      	ands	r3, r2
 80024f6:	d111      	bne.n	800251c <HAL_ADC_ConfigChannel+0x18c>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	029b      	lsls	r3, r3, #10
 8002500:	4013      	ands	r3, r2
 8002502:	d109      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x188>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	02db      	lsls	r3, r3, #11
 800250c:	4013      	ands	r3, r2
 800250e:	d001      	beq.n	8002514 <HAL_ADC_ConfigChannel+0x184>
 8002510:	2312      	movs	r3, #18
 8002512:	e024      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002514:	2300      	movs	r3, #0
 8002516:	e022      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002518:	2311      	movs	r3, #17
 800251a:	e020      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 800251c:	2310      	movs	r3, #16
 800251e:	e01e      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002520:	230f      	movs	r3, #15
 8002522:	e01c      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002524:	230e      	movs	r3, #14
 8002526:	e01a      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002528:	230d      	movs	r3, #13
 800252a:	e018      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 800252c:	230c      	movs	r3, #12
 800252e:	e016      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002530:	230b      	movs	r3, #11
 8002532:	e014      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002534:	230a      	movs	r3, #10
 8002536:	e012      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002538:	2309      	movs	r3, #9
 800253a:	e010      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 800253c:	2308      	movs	r3, #8
 800253e:	e00e      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002540:	2307      	movs	r3, #7
 8002542:	e00c      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002544:	2306      	movs	r3, #6
 8002546:	e00a      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002548:	2305      	movs	r3, #5
 800254a:	e008      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 800254c:	2304      	movs	r3, #4
 800254e:	e006      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002550:	2303      	movs	r3, #3
 8002552:	e004      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002554:	2302      	movs	r3, #2
 8002556:	e002      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_ADC_ConfigChannel+0x1ce>
 800255c:	2300      	movs	r3, #0
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	6852      	ldr	r2, [r2, #4]
 8002562:	201f      	movs	r0, #31
 8002564:	4002      	ands	r2, r0
 8002566:	4093      	lsls	r3, r2
 8002568:	000a      	movs	r2, r1
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	429a      	cmp	r2, r3
 800257e:	d808      	bhi.n	8002592 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	001a      	movs	r2, r3
 800258e:	f7ff faad 	bl	8001aec <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	001a      	movs	r2, r3
 80025a0:	f7ff faf4 	bl	8001b8c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db00      	blt.n	80025ae <HAL_ADC_ConfigChannel+0x21e>
 80025ac:	e0bc      	b.n	8002728 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ae:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_ADC_ConfigChannel+0x360>)
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff fa49 	bl	8001a48 <LL_ADC_GetCommonPathInternalCh>
 80025b6:	0003      	movs	r3, r0
 80025b8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a4d      	ldr	r2, [pc, #308]	; (80026f4 <HAL_ADC_ConfigChannel+0x364>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d122      	bne.n	800260a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025cc:	d11d      	bne.n	800260a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	0412      	lsls	r2, r2, #16
 80025d4:	4313      	orrs	r3, r2
 80025d6:	4a46      	ldr	r2, [pc, #280]	; (80026f0 <HAL_ADC_ConfigChannel+0x360>)
 80025d8:	0019      	movs	r1, r3
 80025da:	0010      	movs	r0, r2
 80025dc:	f7ff fa20 	bl	8001a20 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e0:	4b45      	ldr	r3, [pc, #276]	; (80026f8 <HAL_ADC_ConfigChannel+0x368>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4945      	ldr	r1, [pc, #276]	; (80026fc <HAL_ADC_ConfigChannel+0x36c>)
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7fd fd96 	bl	8000118 <__udivsi3>
 80025ec:	0003      	movs	r3, r0
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	0013      	movs	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	189b      	adds	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025fa:	e002      	b.n	8002602 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3b01      	subs	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f9      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002608:	e08e      	b.n	8002728 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a3c      	ldr	r2, [pc, #240]	; (8002700 <HAL_ADC_ConfigChannel+0x370>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d10e      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x2a2>
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	045b      	lsls	r3, r3, #17
 800261a:	4013      	ands	r3, r2
 800261c:	d109      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	0452      	lsls	r2, r2, #17
 8002624:	4313      	orrs	r3, r2
 8002626:	4a32      	ldr	r2, [pc, #200]	; (80026f0 <HAL_ADC_ConfigChannel+0x360>)
 8002628:	0019      	movs	r1, r3
 800262a:	0010      	movs	r0, r2
 800262c:	f7ff f9f8 	bl	8001a20 <LL_ADC_SetCommonPathInternalCh>
 8002630:	e07a      	b.n	8002728 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a33      	ldr	r2, [pc, #204]	; (8002704 <HAL_ADC_ConfigChannel+0x374>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d000      	beq.n	800263e <HAL_ADC_ConfigChannel+0x2ae>
 800263c:	e074      	b.n	8002728 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	03db      	lsls	r3, r3, #15
 8002644:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002646:	d000      	beq.n	800264a <HAL_ADC_ConfigChannel+0x2ba>
 8002648:	e06e      	b.n	8002728 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	03d2      	lsls	r2, r2, #15
 8002650:	4313      	orrs	r3, r2
 8002652:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_ADC_ConfigChannel+0x360>)
 8002654:	0019      	movs	r1, r3
 8002656:	0010      	movs	r0, r2
 8002658:	f7ff f9e2 	bl	8001a20 <LL_ADC_SetCommonPathInternalCh>
 800265c:	e064      	b.n	8002728 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	429a      	cmp	r2, r3
 8002668:	d004      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800266e:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <HAL_ADC_ConfigChannel+0x35c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d107      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0019      	movs	r1, r3
 800267e:	0010      	movs	r0, r2
 8002680:	f7ff fa65 	bl	8001b4e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	da4d      	bge.n	8002728 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_ADC_ConfigChannel+0x360>)
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff f9da 	bl	8001a48 <LL_ADC_GetCommonPathInternalCh>
 8002694:	0003      	movs	r3, r0
 8002696:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <HAL_ADC_ConfigChannel+0x364>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d108      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4a18      	ldr	r2, [pc, #96]	; (8002708 <HAL_ADC_ConfigChannel+0x378>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_ADC_ConfigChannel+0x360>)
 80026aa:	0019      	movs	r1, r3
 80026ac:	0010      	movs	r0, r2
 80026ae:	f7ff f9b7 	bl	8001a20 <LL_ADC_SetCommonPathInternalCh>
 80026b2:	e039      	b.n	8002728 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_ADC_ConfigChannel+0x370>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d108      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_ADC_ConfigChannel+0x37c>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_ADC_ConfigChannel+0x360>)
 80026c6:	0019      	movs	r1, r3
 80026c8:	0010      	movs	r0, r2
 80026ca:	f7ff f9a9 	bl	8001a20 <LL_ADC_SetCommonPathInternalCh>
 80026ce:	e02b      	b.n	8002728 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_ADC_ConfigChannel+0x374>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d126      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <HAL_ADC_ConfigChannel+0x380>)
 80026de:	4013      	ands	r3, r2
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_ADC_ConfigChannel+0x360>)
 80026e2:	0019      	movs	r1, r3
 80026e4:	0010      	movs	r0, r2
 80026e6:	f7ff f99b 	bl	8001a20 <LL_ADC_SetCommonPathInternalCh>
 80026ea:	e01d      	b.n	8002728 <HAL_ADC_ConfigChannel+0x398>
 80026ec:	80000004 	.word	0x80000004
 80026f0:	40012708 	.word	0x40012708
 80026f4:	b0001000 	.word	0xb0001000
 80026f8:	20000000 	.word	0x20000000
 80026fc:	00030d40 	.word	0x00030d40
 8002700:	b8004000 	.word	0xb8004000
 8002704:	b4002000 	.word	0xb4002000
 8002708:	ff7fffff 	.word	0xff7fffff
 800270c:	feffffff 	.word	0xfeffffff
 8002710:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	2220      	movs	r2, #32
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002720:	2317      	movs	r3, #23
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2254      	movs	r2, #84	; 0x54
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002730:	2317      	movs	r3, #23
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b006      	add	sp, #24
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)

08002740 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fa83 	bl	8001c5c <LL_ADC_IsEnabled>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d000      	beq.n	800275c <ADC_Enable+0x1c>
 800275a:	e069      	b.n	8002830 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4a36      	ldr	r2, [pc, #216]	; (800283c <ADC_Enable+0xfc>)
 8002764:	4013      	ands	r3, r2
 8002766:	d00d      	beq.n	8002784 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	2210      	movs	r2, #16
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	2201      	movs	r2, #1
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e056      	b.n	8002832 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0018      	movs	r0, r3
 800278a:	f7ff fa43 	bl	8001c14 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800278e:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <ADC_Enable+0x100>)
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff f959 	bl	8001a48 <LL_ADC_GetCommonPathInternalCh>
 8002796:	0002      	movs	r2, r0
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	4013      	ands	r3, r2
 800279e:	d00f      	beq.n	80027c0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a0:	4b28      	ldr	r3, [pc, #160]	; (8002844 <ADC_Enable+0x104>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4928      	ldr	r1, [pc, #160]	; (8002848 <ADC_Enable+0x108>)
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7fd fcb6 	bl	8000118 <__udivsi3>
 80027ac:	0003      	movs	r3, r0
 80027ae:	3301      	adds	r3, #1
 80027b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027b2:	e002      	b.n	80027ba <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	7e5b      	ldrb	r3, [r3, #25]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d033      	beq.n	8002830 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80027c8:	f7ff f8c4 	bl	8001954 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027d0:	e027      	b.n	8002822 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7ff fa40 	bl	8001c5c <LL_ADC_IsEnabled>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d104      	bne.n	80027ea <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7ff fa15 	bl	8001c14 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027ea:	f7ff f8b3 	bl	8001954 <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d914      	bls.n	8002822 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	4013      	ands	r3, r2
 8002802:	2b01      	cmp	r3, #1
 8002804:	d00d      	beq.n	8002822 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	2210      	movs	r2, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2201      	movs	r2, #1
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e007      	b.n	8002832 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4013      	ands	r3, r2
 800282c:	2b01      	cmp	r3, #1
 800282e:	d1d0      	bne.n	80027d2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b004      	add	sp, #16
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	80000017 	.word	0x80000017
 8002840:	40012708 	.word	0x40012708
 8002844:	20000000 	.word	0x20000000
 8002848:	00030d40 	.word	0x00030d40

0800284c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff fa10 	bl	8001c7e <LL_ADC_IsDisableOngoing>
 800285e:	0003      	movs	r3, r0
 8002860:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0018      	movs	r0, r3
 8002868:	f7ff f9f8 	bl	8001c5c <LL_ADC_IsEnabled>
 800286c:	1e03      	subs	r3, r0, #0
 800286e:	d046      	beq.n	80028fe <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d143      	bne.n	80028fe <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2205      	movs	r2, #5
 800287e:	4013      	ands	r3, r2
 8002880:	2b01      	cmp	r3, #1
 8002882:	d10d      	bne.n	80028a0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff f9d5 	bl	8001c38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2203      	movs	r2, #3
 8002894:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002896:	f7ff f85d 	bl	8001954 <HAL_GetTick>
 800289a:	0003      	movs	r3, r0
 800289c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800289e:	e028      	b.n	80028f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	2210      	movs	r2, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	2201      	movs	r2, #1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e021      	b.n	8002900 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028bc:	f7ff f84a 	bl	8001954 <HAL_GetTick>
 80028c0:	0002      	movs	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d913      	bls.n	80028f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2201      	movs	r2, #1
 80028d2:	4013      	ands	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	2210      	movs	r2, #16
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	2201      	movs	r2, #1
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e006      	b.n	8002900 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2201      	movs	r2, #1
 80028fa:	4013      	ands	r3, r2
 80028fc:	d1de      	bne.n	80028bc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	b004      	add	sp, #16
 8002906:	bd80      	pop	{r7, pc}

08002908 <LL_ADC_SetCalibrationFactor>:
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	22b4      	movs	r2, #180	; 0xb4
 8002916:	589b      	ldr	r3, [r3, r2]
 8002918:	227f      	movs	r2, #127	; 0x7f
 800291a:	4393      	bics	r3, r2
 800291c:	001a      	movs	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	21b4      	movs	r1, #180	; 0xb4
 8002926:	505a      	str	r2, [r3, r1]
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	b002      	add	sp, #8
 800292e:	bd80      	pop	{r7, pc}

08002930 <LL_ADC_GetCalibrationFactor>:
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	22b4      	movs	r2, #180	; 0xb4
 800293c:	589b      	ldr	r3, [r3, r2]
 800293e:	227f      	movs	r2, #127	; 0x7f
 8002940:	4013      	ands	r3, r2
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b002      	add	sp, #8
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <LL_ADC_Enable>:
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <LL_ADC_Enable+0x20>)
 800295a:	4013      	ands	r3, r2
 800295c:	2201      	movs	r2, #1
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	609a      	str	r2, [r3, #8]
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}
 800296c:	7fffffe8 	.word	0x7fffffe8

08002970 <LL_ADC_Disable>:
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <LL_ADC_Disable+0x20>)
 800297e:	4013      	ands	r3, r2
 8002980:	2202      	movs	r2, #2
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}
 8002990:	7fffffe8 	.word	0x7fffffe8

08002994 <LL_ADC_IsEnabled>:
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2201      	movs	r2, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <LL_ADC_IsEnabled+0x18>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <LL_ADC_IsEnabled+0x1a>
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <LL_ADC_StartCalibration>:
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a05      	ldr	r2, [pc, #20]	; (80029dc <LL_ADC_StartCalibration+0x24>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	0612      	lsls	r2, r2, #24
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	609a      	str	r2, [r3, #8]
}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	7fffffe8 	.word	0x7fffffe8

080029e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	0fdb      	lsrs	r3, r3, #31
 80029ee:	07da      	lsls	r2, r3, #31
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d101      	bne.n	80029fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <LL_ADC_IsCalibrationOnGoing+0x1e>
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	0018      	movs	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b002      	add	sp, #8
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2254      	movs	r2, #84	; 0x54
 8002a1c:	5c9b      	ldrb	r3, [r3, r2]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_ADCEx_Calibration_Start+0x1e>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0ba      	b.n	8002b9c <HAL_ADCEx_Calibration_Start+0x194>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2254      	movs	r2, #84	; 0x54
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a2e:	2317      	movs	r3, #23
 8002a30:	18fc      	adds	r4, r7, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff ff09 	bl	800284c <ADC_Disable>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7ff ffa6 	bl	8002994 <LL_ADC_IsEnabled>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d000      	beq.n	8002a4e <HAL_ADCEx_Calibration_Start+0x46>
 8002a4c:	e099      	b.n	8002b82 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	4a54      	ldr	r2, [pc, #336]	; (8002ba4 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	2202      	movs	r2, #2
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a50      	ldr	r2, [pc, #320]	; (8002ba8 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	494d      	ldr	r1, [pc, #308]	; (8002bac <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e02d      	b.n	8002adc <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff ff97 	bl	80029b8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a8a:	e014      	b.n	8002ab6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4a46      	ldr	r2, [pc, #280]	; (8002bb0 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d90d      	bls.n	8002ab6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	2212      	movs	r2, #18
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	2210      	movs	r2, #16
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2254      	movs	r2, #84	; 0x54
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e072      	b.n	8002b9c <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff ff90 	bl	80029e0 <LL_ADC_IsCalibrationOnGoing>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d1e3      	bne.n	8002a8c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff ff31 	bl	8002930 <LL_ADC_GetCalibrationFactor>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b07      	cmp	r3, #7
 8002ae0:	d9ce      	bls.n	8002a80 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002ae2:	69f9      	ldr	r1, [r7, #28]
 8002ae4:	69b8      	ldr	r0, [r7, #24]
 8002ae6:	f7fd fb17 	bl	8000118 <__udivsi3>
 8002aea:	0003      	movs	r3, r0
 8002aec:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7ff ff2a 	bl	800294c <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	0011      	movs	r1, r2
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7ff ff01 	bl	8002908 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7ff ff30 	bl	8002970 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b10:	f7fe ff20 	bl	8001954 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b18:	e01b      	b.n	8002b52 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b1a:	f7fe ff1b 	bl	8001954 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d914      	bls.n	8002b52 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff ff31 	bl	8002994 <LL_ADC_IsEnabled>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d00d      	beq.n	8002b52 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2201      	movs	r2, #1
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e024      	b.n	8002b9c <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff ff1c 	bl	8002994 <LL_ADC_IsEnabled>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d1dc      	bne.n	8002b1a <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68d9      	ldr	r1, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	2203      	movs	r2, #3
 8002b76:	4393      	bics	r3, r2
 8002b78:	2201      	movs	r2, #1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b80:	e005      	b.n	8002b8e <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	2210      	movs	r2, #16
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2254      	movs	r2, #84	; 0x54
 8002b92:	2100      	movs	r1, #0
 8002b94:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002b96:	2317      	movs	r3, #23
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	781b      	ldrb	r3, [r3, #0]
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b009      	add	sp, #36	; 0x24
 8002ba2:	bd90      	pop	{r4, r7, pc}
 8002ba4:	fffffefd 	.word	0xfffffefd
 8002ba8:	00008003 	.word	0x00008003
 8002bac:	ffff7ffc 	.word	0xffff7ffc
 8002bb0:	0002f1ff 	.word	0x0002f1ff

08002bb4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b7f      	cmp	r3, #127	; 0x7f
 8002c06:	d809      	bhi.n	8002c1c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	231f      	movs	r3, #31
 8002c10:	401a      	ands	r2, r3
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_EnableIRQ+0x30>)
 8002c14:	2101      	movs	r1, #1
 8002c16:	4091      	lsls	r1, r2
 8002c18:	000a      	movs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b002      	add	sp, #8
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	0002      	movs	r2, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c36:	1dfb      	adds	r3, r7, #7
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c3c:	d828      	bhi.n	8002c90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <__NVIC_SetPriority+0xd4>)
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	33c0      	adds	r3, #192	; 0xc0
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	589b      	ldr	r3, [r3, r2]
 8002c4e:	1dfa      	adds	r2, r7, #7
 8002c50:	7812      	ldrb	r2, [r2, #0]
 8002c52:	0011      	movs	r1, r2
 8002c54:	2203      	movs	r2, #3
 8002c56:	400a      	ands	r2, r1
 8002c58:	00d2      	lsls	r2, r2, #3
 8002c5a:	21ff      	movs	r1, #255	; 0xff
 8002c5c:	4091      	lsls	r1, r2
 8002c5e:	000a      	movs	r2, r1
 8002c60:	43d2      	mvns	r2, r2
 8002c62:	401a      	ands	r2, r3
 8002c64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	22ff      	movs	r2, #255	; 0xff
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	0018      	movs	r0, r3
 8002c74:	2303      	movs	r3, #3
 8002c76:	4003      	ands	r3, r0
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c7c:	481f      	ldr	r0, [pc, #124]	; (8002cfc <__NVIC_SetPriority+0xd4>)
 8002c7e:	1dfb      	adds	r3, r7, #7
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	430a      	orrs	r2, r1
 8002c88:	33c0      	adds	r3, #192	; 0xc0
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c8e:	e031      	b.n	8002cf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <__NVIC_SetPriority+0xd8>)
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	0019      	movs	r1, r3
 8002c98:	230f      	movs	r3, #15
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	3b08      	subs	r3, #8
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3306      	adds	r3, #6
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	18d3      	adds	r3, r2, r3
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1dfa      	adds	r2, r7, #7
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	0011      	movs	r1, r2
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	00d2      	lsls	r2, r2, #3
 8002cb6:	21ff      	movs	r1, #255	; 0xff
 8002cb8:	4091      	lsls	r1, r2
 8002cba:	000a      	movs	r2, r1
 8002cbc:	43d2      	mvns	r2, r2
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	019b      	lsls	r3, r3, #6
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	401a      	ands	r2, r3
 8002cca:	1dfb      	adds	r3, r7, #7
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	4003      	ands	r3, r0
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd8:	4809      	ldr	r0, [pc, #36]	; (8002d00 <__NVIC_SetPriority+0xd8>)
 8002cda:	1dfb      	adds	r3, r7, #7
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	001c      	movs	r4, r3
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	4023      	ands	r3, r4
 8002ce4:	3b08      	subs	r3, #8
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	3306      	adds	r3, #6
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	18c3      	adds	r3, r0, r3
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b003      	add	sp, #12
 8002cfa:	bd90      	pop	{r4, r7, pc}
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	045b      	lsls	r3, r3, #17
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d301      	bcc.n	8002d1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e010      	b.n	8002d3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <SysTick_Config+0x44>)
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	3a01      	subs	r2, #1
 8002d22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d24:	2301      	movs	r3, #1
 8002d26:	425b      	negs	r3, r3
 8002d28:	2103      	movs	r1, #3
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7ff ff7c 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <SysTick_Config+0x44>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <SysTick_Config+0x44>)
 8002d38:	2207      	movs	r2, #7
 8002d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b002      	add	sp, #8
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	e000e010 	.word	0xe000e010

08002d4c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	210f      	movs	r1, #15
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	1c02      	adds	r2, r0, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b25b      	sxtb	r3, r3
 8002d66:	0011      	movs	r1, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ff5d 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b004      	add	sp, #16
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d82:	1dfb      	adds	r3, r7, #7
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7ff ff33 	bl	8002bf4 <__NVIC_EnableIRQ>
}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b002      	add	sp, #8
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff ffaf 	bl	8002d04 <SysTick_Config>
 8002da6:	0003      	movs	r3, r0
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	e14d      	b.n	800305c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4091      	lsls	r1, r2
 8002dca:	000a      	movs	r2, r1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d100      	bne.n	8002dd8 <HAL_GPIO_Init+0x28>
 8002dd6:	e13e      	b.n	8003056 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d005      	beq.n	8002df0 <HAL_GPIO_Init+0x40>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2203      	movs	r2, #3
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d130      	bne.n	8002e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	0013      	movs	r3, r2
 8002e00:	43da      	mvns	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	409a      	lsls	r2, r3
 8002e12:	0013      	movs	r3, r2
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e26:	2201      	movs	r2, #1
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
 8002e44:	0013      	movs	r3, r2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2203      	movs	r2, #3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d017      	beq.n	8002e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	0013      	movs	r3, r2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2203      	movs	r2, #3
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d123      	bne.n	8002ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	08da      	lsrs	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3208      	adds	r2, #8
 8002ea2:	0092      	lsls	r2, r2, #2
 8002ea4:	58d3      	ldr	r3, [r2, r3]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2207      	movs	r2, #7
 8002eac:	4013      	ands	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2107      	movs	r1, #7
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	08da      	lsrs	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3208      	adds	r2, #8
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	6939      	ldr	r1, [r7, #16]
 8002ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	0013      	movs	r3, r2
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2203      	movs	r2, #3
 8002f00:	401a      	ands	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	409a      	lsls	r2, r3
 8002f08:	0013      	movs	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	23c0      	movs	r3, #192	; 0xc0
 8002f1c:	029b      	lsls	r3, r3, #10
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d100      	bne.n	8002f24 <HAL_GPIO_Init+0x174>
 8002f22:	e098      	b.n	8003056 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002f24:	4a53      	ldr	r2, [pc, #332]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	589b      	ldr	r3, [r3, r2]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2203      	movs	r2, #3
 8002f36:	4013      	ands	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	43da      	mvns	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	23a0      	movs	r3, #160	; 0xa0
 8002f4c:	05db      	lsls	r3, r3, #23
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x1d6>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a48      	ldr	r2, [pc, #288]	; (8003078 <HAL_GPIO_Init+0x2c8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x1d2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a47      	ldr	r2, [pc, #284]	; (800307c <HAL_GPIO_Init+0x2cc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x1ce>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a46      	ldr	r2, [pc, #280]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x1ca>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a45      	ldr	r2, [pc, #276]	; (8003084 <HAL_GPIO_Init+0x2d4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x1c6>
 8002f72:	2304      	movs	r3, #4
 8002f74:	e008      	b.n	8002f88 <HAL_GPIO_Init+0x1d8>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x1d8>
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e004      	b.n	8002f88 <HAL_GPIO_Init+0x1d8>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e002      	b.n	8002f88 <HAL_GPIO_Init+0x1d8>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_GPIO_Init+0x1d8>
 8002f86:	2300      	movs	r3, #0
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	00d2      	lsls	r2, r2, #3
 8002f90:	4093      	lsls	r3, r2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002f98:	4936      	ldr	r1, [pc, #216]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3318      	adds	r3, #24
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fa6:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	035b      	lsls	r3, r3, #13
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fca:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002fd0:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	039b      	lsls	r3, r3, #14
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002ffc:	2384      	movs	r3, #132	; 0x84
 8002ffe:	58d3      	ldr	r3, [r2, r3]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	43da      	mvns	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	4013      	ands	r3, r2
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003020:	4914      	ldr	r1, [pc, #80]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8003022:	2284      	movs	r2, #132	; 0x84
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003028:	4a12      	ldr	r2, [pc, #72]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	58d3      	ldr	r3, [r2, r3]
 800302e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	43da      	mvns	r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	4013      	ands	r3, r2
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800304e:	4909      	ldr	r1, [pc, #36]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	40da      	lsrs	r2, r3
 8003064:	1e13      	subs	r3, r2, #0
 8003066:	d000      	beq.n	800306a <HAL_GPIO_Init+0x2ba>
 8003068:	e6aa      	b.n	8002dc0 <HAL_GPIO_Init+0x10>
  }
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b006      	add	sp, #24
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021800 	.word	0x40021800
 8003078:	50000400 	.word	0x50000400
 800307c:	50000800 	.word	0x50000800
 8003080:	50000c00 	.word	0x50000c00
 8003084:	50001000 	.word	0x50001000

08003088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	0008      	movs	r0, r1
 8003092:	0011      	movs	r1, r2
 8003094:	1cbb      	adds	r3, r7, #2
 8003096:	1c02      	adds	r2, r0, #0
 8003098:	801a      	strh	r2, [r3, #0]
 800309a:	1c7b      	adds	r3, r7, #1
 800309c:	1c0a      	adds	r2, r1, #0
 800309e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a0:	1c7b      	adds	r3, r7, #1
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030a8:	1cbb      	adds	r3, r7, #2
 80030aa:	881a      	ldrh	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b0:	e003      	b.n	80030ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030b2:	1cbb      	adds	r3, r7, #2
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b002      	add	sp, #8
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	0002      	movs	r2, r0
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	1dba      	adds	r2, r7, #6
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	4013      	ands	r3, r2
 80030da:	d008      	beq.n	80030ee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80030de:	1dba      	adds	r2, r7, #6
 80030e0:	8812      	ldrh	r2, [r2, #0]
 80030e2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80030e4:	1dbb      	adds	r3, r7, #6
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 f815 	bl	8003118 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	1dba      	adds	r2, r7, #6
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	4013      	ands	r3, r2
 80030f8:	d008      	beq.n	800310c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80030fc:	1dba      	adds	r2, r7, #6
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003102:	1dbb      	adds	r3, r7, #6
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	0018      	movs	r0, r3
 8003108:	f7fd fefe 	bl	8000f08 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021800 	.word	0x40021800

08003118 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	0002      	movs	r2, r0
 8003120:	1dbb      	adds	r3, r7, #6
 8003122:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b002      	add	sp, #8
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003134:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d11f      	bne.n	8003190 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	0013      	movs	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	189b      	adds	r3, r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4912      	ldr	r1, [pc, #72]	; (80031a8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800315e:	0018      	movs	r0, r3
 8003160:	f7fc ffda 	bl	8000118 <__udivsi3>
 8003164:	0003      	movs	r3, r0
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800316a:	e008      	b.n	800317e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3b01      	subs	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e001      	b.n	800317e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e009      	b.n	8003192 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800317e:	4b07      	ldr	r3, [pc, #28]	; (800319c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	401a      	ands	r2, r3
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	429a      	cmp	r2, r3
 800318e:	d0ed      	beq.n	800316c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	0018      	movs	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	40007000 	.word	0x40007000
 80031a0:	fffff9ff 	.word	0xfffff9ff
 80031a4:	20000000 	.word	0x20000000
 80031a8:	000f4240 	.word	0x000f4240

080031ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f000 fb50 	bl	8003860 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2201      	movs	r2, #1
 80031c6:	4013      	ands	r3, r2
 80031c8:	d100      	bne.n	80031cc <HAL_RCC_OscConfig+0x20>
 80031ca:	e07c      	b.n	80032c6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031cc:	4bc3      	ldr	r3, [pc, #780]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2238      	movs	r2, #56	; 0x38
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d6:	4bc1      	ldr	r3, [pc, #772]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2203      	movs	r2, #3
 80031dc:	4013      	ands	r3, r2
 80031de:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d102      	bne.n	80031ec <HAL_RCC_OscConfig+0x40>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d002      	beq.n	80031f2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d10b      	bne.n	800320a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f2:	4bba      	ldr	r3, [pc, #744]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	029b      	lsls	r3, r3, #10
 80031fa:	4013      	ands	r3, r2
 80031fc:	d062      	beq.n	80032c4 <HAL_RCC_OscConfig+0x118>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d15e      	bne.n	80032c4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e32a      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	025b      	lsls	r3, r3, #9
 8003212:	429a      	cmp	r2, r3
 8003214:	d107      	bne.n	8003226 <HAL_RCC_OscConfig+0x7a>
 8003216:	4bb1      	ldr	r3, [pc, #708]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4bb0      	ldr	r3, [pc, #704]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	0249      	lsls	r1, r1, #9
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e020      	b.n	8003268 <HAL_RCC_OscConfig+0xbc>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	23a0      	movs	r3, #160	; 0xa0
 800322c:	02db      	lsls	r3, r3, #11
 800322e:	429a      	cmp	r2, r3
 8003230:	d10e      	bne.n	8003250 <HAL_RCC_OscConfig+0xa4>
 8003232:	4baa      	ldr	r3, [pc, #680]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4ba9      	ldr	r3, [pc, #676]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	02c9      	lsls	r1, r1, #11
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	4ba6      	ldr	r3, [pc, #664]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4ba5      	ldr	r3, [pc, #660]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	0249      	lsls	r1, r1, #9
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0xbc>
 8003250:	4ba2      	ldr	r3, [pc, #648]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4ba1      	ldr	r3, [pc, #644]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003256:	49a2      	ldr	r1, [pc, #648]	; (80034e0 <HAL_RCC_OscConfig+0x334>)
 8003258:	400a      	ands	r2, r1
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	4b9f      	ldr	r3, [pc, #636]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b9e      	ldr	r3, [pc, #632]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003262:	49a0      	ldr	r1, [pc, #640]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003264:	400a      	ands	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d014      	beq.n	800329a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe fb70 	bl	8001954 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327a:	f7fe fb6b 	bl	8001954 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	; 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e2e9      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328c:	4b93      	ldr	r3, [pc, #588]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	029b      	lsls	r3, r3, #10
 8003294:	4013      	ands	r3, r2
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0xce>
 8003298:	e015      	b.n	80032c6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe fb5b 	bl	8001954 <HAL_GetTick>
 800329e:	0003      	movs	r3, r0
 80032a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fb56 	bl	8001954 <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e2d4      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032b6:	4b89      	ldr	r3, [pc, #548]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	029b      	lsls	r3, r3, #10
 80032be:	4013      	ands	r3, r2
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0xf8>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2202      	movs	r2, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	d100      	bne.n	80032d2 <HAL_RCC_OscConfig+0x126>
 80032d0:	e099      	b.n	8003406 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d2:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2238      	movs	r2, #56	; 0x38
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032dc:	4b7f      	ldr	r3, [pc, #508]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2203      	movs	r2, #3
 80032e2:	4013      	ands	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d102      	bne.n	80032f2 <HAL_RCC_OscConfig+0x146>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d135      	bne.n	8003364 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	4b78      	ldr	r3, [pc, #480]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4013      	ands	r3, r2
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x164>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e2a7      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b72      	ldr	r3, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a74      	ldr	r2, [pc, #464]	; (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003316:	4013      	ands	r3, r2
 8003318:	0019      	movs	r1, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	4b6e      	ldr	r3, [pc, #440]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d112      	bne.n	8003352 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800332c:	4b6b      	ldr	r3, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6e      	ldr	r2, [pc, #440]	; (80034ec <HAL_RCC_OscConfig+0x340>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003340:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	0adb      	lsrs	r3, r3, #11
 8003346:	2207      	movs	r2, #7
 8003348:	4013      	ands	r3, r2
 800334a:	4a69      	ldr	r2, [pc, #420]	; (80034f0 <HAL_RCC_OscConfig+0x344>)
 800334c:	40da      	lsrs	r2, r3
 800334e:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <HAL_RCC_OscConfig+0x348>)
 8003350:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003352:	4b69      	ldr	r3, [pc, #420]	; (80034f8 <HAL_RCC_OscConfig+0x34c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0018      	movs	r0, r3
 8003358:	f7fe faa0 	bl	800189c <HAL_InitTick>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d051      	beq.n	8003404 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e27d      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d030      	beq.n	80033ce <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800336c:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a5e      	ldr	r2, [pc, #376]	; (80034ec <HAL_RCC_OscConfig+0x340>)
 8003372:	4013      	ands	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	4b58      	ldr	r3, [pc, #352]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003380:	4b56      	ldr	r3, [pc, #344]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b55      	ldr	r3, [pc, #340]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	0049      	lsls	r1, r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7fe fae1 	bl	8001954 <HAL_GetTick>
 8003392:	0003      	movs	r3, r0
 8003394:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003398:	f7fe fadc 	bl	8001954 <HAL_GetTick>
 800339c:	0002      	movs	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e25a      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033aa:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4013      	ands	r3, r2
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a4b      	ldr	r2, [pc, #300]	; (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	021a      	lsls	r2, r3, #8
 80033c6:	4b45      	ldr	r3, [pc, #276]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	e01b      	b.n	8003406 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80033ce:	4b43      	ldr	r3, [pc, #268]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b42      	ldr	r3, [pc, #264]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80033d4:	4949      	ldr	r1, [pc, #292]	; (80034fc <HAL_RCC_OscConfig+0x350>)
 80033d6:	400a      	ands	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe fabb 	bl	8001954 <HAL_GetTick>
 80033de:	0003      	movs	r3, r0
 80033e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fe fab6 	bl	8001954 <HAL_GetTick>
 80033e8:	0002      	movs	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e234      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f6:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4013      	ands	r3, r2
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x238>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003404:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2208      	movs	r2, #8
 800340c:	4013      	ands	r3, r2
 800340e:	d047      	beq.n	80034a0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2238      	movs	r2, #56	; 0x38
 8003416:	4013      	ands	r3, r2
 8003418:	2b18      	cmp	r3, #24
 800341a:	d10a      	bne.n	8003432 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800341c:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 800341e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003420:	2202      	movs	r2, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d03c      	beq.n	80034a0 <HAL_RCC_OscConfig+0x2f4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d138      	bne.n	80034a0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e216      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d019      	beq.n	800346e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 800343c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800343e:	4b27      	ldr	r3, [pc, #156]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe fa85 	bl	8001954 <HAL_GetTick>
 800344a:	0003      	movs	r3, r0
 800344c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003450:	f7fe fa80 	bl	8001954 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1fe      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	2202      	movs	r2, #2
 8003468:	4013      	ands	r3, r2
 800346a:	d0f1      	beq.n	8003450 <HAL_RCC_OscConfig+0x2a4>
 800346c:	e018      	b.n	80034a0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003474:	2101      	movs	r1, #1
 8003476:	438a      	bics	r2, r1
 8003478:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fe fa6b 	bl	8001954 <HAL_GetTick>
 800347e:	0003      	movs	r3, r0
 8003480:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003484:	f7fe fa66 	bl	8001954 <HAL_GetTick>
 8003488:	0002      	movs	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1e4      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 8003498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349a:	2202      	movs	r2, #2
 800349c:	4013      	ands	r3, r2
 800349e:	d1f1      	bne.n	8003484 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2204      	movs	r2, #4
 80034a6:	4013      	ands	r3, r2
 80034a8:	d100      	bne.n	80034ac <HAL_RCC_OscConfig+0x300>
 80034aa:	e0c7      	b.n	800363c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ac:	231f      	movs	r3, #31
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2238      	movs	r2, #56	; 0x38
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d11f      	bne.n	8003500 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_RCC_OscConfig+0x330>)
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	2202      	movs	r2, #2
 80034c6:	4013      	ands	r3, r2
 80034c8:	d100      	bne.n	80034cc <HAL_RCC_OscConfig+0x320>
 80034ca:	e0b7      	b.n	800363c <HAL_RCC_OscConfig+0x490>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d000      	beq.n	80034d6 <HAL_RCC_OscConfig+0x32a>
 80034d4:	e0b2      	b.n	800363c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e1c2      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	40021000 	.word	0x40021000
 80034e0:	fffeffff 	.word	0xfffeffff
 80034e4:	fffbffff 	.word	0xfffbffff
 80034e8:	ffff80ff 	.word	0xffff80ff
 80034ec:	ffffc7ff 	.word	0xffffc7ff
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	20000000 	.word	0x20000000
 80034f8:	20000004 	.word	0x20000004
 80034fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003500:	4bb5      	ldr	r3, [pc, #724]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003504:	2380      	movs	r3, #128	; 0x80
 8003506:	055b      	lsls	r3, r3, #21
 8003508:	4013      	ands	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_RCC_OscConfig+0x364>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x366>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d011      	beq.n	800353a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	4bb0      	ldr	r3, [pc, #704]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351a:	4baf      	ldr	r3, [pc, #700]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	0549      	lsls	r1, r1, #21
 8003520:	430a      	orrs	r2, r1
 8003522:	63da      	str	r2, [r3, #60]	; 0x3c
 8003524:	4bac      	ldr	r3, [pc, #688]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	055b      	lsls	r3, r3, #21
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003532:	231f      	movs	r3, #31
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353a:	4ba8      	ldr	r3, [pc, #672]	; (80037dc <HAL_RCC_OscConfig+0x630>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4013      	ands	r3, r2
 8003544:	d11a      	bne.n	800357c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003546:	4ba5      	ldr	r3, [pc, #660]	; (80037dc <HAL_RCC_OscConfig+0x630>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4ba4      	ldr	r3, [pc, #656]	; (80037dc <HAL_RCC_OscConfig+0x630>)
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	0049      	lsls	r1, r1, #1
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003554:	f7fe f9fe 	bl	8001954 <HAL_GetTick>
 8003558:	0003      	movs	r3, r0
 800355a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355e:	f7fe f9f9 	bl	8001954 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e177      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003570:	4b9a      	ldr	r3, [pc, #616]	; (80037dc <HAL_RCC_OscConfig+0x630>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4013      	ands	r3, r2
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x3e6>
 8003584:	4b94      	ldr	r3, [pc, #592]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003586:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003588:	4b93      	ldr	r3, [pc, #588]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800358a:	2101      	movs	r1, #1
 800358c:	430a      	orrs	r2, r1
 800358e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003590:	e01c      	b.n	80035cc <HAL_RCC_OscConfig+0x420>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x408>
 800359a:	4b8f      	ldr	r3, [pc, #572]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800359c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800359e:	4b8e      	ldr	r3, [pc, #568]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80035a0:	2104      	movs	r1, #4
 80035a2:	430a      	orrs	r2, r1
 80035a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80035a6:	4b8c      	ldr	r3, [pc, #560]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80035a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035aa:	4b8b      	ldr	r3, [pc, #556]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80035ac:	2101      	movs	r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0x420>
 80035b4:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80035b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035b8:	4b87      	ldr	r3, [pc, #540]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80035ba:	2101      	movs	r1, #1
 80035bc:	438a      	bics	r2, r1
 80035be:	65da      	str	r2, [r3, #92]	; 0x5c
 80035c0:	4b85      	ldr	r3, [pc, #532]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80035c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035c4:	4b84      	ldr	r3, [pc, #528]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80035c6:	2104      	movs	r1, #4
 80035c8:	438a      	bics	r2, r1
 80035ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d014      	beq.n	80035fe <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe f9be 	bl	8001954 <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035dc:	e009      	b.n	80035f2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fe f9b9 	bl	8001954 <HAL_GetTick>
 80035e2:	0002      	movs	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	4a7d      	ldr	r2, [pc, #500]	; (80037e0 <HAL_RCC_OscConfig+0x634>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e136      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f2:	4b79      	ldr	r3, [pc, #484]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	2202      	movs	r2, #2
 80035f8:	4013      	ands	r3, r2
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x432>
 80035fc:	e013      	b.n	8003626 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe f9a9 	bl	8001954 <HAL_GetTick>
 8003602:	0003      	movs	r3, r0
 8003604:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003606:	e009      	b.n	800361c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fe f9a4 	bl	8001954 <HAL_GetTick>
 800360c:	0002      	movs	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	4a73      	ldr	r2, [pc, #460]	; (80037e0 <HAL_RCC_OscConfig+0x634>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e121      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800361c:	4b6e      	ldr	r3, [pc, #440]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	2202      	movs	r2, #2
 8003622:	4013      	ands	r3, r2
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003626:	231f      	movs	r3, #31
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4b69      	ldr	r3, [pc, #420]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003634:	4b68      	ldr	r3, [pc, #416]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003636:	496b      	ldr	r1, [pc, #428]	; (80037e4 <HAL_RCC_OscConfig+0x638>)
 8003638:	400a      	ands	r2, r1
 800363a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2220      	movs	r2, #32
 8003642:	4013      	ands	r3, r2
 8003644:	d039      	beq.n	80036ba <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01b      	beq.n	8003686 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800364e:	4b62      	ldr	r3, [pc, #392]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	03c9      	lsls	r1, r1, #15
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fe f97a 	bl	8001954 <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003666:	f7fe f975 	bl	8001954 <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e0f3      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003678:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	041b      	lsls	r3, r3, #16
 8003680:	4013      	ands	r3, r2
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x4ba>
 8003684:	e019      	b.n	80036ba <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003686:	4b54      	ldr	r3, [pc, #336]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800368c:	4956      	ldr	r1, [pc, #344]	; (80037e8 <HAL_RCC_OscConfig+0x63c>)
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fe f95f 	bl	8001954 <HAL_GetTick>
 8003696:	0003      	movs	r3, r0
 8003698:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800369c:	f7fe f95a 	bl	8001954 <HAL_GetTick>
 80036a0:	0002      	movs	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0d8      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80036ae:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	4013      	ands	r3, r2
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d100      	bne.n	80036c4 <HAL_RCC_OscConfig+0x518>
 80036c2:	e0cc      	b.n	800385e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c4:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2238      	movs	r2, #56	; 0x38
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d100      	bne.n	80036d2 <HAL_RCC_OscConfig+0x526>
 80036d0:	e07b      	b.n	80037ca <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d156      	bne.n	8003788 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80036e0:	4942      	ldr	r1, [pc, #264]	; (80037ec <HAL_RCC_OscConfig+0x640>)
 80036e2:	400a      	ands	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe f935 	bl	8001954 <HAL_GetTick>
 80036ea:	0003      	movs	r3, r0
 80036ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe f930 	bl	8001954 <HAL_GetTick>
 80036f4:	0002      	movs	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0ae      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003702:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	049b      	lsls	r3, r3, #18
 800370a:	4013      	ands	r3, r2
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370e:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	4a37      	ldr	r2, [pc, #220]	; (80037f0 <HAL_RCC_OscConfig+0x644>)
 8003714:	4013      	ands	r3, r2
 8003716:	0019      	movs	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	431a      	orrs	r2, r3
 800373c:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800373e:	430a      	orrs	r2, r1
 8003740:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003742:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	0449      	lsls	r1, r1, #17
 800374c:	430a      	orrs	r2, r1
 800374e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003750:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 8003756:	2180      	movs	r1, #128	; 0x80
 8003758:	0549      	lsls	r1, r1, #21
 800375a:	430a      	orrs	r2, r1
 800375c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fe f8f9 	bl	8001954 <HAL_GetTick>
 8003762:	0003      	movs	r3, r0
 8003764:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe f8f4 	bl	8001954 <HAL_GetTick>
 800376c:	0002      	movs	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e072      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	049b      	lsls	r3, r3, #18
 8003782:	4013      	ands	r3, r2
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x5bc>
 8003786:	e06a      	b.n	800385e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 800378e:	4917      	ldr	r1, [pc, #92]	; (80037ec <HAL_RCC_OscConfig+0x640>)
 8003790:	400a      	ands	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe f8de 	bl	8001954 <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379e:	f7fe f8d9 	bl	8001954 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e057      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	049b      	lsls	r3, r3, #18
 80037b8:	4013      	ands	r3, r2
 80037ba:	d1f0      	bne.n	800379e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_OscConfig+0x62c>)
 80037c2:	490c      	ldr	r1, [pc, #48]	; (80037f4 <HAL_RCC_OscConfig+0x648>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	e049      	b.n	800385e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d112      	bne.n	80037f8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e044      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40007000 	.word	0x40007000
 80037e0:	00001388 	.word	0x00001388
 80037e4:	efffffff 	.word	0xefffffff
 80037e8:	ffbfffff 	.word	0xffbfffff
 80037ec:	feffffff 	.word	0xfeffffff
 80037f0:	11c1808c 	.word	0x11c1808c
 80037f4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_RCC_OscConfig+0x6bc>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2203      	movs	r2, #3
 8003802:	401a      	ands	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	429a      	cmp	r2, r3
 800380a:	d126      	bne.n	800385a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2270      	movs	r2, #112	; 0x70
 8003810:	401a      	ands	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d11f      	bne.n	800385a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	23fe      	movs	r3, #254	; 0xfe
 800381e:	01db      	lsls	r3, r3, #7
 8003820:	401a      	ands	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d116      	bne.n	800385a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	23f8      	movs	r3, #248	; 0xf8
 8003830:	039b      	lsls	r3, r3, #14
 8003832:	401a      	ands	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d10e      	bne.n	800385a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	23e0      	movs	r3, #224	; 0xe0
 8003840:	051b      	lsls	r3, r3, #20
 8003842:	401a      	ands	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	0f5b      	lsrs	r3, r3, #29
 8003850:	075a      	lsls	r2, r3, #29
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b008      	add	sp, #32
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000

0800386c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0e9      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003880:	4b76      	ldr	r3, [pc, #472]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2207      	movs	r2, #7
 8003886:	4013      	ands	r3, r2
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d91e      	bls.n	80038cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b73      	ldr	r3, [pc, #460]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2207      	movs	r2, #7
 8003894:	4393      	bics	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038a0:	f7fe f858 	bl	8001954 <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038a8:	e009      	b.n	80038be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038aa:	f7fe f853 	bl	8001954 <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	4a6a      	ldr	r2, [pc, #424]	; (8003a60 <HAL_RCC_ClockConfig+0x1f4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0ca      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038be:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2207      	movs	r2, #7
 80038c4:	4013      	ands	r3, r2
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1ee      	bne.n	80038aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2202      	movs	r2, #2
 80038d2:	4013      	ands	r3, r2
 80038d4:	d015      	beq.n	8003902 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2204      	movs	r2, #4
 80038dc:	4013      	ands	r3, r2
 80038de:	d006      	beq.n	80038ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80038e0:	4b60      	ldr	r3, [pc, #384]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 80038e6:	21e0      	movs	r1, #224	; 0xe0
 80038e8:	01c9      	lsls	r1, r1, #7
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ee:	4b5d      	ldr	r3, [pc, #372]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a5d      	ldr	r2, [pc, #372]	; (8003a68 <HAL_RCC_ClockConfig+0x1fc>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	4b59      	ldr	r3, [pc, #356]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2201      	movs	r2, #1
 8003908:	4013      	ands	r3, r2
 800390a:	d057      	beq.n	80039bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	029b      	lsls	r3, r3, #10
 800391c:	4013      	ands	r3, r2
 800391e:	d12b      	bne.n	8003978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e097      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d107      	bne.n	800393c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392c:	4b4d      	ldr	r3, [pc, #308]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	049b      	lsls	r3, r3, #18
 8003934:	4013      	ands	r3, r2
 8003936:	d11f      	bne.n	8003978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e08b      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d107      	bne.n	8003954 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003944:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4013      	ands	r3, r2
 800394e:	d113      	bne.n	8003978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e07f      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d106      	bne.n	800396a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800395c:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 800395e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003960:	2202      	movs	r2, #2
 8003962:	4013      	ands	r3, r2
 8003964:	d108      	bne.n	8003978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e074      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800396a:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	2202      	movs	r2, #2
 8003970:	4013      	ands	r3, r2
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e06d      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003978:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2207      	movs	r2, #7
 800397e:	4393      	bics	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fd ffe2 	bl	8001954 <HAL_GetTick>
 8003990:	0003      	movs	r3, r0
 8003992:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003994:	e009      	b.n	80039aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003996:	f7fd ffdd 	bl	8001954 <HAL_GetTick>
 800399a:	0002      	movs	r2, r0
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	4a2f      	ldr	r2, [pc, #188]	; (8003a60 <HAL_RCC_ClockConfig+0x1f4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e054      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2238      	movs	r2, #56	; 0x38
 80039b0:	401a      	ands	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1ec      	bne.n	8003996 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039bc:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2207      	movs	r2, #7
 80039c2:	4013      	ands	r3, r2
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d21e      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2207      	movs	r2, #7
 80039d0:	4393      	bics	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039dc:	f7fd ffba 	bl	8001954 <HAL_GetTick>
 80039e0:	0003      	movs	r3, r0
 80039e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039e4:	e009      	b.n	80039fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e6:	f7fd ffb5 	bl	8001954 <HAL_GetTick>
 80039ea:	0002      	movs	r2, r0
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_RCC_ClockConfig+0x1f4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e02c      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2207      	movs	r2, #7
 8003a00:	4013      	ands	r3, r2
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1ee      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a12:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <HAL_RCC_ClockConfig+0x200>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 8003a22:	430a      	orrs	r2, r1
 8003a24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003a26:	f000 f829 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8003a2a:	0001      	movs	r1, r0
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	220f      	movs	r2, #15
 8003a34:	401a      	ands	r2, r3
 8003a36:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <HAL_RCC_ClockConfig+0x204>)
 8003a38:	0092      	lsls	r2, r2, #2
 8003a3a:	58d3      	ldr	r3, [r2, r3]
 8003a3c:	221f      	movs	r2, #31
 8003a3e:	4013      	ands	r3, r2
 8003a40:	000a      	movs	r2, r1
 8003a42:	40da      	lsrs	r2, r3
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCC_ClockConfig+0x208>)
 8003a46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x20c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fd ff25 	bl	800189c <HAL_InitTick>
 8003a52:	0003      	movs	r3, r0
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	00001388 	.word	0x00001388
 8003a64:	40021000 	.word	0x40021000
 8003a68:	fffff0ff 	.word	0xfffff0ff
 8003a6c:	ffff8fff 	.word	0xffff8fff
 8003a70:	08005e9c 	.word	0x08005e9c
 8003a74:	20000000 	.word	0x20000000
 8003a78:	20000004 	.word	0x20000004

08003a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a82:	4b3c      	ldr	r3, [pc, #240]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2238      	movs	r2, #56	; 0x38
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d10f      	bne.n	8003aac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0adb      	lsrs	r3, r3, #11
 8003a92:	2207      	movs	r2, #7
 8003a94:	4013      	ands	r3, r2
 8003a96:	2201      	movs	r2, #1
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	0013      	movs	r3, r2
 8003a9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003a9e:	6839      	ldr	r1, [r7, #0]
 8003aa0:	4835      	ldr	r0, [pc, #212]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003aa2:	f7fc fb39 	bl	8000118 <__udivsi3>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	e05d      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2238      	movs	r2, #56	; 0x38
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d102      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ab8:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x100>)
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	e054      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003abe:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2238      	movs	r2, #56	; 0x38
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b10      	cmp	r3, #16
 8003ac8:	d138      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003aca:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2203      	movs	r2, #3
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	2207      	movs	r2, #7
 8003adc:	4013      	ands	r3, r2
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d10d      	bne.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	4824      	ldr	r0, [pc, #144]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x100>)
 8003aec:	f7fc fb14 	bl	8000118 <__udivsi3>
 8003af0:	0003      	movs	r3, r0
 8003af2:	0019      	movs	r1, r3
 8003af4:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	227f      	movs	r2, #127	; 0x7f
 8003afc:	4013      	ands	r3, r2
 8003afe:	434b      	muls	r3, r1
 8003b00:	617b      	str	r3, [r7, #20]
        break;
 8003b02:	e00d      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	481c      	ldr	r0, [pc, #112]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b08:	f7fc fb06 	bl	8000118 <__udivsi3>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	0019      	movs	r1, r3
 8003b10:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	227f      	movs	r2, #127	; 0x7f
 8003b18:	4013      	ands	r3, r2
 8003b1a:	434b      	muls	r3, r1
 8003b1c:	617b      	str	r3, [r7, #20]
        break;
 8003b1e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003b20:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0f5b      	lsrs	r3, r3, #29
 8003b26:	2207      	movs	r2, #7
 8003b28:	4013      	ands	r3, r2
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	6978      	ldr	r0, [r7, #20]
 8003b32:	f7fc faf1 	bl	8000118 <__udivsi3>
 8003b36:	0003      	movs	r3, r0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	e015      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2238      	movs	r2, #56	; 0x38
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d103      	bne.n	8003b50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2238      	movs	r2, #56	; 0x38
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b18      	cmp	r3, #24
 8003b5a:	d103      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003b5c:	23fa      	movs	r3, #250	; 0xfa
 8003b5e:	01db      	lsls	r3, r3, #7
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e001      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b68:	693b      	ldr	r3, [r7, #16]
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b006      	add	sp, #24
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	40021000 	.word	0x40021000
 8003b78:	00f42400 	.word	0x00f42400
 8003b7c:	007a1200 	.word	0x007a1200

08003b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003b88:	2313      	movs	r3, #19
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b90:	2312      	movs	r3, #18
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	029b      	lsls	r3, r3, #10
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003ba4:	e0ad      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba6:	2011      	movs	r0, #17
 8003ba8:	183b      	adds	r3, r7, r0
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	055b      	lsls	r3, r3, #21
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d110      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	4b44      	ldr	r3, [pc, #272]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bbe:	4b43      	ldr	r3, [pc, #268]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	0549      	lsls	r1, r1, #21
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bc8:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	055b      	lsls	r3, r3, #21
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	0049      	lsls	r1, r1, #1
 8003be6:	430a      	orrs	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bea:	f7fd feb3 	bl	8001954 <HAL_GetTick>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fd feae 	bl	8001954 <HAL_GetTick>
 8003bf8:	0002      	movs	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d904      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003c02:	2313      	movs	r3, #19
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2203      	movs	r2, #3
 8003c08:	701a      	strb	r2, [r3, #0]
        break;
 8003c0a:	e005      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0c:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4013      	ands	r3, r2
 8003c16:	d0ed      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003c18:	2313      	movs	r3, #19
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d15e      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c22:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c26:	23c0      	movs	r3, #192	; 0xc0
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d019      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d014      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c3e:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c48:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c4e:	2180      	movs	r1, #128	; 0x80
 8003c50:	0249      	lsls	r1, r1, #9
 8003c52:	430a      	orrs	r2, r1
 8003c54:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c5c:	491e      	ldr	r1, [pc, #120]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003c5e:	400a      	ands	r2, r1
 8003c60:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d016      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fd fe70 	bl	8001954 <HAL_GetTick>
 8003c74:	0003      	movs	r3, r0
 8003c76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c78:	e00c      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd fe6b 	bl	8001954 <HAL_GetTick>
 8003c7e:	0002      	movs	r2, r0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d904      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003c8a:	2313      	movs	r3, #19
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	2203      	movs	r2, #3
 8003c90:	701a      	strb	r2, [r3, #0]
            break;
 8003c92:	e004      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	2202      	movs	r2, #2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d0ed      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c9e:	2313      	movs	r3, #19
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cbc:	e016      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cbe:	2312      	movs	r3, #18
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	2213      	movs	r2, #19
 8003cc4:	18ba      	adds	r2, r7, r2
 8003cc6:	7812      	ldrb	r2, [r2, #0]
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e00f      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	fffffcff 	.word	0xfffffcff
 8003cd8:	fffeffff 	.word	0xfffeffff
 8003cdc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	2312      	movs	r3, #18
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	2213      	movs	r2, #19
 8003ce6:	18ba      	adds	r2, r7, r2
 8003ce8:	7812      	ldrb	r2, [r2, #0]
 8003cea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cec:	2311      	movs	r3, #17
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4bb6      	ldr	r3, [pc, #728]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfa:	4bb5      	ldr	r3, [pc, #724]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cfc:	49b5      	ldr	r1, [pc, #724]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003cfe:	400a      	ands	r2, r1
 8003d00:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0c:	4bb0      	ldr	r3, [pc, #704]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	2203      	movs	r2, #3
 8003d12:	4393      	bics	r3, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	4bad      	ldr	r3, [pc, #692]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2202      	movs	r2, #2
 8003d26:	4013      	ands	r3, r2
 8003d28:	d009      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d2a:	4ba9      	ldr	r3, [pc, #676]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	220c      	movs	r2, #12
 8003d30:	4393      	bics	r3, r2
 8003d32:	0019      	movs	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4ba5      	ldr	r3, [pc, #660]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2204      	movs	r2, #4
 8003d44:	4013      	ands	r3, r2
 8003d46:	d009      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d48:	4ba1      	ldr	r3, [pc, #644]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4c:	2230      	movs	r2, #48	; 0x30
 8003d4e:	4393      	bics	r3, r2
 8003d50:	0019      	movs	r1, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	4b9e      	ldr	r3, [pc, #632]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2210      	movs	r2, #16
 8003d62:	4013      	ands	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d66:	4b9a      	ldr	r3, [pc, #616]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	4a9b      	ldr	r2, [pc, #620]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	0019      	movs	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	4b96      	ldr	r3, [pc, #600]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d76:	430a      	orrs	r2, r1
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	015b      	lsls	r3, r3, #5
 8003d82:	4013      	ands	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003d86:	4b92      	ldr	r3, [pc, #584]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	4a94      	ldr	r2, [pc, #592]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	0019      	movs	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	4b8e      	ldr	r3, [pc, #568]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d96:	430a      	orrs	r2, r1
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4013      	ands	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003da6:	4b8a      	ldr	r3, [pc, #552]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	4a8d      	ldr	r2, [pc, #564]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003db4:	4b86      	ldr	r3, [pc, #536]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003db6:	430a      	orrs	r2, r1
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d009      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dc6:	4b82      	ldr	r3, [pc, #520]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	4a86      	ldr	r2, [pc, #536]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	4b7e      	ldr	r3, [pc, #504]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2220      	movs	r2, #32
 8003de0:	4013      	ands	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003de4:	4b7a      	ldr	r3, [pc, #488]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	4a7f      	ldr	r2, [pc, #508]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	4b77      	ldr	r3, [pc, #476]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003df4:	430a      	orrs	r2, r1
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d009      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e02:	4b73      	ldr	r3, [pc, #460]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	4a79      	ldr	r2, [pc, #484]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	4b6f      	ldr	r3, [pc, #444]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e12:	430a      	orrs	r2, r1
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	01db      	lsls	r3, r3, #7
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d015      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e22:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	0899      	lsrs	r1, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2e:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e30:	430a      	orrs	r2, r1
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	05db      	lsls	r3, r3, #23
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003e40:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	4b62      	ldr	r3, [pc, #392]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e46:	2180      	movs	r1, #128	; 0x80
 8003e48:	0249      	lsls	r1, r1, #9
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	031b      	lsls	r3, r3, #12
 8003e56:	4013      	ands	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e5a:	4b5d      	ldr	r3, [pc, #372]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	2240      	movs	r2, #64	; 0x40
 8003e60:	4393      	bics	r3, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e68:	4b59      	ldr	r3, [pc, #356]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	039b      	lsls	r3, r3, #14
 8003e76:	4013      	ands	r3, r2
 8003e78:	d016      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e7a:	4b55      	ldr	r3, [pc, #340]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	4a5c      	ldr	r2, [pc, #368]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	0019      	movs	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e88:	4b51      	ldr	r3, [pc, #324]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	03db      	lsls	r3, r3, #15
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d106      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e9a:	4b4d      	ldr	r3, [pc, #308]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	4b4c      	ldr	r3, [pc, #304]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	0449      	lsls	r1, r1, #17
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	03db      	lsls	r3, r3, #15
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d016      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003eb4:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	4a4e      	ldr	r2, [pc, #312]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec2:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	045b      	lsls	r3, r3, #17
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ed4:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	0449      	lsls	r1, r1, #17
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	4013      	ands	r3, r2
 8003eec:	d014      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	4393      	bics	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003efe:	430a      	orrs	r2, r1
 8003f00:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d106      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f0a:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f10:	2180      	movs	r1, #128	; 0x80
 8003f12:	0249      	lsls	r1, r1, #9
 8003f14:	430a      	orrs	r2, r1
 8003f16:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	019b      	lsls	r3, r3, #6
 8003f20:	4013      	ands	r3, r2
 8003f22:	d014      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	220c      	movs	r2, #12
 8003f2a:	4393      	bics	r3, r2
 8003f2c:	0019      	movs	r1, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f32:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f46:	2180      	movs	r1, #128	; 0x80
 8003f48:	0249      	lsls	r1, r1, #9
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	045b      	lsls	r3, r3, #17
 8003f56:	4013      	ands	r3, r2
 8003f58:	d016      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	4a22      	ldr	r2, [pc, #136]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d106      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f80:	2180      	movs	r1, #128	; 0x80
 8003f82:	0449      	lsls	r1, r1, #17
 8003f84:	430a      	orrs	r2, r1
 8003f86:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	049b      	lsls	r3, r3, #18
 8003f90:	4013      	ands	r3, r2
 8003f92:	d016      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fba:	2180      	movs	r1, #128	; 0x80
 8003fbc:	0449      	lsls	r1, r1, #17
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003fc2:	2312      	movs	r3, #18
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	781b      	ldrb	r3, [r3, #0]
}
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b006      	add	sp, #24
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	efffffff 	.word	0xefffffff
 8003fd8:	fffff3ff 	.word	0xfffff3ff
 8003fdc:	fffffcff 	.word	0xfffffcff
 8003fe0:	fff3ffff 	.word	0xfff3ffff
 8003fe4:	ffcfffff 	.word	0xffcfffff
 8003fe8:	ffffcfff 	.word	0xffffcfff
 8003fec:	ffff3fff 	.word	0xffff3fff
 8003ff0:	ffbfffff 	.word	0xffbfffff
 8003ff4:	feffffff 	.word	0xfeffffff

08003ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e04a      	b.n	80040a0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	223d      	movs	r2, #61	; 0x3d
 800400e:	5c9b      	ldrb	r3, [r3, r2]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d107      	bne.n	8004026 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	223c      	movs	r2, #60	; 0x3c
 800401a:	2100      	movs	r1, #0
 800401c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f7fd fb13 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	223d      	movs	r2, #61	; 0x3d
 800402a:	2102      	movs	r1, #2
 800402c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	0019      	movs	r1, r3
 8004038:	0010      	movs	r0, r2
 800403a:	f000 fb5b 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2248      	movs	r2, #72	; 0x48
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	223e      	movs	r2, #62	; 0x3e
 800404a:	2101      	movs	r1, #1
 800404c:	5499      	strb	r1, [r3, r2]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	223f      	movs	r2, #63	; 0x3f
 8004052:	2101      	movs	r1, #1
 8004054:	5499      	strb	r1, [r3, r2]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2240      	movs	r2, #64	; 0x40
 800405a:	2101      	movs	r1, #1
 800405c:	5499      	strb	r1, [r3, r2]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2241      	movs	r2, #65	; 0x41
 8004062:	2101      	movs	r1, #1
 8004064:	5499      	strb	r1, [r3, r2]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2242      	movs	r2, #66	; 0x42
 800406a:	2101      	movs	r1, #1
 800406c:	5499      	strb	r1, [r3, r2]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2243      	movs	r2, #67	; 0x43
 8004072:	2101      	movs	r1, #1
 8004074:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2244      	movs	r2, #68	; 0x44
 800407a:	2101      	movs	r1, #1
 800407c:	5499      	strb	r1, [r3, r2]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2245      	movs	r2, #69	; 0x45
 8004082:	2101      	movs	r1, #1
 8004084:	5499      	strb	r1, [r3, r2]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2246      	movs	r2, #70	; 0x46
 800408a:	2101      	movs	r1, #1
 800408c:	5499      	strb	r1, [r3, r2]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2247      	movs	r2, #71	; 0x47
 8004092:	2101      	movs	r1, #1
 8004094:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	223d      	movs	r2, #61	; 0x3d
 800409a:	2101      	movs	r1, #1
 800409c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b002      	add	sp, #8
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e04a      	b.n	8004150 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	223d      	movs	r2, #61	; 0x3d
 80040be:	5c9b      	ldrb	r3, [r3, r2]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	223c      	movs	r2, #60	; 0x3c
 80040ca:	2100      	movs	r1, #0
 80040cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f000 f841 	bl	8004158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	223d      	movs	r2, #61	; 0x3d
 80040da:	2102      	movs	r1, #2
 80040dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	0019      	movs	r1, r3
 80040e8:	0010      	movs	r0, r2
 80040ea:	f000 fb03 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2248      	movs	r2, #72	; 0x48
 80040f2:	2101      	movs	r1, #1
 80040f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	223e      	movs	r2, #62	; 0x3e
 80040fa:	2101      	movs	r1, #1
 80040fc:	5499      	strb	r1, [r3, r2]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	223f      	movs	r2, #63	; 0x3f
 8004102:	2101      	movs	r1, #1
 8004104:	5499      	strb	r1, [r3, r2]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2240      	movs	r2, #64	; 0x40
 800410a:	2101      	movs	r1, #1
 800410c:	5499      	strb	r1, [r3, r2]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2241      	movs	r2, #65	; 0x41
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2242      	movs	r2, #66	; 0x42
 800411a:	2101      	movs	r1, #1
 800411c:	5499      	strb	r1, [r3, r2]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2243      	movs	r2, #67	; 0x43
 8004122:	2101      	movs	r1, #1
 8004124:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2244      	movs	r2, #68	; 0x44
 800412a:	2101      	movs	r1, #1
 800412c:	5499      	strb	r1, [r3, r2]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2245      	movs	r2, #69	; 0x45
 8004132:	2101      	movs	r1, #1
 8004134:	5499      	strb	r1, [r3, r2]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2246      	movs	r2, #70	; 0x46
 800413a:	2101      	movs	r1, #1
 800413c:	5499      	strb	r1, [r3, r2]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2247      	movs	r2, #71	; 0x47
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	223d      	movs	r2, #61	; 0x3d
 800414a:	2101      	movs	r1, #1
 800414c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d108      	bne.n	800418a <HAL_TIM_PWM_Start+0x22>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	223e      	movs	r2, #62	; 0x3e
 800417c:	5c9b      	ldrb	r3, [r3, r2]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	1e5a      	subs	r2, r3, #1
 8004184:	4193      	sbcs	r3, r2
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e037      	b.n	80041fa <HAL_TIM_PWM_Start+0x92>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d108      	bne.n	80041a2 <HAL_TIM_PWM_Start+0x3a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	223f      	movs	r2, #63	; 0x3f
 8004194:	5c9b      	ldrb	r3, [r3, r2]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	1e5a      	subs	r2, r3, #1
 800419c:	4193      	sbcs	r3, r2
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	e02b      	b.n	80041fa <HAL_TIM_PWM_Start+0x92>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d108      	bne.n	80041ba <HAL_TIM_PWM_Start+0x52>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	5c9b      	ldrb	r3, [r3, r2]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	1e5a      	subs	r2, r3, #1
 80041b4:	4193      	sbcs	r3, r2
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e01f      	b.n	80041fa <HAL_TIM_PWM_Start+0x92>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	d108      	bne.n	80041d2 <HAL_TIM_PWM_Start+0x6a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2241      	movs	r2, #65	; 0x41
 80041c4:	5c9b      	ldrb	r3, [r3, r2]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	1e5a      	subs	r2, r3, #1
 80041cc:	4193      	sbcs	r3, r2
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	e013      	b.n	80041fa <HAL_TIM_PWM_Start+0x92>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b10      	cmp	r3, #16
 80041d6:	d108      	bne.n	80041ea <HAL_TIM_PWM_Start+0x82>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2242      	movs	r2, #66	; 0x42
 80041dc:	5c9b      	ldrb	r3, [r3, r2]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	1e5a      	subs	r2, r3, #1
 80041e4:	4193      	sbcs	r3, r2
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	e007      	b.n	80041fa <HAL_TIM_PWM_Start+0x92>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2243      	movs	r2, #67	; 0x43
 80041ee:	5c9b      	ldrb	r3, [r3, r2]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	1e5a      	subs	r2, r3, #1
 80041f6:	4193      	sbcs	r3, r2
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e090      	b.n	8004324 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d104      	bne.n	8004212 <HAL_TIM_PWM_Start+0xaa>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	223e      	movs	r2, #62	; 0x3e
 800420c:	2102      	movs	r1, #2
 800420e:	5499      	strb	r1, [r3, r2]
 8004210:	e023      	b.n	800425a <HAL_TIM_PWM_Start+0xf2>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d104      	bne.n	8004222 <HAL_TIM_PWM_Start+0xba>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	223f      	movs	r2, #63	; 0x3f
 800421c:	2102      	movs	r1, #2
 800421e:	5499      	strb	r1, [r3, r2]
 8004220:	e01b      	b.n	800425a <HAL_TIM_PWM_Start+0xf2>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d104      	bne.n	8004232 <HAL_TIM_PWM_Start+0xca>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2240      	movs	r2, #64	; 0x40
 800422c:	2102      	movs	r1, #2
 800422e:	5499      	strb	r1, [r3, r2]
 8004230:	e013      	b.n	800425a <HAL_TIM_PWM_Start+0xf2>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b0c      	cmp	r3, #12
 8004236:	d104      	bne.n	8004242 <HAL_TIM_PWM_Start+0xda>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2241      	movs	r2, #65	; 0x41
 800423c:	2102      	movs	r1, #2
 800423e:	5499      	strb	r1, [r3, r2]
 8004240:	e00b      	b.n	800425a <HAL_TIM_PWM_Start+0xf2>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b10      	cmp	r3, #16
 8004246:	d104      	bne.n	8004252 <HAL_TIM_PWM_Start+0xea>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2242      	movs	r2, #66	; 0x42
 800424c:	2102      	movs	r1, #2
 800424e:	5499      	strb	r1, [r3, r2]
 8004250:	e003      	b.n	800425a <HAL_TIM_PWM_Start+0xf2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2243      	movs	r2, #67	; 0x43
 8004256:	2102      	movs	r1, #2
 8004258:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	0018      	movs	r0, r3
 8004264:	f000 fe30 	bl	8004ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2f      	ldr	r2, [pc, #188]	; (800432c <HAL_TIM_PWM_Start+0x1c4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_TIM_PWM_Start+0x128>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <HAL_TIM_PWM_Start+0x1c8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_TIM_PWM_Start+0x128>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2c      	ldr	r2, [pc, #176]	; (8004334 <HAL_TIM_PWM_Start+0x1cc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_TIM_PWM_Start+0x128>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2b      	ldr	r2, [pc, #172]	; (8004338 <HAL_TIM_PWM_Start+0x1d0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d101      	bne.n	8004294 <HAL_TIM_PWM_Start+0x12c>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_TIM_PWM_Start+0x12e>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	0209      	lsls	r1, r1, #8
 80042a8:	430a      	orrs	r2, r1
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1e      	ldr	r2, [pc, #120]	; (800432c <HAL_TIM_PWM_Start+0x1c4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d014      	beq.n	80042e0 <HAL_TIM_PWM_Start+0x178>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	05db      	lsls	r3, r3, #23
 80042be:	429a      	cmp	r2, r3
 80042c0:	d00e      	beq.n	80042e0 <HAL_TIM_PWM_Start+0x178>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_TIM_PWM_Start+0x1d4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_TIM_PWM_Start+0x178>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <HAL_TIM_PWM_Start+0x1d8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_TIM_PWM_Start+0x178>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a15      	ldr	r2, [pc, #84]	; (8004330 <HAL_TIM_PWM_Start+0x1c8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d116      	bne.n	800430e <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	4a17      	ldr	r2, [pc, #92]	; (8004344 <HAL_TIM_PWM_Start+0x1dc>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d016      	beq.n	8004320 <HAL_TIM_PWM_Start+0x1b8>
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d011      	beq.n	8004320 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430c:	e008      	b.n	8004320 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2101      	movs	r1, #1
 800431a:	430a      	orrs	r2, r1
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e000      	b.n	8004322 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004320:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40014000 	.word	0x40014000
 8004334:	40014400 	.word	0x40014400
 8004338:	40014800 	.word	0x40014800
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	00010007 	.word	0x00010007

08004348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2317      	movs	r3, #23
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	223c      	movs	r2, #60	; 0x3c
 8004360:	5c9b      	ldrb	r3, [r3, r2]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004366:	2302      	movs	r3, #2
 8004368:	e0e5      	b.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	223c      	movs	r2, #60	; 0x3c
 800436e:	2101      	movs	r1, #1
 8004370:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b14      	cmp	r3, #20
 8004376:	d900      	bls.n	800437a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004378:	e0d1      	b.n	800451e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	009a      	lsls	r2, r3, #2
 800437e:	4b70      	ldr	r3, [pc, #448]	; (8004540 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004380:	18d3      	adds	r3, r2, r3
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	0011      	movs	r1, r2
 800438e:	0018      	movs	r0, r3
 8004390:	f000 fa3a 	bl	8004808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2108      	movs	r1, #8
 80043a0:	430a      	orrs	r2, r1
 80043a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2104      	movs	r1, #4
 80043b0:	438a      	bics	r2, r1
 80043b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6999      	ldr	r1, [r3, #24]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	619a      	str	r2, [r3, #24]
      break;
 80043c6:	e0af      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	0011      	movs	r1, r2
 80043d0:	0018      	movs	r0, r3
 80043d2:	f000 faa3 	bl	800491c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2180      	movs	r1, #128	; 0x80
 80043e2:	0109      	lsls	r1, r1, #4
 80043e4:	430a      	orrs	r2, r1
 80043e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4954      	ldr	r1, [pc, #336]	; (8004544 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80043f4:	400a      	ands	r2, r1
 80043f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6999      	ldr	r1, [r3, #24]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	021a      	lsls	r2, r3, #8
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	619a      	str	r2, [r3, #24]
      break;
 800440c:	e08c      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	0011      	movs	r1, r2
 8004416:	0018      	movs	r0, r3
 8004418:	f000 fb04 	bl	8004a24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2108      	movs	r1, #8
 8004428:	430a      	orrs	r2, r1
 800442a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2104      	movs	r1, #4
 8004438:	438a      	bics	r2, r1
 800443a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69d9      	ldr	r1, [r3, #28]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	61da      	str	r2, [r3, #28]
      break;
 800444e:	e06b      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	0011      	movs	r1, r2
 8004458:	0018      	movs	r0, r3
 800445a:	f000 fb6b 	bl	8004b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	0109      	lsls	r1, r1, #4
 800446c:	430a      	orrs	r2, r1
 800446e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4932      	ldr	r1, [pc, #200]	; (8004544 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800447c:	400a      	ands	r2, r1
 800447e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69d9      	ldr	r1, [r3, #28]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	021a      	lsls	r2, r3, #8
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	61da      	str	r2, [r3, #28]
      break;
 8004494:	e048      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	0011      	movs	r1, r2
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 fbb2 	bl	8004c08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2108      	movs	r1, #8
 80044b0:	430a      	orrs	r2, r1
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2104      	movs	r1, #4
 80044c0:	438a      	bics	r2, r1
 80044c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044d6:	e027      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	0011      	movs	r1, r2
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 fbf1 	bl	8004cc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2180      	movs	r1, #128	; 0x80
 80044f2:	0109      	lsls	r1, r1, #4
 80044f4:	430a      	orrs	r2, r1
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4910      	ldr	r1, [pc, #64]	; (8004544 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004504:	400a      	ands	r2, r1
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800451c:	e004      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800451e:	2317      	movs	r3, #23
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	2201      	movs	r2, #1
 8004524:	701a      	strb	r2, [r3, #0]
      break;
 8004526:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	223c      	movs	r2, #60	; 0x3c
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

  return status;
 8004530:	2317      	movs	r3, #23
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	781b      	ldrb	r3, [r3, #0]
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b006      	add	sp, #24
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	08005edc 	.word	0x08005edc
 8004544:	fffffbff 	.word	0xfffffbff

08004548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	230f      	movs	r3, #15
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	223c      	movs	r2, #60	; 0x3c
 800455e:	5c9b      	ldrb	r3, [r3, r2]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIM_ConfigClockSource+0x20>
 8004564:	2302      	movs	r3, #2
 8004566:	e0bc      	b.n	80046e2 <HAL_TIM_ConfigClockSource+0x19a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	223c      	movs	r2, #60	; 0x3c
 800456c:	2101      	movs	r1, #1
 800456e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	223d      	movs	r2, #61	; 0x3d
 8004574:	2102      	movs	r1, #2
 8004576:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4a5a      	ldr	r2, [pc, #360]	; (80046ec <HAL_TIM_ConfigClockSource+0x1a4>)
 8004584:	4013      	ands	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a59      	ldr	r2, [pc, #356]	; (80046f0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	0192      	lsls	r2, r2, #6
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d040      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0xde>
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	0192      	lsls	r2, r2, #6
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d900      	bls.n	80045ae <HAL_TIM_ConfigClockSource+0x66>
 80045ac:	e088      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045ae:	2280      	movs	r2, #128	; 0x80
 80045b0:	0152      	lsls	r2, r2, #5
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d100      	bne.n	80045b8 <HAL_TIM_ConfigClockSource+0x70>
 80045b6:	e088      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x182>
 80045b8:	2280      	movs	r2, #128	; 0x80
 80045ba:	0152      	lsls	r2, r2, #5
 80045bc:	4293      	cmp	r3, r2
 80045be:	d900      	bls.n	80045c2 <HAL_TIM_ConfigClockSource+0x7a>
 80045c0:	e07e      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045c2:	2b70      	cmp	r3, #112	; 0x70
 80045c4:	d018      	beq.n	80045f8 <HAL_TIM_ConfigClockSource+0xb0>
 80045c6:	d900      	bls.n	80045ca <HAL_TIM_ConfigClockSource+0x82>
 80045c8:	e07a      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045ca:	2b60      	cmp	r3, #96	; 0x60
 80045cc:	d04f      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x126>
 80045ce:	d900      	bls.n	80045d2 <HAL_TIM_ConfigClockSource+0x8a>
 80045d0:	e076      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045d2:	2b50      	cmp	r3, #80	; 0x50
 80045d4:	d03b      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x106>
 80045d6:	d900      	bls.n	80045da <HAL_TIM_ConfigClockSource+0x92>
 80045d8:	e072      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d057      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x146>
 80045de:	d900      	bls.n	80045e2 <HAL_TIM_ConfigClockSource+0x9a>
 80045e0:	e06e      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045e2:	2b30      	cmp	r3, #48	; 0x30
 80045e4:	d063      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x166>
 80045e6:	d86b      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d060      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x166>
 80045ec:	d868      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d05d      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x166>
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d05b      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x166>
 80045f6:	e063      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6899      	ldr	r1, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f000 fc3e 	bl	8004e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2277      	movs	r2, #119	; 0x77
 8004618:	4313      	orrs	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	609a      	str	r2, [r3, #8]
      break;
 8004624:	e052      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6899      	ldr	r1, [r3, #8]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f000 fc27 	bl	8004e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2180      	movs	r1, #128	; 0x80
 8004646:	01c9      	lsls	r1, r1, #7
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]
      break;
 800464c:	e03e      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	001a      	movs	r2, r3
 800465c:	f000 fb98 	bl	8004d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2150      	movs	r1, #80	; 0x50
 8004666:	0018      	movs	r0, r3
 8004668:	f000 fbf2 	bl	8004e50 <TIM_ITRx_SetConfig>
      break;
 800466c:	e02e      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	001a      	movs	r2, r3
 800467c:	f000 fbb6 	bl	8004dec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2160      	movs	r1, #96	; 0x60
 8004686:	0018      	movs	r0, r3
 8004688:	f000 fbe2 	bl	8004e50 <TIM_ITRx_SetConfig>
      break;
 800468c:	e01e      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	001a      	movs	r2, r3
 800469c:	f000 fb78 	bl	8004d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2140      	movs	r1, #64	; 0x40
 80046a6:	0018      	movs	r0, r3
 80046a8:	f000 fbd2 	bl	8004e50 <TIM_ITRx_SetConfig>
      break;
 80046ac:	e00e      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	0019      	movs	r1, r3
 80046b8:	0010      	movs	r0, r2
 80046ba:	f000 fbc9 	bl	8004e50 <TIM_ITRx_SetConfig>
      break;
 80046be:	e005      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046c0:	230f      	movs	r3, #15
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	2201      	movs	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
      break;
 80046c8:	e000      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046ca:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	223d      	movs	r2, #61	; 0x3d
 80046d0:	2101      	movs	r1, #1
 80046d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	223c      	movs	r2, #60	; 0x3c
 80046d8:	2100      	movs	r1, #0
 80046da:	5499      	strb	r1, [r3, r2]

  return status;
 80046dc:	230f      	movs	r3, #15
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	781b      	ldrb	r3, [r3, #0]
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	ffceff88 	.word	0xffceff88
 80046f0:	ffff00ff 	.word	0xffff00ff

080046f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a38      	ldr	r2, [pc, #224]	; (80047e8 <TIM_Base_SetConfig+0xf4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00c      	beq.n	8004726 <TIM_Base_SetConfig+0x32>
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	05db      	lsls	r3, r3, #23
 8004712:	429a      	cmp	r2, r3
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x32>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a34      	ldr	r2, [pc, #208]	; (80047ec <TIM_Base_SetConfig+0xf8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x32>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a33      	ldr	r2, [pc, #204]	; (80047f0 <TIM_Base_SetConfig+0xfc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2270      	movs	r2, #112	; 0x70
 800472a:	4393      	bics	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a2b      	ldr	r2, [pc, #172]	; (80047e8 <TIM_Base_SetConfig+0xf4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01c      	beq.n	800477a <TIM_Base_SetConfig+0x86>
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	05db      	lsls	r3, r3, #23
 8004746:	429a      	cmp	r2, r3
 8004748:	d017      	beq.n	800477a <TIM_Base_SetConfig+0x86>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a27      	ldr	r2, [pc, #156]	; (80047ec <TIM_Base_SetConfig+0xf8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <TIM_Base_SetConfig+0x86>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <TIM_Base_SetConfig+0xfc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_Base_SetConfig+0x86>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <TIM_Base_SetConfig+0x100>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_Base_SetConfig+0x86>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a24      	ldr	r2, [pc, #144]	; (80047f8 <TIM_Base_SetConfig+0x104>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_Base_SetConfig+0x86>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <TIM_Base_SetConfig+0x108>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_Base_SetConfig+0x86>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a22      	ldr	r2, [pc, #136]	; (8004800 <TIM_Base_SetConfig+0x10c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d108      	bne.n	800478c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <TIM_Base_SetConfig+0x110>)
 800477e:	4013      	ands	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	4393      	bics	r3, r2
 8004792:	001a      	movs	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a0c      	ldr	r2, [pc, #48]	; (80047e8 <TIM_Base_SetConfig+0xf4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00b      	beq.n	80047d2 <TIM_Base_SetConfig+0xde>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a0e      	ldr	r2, [pc, #56]	; (80047f8 <TIM_Base_SetConfig+0x104>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d007      	beq.n	80047d2 <TIM_Base_SetConfig+0xde>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a0d      	ldr	r2, [pc, #52]	; (80047fc <TIM_Base_SetConfig+0x108>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d003      	beq.n	80047d2 <TIM_Base_SetConfig+0xde>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <TIM_Base_SetConfig+0x10c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d103      	bne.n	80047da <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	615a      	str	r2, [r3, #20]
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b004      	add	sp, #16
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40002000 	.word	0x40002000
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800
 8004804:	fffffcff 	.word	0xfffffcff

08004808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	2201      	movs	r2, #1
 8004818:	4393      	bics	r3, r2
 800481a:	001a      	movs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a32      	ldr	r2, [pc, #200]	; (8004900 <TIM_OC1_SetConfig+0xf8>)
 8004836:	4013      	ands	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2203      	movs	r2, #3
 800483e:	4393      	bics	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2202      	movs	r2, #2
 8004850:	4393      	bics	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a28      	ldr	r2, [pc, #160]	; (8004904 <TIM_OC1_SetConfig+0xfc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00b      	beq.n	800487e <TIM_OC1_SetConfig+0x76>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a27      	ldr	r2, [pc, #156]	; (8004908 <TIM_OC1_SetConfig+0x100>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <TIM_OC1_SetConfig+0x76>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <TIM_OC1_SetConfig+0x104>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC1_SetConfig+0x76>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <TIM_OC1_SetConfig+0x108>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10c      	bne.n	8004898 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2208      	movs	r2, #8
 8004882:	4393      	bics	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2204      	movs	r2, #4
 8004894:	4393      	bics	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a1a      	ldr	r2, [pc, #104]	; (8004904 <TIM_OC1_SetConfig+0xfc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00b      	beq.n	80048b8 <TIM_OC1_SetConfig+0xb0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a19      	ldr	r2, [pc, #100]	; (8004908 <TIM_OC1_SetConfig+0x100>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <TIM_OC1_SetConfig+0xb0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <TIM_OC1_SetConfig+0x104>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_OC1_SetConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a17      	ldr	r2, [pc, #92]	; (8004910 <TIM_OC1_SetConfig+0x108>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d111      	bne.n	80048dc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4a16      	ldr	r2, [pc, #88]	; (8004914 <TIM_OC1_SetConfig+0x10c>)
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <TIM_OC1_SetConfig+0x110>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b006      	add	sp, #24
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	fffeff8f 	.word	0xfffeff8f
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800
 8004914:	fffffeff 	.word	0xfffffeff
 8004918:	fffffdff 	.word	0xfffffdff

0800491c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	2210      	movs	r2, #16
 800492c:	4393      	bics	r3, r2
 800492e:	001a      	movs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a2e      	ldr	r2, [pc, #184]	; (8004a04 <TIM_OC2_SetConfig+0xe8>)
 800494a:	4013      	ands	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <TIM_OC2_SetConfig+0xec>)
 8004952:	4013      	ands	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2220      	movs	r2, #32
 8004966:	4393      	bics	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <TIM_OC2_SetConfig+0xf0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d10d      	bne.n	800499a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	4393      	bics	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2240      	movs	r2, #64	; 0x40
 8004996:	4393      	bics	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1b      	ldr	r2, [pc, #108]	; (8004a0c <TIM_OC2_SetConfig+0xf0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <TIM_OC2_SetConfig+0x9e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1a      	ldr	r2, [pc, #104]	; (8004a10 <TIM_OC2_SetConfig+0xf4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <TIM_OC2_SetConfig+0x9e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <TIM_OC2_SetConfig+0xf8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_OC2_SetConfig+0x9e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <TIM_OC2_SetConfig+0xfc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d113      	bne.n	80049e2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <TIM_OC2_SetConfig+0x100>)
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <TIM_OC2_SetConfig+0x104>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	621a      	str	r2, [r3, #32]
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b006      	add	sp, #24
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	feff8fff 	.word	0xfeff8fff
 8004a08:	fffffcff 	.word	0xfffffcff
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800
 8004a1c:	fffffbff 	.word	0xfffffbff
 8004a20:	fffff7ff 	.word	0xfffff7ff

08004a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	4a35      	ldr	r2, [pc, #212]	; (8004b08 <TIM_OC3_SetConfig+0xe4>)
 8004a34:	401a      	ands	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <TIM_OC3_SetConfig+0xe8>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2203      	movs	r2, #3
 8004a58:	4393      	bics	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <TIM_OC3_SetConfig+0xec>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <TIM_OC3_SetConfig+0xf0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10d      	bne.n	8004a9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	4a24      	ldr	r2, [pc, #144]	; (8004b18 <TIM_OC3_SetConfig+0xf4>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	4a20      	ldr	r2, [pc, #128]	; (8004b1c <TIM_OC3_SetConfig+0xf8>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <TIM_OC3_SetConfig+0xf0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_OC3_SetConfig+0x9a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <TIM_OC3_SetConfig+0xfc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_OC3_SetConfig+0x9a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <TIM_OC3_SetConfig+0x100>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_OC3_SetConfig+0x9a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <TIM_OC3_SetConfig+0x104>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d113      	bne.n	8004ae6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4a1a      	ldr	r2, [pc, #104]	; (8004b2c <TIM_OC3_SetConfig+0x108>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4a19      	ldr	r2, [pc, #100]	; (8004b30 <TIM_OC3_SetConfig+0x10c>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	621a      	str	r2, [r3, #32]
}
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b006      	add	sp, #24
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	fffffeff 	.word	0xfffffeff
 8004b0c:	fffeff8f 	.word	0xfffeff8f
 8004b10:	fffffdff 	.word	0xfffffdff
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	fffff7ff 	.word	0xfffff7ff
 8004b1c:	fffffbff 	.word	0xfffffbff
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800
 8004b2c:	ffffefff 	.word	0xffffefff
 8004b30:	ffffdfff 	.word	0xffffdfff

08004b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <TIM_OC4_SetConfig+0xb0>)
 8004b44:	401a      	ands	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <TIM_OC4_SetConfig+0xb4>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <TIM_OC4_SetConfig+0xb8>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <TIM_OC4_SetConfig+0xbc>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	031b      	lsls	r3, r3, #12
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <TIM_OC4_SetConfig+0xc0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_OC4_SetConfig+0x78>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <TIM_OC4_SetConfig+0xc4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_OC4_SetConfig+0x78>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <TIM_OC4_SetConfig+0xc8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_OC4_SetConfig+0x78>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <TIM_OC4_SetConfig+0xcc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d109      	bne.n	8004bc0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <TIM_OC4_SetConfig+0xd0>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	019b      	lsls	r3, r3, #6
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b006      	add	sp, #24
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	ffffefff 	.word	0xffffefff
 8004be8:	feff8fff 	.word	0xfeff8fff
 8004bec:	fffffcff 	.word	0xfffffcff
 8004bf0:	ffffdfff 	.word	0xffffdfff
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	ffffbfff 	.word	0xffffbfff

08004c08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	4a25      	ldr	r2, [pc, #148]	; (8004cac <TIM_OC5_SetConfig+0xa4>)
 8004c18:	401a      	ands	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <TIM_OC5_SetConfig+0xa8>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <TIM_OC5_SetConfig+0xac>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <TIM_OC5_SetConfig+0xb0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00b      	beq.n	8004c76 <TIM_OC5_SetConfig+0x6e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <TIM_OC5_SetConfig+0xb4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d007      	beq.n	8004c76 <TIM_OC5_SetConfig+0x6e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <TIM_OC5_SetConfig+0xb8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d003      	beq.n	8004c76 <TIM_OC5_SetConfig+0x6e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <TIM_OC5_SetConfig+0xbc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d109      	bne.n	8004c8a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4a0c      	ldr	r2, [pc, #48]	; (8004cac <TIM_OC5_SetConfig+0xa4>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	621a      	str	r2, [r3, #32]
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b006      	add	sp, #24
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	fffeffff 	.word	0xfffeffff
 8004cb0:	fffeff8f 	.word	0xfffeff8f
 8004cb4:	fffdffff 	.word	0xfffdffff
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800

08004cc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <TIM_OC6_SetConfig+0xa8>)
 8004cd8:	401a      	ands	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a20      	ldr	r2, [pc, #128]	; (8004d74 <TIM_OC6_SetConfig+0xac>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <TIM_OC6_SetConfig+0xb0>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	051b      	lsls	r3, r3, #20
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <TIM_OC6_SetConfig+0xb4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <TIM_OC6_SetConfig+0x70>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <TIM_OC6_SetConfig+0xb8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_OC6_SetConfig+0x70>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <TIM_OC6_SetConfig+0xbc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC6_SetConfig+0x70>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <TIM_OC6_SetConfig+0xc0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d109      	bne.n	8004d4c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <TIM_OC6_SetConfig+0xc4>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	029b      	lsls	r3, r3, #10
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b006      	add	sp, #24
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	ffefffff 	.word	0xffefffff
 8004d74:	feff8fff 	.word	0xfeff8fff
 8004d78:	ffdfffff 	.word	0xffdfffff
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800
 8004d8c:	fffbffff 	.word	0xfffbffff

08004d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	2201      	movs	r2, #1
 8004da8:	4393      	bics	r3, r2
 8004daa:	001a      	movs	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	22f0      	movs	r2, #240	; 0xf0
 8004dba:	4393      	bics	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	220a      	movs	r2, #10
 8004dcc:	4393      	bics	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b006      	add	sp, #24
 8004dea:	bd80      	pop	{r7, pc}

08004dec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	2210      	movs	r2, #16
 8004dfe:	4393      	bics	r3, r2
 8004e00:	001a      	movs	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <TIM_TI2_ConfigInputStage+0x60>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	031b      	lsls	r3, r3, #12
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	22a0      	movs	r2, #160	; 0xa0
 8004e28:	4393      	bics	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b006      	add	sp, #24
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	ffff0fff 	.word	0xffff0fff

08004e50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <TIM_ITRx_SetConfig+0x34>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	2207      	movs	r2, #7
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	609a      	str	r2, [r3, #8]
}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b004      	add	sp, #16
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	ffcfff8f 	.word	0xffcfff8f

08004e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <TIM_ETR_SetConfig+0x3c>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	021a      	lsls	r2, r3, #8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	609a      	str	r2, [r3, #8]
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b006      	add	sp, #24
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	ffff00ff 	.word	0xffff00ff

08004ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	221f      	movs	r2, #31
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2201      	movs	r2, #1
 8004edc:	409a      	lsls	r2, r3
 8004ede:	0013      	movs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	43d2      	mvns	r2, r2
 8004eea:	401a      	ands	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1a      	ldr	r2, [r3, #32]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	211f      	movs	r1, #31
 8004ef8:	400b      	ands	r3, r1
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4099      	lsls	r1, r3
 8004efe:	000b      	movs	r3, r1
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b006      	add	sp, #24
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	223c      	movs	r2, #60	; 0x3c
 8004f1e:	5c9b      	ldrb	r3, [r3, r2]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e05a      	b.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	223c      	movs	r2, #60	; 0x3c
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	223d      	movs	r2, #61	; 0x3d
 8004f34:	2102      	movs	r1, #2
 8004f36:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d108      	bne.n	8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a25      	ldr	r2, [pc, #148]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2270      	movs	r2, #112	; 0x70
 8004f68:	4393      	bics	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d014      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	05db      	lsls	r3, r3, #23
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d00e      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10c      	bne.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2280      	movs	r2, #128	; 0x80
 8004fb6:	4393      	bics	r3, r2
 8004fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	223d      	movs	r2, #61	; 0x3d
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	223c      	movs	r2, #60	; 0x3c
 8004fd8:	2100      	movs	r1, #0
 8004fda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b004      	add	sp, #16
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	ff0fffff 	.word	0xff0fffff
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40014000 	.word	0x40014000

08004ffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	223c      	movs	r2, #60	; 0x3c
 800500e:	5c9b      	ldrb	r3, [r3, r2]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005014:	2302      	movs	r3, #2
 8005016:	e079      	b.n	800510c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	223c      	movs	r2, #60	; 0x3c
 800501c:	2101      	movs	r1, #1
 800501e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	22ff      	movs	r2, #255	; 0xff
 8005024:	4393      	bics	r3, r2
 8005026:	001a      	movs	r2, r3
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a38      	ldr	r2, [pc, #224]	; (8005114 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005034:	401a      	ands	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a35      	ldr	r2, [pc, #212]	; (8005118 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005042:	401a      	ands	r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4a33      	ldr	r2, [pc, #204]	; (800511c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005050:	401a      	ands	r2, r3
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a30      	ldr	r2, [pc, #192]	; (8005120 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800505e:	401a      	ands	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a2e      	ldr	r2, [pc, #184]	; (8005124 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800506c:	401a      	ands	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4a2b      	ldr	r2, [pc, #172]	; (8005128 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800507a:	401a      	ands	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a29      	ldr	r2, [pc, #164]	; (800512c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005088:	401a      	ands	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	041b      	lsls	r3, r3, #16
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a25      	ldr	r2, [pc, #148]	; (8005130 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d106      	bne.n	80050ac <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a24      	ldr	r2, [pc, #144]	; (8005134 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80050a2:	401a      	ands	r2, r3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d121      	bne.n	80050fa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80050ba:	401a      	ands	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	051b      	lsls	r3, r3, #20
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a1c      	ldr	r2, [pc, #112]	; (800513c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80050ca:	401a      	ands	r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a1a      	ldr	r2, [pc, #104]	; (8005140 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80050d8:	401a      	ands	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a12      	ldr	r2, [pc, #72]	; (8005130 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d106      	bne.n	80050fa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a15      	ldr	r2, [pc, #84]	; (8005144 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80050f0:	401a      	ands	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	223c      	movs	r2, #60	; 0x3c
 8005106:	2100      	movs	r1, #0
 8005108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	0018      	movs	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	b004      	add	sp, #16
 8005112:	bd80      	pop	{r7, pc}
 8005114:	fffffcff 	.word	0xfffffcff
 8005118:	fffffbff 	.word	0xfffffbff
 800511c:	fffff7ff 	.word	0xfffff7ff
 8005120:	ffffefff 	.word	0xffffefff
 8005124:	ffffdfff 	.word	0xffffdfff
 8005128:	ffffbfff 	.word	0xffffbfff
 800512c:	fff0ffff 	.word	0xfff0ffff
 8005130:	40012c00 	.word	0x40012c00
 8005134:	efffffff 	.word	0xefffffff
 8005138:	ff0fffff 	.word	0xff0fffff
 800513c:	feffffff 	.word	0xfeffffff
 8005140:	fdffffff 	.word	0xfdffffff
 8005144:	dfffffff 	.word	0xdfffffff

08005148 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 800514c:	201e      	movs	r0, #30
 800514e:	f7fc fc0b 	bl	8001968 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8005152:	23a0      	movs	r3, #160	; 0xa0
 8005154:	05db      	lsls	r3, r3, #23
 8005156:	2200      	movs	r2, #0
 8005158:	2104      	movs	r1, #4
 800515a:	0018      	movs	r0, r3
 800515c:	f7fd ff94 	bl	8003088 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8005160:	23a0      	movs	r3, #160	; 0xa0
 8005162:	05db      	lsls	r3, r3, #23
 8005164:	2201      	movs	r2, #1
 8005166:	2108      	movs	r1, #8
 8005168:	0018      	movs	r0, r3
 800516a:	f7fd ff8d 	bl	8003088 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 800516e:	23a0      	movs	r3, #160	; 0xa0
 8005170:	05db      	lsls	r3, r3, #23
 8005172:	2200      	movs	r2, #0
 8005174:	2110      	movs	r1, #16
 8005176:	0018      	movs	r0, r3
 8005178:	f7fd ff86 	bl	8003088 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 800517c:	23a0      	movs	r3, #160	; 0xa0
 800517e:	05db      	lsls	r3, r3, #23
 8005180:	2200      	movs	r2, #0
 8005182:	2120      	movs	r1, #32
 8005184:	0018      	movs	r0, r3
 8005186:	f7fd ff7f 	bl	8003088 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 800518a:	23a0      	movs	r3, #160	; 0xa0
 800518c:	05db      	lsls	r3, r3, #23
 800518e:	2200      	movs	r2, #0
 8005190:	2101      	movs	r1, #1
 8005192:	0018      	movs	r0, r3
 8005194:	f7fd ff78 	bl	8003088 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8005198:	23a0      	movs	r3, #160	; 0xa0
 800519a:	05db      	lsls	r3, r3, #23
 800519c:	2201      	movs	r2, #1
 800519e:	2102      	movs	r1, #2
 80051a0:	0018      	movs	r0, r3
 80051a2:	f7fd ff71 	bl	8003088 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80051a6:	23a0      	movs	r3, #160	; 0xa0
 80051a8:	05db      	lsls	r3, r3, #23
 80051aa:	2200      	movs	r2, #0
 80051ac:	2102      	movs	r1, #2
 80051ae:	0018      	movs	r0, r3
 80051b0:	f7fd ff6a 	bl	8003088 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 80051b4:	2128      	movs	r1, #40	; 0x28
 80051b6:	2000      	movs	r0, #0
 80051b8:	f000 f80f 	bl	80051da <lcd_write>
	lcd_write(0,0x0c);
 80051bc:	210c      	movs	r1, #12
 80051be:	2000      	movs	r0, #0
 80051c0:	f000 f80b 	bl	80051da <lcd_write>
	lcd_write(0,0x06);
 80051c4:	2106      	movs	r1, #6
 80051c6:	2000      	movs	r0, #0
 80051c8:	f000 f807 	bl	80051da <lcd_write>
	lcd_write(0,0x01);
 80051cc:	2101      	movs	r1, #1
 80051ce:	2000      	movs	r0, #0
 80051d0:	f000 f803 	bl	80051da <lcd_write>
}
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	0002      	movs	r2, r0
 80051e2:	1dfb      	adds	r3, r7, #7
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	1dbb      	adds	r3, r7, #6
 80051e8:	1c0a      	adds	r2, r1, #0
 80051ea:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80051ec:	2002      	movs	r0, #2
 80051ee:	f7fc fbbb 	bl	8001968 <HAL_Delay>
	if(type)
 80051f2:	1dfb      	adds	r3, r7, #7
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80051fa:	23a0      	movs	r3, #160	; 0xa0
 80051fc:	05db      	lsls	r3, r3, #23
 80051fe:	2201      	movs	r2, #1
 8005200:	2101      	movs	r1, #1
 8005202:	0018      	movs	r0, r3
 8005204:	f7fd ff40 	bl	8003088 <HAL_GPIO_WritePin>
 8005208:	e006      	b.n	8005218 <lcd_write+0x3e>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 800520a:	23a0      	movs	r3, #160	; 0xa0
 800520c:	05db      	lsls	r3, r3, #23
 800520e:	2200      	movs	r2, #0
 8005210:	2101      	movs	r1, #1
 8005212:	0018      	movs	r0, r3
 8005214:	f7fd ff38 	bl	8003088 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8005218:	1dbb      	adds	r3, r7, #6
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	b25b      	sxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	da07      	bge.n	8005232 <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8005222:	23a0      	movs	r3, #160	; 0xa0
 8005224:	05db      	lsls	r3, r3, #23
 8005226:	2201      	movs	r2, #1
 8005228:	2120      	movs	r1, #32
 800522a:	0018      	movs	r0, r3
 800522c:	f7fd ff2c 	bl	8003088 <HAL_GPIO_WritePin>
 8005230:	e006      	b.n	8005240 <lcd_write+0x66>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8005232:	23a0      	movs	r3, #160	; 0xa0
 8005234:	05db      	lsls	r3, r3, #23
 8005236:	2200      	movs	r2, #0
 8005238:	2120      	movs	r1, #32
 800523a:	0018      	movs	r0, r3
 800523c:	f7fd ff24 	bl	8003088 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8005240:	1dbb      	adds	r3, r7, #6
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2240      	movs	r2, #64	; 0x40
 8005246:	4013      	ands	r3, r2
 8005248:	d007      	beq.n	800525a <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 800524a:	23a0      	movs	r3, #160	; 0xa0
 800524c:	05db      	lsls	r3, r3, #23
 800524e:	2201      	movs	r2, #1
 8005250:	2110      	movs	r1, #16
 8005252:	0018      	movs	r0, r3
 8005254:	f7fd ff18 	bl	8003088 <HAL_GPIO_WritePin>
 8005258:	e006      	b.n	8005268 <lcd_write+0x8e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 800525a:	23a0      	movs	r3, #160	; 0xa0
 800525c:	05db      	lsls	r3, r3, #23
 800525e:	2200      	movs	r2, #0
 8005260:	2110      	movs	r1, #16
 8005262:	0018      	movs	r0, r3
 8005264:	f7fd ff10 	bl	8003088 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8005268:	1dbb      	adds	r3, r7, #6
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2220      	movs	r2, #32
 800526e:	4013      	ands	r3, r2
 8005270:	d007      	beq.n	8005282 <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8005272:	23a0      	movs	r3, #160	; 0xa0
 8005274:	05db      	lsls	r3, r3, #23
 8005276:	2201      	movs	r2, #1
 8005278:	2108      	movs	r1, #8
 800527a:	0018      	movs	r0, r3
 800527c:	f7fd ff04 	bl	8003088 <HAL_GPIO_WritePin>
 8005280:	e006      	b.n	8005290 <lcd_write+0xb6>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8005282:	23a0      	movs	r3, #160	; 0xa0
 8005284:	05db      	lsls	r3, r3, #23
 8005286:	2200      	movs	r2, #0
 8005288:	2108      	movs	r1, #8
 800528a:	0018      	movs	r0, r3
 800528c:	f7fd fefc 	bl	8003088 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8005290:	1dbb      	adds	r3, r7, #6
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2210      	movs	r2, #16
 8005296:	4013      	ands	r3, r2
 8005298:	d007      	beq.n	80052aa <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800529a:	23a0      	movs	r3, #160	; 0xa0
 800529c:	05db      	lsls	r3, r3, #23
 800529e:	2201      	movs	r2, #1
 80052a0:	2104      	movs	r1, #4
 80052a2:	0018      	movs	r0, r3
 80052a4:	f7fd fef0 	bl	8003088 <HAL_GPIO_WritePin>
 80052a8:	e006      	b.n	80052b8 <lcd_write+0xde>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80052aa:	23a0      	movs	r3, #160	; 0xa0
 80052ac:	05db      	lsls	r3, r3, #23
 80052ae:	2200      	movs	r2, #0
 80052b0:	2104      	movs	r1, #4
 80052b2:	0018      	movs	r0, r3
 80052b4:	f7fd fee8 	bl	8003088 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80052b8:	23a0      	movs	r3, #160	; 0xa0
 80052ba:	05db      	lsls	r3, r3, #23
 80052bc:	2201      	movs	r2, #1
 80052be:	2102      	movs	r1, #2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7fd fee1 	bl	8003088 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80052c6:	23a0      	movs	r3, #160	; 0xa0
 80052c8:	05db      	lsls	r3, r3, #23
 80052ca:	2200      	movs	r2, #0
 80052cc:	2102      	movs	r1, #2
 80052ce:	0018      	movs	r0, r3
 80052d0:	f7fd feda 	bl	8003088 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 80052d4:	1dbb      	adds	r3, r7, #6
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2208      	movs	r2, #8
 80052da:	4013      	ands	r3, r2
 80052dc:	d007      	beq.n	80052ee <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80052de:	23a0      	movs	r3, #160	; 0xa0
 80052e0:	05db      	lsls	r3, r3, #23
 80052e2:	2201      	movs	r2, #1
 80052e4:	2120      	movs	r1, #32
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7fd fece 	bl	8003088 <HAL_GPIO_WritePin>
 80052ec:	e006      	b.n	80052fc <lcd_write+0x122>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80052ee:	23a0      	movs	r3, #160	; 0xa0
 80052f0:	05db      	lsls	r3, r3, #23
 80052f2:	2200      	movs	r2, #0
 80052f4:	2120      	movs	r1, #32
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7fd fec6 	bl	8003088 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 80052fc:	1dbb      	adds	r3, r7, #6
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2204      	movs	r2, #4
 8005302:	4013      	ands	r3, r2
 8005304:	d007      	beq.n	8005316 <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8005306:	23a0      	movs	r3, #160	; 0xa0
 8005308:	05db      	lsls	r3, r3, #23
 800530a:	2201      	movs	r2, #1
 800530c:	2110      	movs	r1, #16
 800530e:	0018      	movs	r0, r3
 8005310:	f7fd feba 	bl	8003088 <HAL_GPIO_WritePin>
 8005314:	e006      	b.n	8005324 <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8005316:	23a0      	movs	r3, #160	; 0xa0
 8005318:	05db      	lsls	r3, r3, #23
 800531a:	2200      	movs	r2, #0
 800531c:	2110      	movs	r1, #16
 800531e:	0018      	movs	r0, r3
 8005320:	f7fd feb2 	bl	8003088 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8005324:	1dbb      	adds	r3, r7, #6
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2202      	movs	r2, #2
 800532a:	4013      	ands	r3, r2
 800532c:	d007      	beq.n	800533e <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800532e:	23a0      	movs	r3, #160	; 0xa0
 8005330:	05db      	lsls	r3, r3, #23
 8005332:	2201      	movs	r2, #1
 8005334:	2108      	movs	r1, #8
 8005336:	0018      	movs	r0, r3
 8005338:	f7fd fea6 	bl	8003088 <HAL_GPIO_WritePin>
 800533c:	e006      	b.n	800534c <lcd_write+0x172>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800533e:	23a0      	movs	r3, #160	; 0xa0
 8005340:	05db      	lsls	r3, r3, #23
 8005342:	2200      	movs	r2, #0
 8005344:	2108      	movs	r1, #8
 8005346:	0018      	movs	r0, r3
 8005348:	f7fd fe9e 	bl	8003088 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 800534c:	1dbb      	adds	r3, r7, #6
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2201      	movs	r2, #1
 8005352:	4013      	ands	r3, r2
 8005354:	d007      	beq.n	8005366 <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8005356:	23a0      	movs	r3, #160	; 0xa0
 8005358:	05db      	lsls	r3, r3, #23
 800535a:	2201      	movs	r2, #1
 800535c:	2104      	movs	r1, #4
 800535e:	0018      	movs	r0, r3
 8005360:	f7fd fe92 	bl	8003088 <HAL_GPIO_WritePin>
 8005364:	e006      	b.n	8005374 <lcd_write+0x19a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8005366:	23a0      	movs	r3, #160	; 0xa0
 8005368:	05db      	lsls	r3, r3, #23
 800536a:	2200      	movs	r2, #0
 800536c:	2104      	movs	r1, #4
 800536e:	0018      	movs	r0, r3
 8005370:	f7fd fe8a 	bl	8003088 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8005374:	23a0      	movs	r3, #160	; 0xa0
 8005376:	05db      	lsls	r3, r3, #23
 8005378:	2201      	movs	r2, #1
 800537a:	2102      	movs	r1, #2
 800537c:	0018      	movs	r0, r3
 800537e:	f7fd fe83 	bl	8003088 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8005382:	23a0      	movs	r3, #160	; 0xa0
 8005384:	05db      	lsls	r3, r3, #23
 8005386:	2200      	movs	r2, #0
 8005388:	2102      	movs	r1, #2
 800538a:	0018      	movs	r0, r3
 800538c:	f7fd fe7c 	bl	8003088 <HAL_GPIO_WritePin>
}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}

08005398 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, char *string)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	603a      	str	r2, [r7, #0]
 80053a0:	1dfb      	adds	r3, r7, #7
 80053a2:	1c02      	adds	r2, r0, #0
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	1dbb      	adds	r3, r7, #6
 80053a8:	1c0a      	adds	r2, r1, #0
 80053aa:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80053ac:	1dfb      	adds	r3, r7, #7
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d023      	beq.n	80053fc <lcd_puts+0x64>
 80053b4:	dc35      	bgt.n	8005422 <lcd_puts+0x8a>
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d017      	beq.n	80053ea <lcd_puts+0x52>
 80053ba:	dc32      	bgt.n	8005422 <lcd_puts+0x8a>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <lcd_puts+0x2e>
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d009      	beq.n	80053d8 <lcd_puts+0x40>
 80053c4:	e023      	b.n	800540e <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80053c6:	1dbb      	adds	r3, r7, #6
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	3b80      	subs	r3, #128	; 0x80
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	0019      	movs	r1, r3
 80053d0:	2000      	movs	r0, #0
 80053d2:	f7ff ff02 	bl	80051da <lcd_write>
			break;
 80053d6:	e01a      	b.n	800540e <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80053d8:	1dbb      	adds	r3, r7, #6
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	3b40      	subs	r3, #64	; 0x40
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	0019      	movs	r1, r3
 80053e2:	2000      	movs	r0, #0
 80053e4:	f7ff fef9 	bl	80051da <lcd_write>
			break;
 80053e8:	e011      	b.n	800540e <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 80053ea:	1dbb      	adds	r3, r7, #6
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	3b70      	subs	r3, #112	; 0x70
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	0019      	movs	r1, r3
 80053f4:	2000      	movs	r0, #0
 80053f6:	f7ff fef0 	bl	80051da <lcd_write>
			break;
 80053fa:	e008      	b.n	800540e <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80053fc:	1dbb      	adds	r3, r7, #6
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	3b30      	subs	r3, #48	; 0x30
 8005402:	b2db      	uxtb	r3, r3
 8005404:	0019      	movs	r1, r3
 8005406:	2000      	movs	r0, #0
 8005408:	f7ff fee7 	bl	80051da <lcd_write>
			break;
 800540c:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 800540e:	e008      	b.n	8005422 <lcd_puts+0x8a>
	{
		lcd_write(1,*string);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	0019      	movs	r1, r3
 8005416:	2001      	movs	r0, #1
 8005418:	f7ff fedf 	bl	80051da <lcd_write>
		string++;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	3301      	adds	r3, #1
 8005420:	603b      	str	r3, [r7, #0]
	while(*string)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f2      	bne.n	8005410 <lcd_puts+0x78>
	}
}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	46c0      	nop			; (mov r8, r8)
 800542e:	46bd      	mov	sp, r7
 8005430:	b002      	add	sp, #8
 8005432:	bd80      	pop	{r7, pc}

08005434 <lcd_clear>:
void lcd_clear(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8005438:	2101      	movs	r1, #1
 800543a:	2000      	movs	r0, #0
 800543c:	f7ff fecd 	bl	80051da <lcd_write>
}
 8005440:	46c0      	nop			; (mov r8, r8)
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <__errno>:
 8005448:	4b01      	ldr	r3, [pc, #4]	; (8005450 <__errno+0x8>)
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	4770      	bx	lr
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	2000000c 	.word	0x2000000c

08005454 <__libc_init_array>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	2600      	movs	r6, #0
 8005458:	4d0c      	ldr	r5, [pc, #48]	; (800548c <__libc_init_array+0x38>)
 800545a:	4c0d      	ldr	r4, [pc, #52]	; (8005490 <__libc_init_array+0x3c>)
 800545c:	1b64      	subs	r4, r4, r5
 800545e:	10a4      	asrs	r4, r4, #2
 8005460:	42a6      	cmp	r6, r4
 8005462:	d109      	bne.n	8005478 <__libc_init_array+0x24>
 8005464:	2600      	movs	r6, #0
 8005466:	f000 fc8b 	bl	8005d80 <_init>
 800546a:	4d0a      	ldr	r5, [pc, #40]	; (8005494 <__libc_init_array+0x40>)
 800546c:	4c0a      	ldr	r4, [pc, #40]	; (8005498 <__libc_init_array+0x44>)
 800546e:	1b64      	subs	r4, r4, r5
 8005470:	10a4      	asrs	r4, r4, #2
 8005472:	42a6      	cmp	r6, r4
 8005474:	d105      	bne.n	8005482 <__libc_init_array+0x2e>
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	00b3      	lsls	r3, r6, #2
 800547a:	58eb      	ldr	r3, [r5, r3]
 800547c:	4798      	blx	r3
 800547e:	3601      	adds	r6, #1
 8005480:	e7ee      	b.n	8005460 <__libc_init_array+0xc>
 8005482:	00b3      	lsls	r3, r6, #2
 8005484:	58eb      	ldr	r3, [r5, r3]
 8005486:	4798      	blx	r3
 8005488:	3601      	adds	r6, #1
 800548a:	e7f2      	b.n	8005472 <__libc_init_array+0x1e>
 800548c:	08005f64 	.word	0x08005f64
 8005490:	08005f64 	.word	0x08005f64
 8005494:	08005f64 	.word	0x08005f64
 8005498:	08005f68 	.word	0x08005f68

0800549c <memset>:
 800549c:	0003      	movs	r3, r0
 800549e:	1882      	adds	r2, r0, r2
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d100      	bne.n	80054a6 <memset+0xa>
 80054a4:	4770      	bx	lr
 80054a6:	7019      	strb	r1, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	e7f9      	b.n	80054a0 <memset+0x4>

080054ac <siprintf>:
 80054ac:	b40e      	push	{r1, r2, r3}
 80054ae:	b500      	push	{lr}
 80054b0:	490b      	ldr	r1, [pc, #44]	; (80054e0 <siprintf+0x34>)
 80054b2:	b09c      	sub	sp, #112	; 0x70
 80054b4:	ab1d      	add	r3, sp, #116	; 0x74
 80054b6:	9002      	str	r0, [sp, #8]
 80054b8:	9006      	str	r0, [sp, #24]
 80054ba:	9107      	str	r1, [sp, #28]
 80054bc:	9104      	str	r1, [sp, #16]
 80054be:	4809      	ldr	r0, [pc, #36]	; (80054e4 <siprintf+0x38>)
 80054c0:	4909      	ldr	r1, [pc, #36]	; (80054e8 <siprintf+0x3c>)
 80054c2:	cb04      	ldmia	r3!, {r2}
 80054c4:	9105      	str	r1, [sp, #20]
 80054c6:	6800      	ldr	r0, [r0, #0]
 80054c8:	a902      	add	r1, sp, #8
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	f000 f870 	bl	80055b0 <_svfiprintf_r>
 80054d0:	2300      	movs	r3, #0
 80054d2:	9a02      	ldr	r2, [sp, #8]
 80054d4:	7013      	strb	r3, [r2, #0]
 80054d6:	b01c      	add	sp, #112	; 0x70
 80054d8:	bc08      	pop	{r3}
 80054da:	b003      	add	sp, #12
 80054dc:	4718      	bx	r3
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	7fffffff 	.word	0x7fffffff
 80054e4:	2000000c 	.word	0x2000000c
 80054e8:	ffff0208 	.word	0xffff0208

080054ec <__ssputs_r>:
 80054ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ee:	688e      	ldr	r6, [r1, #8]
 80054f0:	b085      	sub	sp, #20
 80054f2:	0007      	movs	r7, r0
 80054f4:	000c      	movs	r4, r1
 80054f6:	9203      	str	r2, [sp, #12]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	429e      	cmp	r6, r3
 80054fc:	d83c      	bhi.n	8005578 <__ssputs_r+0x8c>
 80054fe:	2390      	movs	r3, #144	; 0x90
 8005500:	898a      	ldrh	r2, [r1, #12]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	421a      	tst	r2, r3
 8005506:	d034      	beq.n	8005572 <__ssputs_r+0x86>
 8005508:	6909      	ldr	r1, [r1, #16]
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	6960      	ldr	r0, [r4, #20]
 800550e:	1a5b      	subs	r3, r3, r1
 8005510:	9302      	str	r3, [sp, #8]
 8005512:	2303      	movs	r3, #3
 8005514:	4343      	muls	r3, r0
 8005516:	0fdd      	lsrs	r5, r3, #31
 8005518:	18ed      	adds	r5, r5, r3
 800551a:	9b01      	ldr	r3, [sp, #4]
 800551c:	9802      	ldr	r0, [sp, #8]
 800551e:	3301      	adds	r3, #1
 8005520:	181b      	adds	r3, r3, r0
 8005522:	106d      	asrs	r5, r5, #1
 8005524:	42ab      	cmp	r3, r5
 8005526:	d900      	bls.n	800552a <__ssputs_r+0x3e>
 8005528:	001d      	movs	r5, r3
 800552a:	0553      	lsls	r3, r2, #21
 800552c:	d532      	bpl.n	8005594 <__ssputs_r+0xa8>
 800552e:	0029      	movs	r1, r5
 8005530:	0038      	movs	r0, r7
 8005532:	f000 fb53 	bl	8005bdc <_malloc_r>
 8005536:	1e06      	subs	r6, r0, #0
 8005538:	d109      	bne.n	800554e <__ssputs_r+0x62>
 800553a:	230c      	movs	r3, #12
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	2340      	movs	r3, #64	; 0x40
 8005540:	2001      	movs	r0, #1
 8005542:	89a2      	ldrh	r2, [r4, #12]
 8005544:	4240      	negs	r0, r0
 8005546:	4313      	orrs	r3, r2
 8005548:	81a3      	strh	r3, [r4, #12]
 800554a:	b005      	add	sp, #20
 800554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554e:	9a02      	ldr	r2, [sp, #8]
 8005550:	6921      	ldr	r1, [r4, #16]
 8005552:	f000 faba 	bl	8005aca <memcpy>
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	4a14      	ldr	r2, [pc, #80]	; (80055ac <__ssputs_r+0xc0>)
 800555a:	401a      	ands	r2, r3
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	4313      	orrs	r3, r2
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	9b02      	ldr	r3, [sp, #8]
 8005564:	6126      	str	r6, [r4, #16]
 8005566:	18f6      	adds	r6, r6, r3
 8005568:	6026      	str	r6, [r4, #0]
 800556a:	6165      	str	r5, [r4, #20]
 800556c:	9e01      	ldr	r6, [sp, #4]
 800556e:	1aed      	subs	r5, r5, r3
 8005570:	60a5      	str	r5, [r4, #8]
 8005572:	9b01      	ldr	r3, [sp, #4]
 8005574:	429e      	cmp	r6, r3
 8005576:	d900      	bls.n	800557a <__ssputs_r+0x8e>
 8005578:	9e01      	ldr	r6, [sp, #4]
 800557a:	0032      	movs	r2, r6
 800557c:	9903      	ldr	r1, [sp, #12]
 800557e:	6820      	ldr	r0, [r4, #0]
 8005580:	f000 faac 	bl	8005adc <memmove>
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	2000      	movs	r0, #0
 8005588:	1b9b      	subs	r3, r3, r6
 800558a:	60a3      	str	r3, [r4, #8]
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	199e      	adds	r6, r3, r6
 8005590:	6026      	str	r6, [r4, #0]
 8005592:	e7da      	b.n	800554a <__ssputs_r+0x5e>
 8005594:	002a      	movs	r2, r5
 8005596:	0038      	movs	r0, r7
 8005598:	f000 fb96 	bl	8005cc8 <_realloc_r>
 800559c:	1e06      	subs	r6, r0, #0
 800559e:	d1e0      	bne.n	8005562 <__ssputs_r+0x76>
 80055a0:	0038      	movs	r0, r7
 80055a2:	6921      	ldr	r1, [r4, #16]
 80055a4:	f000 faae 	bl	8005b04 <_free_r>
 80055a8:	e7c7      	b.n	800553a <__ssputs_r+0x4e>
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	fffffb7f 	.word	0xfffffb7f

080055b0 <_svfiprintf_r>:
 80055b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b2:	b0a1      	sub	sp, #132	; 0x84
 80055b4:	9003      	str	r0, [sp, #12]
 80055b6:	001d      	movs	r5, r3
 80055b8:	898b      	ldrh	r3, [r1, #12]
 80055ba:	000f      	movs	r7, r1
 80055bc:	0016      	movs	r6, r2
 80055be:	061b      	lsls	r3, r3, #24
 80055c0:	d511      	bpl.n	80055e6 <_svfiprintf_r+0x36>
 80055c2:	690b      	ldr	r3, [r1, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10e      	bne.n	80055e6 <_svfiprintf_r+0x36>
 80055c8:	2140      	movs	r1, #64	; 0x40
 80055ca:	f000 fb07 	bl	8005bdc <_malloc_r>
 80055ce:	6038      	str	r0, [r7, #0]
 80055d0:	6138      	str	r0, [r7, #16]
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d105      	bne.n	80055e2 <_svfiprintf_r+0x32>
 80055d6:	230c      	movs	r3, #12
 80055d8:	9a03      	ldr	r2, [sp, #12]
 80055da:	3801      	subs	r0, #1
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	b021      	add	sp, #132	; 0x84
 80055e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e2:	2340      	movs	r3, #64	; 0x40
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	2300      	movs	r3, #0
 80055e8:	ac08      	add	r4, sp, #32
 80055ea:	6163      	str	r3, [r4, #20]
 80055ec:	3320      	adds	r3, #32
 80055ee:	7663      	strb	r3, [r4, #25]
 80055f0:	3310      	adds	r3, #16
 80055f2:	76a3      	strb	r3, [r4, #26]
 80055f4:	9507      	str	r5, [sp, #28]
 80055f6:	0035      	movs	r5, r6
 80055f8:	782b      	ldrb	r3, [r5, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <_svfiprintf_r+0x52>
 80055fe:	2b25      	cmp	r3, #37	; 0x25
 8005600:	d147      	bne.n	8005692 <_svfiprintf_r+0xe2>
 8005602:	1bab      	subs	r3, r5, r6
 8005604:	9305      	str	r3, [sp, #20]
 8005606:	42b5      	cmp	r5, r6
 8005608:	d00c      	beq.n	8005624 <_svfiprintf_r+0x74>
 800560a:	0032      	movs	r2, r6
 800560c:	0039      	movs	r1, r7
 800560e:	9803      	ldr	r0, [sp, #12]
 8005610:	f7ff ff6c 	bl	80054ec <__ssputs_r>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d100      	bne.n	800561a <_svfiprintf_r+0x6a>
 8005618:	e0ae      	b.n	8005778 <_svfiprintf_r+0x1c8>
 800561a:	6962      	ldr	r2, [r4, #20]
 800561c:	9b05      	ldr	r3, [sp, #20]
 800561e:	4694      	mov	ip, r2
 8005620:	4463      	add	r3, ip
 8005622:	6163      	str	r3, [r4, #20]
 8005624:	782b      	ldrb	r3, [r5, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d100      	bne.n	800562c <_svfiprintf_r+0x7c>
 800562a:	e0a5      	b.n	8005778 <_svfiprintf_r+0x1c8>
 800562c:	2201      	movs	r2, #1
 800562e:	2300      	movs	r3, #0
 8005630:	4252      	negs	r2, r2
 8005632:	6062      	str	r2, [r4, #4]
 8005634:	a904      	add	r1, sp, #16
 8005636:	3254      	adds	r2, #84	; 0x54
 8005638:	1852      	adds	r2, r2, r1
 800563a:	1c6e      	adds	r6, r5, #1
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	60e3      	str	r3, [r4, #12]
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	7013      	strb	r3, [r2, #0]
 8005644:	65a3      	str	r3, [r4, #88]	; 0x58
 8005646:	2205      	movs	r2, #5
 8005648:	7831      	ldrb	r1, [r6, #0]
 800564a:	4854      	ldr	r0, [pc, #336]	; (800579c <_svfiprintf_r+0x1ec>)
 800564c:	f000 fa32 	bl	8005ab4 <memchr>
 8005650:	1c75      	adds	r5, r6, #1
 8005652:	2800      	cmp	r0, #0
 8005654:	d11f      	bne.n	8005696 <_svfiprintf_r+0xe6>
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	06d3      	lsls	r3, r2, #27
 800565a:	d504      	bpl.n	8005666 <_svfiprintf_r+0xb6>
 800565c:	2353      	movs	r3, #83	; 0x53
 800565e:	a904      	add	r1, sp, #16
 8005660:	185b      	adds	r3, r3, r1
 8005662:	2120      	movs	r1, #32
 8005664:	7019      	strb	r1, [r3, #0]
 8005666:	0713      	lsls	r3, r2, #28
 8005668:	d504      	bpl.n	8005674 <_svfiprintf_r+0xc4>
 800566a:	2353      	movs	r3, #83	; 0x53
 800566c:	a904      	add	r1, sp, #16
 800566e:	185b      	adds	r3, r3, r1
 8005670:	212b      	movs	r1, #43	; 0x2b
 8005672:	7019      	strb	r1, [r3, #0]
 8005674:	7833      	ldrb	r3, [r6, #0]
 8005676:	2b2a      	cmp	r3, #42	; 0x2a
 8005678:	d016      	beq.n	80056a8 <_svfiprintf_r+0xf8>
 800567a:	0035      	movs	r5, r6
 800567c:	2100      	movs	r1, #0
 800567e:	200a      	movs	r0, #10
 8005680:	68e3      	ldr	r3, [r4, #12]
 8005682:	782a      	ldrb	r2, [r5, #0]
 8005684:	1c6e      	adds	r6, r5, #1
 8005686:	3a30      	subs	r2, #48	; 0x30
 8005688:	2a09      	cmp	r2, #9
 800568a:	d94e      	bls.n	800572a <_svfiprintf_r+0x17a>
 800568c:	2900      	cmp	r1, #0
 800568e:	d111      	bne.n	80056b4 <_svfiprintf_r+0x104>
 8005690:	e017      	b.n	80056c2 <_svfiprintf_r+0x112>
 8005692:	3501      	adds	r5, #1
 8005694:	e7b0      	b.n	80055f8 <_svfiprintf_r+0x48>
 8005696:	4b41      	ldr	r3, [pc, #260]	; (800579c <_svfiprintf_r+0x1ec>)
 8005698:	6822      	ldr	r2, [r4, #0]
 800569a:	1ac0      	subs	r0, r0, r3
 800569c:	2301      	movs	r3, #1
 800569e:	4083      	lsls	r3, r0
 80056a0:	4313      	orrs	r3, r2
 80056a2:	002e      	movs	r6, r5
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	e7ce      	b.n	8005646 <_svfiprintf_r+0x96>
 80056a8:	9b07      	ldr	r3, [sp, #28]
 80056aa:	1d19      	adds	r1, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	9107      	str	r1, [sp, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	db01      	blt.n	80056b8 <_svfiprintf_r+0x108>
 80056b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b6:	e004      	b.n	80056c2 <_svfiprintf_r+0x112>
 80056b8:	425b      	negs	r3, r3
 80056ba:	60e3      	str	r3, [r4, #12]
 80056bc:	2302      	movs	r3, #2
 80056be:	4313      	orrs	r3, r2
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	782b      	ldrb	r3, [r5, #0]
 80056c4:	2b2e      	cmp	r3, #46	; 0x2e
 80056c6:	d10a      	bne.n	80056de <_svfiprintf_r+0x12e>
 80056c8:	786b      	ldrb	r3, [r5, #1]
 80056ca:	2b2a      	cmp	r3, #42	; 0x2a
 80056cc:	d135      	bne.n	800573a <_svfiprintf_r+0x18a>
 80056ce:	9b07      	ldr	r3, [sp, #28]
 80056d0:	3502      	adds	r5, #2
 80056d2:	1d1a      	adds	r2, r3, #4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	9207      	str	r2, [sp, #28]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	db2b      	blt.n	8005734 <_svfiprintf_r+0x184>
 80056dc:	9309      	str	r3, [sp, #36]	; 0x24
 80056de:	4e30      	ldr	r6, [pc, #192]	; (80057a0 <_svfiprintf_r+0x1f0>)
 80056e0:	2203      	movs	r2, #3
 80056e2:	0030      	movs	r0, r6
 80056e4:	7829      	ldrb	r1, [r5, #0]
 80056e6:	f000 f9e5 	bl	8005ab4 <memchr>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d006      	beq.n	80056fc <_svfiprintf_r+0x14c>
 80056ee:	2340      	movs	r3, #64	; 0x40
 80056f0:	1b80      	subs	r0, r0, r6
 80056f2:	4083      	lsls	r3, r0
 80056f4:	6822      	ldr	r2, [r4, #0]
 80056f6:	3501      	adds	r5, #1
 80056f8:	4313      	orrs	r3, r2
 80056fa:	6023      	str	r3, [r4, #0]
 80056fc:	7829      	ldrb	r1, [r5, #0]
 80056fe:	2206      	movs	r2, #6
 8005700:	4828      	ldr	r0, [pc, #160]	; (80057a4 <_svfiprintf_r+0x1f4>)
 8005702:	1c6e      	adds	r6, r5, #1
 8005704:	7621      	strb	r1, [r4, #24]
 8005706:	f000 f9d5 	bl	8005ab4 <memchr>
 800570a:	2800      	cmp	r0, #0
 800570c:	d03c      	beq.n	8005788 <_svfiprintf_r+0x1d8>
 800570e:	4b26      	ldr	r3, [pc, #152]	; (80057a8 <_svfiprintf_r+0x1f8>)
 8005710:	2b00      	cmp	r3, #0
 8005712:	d125      	bne.n	8005760 <_svfiprintf_r+0x1b0>
 8005714:	2207      	movs	r2, #7
 8005716:	9b07      	ldr	r3, [sp, #28]
 8005718:	3307      	adds	r3, #7
 800571a:	4393      	bics	r3, r2
 800571c:	3308      	adds	r3, #8
 800571e:	9307      	str	r3, [sp, #28]
 8005720:	6963      	ldr	r3, [r4, #20]
 8005722:	9a04      	ldr	r2, [sp, #16]
 8005724:	189b      	adds	r3, r3, r2
 8005726:	6163      	str	r3, [r4, #20]
 8005728:	e765      	b.n	80055f6 <_svfiprintf_r+0x46>
 800572a:	4343      	muls	r3, r0
 800572c:	0035      	movs	r5, r6
 800572e:	2101      	movs	r1, #1
 8005730:	189b      	adds	r3, r3, r2
 8005732:	e7a6      	b.n	8005682 <_svfiprintf_r+0xd2>
 8005734:	2301      	movs	r3, #1
 8005736:	425b      	negs	r3, r3
 8005738:	e7d0      	b.n	80056dc <_svfiprintf_r+0x12c>
 800573a:	2300      	movs	r3, #0
 800573c:	200a      	movs	r0, #10
 800573e:	001a      	movs	r2, r3
 8005740:	3501      	adds	r5, #1
 8005742:	6063      	str	r3, [r4, #4]
 8005744:	7829      	ldrb	r1, [r5, #0]
 8005746:	1c6e      	adds	r6, r5, #1
 8005748:	3930      	subs	r1, #48	; 0x30
 800574a:	2909      	cmp	r1, #9
 800574c:	d903      	bls.n	8005756 <_svfiprintf_r+0x1a6>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0c5      	beq.n	80056de <_svfiprintf_r+0x12e>
 8005752:	9209      	str	r2, [sp, #36]	; 0x24
 8005754:	e7c3      	b.n	80056de <_svfiprintf_r+0x12e>
 8005756:	4342      	muls	r2, r0
 8005758:	0035      	movs	r5, r6
 800575a:	2301      	movs	r3, #1
 800575c:	1852      	adds	r2, r2, r1
 800575e:	e7f1      	b.n	8005744 <_svfiprintf_r+0x194>
 8005760:	ab07      	add	r3, sp, #28
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	003a      	movs	r2, r7
 8005766:	0021      	movs	r1, r4
 8005768:	4b10      	ldr	r3, [pc, #64]	; (80057ac <_svfiprintf_r+0x1fc>)
 800576a:	9803      	ldr	r0, [sp, #12]
 800576c:	e000      	b.n	8005770 <_svfiprintf_r+0x1c0>
 800576e:	bf00      	nop
 8005770:	9004      	str	r0, [sp, #16]
 8005772:	9b04      	ldr	r3, [sp, #16]
 8005774:	3301      	adds	r3, #1
 8005776:	d1d3      	bne.n	8005720 <_svfiprintf_r+0x170>
 8005778:	89bb      	ldrh	r3, [r7, #12]
 800577a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800577c:	065b      	lsls	r3, r3, #25
 800577e:	d400      	bmi.n	8005782 <_svfiprintf_r+0x1d2>
 8005780:	e72d      	b.n	80055de <_svfiprintf_r+0x2e>
 8005782:	2001      	movs	r0, #1
 8005784:	4240      	negs	r0, r0
 8005786:	e72a      	b.n	80055de <_svfiprintf_r+0x2e>
 8005788:	ab07      	add	r3, sp, #28
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	003a      	movs	r2, r7
 800578e:	0021      	movs	r1, r4
 8005790:	4b06      	ldr	r3, [pc, #24]	; (80057ac <_svfiprintf_r+0x1fc>)
 8005792:	9803      	ldr	r0, [sp, #12]
 8005794:	f000 f87c 	bl	8005890 <_printf_i>
 8005798:	e7ea      	b.n	8005770 <_svfiprintf_r+0x1c0>
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	08005f30 	.word	0x08005f30
 80057a0:	08005f36 	.word	0x08005f36
 80057a4:	08005f3a 	.word	0x08005f3a
 80057a8:	00000000 	.word	0x00000000
 80057ac:	080054ed 	.word	0x080054ed

080057b0 <_printf_common>:
 80057b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057b2:	0015      	movs	r5, r2
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	688a      	ldr	r2, [r1, #8]
 80057b8:	690b      	ldr	r3, [r1, #16]
 80057ba:	000c      	movs	r4, r1
 80057bc:	9000      	str	r0, [sp, #0]
 80057be:	4293      	cmp	r3, r2
 80057c0:	da00      	bge.n	80057c4 <_printf_common+0x14>
 80057c2:	0013      	movs	r3, r2
 80057c4:	0022      	movs	r2, r4
 80057c6:	602b      	str	r3, [r5, #0]
 80057c8:	3243      	adds	r2, #67	; 0x43
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d001      	beq.n	80057d4 <_printf_common+0x24>
 80057d0:	3301      	adds	r3, #1
 80057d2:	602b      	str	r3, [r5, #0]
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	069b      	lsls	r3, r3, #26
 80057d8:	d502      	bpl.n	80057e0 <_printf_common+0x30>
 80057da:	682b      	ldr	r3, [r5, #0]
 80057dc:	3302      	adds	r3, #2
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	2306      	movs	r3, #6
 80057e4:	0017      	movs	r7, r2
 80057e6:	401f      	ands	r7, r3
 80057e8:	421a      	tst	r2, r3
 80057ea:	d027      	beq.n	800583c <_printf_common+0x8c>
 80057ec:	0023      	movs	r3, r4
 80057ee:	3343      	adds	r3, #67	; 0x43
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	1e5a      	subs	r2, r3, #1
 80057f4:	4193      	sbcs	r3, r2
 80057f6:	6822      	ldr	r2, [r4, #0]
 80057f8:	0692      	lsls	r2, r2, #26
 80057fa:	d430      	bmi.n	800585e <_printf_common+0xae>
 80057fc:	0022      	movs	r2, r4
 80057fe:	9901      	ldr	r1, [sp, #4]
 8005800:	9800      	ldr	r0, [sp, #0]
 8005802:	9e08      	ldr	r6, [sp, #32]
 8005804:	3243      	adds	r2, #67	; 0x43
 8005806:	47b0      	blx	r6
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d025      	beq.n	8005858 <_printf_common+0xa8>
 800580c:	2306      	movs	r3, #6
 800580e:	6820      	ldr	r0, [r4, #0]
 8005810:	682a      	ldr	r2, [r5, #0]
 8005812:	68e1      	ldr	r1, [r4, #12]
 8005814:	2500      	movs	r5, #0
 8005816:	4003      	ands	r3, r0
 8005818:	2b04      	cmp	r3, #4
 800581a:	d103      	bne.n	8005824 <_printf_common+0x74>
 800581c:	1a8d      	subs	r5, r1, r2
 800581e:	43eb      	mvns	r3, r5
 8005820:	17db      	asrs	r3, r3, #31
 8005822:	401d      	ands	r5, r3
 8005824:	68a3      	ldr	r3, [r4, #8]
 8005826:	6922      	ldr	r2, [r4, #16]
 8005828:	4293      	cmp	r3, r2
 800582a:	dd01      	ble.n	8005830 <_printf_common+0x80>
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	18ed      	adds	r5, r5, r3
 8005830:	2700      	movs	r7, #0
 8005832:	42bd      	cmp	r5, r7
 8005834:	d120      	bne.n	8005878 <_printf_common+0xc8>
 8005836:	2000      	movs	r0, #0
 8005838:	e010      	b.n	800585c <_printf_common+0xac>
 800583a:	3701      	adds	r7, #1
 800583c:	68e3      	ldr	r3, [r4, #12]
 800583e:	682a      	ldr	r2, [r5, #0]
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	42bb      	cmp	r3, r7
 8005844:	ddd2      	ble.n	80057ec <_printf_common+0x3c>
 8005846:	0022      	movs	r2, r4
 8005848:	2301      	movs	r3, #1
 800584a:	9901      	ldr	r1, [sp, #4]
 800584c:	9800      	ldr	r0, [sp, #0]
 800584e:	9e08      	ldr	r6, [sp, #32]
 8005850:	3219      	adds	r2, #25
 8005852:	47b0      	blx	r6
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d1f0      	bne.n	800583a <_printf_common+0x8a>
 8005858:	2001      	movs	r0, #1
 800585a:	4240      	negs	r0, r0
 800585c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800585e:	2030      	movs	r0, #48	; 0x30
 8005860:	18e1      	adds	r1, r4, r3
 8005862:	3143      	adds	r1, #67	; 0x43
 8005864:	7008      	strb	r0, [r1, #0]
 8005866:	0021      	movs	r1, r4
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	3145      	adds	r1, #69	; 0x45
 800586c:	7809      	ldrb	r1, [r1, #0]
 800586e:	18a2      	adds	r2, r4, r2
 8005870:	3243      	adds	r2, #67	; 0x43
 8005872:	3302      	adds	r3, #2
 8005874:	7011      	strb	r1, [r2, #0]
 8005876:	e7c1      	b.n	80057fc <_printf_common+0x4c>
 8005878:	0022      	movs	r2, r4
 800587a:	2301      	movs	r3, #1
 800587c:	9901      	ldr	r1, [sp, #4]
 800587e:	9800      	ldr	r0, [sp, #0]
 8005880:	9e08      	ldr	r6, [sp, #32]
 8005882:	321a      	adds	r2, #26
 8005884:	47b0      	blx	r6
 8005886:	1c43      	adds	r3, r0, #1
 8005888:	d0e6      	beq.n	8005858 <_printf_common+0xa8>
 800588a:	3701      	adds	r7, #1
 800588c:	e7d1      	b.n	8005832 <_printf_common+0x82>
	...

08005890 <_printf_i>:
 8005890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005892:	b08b      	sub	sp, #44	; 0x2c
 8005894:	9206      	str	r2, [sp, #24]
 8005896:	000a      	movs	r2, r1
 8005898:	3243      	adds	r2, #67	; 0x43
 800589a:	9307      	str	r3, [sp, #28]
 800589c:	9005      	str	r0, [sp, #20]
 800589e:	9204      	str	r2, [sp, #16]
 80058a0:	7e0a      	ldrb	r2, [r1, #24]
 80058a2:	000c      	movs	r4, r1
 80058a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058a6:	2a78      	cmp	r2, #120	; 0x78
 80058a8:	d807      	bhi.n	80058ba <_printf_i+0x2a>
 80058aa:	2a62      	cmp	r2, #98	; 0x62
 80058ac:	d809      	bhi.n	80058c2 <_printf_i+0x32>
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	d100      	bne.n	80058b4 <_printf_i+0x24>
 80058b2:	e0c1      	b.n	8005a38 <_printf_i+0x1a8>
 80058b4:	2a58      	cmp	r2, #88	; 0x58
 80058b6:	d100      	bne.n	80058ba <_printf_i+0x2a>
 80058b8:	e08c      	b.n	80059d4 <_printf_i+0x144>
 80058ba:	0026      	movs	r6, r4
 80058bc:	3642      	adds	r6, #66	; 0x42
 80058be:	7032      	strb	r2, [r6, #0]
 80058c0:	e022      	b.n	8005908 <_printf_i+0x78>
 80058c2:	0010      	movs	r0, r2
 80058c4:	3863      	subs	r0, #99	; 0x63
 80058c6:	2815      	cmp	r0, #21
 80058c8:	d8f7      	bhi.n	80058ba <_printf_i+0x2a>
 80058ca:	f7fa fc1b 	bl	8000104 <__gnu_thumb1_case_shi>
 80058ce:	0016      	.short	0x0016
 80058d0:	fff6001f 	.word	0xfff6001f
 80058d4:	fff6fff6 	.word	0xfff6fff6
 80058d8:	001ffff6 	.word	0x001ffff6
 80058dc:	fff6fff6 	.word	0xfff6fff6
 80058e0:	fff6fff6 	.word	0xfff6fff6
 80058e4:	003600a8 	.word	0x003600a8
 80058e8:	fff6009a 	.word	0xfff6009a
 80058ec:	00b9fff6 	.word	0x00b9fff6
 80058f0:	0036fff6 	.word	0x0036fff6
 80058f4:	fff6fff6 	.word	0xfff6fff6
 80058f8:	009e      	.short	0x009e
 80058fa:	0026      	movs	r6, r4
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	3642      	adds	r6, #66	; 0x42
 8005900:	1d11      	adds	r1, r2, #4
 8005902:	6019      	str	r1, [r3, #0]
 8005904:	6813      	ldr	r3, [r2, #0]
 8005906:	7033      	strb	r3, [r6, #0]
 8005908:	2301      	movs	r3, #1
 800590a:	e0a7      	b.n	8005a5c <_printf_i+0x1cc>
 800590c:	6808      	ldr	r0, [r1, #0]
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	1d0a      	adds	r2, r1, #4
 8005912:	0605      	lsls	r5, r0, #24
 8005914:	d50b      	bpl.n	800592e <_printf_i+0x9e>
 8005916:	680d      	ldr	r5, [r1, #0]
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	2d00      	cmp	r5, #0
 800591c:	da03      	bge.n	8005926 <_printf_i+0x96>
 800591e:	232d      	movs	r3, #45	; 0x2d
 8005920:	9a04      	ldr	r2, [sp, #16]
 8005922:	426d      	negs	r5, r5
 8005924:	7013      	strb	r3, [r2, #0]
 8005926:	4b61      	ldr	r3, [pc, #388]	; (8005aac <_printf_i+0x21c>)
 8005928:	270a      	movs	r7, #10
 800592a:	9303      	str	r3, [sp, #12]
 800592c:	e01b      	b.n	8005966 <_printf_i+0xd6>
 800592e:	680d      	ldr	r5, [r1, #0]
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	0641      	lsls	r1, r0, #25
 8005934:	d5f1      	bpl.n	800591a <_printf_i+0x8a>
 8005936:	b22d      	sxth	r5, r5
 8005938:	e7ef      	b.n	800591a <_printf_i+0x8a>
 800593a:	680d      	ldr	r5, [r1, #0]
 800593c:	6819      	ldr	r1, [r3, #0]
 800593e:	1d08      	adds	r0, r1, #4
 8005940:	6018      	str	r0, [r3, #0]
 8005942:	062e      	lsls	r6, r5, #24
 8005944:	d501      	bpl.n	800594a <_printf_i+0xba>
 8005946:	680d      	ldr	r5, [r1, #0]
 8005948:	e003      	b.n	8005952 <_printf_i+0xc2>
 800594a:	066d      	lsls	r5, r5, #25
 800594c:	d5fb      	bpl.n	8005946 <_printf_i+0xb6>
 800594e:	680d      	ldr	r5, [r1, #0]
 8005950:	b2ad      	uxth	r5, r5
 8005952:	4b56      	ldr	r3, [pc, #344]	; (8005aac <_printf_i+0x21c>)
 8005954:	2708      	movs	r7, #8
 8005956:	9303      	str	r3, [sp, #12]
 8005958:	2a6f      	cmp	r2, #111	; 0x6f
 800595a:	d000      	beq.n	800595e <_printf_i+0xce>
 800595c:	3702      	adds	r7, #2
 800595e:	0023      	movs	r3, r4
 8005960:	2200      	movs	r2, #0
 8005962:	3343      	adds	r3, #67	; 0x43
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	60a3      	str	r3, [r4, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	db03      	blt.n	8005976 <_printf_i+0xe6>
 800596e:	2204      	movs	r2, #4
 8005970:	6821      	ldr	r1, [r4, #0]
 8005972:	4391      	bics	r1, r2
 8005974:	6021      	str	r1, [r4, #0]
 8005976:	2d00      	cmp	r5, #0
 8005978:	d102      	bne.n	8005980 <_printf_i+0xf0>
 800597a:	9e04      	ldr	r6, [sp, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00c      	beq.n	800599a <_printf_i+0x10a>
 8005980:	9e04      	ldr	r6, [sp, #16]
 8005982:	0028      	movs	r0, r5
 8005984:	0039      	movs	r1, r7
 8005986:	f7fa fc4d 	bl	8000224 <__aeabi_uidivmod>
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	3e01      	subs	r6, #1
 800598e:	5c5b      	ldrb	r3, [r3, r1]
 8005990:	7033      	strb	r3, [r6, #0]
 8005992:	002b      	movs	r3, r5
 8005994:	0005      	movs	r5, r0
 8005996:	429f      	cmp	r7, r3
 8005998:	d9f3      	bls.n	8005982 <_printf_i+0xf2>
 800599a:	2f08      	cmp	r7, #8
 800599c:	d109      	bne.n	80059b2 <_printf_i+0x122>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	07db      	lsls	r3, r3, #31
 80059a2:	d506      	bpl.n	80059b2 <_printf_i+0x122>
 80059a4:	6863      	ldr	r3, [r4, #4]
 80059a6:	6922      	ldr	r2, [r4, #16]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	dc02      	bgt.n	80059b2 <_printf_i+0x122>
 80059ac:	2330      	movs	r3, #48	; 0x30
 80059ae:	3e01      	subs	r6, #1
 80059b0:	7033      	strb	r3, [r6, #0]
 80059b2:	9b04      	ldr	r3, [sp, #16]
 80059b4:	1b9b      	subs	r3, r3, r6
 80059b6:	6123      	str	r3, [r4, #16]
 80059b8:	9b07      	ldr	r3, [sp, #28]
 80059ba:	0021      	movs	r1, r4
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	9805      	ldr	r0, [sp, #20]
 80059c0:	9b06      	ldr	r3, [sp, #24]
 80059c2:	aa09      	add	r2, sp, #36	; 0x24
 80059c4:	f7ff fef4 	bl	80057b0 <_printf_common>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d14c      	bne.n	8005a66 <_printf_i+0x1d6>
 80059cc:	2001      	movs	r0, #1
 80059ce:	4240      	negs	r0, r0
 80059d0:	b00b      	add	sp, #44	; 0x2c
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d4:	3145      	adds	r1, #69	; 0x45
 80059d6:	700a      	strb	r2, [r1, #0]
 80059d8:	4a34      	ldr	r2, [pc, #208]	; (8005aac <_printf_i+0x21c>)
 80059da:	9203      	str	r2, [sp, #12]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	6821      	ldr	r1, [r4, #0]
 80059e0:	ca20      	ldmia	r2!, {r5}
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	0608      	lsls	r0, r1, #24
 80059e6:	d516      	bpl.n	8005a16 <_printf_i+0x186>
 80059e8:	07cb      	lsls	r3, r1, #31
 80059ea:	d502      	bpl.n	80059f2 <_printf_i+0x162>
 80059ec:	2320      	movs	r3, #32
 80059ee:	4319      	orrs	r1, r3
 80059f0:	6021      	str	r1, [r4, #0]
 80059f2:	2710      	movs	r7, #16
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	d1b2      	bne.n	800595e <_printf_i+0xce>
 80059f8:	2320      	movs	r3, #32
 80059fa:	6822      	ldr	r2, [r4, #0]
 80059fc:	439a      	bics	r2, r3
 80059fe:	6022      	str	r2, [r4, #0]
 8005a00:	e7ad      	b.n	800595e <_printf_i+0xce>
 8005a02:	2220      	movs	r2, #32
 8005a04:	6809      	ldr	r1, [r1, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	6022      	str	r2, [r4, #0]
 8005a0a:	0022      	movs	r2, r4
 8005a0c:	2178      	movs	r1, #120	; 0x78
 8005a0e:	3245      	adds	r2, #69	; 0x45
 8005a10:	7011      	strb	r1, [r2, #0]
 8005a12:	4a27      	ldr	r2, [pc, #156]	; (8005ab0 <_printf_i+0x220>)
 8005a14:	e7e1      	b.n	80059da <_printf_i+0x14a>
 8005a16:	0648      	lsls	r0, r1, #25
 8005a18:	d5e6      	bpl.n	80059e8 <_printf_i+0x158>
 8005a1a:	b2ad      	uxth	r5, r5
 8005a1c:	e7e4      	b.n	80059e8 <_printf_i+0x158>
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	680d      	ldr	r5, [r1, #0]
 8005a22:	1d10      	adds	r0, r2, #4
 8005a24:	6949      	ldr	r1, [r1, #20]
 8005a26:	6018      	str	r0, [r3, #0]
 8005a28:	6813      	ldr	r3, [r2, #0]
 8005a2a:	062e      	lsls	r6, r5, #24
 8005a2c:	d501      	bpl.n	8005a32 <_printf_i+0x1a2>
 8005a2e:	6019      	str	r1, [r3, #0]
 8005a30:	e002      	b.n	8005a38 <_printf_i+0x1a8>
 8005a32:	066d      	lsls	r5, r5, #25
 8005a34:	d5fb      	bpl.n	8005a2e <_printf_i+0x19e>
 8005a36:	8019      	strh	r1, [r3, #0]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9e04      	ldr	r6, [sp, #16]
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	e7bb      	b.n	80059b8 <_printf_i+0x128>
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	1d11      	adds	r1, r2, #4
 8005a44:	6019      	str	r1, [r3, #0]
 8005a46:	6816      	ldr	r6, [r2, #0]
 8005a48:	2100      	movs	r1, #0
 8005a4a:	0030      	movs	r0, r6
 8005a4c:	6862      	ldr	r2, [r4, #4]
 8005a4e:	f000 f831 	bl	8005ab4 <memchr>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d001      	beq.n	8005a5a <_printf_i+0x1ca>
 8005a56:	1b80      	subs	r0, r0, r6
 8005a58:	6060      	str	r0, [r4, #4]
 8005a5a:	6863      	ldr	r3, [r4, #4]
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9a04      	ldr	r2, [sp, #16]
 8005a62:	7013      	strb	r3, [r2, #0]
 8005a64:	e7a8      	b.n	80059b8 <_printf_i+0x128>
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	0032      	movs	r2, r6
 8005a6a:	9906      	ldr	r1, [sp, #24]
 8005a6c:	9805      	ldr	r0, [sp, #20]
 8005a6e:	9d07      	ldr	r5, [sp, #28]
 8005a70:	47a8      	blx	r5
 8005a72:	1c43      	adds	r3, r0, #1
 8005a74:	d0aa      	beq.n	80059cc <_printf_i+0x13c>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	079b      	lsls	r3, r3, #30
 8005a7a:	d415      	bmi.n	8005aa8 <_printf_i+0x218>
 8005a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7e:	68e0      	ldr	r0, [r4, #12]
 8005a80:	4298      	cmp	r0, r3
 8005a82:	daa5      	bge.n	80059d0 <_printf_i+0x140>
 8005a84:	0018      	movs	r0, r3
 8005a86:	e7a3      	b.n	80059d0 <_printf_i+0x140>
 8005a88:	0022      	movs	r2, r4
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	9906      	ldr	r1, [sp, #24]
 8005a8e:	9805      	ldr	r0, [sp, #20]
 8005a90:	9e07      	ldr	r6, [sp, #28]
 8005a92:	3219      	adds	r2, #25
 8005a94:	47b0      	blx	r6
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	d098      	beq.n	80059cc <_printf_i+0x13c>
 8005a9a:	3501      	adds	r5, #1
 8005a9c:	68e3      	ldr	r3, [r4, #12]
 8005a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	42ab      	cmp	r3, r5
 8005aa4:	dcf0      	bgt.n	8005a88 <_printf_i+0x1f8>
 8005aa6:	e7e9      	b.n	8005a7c <_printf_i+0x1ec>
 8005aa8:	2500      	movs	r5, #0
 8005aaa:	e7f7      	b.n	8005a9c <_printf_i+0x20c>
 8005aac:	08005f41 	.word	0x08005f41
 8005ab0:	08005f52 	.word	0x08005f52

08005ab4 <memchr>:
 8005ab4:	b2c9      	uxtb	r1, r1
 8005ab6:	1882      	adds	r2, r0, r2
 8005ab8:	4290      	cmp	r0, r2
 8005aba:	d101      	bne.n	8005ac0 <memchr+0xc>
 8005abc:	2000      	movs	r0, #0
 8005abe:	4770      	bx	lr
 8005ac0:	7803      	ldrb	r3, [r0, #0]
 8005ac2:	428b      	cmp	r3, r1
 8005ac4:	d0fb      	beq.n	8005abe <memchr+0xa>
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	e7f6      	b.n	8005ab8 <memchr+0x4>

08005aca <memcpy>:
 8005aca:	2300      	movs	r3, #0
 8005acc:	b510      	push	{r4, lr}
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d100      	bne.n	8005ad4 <memcpy+0xa>
 8005ad2:	bd10      	pop	{r4, pc}
 8005ad4:	5ccc      	ldrb	r4, [r1, r3]
 8005ad6:	54c4      	strb	r4, [r0, r3]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	e7f8      	b.n	8005ace <memcpy+0x4>

08005adc <memmove>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	4288      	cmp	r0, r1
 8005ae0:	d902      	bls.n	8005ae8 <memmove+0xc>
 8005ae2:	188b      	adds	r3, r1, r2
 8005ae4:	4298      	cmp	r0, r3
 8005ae6:	d303      	bcc.n	8005af0 <memmove+0x14>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e007      	b.n	8005afc <memmove+0x20>
 8005aec:	5c8b      	ldrb	r3, [r1, r2]
 8005aee:	5483      	strb	r3, [r0, r2]
 8005af0:	3a01      	subs	r2, #1
 8005af2:	d2fb      	bcs.n	8005aec <memmove+0x10>
 8005af4:	bd10      	pop	{r4, pc}
 8005af6:	5ccc      	ldrb	r4, [r1, r3]
 8005af8:	54c4      	strb	r4, [r0, r3]
 8005afa:	3301      	adds	r3, #1
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d1fa      	bne.n	8005af6 <memmove+0x1a>
 8005b00:	e7f8      	b.n	8005af4 <memmove+0x18>
	...

08005b04 <_free_r>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	0005      	movs	r5, r0
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	d010      	beq.n	8005b2e <_free_r+0x2a>
 8005b0c:	1f0c      	subs	r4, r1, #4
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	da00      	bge.n	8005b16 <_free_r+0x12>
 8005b14:	18e4      	adds	r4, r4, r3
 8005b16:	0028      	movs	r0, r5
 8005b18:	f000 f918 	bl	8005d4c <__malloc_lock>
 8005b1c:	4a1d      	ldr	r2, [pc, #116]	; (8005b94 <_free_r+0x90>)
 8005b1e:	6813      	ldr	r3, [r2, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d105      	bne.n	8005b30 <_free_r+0x2c>
 8005b24:	6063      	str	r3, [r4, #4]
 8005b26:	6014      	str	r4, [r2, #0]
 8005b28:	0028      	movs	r0, r5
 8005b2a:	f000 f917 	bl	8005d5c <__malloc_unlock>
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	d908      	bls.n	8005b46 <_free_r+0x42>
 8005b34:	6821      	ldr	r1, [r4, #0]
 8005b36:	1860      	adds	r0, r4, r1
 8005b38:	4283      	cmp	r3, r0
 8005b3a:	d1f3      	bne.n	8005b24 <_free_r+0x20>
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	1841      	adds	r1, r0, r1
 8005b42:	6021      	str	r1, [r4, #0]
 8005b44:	e7ee      	b.n	8005b24 <_free_r+0x20>
 8005b46:	001a      	movs	r2, r3
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <_free_r+0x4e>
 8005b4e:	42a3      	cmp	r3, r4
 8005b50:	d9f9      	bls.n	8005b46 <_free_r+0x42>
 8005b52:	6811      	ldr	r1, [r2, #0]
 8005b54:	1850      	adds	r0, r2, r1
 8005b56:	42a0      	cmp	r0, r4
 8005b58:	d10b      	bne.n	8005b72 <_free_r+0x6e>
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	1809      	adds	r1, r1, r0
 8005b5e:	1850      	adds	r0, r2, r1
 8005b60:	6011      	str	r1, [r2, #0]
 8005b62:	4283      	cmp	r3, r0
 8005b64:	d1e0      	bne.n	8005b28 <_free_r+0x24>
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	1841      	adds	r1, r0, r1
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	6053      	str	r3, [r2, #4]
 8005b70:	e7da      	b.n	8005b28 <_free_r+0x24>
 8005b72:	42a0      	cmp	r0, r4
 8005b74:	d902      	bls.n	8005b7c <_free_r+0x78>
 8005b76:	230c      	movs	r3, #12
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	e7d5      	b.n	8005b28 <_free_r+0x24>
 8005b7c:	6821      	ldr	r1, [r4, #0]
 8005b7e:	1860      	adds	r0, r4, r1
 8005b80:	4283      	cmp	r3, r0
 8005b82:	d103      	bne.n	8005b8c <_free_r+0x88>
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	1841      	adds	r1, r0, r1
 8005b8a:	6021      	str	r1, [r4, #0]
 8005b8c:	6063      	str	r3, [r4, #4]
 8005b8e:	6054      	str	r4, [r2, #4]
 8005b90:	e7ca      	b.n	8005b28 <_free_r+0x24>
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	20000164 	.word	0x20000164

08005b98 <sbrk_aligned>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	4e0f      	ldr	r6, [pc, #60]	; (8005bd8 <sbrk_aligned+0x40>)
 8005b9c:	000d      	movs	r5, r1
 8005b9e:	6831      	ldr	r1, [r6, #0]
 8005ba0:	0004      	movs	r4, r0
 8005ba2:	2900      	cmp	r1, #0
 8005ba4:	d102      	bne.n	8005bac <sbrk_aligned+0x14>
 8005ba6:	f000 f8bf 	bl	8005d28 <_sbrk_r>
 8005baa:	6030      	str	r0, [r6, #0]
 8005bac:	0029      	movs	r1, r5
 8005bae:	0020      	movs	r0, r4
 8005bb0:	f000 f8ba 	bl	8005d28 <_sbrk_r>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d00a      	beq.n	8005bce <sbrk_aligned+0x36>
 8005bb8:	2303      	movs	r3, #3
 8005bba:	1cc5      	adds	r5, r0, #3
 8005bbc:	439d      	bics	r5, r3
 8005bbe:	42a8      	cmp	r0, r5
 8005bc0:	d007      	beq.n	8005bd2 <sbrk_aligned+0x3a>
 8005bc2:	1a29      	subs	r1, r5, r0
 8005bc4:	0020      	movs	r0, r4
 8005bc6:	f000 f8af 	bl	8005d28 <_sbrk_r>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	d101      	bne.n	8005bd2 <sbrk_aligned+0x3a>
 8005bce:	2501      	movs	r5, #1
 8005bd0:	426d      	negs	r5, r5
 8005bd2:	0028      	movs	r0, r5
 8005bd4:	bd70      	pop	{r4, r5, r6, pc}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	20000168 	.word	0x20000168

08005bdc <_malloc_r>:
 8005bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bde:	2203      	movs	r2, #3
 8005be0:	1ccb      	adds	r3, r1, #3
 8005be2:	4393      	bics	r3, r2
 8005be4:	3308      	adds	r3, #8
 8005be6:	0006      	movs	r6, r0
 8005be8:	001f      	movs	r7, r3
 8005bea:	2b0c      	cmp	r3, #12
 8005bec:	d232      	bcs.n	8005c54 <_malloc_r+0x78>
 8005bee:	270c      	movs	r7, #12
 8005bf0:	42b9      	cmp	r1, r7
 8005bf2:	d831      	bhi.n	8005c58 <_malloc_r+0x7c>
 8005bf4:	0030      	movs	r0, r6
 8005bf6:	f000 f8a9 	bl	8005d4c <__malloc_lock>
 8005bfa:	4d32      	ldr	r5, [pc, #200]	; (8005cc4 <_malloc_r+0xe8>)
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	001c      	movs	r4, r3
 8005c00:	2c00      	cmp	r4, #0
 8005c02:	d12e      	bne.n	8005c62 <_malloc_r+0x86>
 8005c04:	0039      	movs	r1, r7
 8005c06:	0030      	movs	r0, r6
 8005c08:	f7ff ffc6 	bl	8005b98 <sbrk_aligned>
 8005c0c:	0004      	movs	r4, r0
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	d11e      	bne.n	8005c50 <_malloc_r+0x74>
 8005c12:	682c      	ldr	r4, [r5, #0]
 8005c14:	0025      	movs	r5, r4
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	d14a      	bne.n	8005cb0 <_malloc_r+0xd4>
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	0029      	movs	r1, r5
 8005c1e:	18e3      	adds	r3, r4, r3
 8005c20:	0030      	movs	r0, r6
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	f000 f880 	bl	8005d28 <_sbrk_r>
 8005c28:	9b01      	ldr	r3, [sp, #4]
 8005c2a:	4283      	cmp	r3, r0
 8005c2c:	d143      	bne.n	8005cb6 <_malloc_r+0xda>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	3703      	adds	r7, #3
 8005c32:	1aff      	subs	r7, r7, r3
 8005c34:	2303      	movs	r3, #3
 8005c36:	439f      	bics	r7, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	2f0c      	cmp	r7, #12
 8005c3c:	d200      	bcs.n	8005c40 <_malloc_r+0x64>
 8005c3e:	270c      	movs	r7, #12
 8005c40:	0039      	movs	r1, r7
 8005c42:	0030      	movs	r0, r6
 8005c44:	f7ff ffa8 	bl	8005b98 <sbrk_aligned>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d034      	beq.n	8005cb6 <_malloc_r+0xda>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	19df      	adds	r7, r3, r7
 8005c50:	6027      	str	r7, [r4, #0]
 8005c52:	e013      	b.n	8005c7c <_malloc_r+0xa0>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	dacb      	bge.n	8005bf0 <_malloc_r+0x14>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	2500      	movs	r5, #0
 8005c5c:	6033      	str	r3, [r6, #0]
 8005c5e:	0028      	movs	r0, r5
 8005c60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	1bd1      	subs	r1, r2, r7
 8005c66:	d420      	bmi.n	8005caa <_malloc_r+0xce>
 8005c68:	290b      	cmp	r1, #11
 8005c6a:	d917      	bls.n	8005c9c <_malloc_r+0xc0>
 8005c6c:	19e2      	adds	r2, r4, r7
 8005c6e:	6027      	str	r7, [r4, #0]
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	d111      	bne.n	8005c98 <_malloc_r+0xbc>
 8005c74:	602a      	str	r2, [r5, #0]
 8005c76:	6863      	ldr	r3, [r4, #4]
 8005c78:	6011      	str	r1, [r2, #0]
 8005c7a:	6053      	str	r3, [r2, #4]
 8005c7c:	0030      	movs	r0, r6
 8005c7e:	0025      	movs	r5, r4
 8005c80:	f000 f86c 	bl	8005d5c <__malloc_unlock>
 8005c84:	2207      	movs	r2, #7
 8005c86:	350b      	adds	r5, #11
 8005c88:	1d23      	adds	r3, r4, #4
 8005c8a:	4395      	bics	r5, r2
 8005c8c:	1aea      	subs	r2, r5, r3
 8005c8e:	429d      	cmp	r5, r3
 8005c90:	d0e5      	beq.n	8005c5e <_malloc_r+0x82>
 8005c92:	1b5b      	subs	r3, r3, r5
 8005c94:	50a3      	str	r3, [r4, r2]
 8005c96:	e7e2      	b.n	8005c5e <_malloc_r+0x82>
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	e7ec      	b.n	8005c76 <_malloc_r+0x9a>
 8005c9c:	6862      	ldr	r2, [r4, #4]
 8005c9e:	42a3      	cmp	r3, r4
 8005ca0:	d101      	bne.n	8005ca6 <_malloc_r+0xca>
 8005ca2:	602a      	str	r2, [r5, #0]
 8005ca4:	e7ea      	b.n	8005c7c <_malloc_r+0xa0>
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	e7e8      	b.n	8005c7c <_malloc_r+0xa0>
 8005caa:	0023      	movs	r3, r4
 8005cac:	6864      	ldr	r4, [r4, #4]
 8005cae:	e7a7      	b.n	8005c00 <_malloc_r+0x24>
 8005cb0:	002c      	movs	r4, r5
 8005cb2:	686d      	ldr	r5, [r5, #4]
 8005cb4:	e7af      	b.n	8005c16 <_malloc_r+0x3a>
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	0030      	movs	r0, r6
 8005cba:	6033      	str	r3, [r6, #0]
 8005cbc:	f000 f84e 	bl	8005d5c <__malloc_unlock>
 8005cc0:	e7cd      	b.n	8005c5e <_malloc_r+0x82>
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	20000164 	.word	0x20000164

08005cc8 <_realloc_r>:
 8005cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cca:	0007      	movs	r7, r0
 8005ccc:	000e      	movs	r6, r1
 8005cce:	0014      	movs	r4, r2
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	d105      	bne.n	8005ce0 <_realloc_r+0x18>
 8005cd4:	0011      	movs	r1, r2
 8005cd6:	f7ff ff81 	bl	8005bdc <_malloc_r>
 8005cda:	0005      	movs	r5, r0
 8005cdc:	0028      	movs	r0, r5
 8005cde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	d103      	bne.n	8005cec <_realloc_r+0x24>
 8005ce4:	f7ff ff0e 	bl	8005b04 <_free_r>
 8005ce8:	0025      	movs	r5, r4
 8005cea:	e7f7      	b.n	8005cdc <_realloc_r+0x14>
 8005cec:	f000 f83e 	bl	8005d6c <_malloc_usable_size_r>
 8005cf0:	9001      	str	r0, [sp, #4]
 8005cf2:	4284      	cmp	r4, r0
 8005cf4:	d803      	bhi.n	8005cfe <_realloc_r+0x36>
 8005cf6:	0035      	movs	r5, r6
 8005cf8:	0843      	lsrs	r3, r0, #1
 8005cfa:	42a3      	cmp	r3, r4
 8005cfc:	d3ee      	bcc.n	8005cdc <_realloc_r+0x14>
 8005cfe:	0021      	movs	r1, r4
 8005d00:	0038      	movs	r0, r7
 8005d02:	f7ff ff6b 	bl	8005bdc <_malloc_r>
 8005d06:	1e05      	subs	r5, r0, #0
 8005d08:	d0e8      	beq.n	8005cdc <_realloc_r+0x14>
 8005d0a:	9b01      	ldr	r3, [sp, #4]
 8005d0c:	0022      	movs	r2, r4
 8005d0e:	429c      	cmp	r4, r3
 8005d10:	d900      	bls.n	8005d14 <_realloc_r+0x4c>
 8005d12:	001a      	movs	r2, r3
 8005d14:	0031      	movs	r1, r6
 8005d16:	0028      	movs	r0, r5
 8005d18:	f7ff fed7 	bl	8005aca <memcpy>
 8005d1c:	0031      	movs	r1, r6
 8005d1e:	0038      	movs	r0, r7
 8005d20:	f7ff fef0 	bl	8005b04 <_free_r>
 8005d24:	e7da      	b.n	8005cdc <_realloc_r+0x14>
	...

08005d28 <_sbrk_r>:
 8005d28:	2300      	movs	r3, #0
 8005d2a:	b570      	push	{r4, r5, r6, lr}
 8005d2c:	4d06      	ldr	r5, [pc, #24]	; (8005d48 <_sbrk_r+0x20>)
 8005d2e:	0004      	movs	r4, r0
 8005d30:	0008      	movs	r0, r1
 8005d32:	602b      	str	r3, [r5, #0]
 8005d34:	f7fb fd2c 	bl	8001790 <_sbrk>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d103      	bne.n	8005d44 <_sbrk_r+0x1c>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d000      	beq.n	8005d44 <_sbrk_r+0x1c>
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	2000016c 	.word	0x2000016c

08005d4c <__malloc_lock>:
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	4802      	ldr	r0, [pc, #8]	; (8005d58 <__malloc_lock+0xc>)
 8005d50:	f000 f814 	bl	8005d7c <__retarget_lock_acquire_recursive>
 8005d54:	bd10      	pop	{r4, pc}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	20000170 	.word	0x20000170

08005d5c <__malloc_unlock>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4802      	ldr	r0, [pc, #8]	; (8005d68 <__malloc_unlock+0xc>)
 8005d60:	f000 f80d 	bl	8005d7e <__retarget_lock_release_recursive>
 8005d64:	bd10      	pop	{r4, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	20000170 	.word	0x20000170

08005d6c <_malloc_usable_size_r>:
 8005d6c:	1f0b      	subs	r3, r1, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	1f18      	subs	r0, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	da01      	bge.n	8005d7a <_malloc_usable_size_r+0xe>
 8005d76:	580b      	ldr	r3, [r1, r0]
 8005d78:	18c0      	adds	r0, r0, r3
 8005d7a:	4770      	bx	lr

08005d7c <__retarget_lock_acquire_recursive>:
 8005d7c:	4770      	bx	lr

08005d7e <__retarget_lock_release_recursive>:
 8005d7e:	4770      	bx	lr

08005d80 <_init>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr

08005d8c <_fini>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d92:	bc08      	pop	{r3}
 8005d94:	469e      	mov	lr, r3
 8005d96:	4770      	bx	lr
