
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b1c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c60  08003c60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c68  08003c68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028b0  20000010  08003c80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028c0  08003c80  000228c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c68b  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc4  00000000  00000000  0002c6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002e388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b408  00000000  00000000  0002f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd8d  00000000  00000000  0004a968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b04c7  00000000  00000000  000566f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106bbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002018  00000000  00000000  00106c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003bc0 	.word	0x08003bc0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003bc0 	.word	0x08003bc0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_TxCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
/*UART interrupt Callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	dataSent = 1;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_UART_TxCpltCallback+0x18>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	20000000 	.word	0x20000000

08000638 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800063e:	f000 fa17 	bl	8000a70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000642:	f000 f839 	bl	80006b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000646:	f000 f8e3 	bl	8000810 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800064a:	f000 f893 	bl	8000774 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	/*given values to the matrix*/
	for (uint32_t i = 0; i < 10240Ul; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	e009      	b.n	8000668 <main+0x30>
		data[i] = i & (0xff);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	b2d9      	uxtb	r1, r3
 8000658:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <main+0x70>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	18d3      	adds	r3, r2, r3
 800065e:	1c0a      	adds	r2, r1, #0
 8000660:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 10240Ul; i++) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	23a0      	movs	r3, #160	; 0xa0
 800066c:	019b      	lsls	r3, r3, #6
 800066e:	429a      	cmp	r2, r3
 8000670:	d3f0      	bcc.n	8000654 <main+0x1c>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/*check if sending of data finished to resends again*/
		if (dataSent == 1) {
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <main+0x74>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d109      	bne.n	800068e <main+0x56>
			/*Transmit data Via UART2 using Interrupt mode*/
			HAL_UART_Transmit_IT(&huart2, data, sizeof(data));
 800067a:	23a0      	movs	r3, #160	; 0xa0
 800067c:	019a      	lsls	r2, r3, #6
 800067e:	490a      	ldr	r1, [pc, #40]	; (80006a8 <main+0x70>)
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <main+0x78>)
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fde6 	bl	8002254 <HAL_UART_Transmit_IT>
			dataSent = 0;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <main+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		}
		/*Toggle PC13 LED on board*/
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	019b      	lsls	r3, r3, #6
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <main+0x7c>)
 8000694:	0019      	movs	r1, r3
 8000696:	0010      	movs	r0, r2
 8000698:	f000 fdd9 	bl	800124e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800069c:	23fa      	movs	r3, #250	; 0xfa
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fa6b 	bl	8000b7c <HAL_Delay>
		if (dataSent == 1) {
 80006a6:	e7e4      	b.n	8000672 <main+0x3a>
 80006a8:	200000bc 	.word	0x200000bc
 80006ac:	20000000 	.word	0x20000000
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	50000800 	.word	0x50000800

080006b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b095      	sub	sp, #84	; 0x54
 80006bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006be:	2414      	movs	r4, #20
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	233c      	movs	r3, #60	; 0x3c
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f003 fa71 	bl	8003bb0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	0018      	movs	r0, r3
 80006d2:	2310      	movs	r3, #16
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f003 fa6a 	bl	8003bb0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fdcf 	bl	8001284 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f4:	0021      	movs	r1, r4
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2240      	movs	r2, #64	; 0x40
 8000700:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2202      	movs	r2, #2
 8000706:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2202      	movs	r2, #2
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 9;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2209      	movs	r2, #9
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	0292      	lsls	r2, r2, #10
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0492      	lsls	r2, r2, #18
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	05d2      	lsls	r2, r2, #23
 8000730:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000732:	187b      	adds	r3, r7, r1
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fdf1 	bl	800131c <HAL_RCC_OscConfig>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x8a>
		Error_Handler();
 800073e:	f000 f8ad 	bl	800089c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2202      	movs	r2, #2
 800074c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2101      	movs	r1, #1
 800075e:	0018      	movs	r0, r3
 8000760:	f001 f93c 	bl	80019dc <HAL_RCC_ClockConfig>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xb4>
		Error_Handler();
 8000768:	f000 f898 	bl	800089c <Error_Handler>
	}
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b015      	add	sp, #84	; 0x54
 8000772:	bd90      	pop	{r4, r7, pc}

08000774 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_USART2_UART_Init+0x94>)
 800077a:	4a24      	ldr	r2, [pc, #144]	; (800080c <MX_USART2_UART_Init+0x98>)
 800077c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <MX_USART2_UART_Init+0x94>)
 8000780:	22e1      	movs	r2, #225	; 0xe1
 8000782:	0252      	lsls	r2, r2, #9
 8000784:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_USART2_UART_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_USART2_UART_Init+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_USART2_UART_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_USART2_UART_Init+0x94>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_USART2_UART_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_USART2_UART_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_USART2_UART_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_USART2_UART_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART2_UART_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_USART2_UART_Init+0x94>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fcf2 	bl	80021a8 <HAL_UART_Init>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x58>
		Error_Handler();
 80007c8:	f000 f868 	bl	800089c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x94>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 f8e9 	bl	80039a8 <HAL_UARTEx_SetTxFifoThreshold>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80007da:	f000 f85f 	bl	800089c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_USART2_UART_Init+0x94>)
 80007e0:	2100      	movs	r1, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f003 f920 	bl	8003a28 <HAL_UARTEx_SetRxFifoThreshold>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80007ec:	f000 f856 	bl	800089c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x94>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f003 f89e 	bl	8003934 <HAL_UARTEx_DisableFifoMode>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80007fc:	f000 f84e 	bl	800089c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	2000002c 	.word	0x2000002c
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000816:	240c      	movs	r4, #12
 8000818:	193b      	adds	r3, r7, r4
 800081a:	0018      	movs	r0, r3
 800081c:	2314      	movs	r3, #20
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f003 f9c5 	bl	8003bb0 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_GPIO_Init+0x84>)
 8000828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_GPIO_Init+0x84>)
 800082c:	2104      	movs	r1, #4
 800082e:	430a      	orrs	r2, r1
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_GPIO_Init+0x84>)
 8000834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000836:	2204      	movs	r2, #4
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_GPIO_Init+0x84>)
 8000840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_GPIO_Init+0x84>)
 8000844:	2101      	movs	r1, #1
 8000846:	430a      	orrs	r2, r1
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_GPIO_Init+0x84>)
 800084c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084e:	2201      	movs	r2, #1
 8000850:	4013      	ands	r3, r2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	019b      	lsls	r3, r3, #6
 800085a:	480f      	ldr	r0, [pc, #60]	; (8000898 <MX_GPIO_Init+0x88>)
 800085c:	2200      	movs	r2, #0
 800085e:	0019      	movs	r1, r3
 8000860:	f000 fcd8 	bl	8001214 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0192      	lsls	r2, r2, #6
 800086a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	193b      	adds	r3, r7, r4
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <MX_GPIO_Init+0x88>)
 8000882:	0019      	movs	r1, r3
 8000884:	0010      	movs	r0, r2
 8000886:	f000 fb59 	bl	8000f3c <HAL_GPIO_Init>

}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b009      	add	sp, #36	; 0x24
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000
 8000898:	50000800 	.word	0x50000800

0800089c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_MspInit+0x4c>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0549      	lsls	r1, r1, #21
 80008d0:	430a      	orrs	r2, r1
 80008d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	055b      	lsls	r3, r3, #21
 80008dc:	4013      	ands	r3, r2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008e2:	23c0      	movs	r3, #192	; 0xc0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 f96c 	bl	8000bc4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b09d      	sub	sp, #116	; 0x74
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	235c      	movs	r3, #92	; 0x5c
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f003 f950 	bl	8003bb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	2410      	movs	r4, #16
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	234c      	movs	r3, #76	; 0x4c
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f003 f948 	bl	8003bb0 <memset>
  if(huart->Instance==USART2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <HAL_UART_MspInit+0xc8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d146      	bne.n	80009b8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2202      	movs	r2, #2
 800092e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	f001 f9f9 	bl	8001d30 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000942:	f7ff ffab 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_UART_MspInit+0xcc>)
 8000948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_UART_MspInit+0xcc>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	0289      	lsls	r1, r1, #10
 8000950:	430a      	orrs	r2, r1
 8000952:	63da      	str	r2, [r3, #60]	; 0x3c
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_UART_MspInit+0xcc>)
 8000956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	029b      	lsls	r3, r3, #10
 800095c:	4013      	ands	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_UART_MspInit+0xcc>)
 8000964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_UART_MspInit+0xcc>)
 8000968:	2101      	movs	r1, #1
 800096a:	430a      	orrs	r2, r1
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_UART_MspInit+0xcc>)
 8000970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000972:	2201      	movs	r2, #1
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800097a:	215c      	movs	r1, #92	; 0x5c
 800097c:	187b      	adds	r3, r7, r1
 800097e:	220c      	movs	r2, #12
 8000980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2202      	movs	r2, #2
 8000986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2201      	movs	r2, #1
 8000998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	187a      	adds	r2, r7, r1
 800099c:	23a0      	movs	r3, #160	; 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 faca 	bl	8000f3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	201c      	movs	r0, #28
 80009ae:	f000 f9cb 	bl	8000d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 80009b2:	201c      	movs	r0, #28
 80009b4:	f000 f9dd 	bl	8000d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b01d      	add	sp, #116	; 0x74
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f8aa 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <USART2_LPUART2_IRQHandler+0x14>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fce4 	bl	80023cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	2000002c 	.word	0x2000002c

08000a10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a20:	f7ff fff6 	bl	8000a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	; (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	; (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a4a:	f003 f88d 	bl	8003b68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a4e:	f7ff fdf3 	bl	8000638 <main>

08000a52 <LoopForever>:

LoopForever:
  b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   r0, =_estack
 8000a54:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a60:	08003c70 	.word	0x08003c70
  ldr r2, =_sbss
 8000a64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a68:	200028c0 	.word	0x200028c0

08000a6c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_COMP_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_Init+0x3c>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_Init+0x3c>)
 8000a82:	2180      	movs	r1, #128	; 0x80
 8000a84:	0049      	lsls	r1, r1, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f000 f810 	bl	8000ab0 <HAL_InitTick>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d003      	beq.n	8000a9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e001      	b.n	8000aa0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff ff04 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <HAL_InitTick+0x88>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d02b      	beq.n	8000b20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_InitTick+0x8c>)
 8000aca:	681c      	ldr	r4, [r3, #0]
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_InitTick+0x88>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	23fa      	movs	r3, #250	; 0xfa
 8000ad4:	0098      	lsls	r0, r3, #2
 8000ad6:	f7ff fb15 	bl	8000104 <__udivsi3>
 8000ada:	0003      	movs	r3, r0
 8000adc:	0019      	movs	r1, r3
 8000ade:	0020      	movs	r0, r4
 8000ae0:	f7ff fb10 	bl	8000104 <__udivsi3>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f953 	bl	8000d92 <HAL_SYSTICK_Config>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d112      	bne.n	8000b16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d80a      	bhi.n	8000b0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	2301      	movs	r3, #1
 8000afa:	425b      	negs	r3, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f922 	bl	8000d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_InitTick+0x90>)
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	e00d      	b.n	8000b28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e008      	b.n	8000b28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b16:	230f      	movs	r3, #15
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e003      	b.n	8000b28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b20:	230f      	movs	r3, #15
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	781b      	ldrb	r3, [r3, #0]
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b005      	add	sp, #20
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	2000000c 	.word	0x2000000c
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	20000008 	.word	0x20000008

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x20>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	18d2      	adds	r2, r2, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_IncTick+0x20>)
 8000b56:	601a      	str	r2, [r3, #0]
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	200028bc 	.word	0x200028bc

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <HAL_GetTick+0x10>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	200028bc 	.word	0x200028bc

08000b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b84:	f7ff fff0 	bl	8000b68 <HAL_GetTick>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	d005      	beq.n	8000ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_Delay+0x44>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	189b      	adds	r3, r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	f7ff ffe0 	bl	8000b68 <HAL_GetTick>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8f7      	bhi.n	8000ba4 <HAL_Delay+0x28>
  {
  }
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	2000000c 	.word	0x2000000c

08000bc4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40010000 	.word	0x40010000
 8000bec:	fffff9ff 	.word	0xfffff9ff

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b7f      	cmp	r3, #127	; 0x7f
 8000c02:	d809      	bhi.n	8000c18 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	001a      	movs	r2, r3
 8000c0a:	231f      	movs	r3, #31
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_EnableIRQ+0x30>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	4091      	lsls	r1, r2
 8000c14:	000a      	movs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b7f      	cmp	r3, #127	; 0x7f
 8000c38:	d828      	bhi.n	8000c8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	; (8000cf8 <__NVIC_SetPriority+0xd4>)
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	33c0      	adds	r3, #192	; 0xc0
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	589b      	ldr	r3, [r3, r2]
 8000c4a:	1dfa      	adds	r2, r7, #7
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	0011      	movs	r1, r2
 8000c50:	2203      	movs	r2, #3
 8000c52:	400a      	ands	r2, r1
 8000c54:	00d2      	lsls	r2, r2, #3
 8000c56:	21ff      	movs	r1, #255	; 0xff
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	43d2      	mvns	r2, r2
 8000c5e:	401a      	ands	r2, r3
 8000c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	22ff      	movs	r2, #255	; 0xff
 8000c68:	401a      	ands	r2, r3
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	0018      	movs	r0, r3
 8000c70:	2303      	movs	r3, #3
 8000c72:	4003      	ands	r3, r0
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c78:	481f      	ldr	r0, [pc, #124]	; (8000cf8 <__NVIC_SetPriority+0xd4>)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	430a      	orrs	r2, r1
 8000c84:	33c0      	adds	r3, #192	; 0xc0
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c8a:	e031      	b.n	8000cf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <__NVIC_SetPriority+0xd8>)
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0019      	movs	r1, r3
 8000c94:	230f      	movs	r3, #15
 8000c96:	400b      	ands	r3, r1
 8000c98:	3b08      	subs	r3, #8
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3306      	adds	r3, #6
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1dfa      	adds	r2, r7, #7
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	0011      	movs	r1, r2
 8000cac:	2203      	movs	r2, #3
 8000cae:	400a      	ands	r2, r1
 8000cb0:	00d2      	lsls	r2, r2, #3
 8000cb2:	21ff      	movs	r1, #255	; 0xff
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	43d2      	mvns	r2, r2
 8000cba:	401a      	ands	r2, r3
 8000cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	22ff      	movs	r2, #255	; 0xff
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	2303      	movs	r3, #3
 8000cce:	4003      	ands	r3, r0
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <__NVIC_SetPriority+0xd8>)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	001c      	movs	r4, r3
 8000cdc:	230f      	movs	r3, #15
 8000cde:	4023      	ands	r3, r4
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	3306      	adds	r3, #6
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	18c3      	adds	r3, r0, r3
 8000cec:	3304      	adds	r3, #4
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b003      	add	sp, #12
 8000cf6:	bd90      	pop	{r4, r7, pc}
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	045b      	lsls	r3, r3, #17
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d301      	bcc.n	8000d18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d14:	2301      	movs	r3, #1
 8000d16:	e010      	b.n	8000d3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <SysTick_Config+0x44>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d20:	2301      	movs	r3, #1
 8000d22:	425b      	negs	r3, r3
 8000d24:	2103      	movs	r1, #3
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff ff7c 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SysTick_Config+0x44>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Config+0x44>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	210f      	movs	r1, #15
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	1c02      	adds	r2, r0, #0
 8000d58:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	0002      	movs	r2, r0
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff ff33 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff ffaf 	bl	8000d00 <SysTick_Config>
 8000da2:	0003      	movs	r3, r0
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e04f      	b.n	8000e5e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2225      	movs	r2, #37	; 0x25
 8000dc2:	5c9b      	ldrb	r3, [r3, r2]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d008      	beq.n	8000ddc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2204      	movs	r2, #4
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2224      	movs	r2, #36	; 0x24
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e040      	b.n	8000e5e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	210e      	movs	r1, #14
 8000de8:	438a      	bics	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000df6:	491c      	ldr	r1, [pc, #112]	; (8000e68 <HAL_DMA_Abort+0xbc>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2101      	movs	r1, #1
 8000e08:	438a      	bics	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e10:	221c      	movs	r2, #28
 8000e12:	401a      	ands	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4091      	lsls	r1, r2
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00c      	beq.n	8000e4c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e3c:	490a      	ldr	r1, [pc, #40]	; (8000e68 <HAL_DMA_Abort+0xbc>)
 8000e3e:	400a      	ands	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2225      	movs	r2, #37	; 0x25
 8000e50:	2101      	movs	r1, #1
 8000e52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2224      	movs	r2, #36	; 0x24
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	fffffeff 	.word	0xfffffeff

08000e6c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e74:	210f      	movs	r1, #15
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2225      	movs	r2, #37	; 0x25
 8000e80:	5c9b      	ldrb	r3, [r3, r2]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d006      	beq.n	8000e96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e048      	b.n	8000f28 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	210e      	movs	r1, #14
 8000ea2:	438a      	bics	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec0:	491d      	ldr	r1, [pc, #116]	; (8000f38 <HAL_DMA_Abort_IT+0xcc>)
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	221c      	movs	r2, #28
 8000ecc:	401a      	ands	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ee2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00c      	beq.n	8000f06 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef6:	4910      	ldr	r1, [pc, #64]	; (8000f38 <HAL_DMA_Abort_IT+0xcc>)
 8000ef8:	400a      	ands	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2225      	movs	r2, #37	; 0x25
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2224      	movs	r2, #36	; 0x24
 8000f12:	2100      	movs	r1, #0
 8000f14:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d004      	beq.n	8000f28 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	0010      	movs	r0, r2
 8000f26:	4798      	blx	r3
    }
  }
  return status;
 8000f28:	230f      	movs	r3, #15
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	781b      	ldrb	r3, [r3, #0]
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b004      	add	sp, #16
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	fffffeff 	.word	0xfffffeff

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e14d      	b.n	80011e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4091      	lsls	r1, r2
 8000f56:	000a      	movs	r2, r1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d100      	bne.n	8000f64 <HAL_GPIO_Init+0x28>
 8000f62:	e13e      	b.n	80011e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <HAL_GPIO_Init+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2203      	movs	r2, #3
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d130      	bne.n	8000fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	0013      	movs	r3, r2
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	2201      	movs	r2, #1
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d017      	beq.n	800101a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	4013      	ands	r3, r2
 8001022:	2b02      	cmp	r3, #2
 8001024:	d123      	bne.n	800106e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	58d3      	ldr	r3, [r2, r3]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2207      	movs	r2, #7
 8001038:	4013      	ands	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2107      	movs	r1, #7
 8001052:	400b      	ands	r3, r1
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	6939      	ldr	r1, [r7, #16]
 800106c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2203      	movs	r2, #3
 800108c:	401a      	ands	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	23c0      	movs	r3, #192	; 0xc0
 80010a8:	029b      	lsls	r3, r3, #10
 80010aa:	4013      	ands	r3, r2
 80010ac:	d100      	bne.n	80010b0 <HAL_GPIO_Init+0x174>
 80010ae:	e098      	b.n	80011e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010b0:	4a53      	ldr	r2, [pc, #332]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3318      	adds	r3, #24
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	589b      	ldr	r3, [r3, r2]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2203      	movs	r2, #3
 80010c2:	4013      	ands	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	220f      	movs	r2, #15
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	43da      	mvns	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	23a0      	movs	r3, #160	; 0xa0
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	429a      	cmp	r2, r3
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x1d6>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a48      	ldr	r2, [pc, #288]	; (8001204 <HAL_GPIO_Init+0x2c8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x1d2>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a47      	ldr	r2, [pc, #284]	; (8001208 <HAL_GPIO_Init+0x2cc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x1ce>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a46      	ldr	r2, [pc, #280]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x1ca>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a45      	ldr	r2, [pc, #276]	; (8001210 <HAL_GPIO_Init+0x2d4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x1c6>
 80010fe:	2304      	movs	r3, #4
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x1d8>
 8001102:	2305      	movs	r3, #5
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x1d8>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x1d8>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x1d8>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x1d8>
 8001112:	2300      	movs	r3, #0
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	2103      	movs	r1, #3
 8001118:	400a      	ands	r2, r1
 800111a:	00d2      	lsls	r2, r2, #3
 800111c:	4093      	lsls	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001124:	4936      	ldr	r1, [pc, #216]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3318      	adds	r3, #24
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43da      	mvns	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	035b      	lsls	r3, r3, #13
 800114a:	4013      	ands	r3, r2
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	039b      	lsls	r3, r3, #14
 8001174:	4013      	ands	r3, r2
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 8001188:	2384      	movs	r3, #132	; 0x84
 800118a:	58d3      	ldr	r3, [r2, r3]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43da      	mvns	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ac:	4914      	ldr	r1, [pc, #80]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 80011ae:	2284      	movs	r2, #132	; 0x84
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011b4:	4a12      	ldr	r2, [pc, #72]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	58d3      	ldr	r3, [r2, r3]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	025b      	lsls	r3, r3, #9
 80011ce:	4013      	ands	r3, r2
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011da:	4909      	ldr	r1, [pc, #36]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	40da      	lsrs	r2, r3
 80011f0:	1e13      	subs	r3, r2, #0
 80011f2:	d000      	beq.n	80011f6 <HAL_GPIO_Init+0x2ba>
 80011f4:	e6aa      	b.n	8000f4c <HAL_GPIO_Init+0x10>
  }
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b006      	add	sp, #24
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021800 	.word	0x40021800
 8001204:	50000400 	.word	0x50000400
 8001208:	50000800 	.word	0x50000800
 800120c:	50000c00 	.word	0x50000c00
 8001210:	50001000 	.word	0x50001000

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	0008      	movs	r0, r1
 800121e:	0011      	movs	r1, r2
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	1c02      	adds	r2, r0, #0
 8001224:	801a      	strh	r2, [r3, #0]
 8001226:	1c7b      	adds	r3, r7, #1
 8001228:	1c0a      	adds	r2, r1, #0
 800122a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800122c:	1c7b      	adds	r3, r7, #1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001234:	1cbb      	adds	r3, r7, #2
 8001236:	881a      	ldrh	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123e:	1cbb      	adds	r3, r7, #2
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	000a      	movs	r2, r1
 8001258:	1cbb      	adds	r3, r7, #2
 800125a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001262:	1cbb      	adds	r3, r7, #2
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	041a      	lsls	r2, r3, #16
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	1cb9      	adds	r1, r7, #2
 8001272:	8809      	ldrh	r1, [r1, #0]
 8001274:	400b      	ands	r3, r1
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b004      	add	sp, #16
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001292:	4013      	ands	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d11f      	bne.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	0013      	movs	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	189b      	adds	r3, r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4912      	ldr	r1, [pc, #72]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7fe ff24 	bl	8000104 <__udivsi3>
 80012bc:	0003      	movs	r3, r0
 80012be:	3301      	adds	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c2:	e008      	b.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e001      	b.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e009      	b.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	401a      	ands	r2, r3
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d0ed      	beq.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	40007000 	.word	0x40007000
 80012f8:	fffff9ff 	.word	0xfffff9ff
 80012fc:	20000004 	.word	0x20000004
 8001300:	000f4240 	.word	0x000f4240

08001304 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <LL_RCC_GetAPB1Prescaler+0x14>)
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	23e0      	movs	r3, #224	; 0xe0
 800130e:	01db      	lsls	r3, r3, #7
 8001310:	4013      	ands	r3, r2
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	f000 fb50 	bl	80019d0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2201      	movs	r2, #1
 8001336:	4013      	ands	r3, r2
 8001338:	d100      	bne.n	800133c <HAL_RCC_OscConfig+0x20>
 800133a:	e07c      	b.n	8001436 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133c:	4bc3      	ldr	r3, [pc, #780]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2238      	movs	r2, #56	; 0x38
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001346:	4bc1      	ldr	r3, [pc, #772]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2203      	movs	r2, #3
 800134c:	4013      	ands	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b10      	cmp	r3, #16
 8001354:	d102      	bne.n	800135c <HAL_RCC_OscConfig+0x40>
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d002      	beq.n	8001362 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b08      	cmp	r3, #8
 8001360:	d10b      	bne.n	800137a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001362:	4bba      	ldr	r3, [pc, #744]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	029b      	lsls	r3, r3, #10
 800136a:	4013      	ands	r3, r2
 800136c:	d062      	beq.n	8001434 <HAL_RCC_OscConfig+0x118>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d15e      	bne.n	8001434 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e32a      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	025b      	lsls	r3, r3, #9
 8001382:	429a      	cmp	r2, r3
 8001384:	d107      	bne.n	8001396 <HAL_RCC_OscConfig+0x7a>
 8001386:	4bb1      	ldr	r3, [pc, #708]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4bb0      	ldr	r3, [pc, #704]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	0249      	lsls	r1, r1, #9
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e020      	b.n	80013d8 <HAL_RCC_OscConfig+0xbc>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	23a0      	movs	r3, #160	; 0xa0
 800139c:	02db      	lsls	r3, r3, #11
 800139e:	429a      	cmp	r2, r3
 80013a0:	d10e      	bne.n	80013c0 <HAL_RCC_OscConfig+0xa4>
 80013a2:	4baa      	ldr	r3, [pc, #680]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4ba9      	ldr	r3, [pc, #676]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	02c9      	lsls	r1, r1, #11
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	4ba6      	ldr	r3, [pc, #664]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4ba5      	ldr	r3, [pc, #660]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	0249      	lsls	r1, r1, #9
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xbc>
 80013c0:	4ba2      	ldr	r3, [pc, #648]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4ba1      	ldr	r3, [pc, #644]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013c6:	49a2      	ldr	r1, [pc, #648]	; (8001650 <HAL_RCC_OscConfig+0x334>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4b9f      	ldr	r3, [pc, #636]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b9e      	ldr	r3, [pc, #632]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013d2:	49a0      	ldr	r1, [pc, #640]	; (8001654 <HAL_RCC_OscConfig+0x338>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d014      	beq.n	800140a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fbc2 	bl	8000b68 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ea:	f7ff fbbd 	bl	8000b68 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e2e9      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fc:	4b93      	ldr	r3, [pc, #588]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0xce>
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff fbad 	bl	8000b68 <HAL_GetTick>
 800140e:	0003      	movs	r3, r0
 8001410:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fba8 	bl	8000b68 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e2d4      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001426:	4b89      	ldr	r3, [pc, #548]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0xf8>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d100      	bne.n	8001442 <HAL_RCC_OscConfig+0x126>
 8001440:	e099      	b.n	8001576 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001442:	4b82      	ldr	r3, [pc, #520]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2238      	movs	r2, #56	; 0x38
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800144c:	4b7f      	ldr	r3, [pc, #508]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2203      	movs	r2, #3
 8001452:	4013      	ands	r3, r2
 8001454:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b10      	cmp	r3, #16
 800145a:	d102      	bne.n	8001462 <HAL_RCC_OscConfig+0x146>
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d002      	beq.n	8001468 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d135      	bne.n	80014d4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001468:	4b78      	ldr	r3, [pc, #480]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4013      	ands	r3, r2
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x164>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e2a7      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b72      	ldr	r3, [pc, #456]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a74      	ldr	r2, [pc, #464]	; (8001658 <HAL_RCC_OscConfig+0x33c>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	021a      	lsls	r2, r3, #8
 8001490:	4b6e      	ldr	r3, [pc, #440]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d112      	bne.n	80014c2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800149c:	4b6b      	ldr	r3, [pc, #428]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6e      	ldr	r2, [pc, #440]	; (800165c <HAL_RCC_OscConfig+0x340>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	4b68      	ldr	r3, [pc, #416]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80014b0:	4b66      	ldr	r3, [pc, #408]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0adb      	lsrs	r3, r3, #11
 80014b6:	2207      	movs	r2, #7
 80014b8:	4013      	ands	r3, r2
 80014ba:	4a69      	ldr	r2, [pc, #420]	; (8001660 <HAL_RCC_OscConfig+0x344>)
 80014bc:	40da      	lsrs	r2, r3
 80014be:	4b69      	ldr	r3, [pc, #420]	; (8001664 <HAL_RCC_OscConfig+0x348>)
 80014c0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014c2:	4b69      	ldr	r3, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x34c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff faf2 	bl	8000ab0 <HAL_InitTick>
 80014cc:	1e03      	subs	r3, r0, #0
 80014ce:	d051      	beq.n	8001574 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e27d      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d030      	beq.n	800153e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014dc:	4b5b      	ldr	r3, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a5e      	ldr	r2, [pc, #376]	; (800165c <HAL_RCC_OscConfig+0x340>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	0019      	movs	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b56      	ldr	r3, [pc, #344]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b55      	ldr	r3, [pc, #340]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0049      	lsls	r1, r1, #1
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb33 	bl	8000b68 <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fb2e 	bl	8000b68 <HAL_GetTick>
 800150c:	0002      	movs	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e25a      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151a:	4b4c      	ldr	r3, [pc, #304]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4013      	ands	r3, r2
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a4b      	ldr	r2, [pc, #300]	; (8001658 <HAL_RCC_OscConfig+0x33c>)
 800152c:	4013      	ands	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	021a      	lsls	r2, r3, #8
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001538:	430a      	orrs	r2, r1
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	e01b      	b.n	8001576 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800153e:	4b43      	ldr	r3, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b42      	ldr	r3, [pc, #264]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001544:	4949      	ldr	r1, [pc, #292]	; (800166c <HAL_RCC_OscConfig+0x350>)
 8001546:	400a      	ands	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fb0d 	bl	8000b68 <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001554:	f7ff fb08 	bl	8000b68 <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e234      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4013      	ands	r3, r2
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x238>
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001574:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2208      	movs	r2, #8
 800157c:	4013      	ands	r3, r2
 800157e:	d047      	beq.n	8001610 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001580:	4b32      	ldr	r3, [pc, #200]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2238      	movs	r2, #56	; 0x38
 8001586:	4013      	ands	r3, r2
 8001588:	2b18      	cmp	r3, #24
 800158a:	d10a      	bne.n	80015a2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	2202      	movs	r2, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d03c      	beq.n	8001610 <HAL_RCC_OscConfig+0x2f4>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d138      	bne.n	8001610 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e216      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d019      	beq.n	80015de <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80015ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fad7 	bl	8000b68 <HAL_GetTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fad2 	bl	8000b68 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1fe      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d0f1      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2a4>
 80015dc:	e018      	b.n	8001610 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80015e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	438a      	bics	r2, r1
 80015e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fabd 	bl	8000b68 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fab8 	bl	8000b68 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1e4      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d1f1      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2204      	movs	r2, #4
 8001616:	4013      	ands	r3, r2
 8001618:	d100      	bne.n	800161c <HAL_RCC_OscConfig+0x300>
 800161a:	e0c7      	b.n	80017ac <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161c:	231f      	movs	r3, #31
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2238      	movs	r2, #56	; 0x38
 800162a:	4013      	ands	r3, r2
 800162c:	2b20      	cmp	r3, #32
 800162e:	d11f      	bne.n	8001670 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d100      	bne.n	800163c <HAL_RCC_OscConfig+0x320>
 800163a:	e0b7      	b.n	80017ac <HAL_RCC_OscConfig+0x490>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d000      	beq.n	8001646 <HAL_RCC_OscConfig+0x32a>
 8001644:	e0b2      	b.n	80017ac <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e1c2      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	40021000 	.word	0x40021000
 8001650:	fffeffff 	.word	0xfffeffff
 8001654:	fffbffff 	.word	0xfffbffff
 8001658:	ffff80ff 	.word	0xffff80ff
 800165c:	ffffc7ff 	.word	0xffffc7ff
 8001660:	00f42400 	.word	0x00f42400
 8001664:	20000004 	.word	0x20000004
 8001668:	20000008 	.word	0x20000008
 800166c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001670:	4bb5      	ldr	r3, [pc, #724]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	055b      	lsls	r3, r3, #21
 8001678:	4013      	ands	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_RCC_OscConfig+0x364>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x366>
 8001680:	2300      	movs	r3, #0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d011      	beq.n	80016aa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4bb0      	ldr	r3, [pc, #704]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800168a:	4baf      	ldr	r3, [pc, #700]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	0549      	lsls	r1, r1, #21
 8001690:	430a      	orrs	r2, r1
 8001692:	63da      	str	r2, [r3, #60]	; 0x3c
 8001694:	4bac      	ldr	r3, [pc, #688]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	055b      	lsls	r3, r3, #21
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016a2:	231f      	movs	r3, #31
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016aa:	4ba8      	ldr	r3, [pc, #672]	; (800194c <HAL_RCC_OscConfig+0x630>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4013      	ands	r3, r2
 80016b4:	d11a      	bne.n	80016ec <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b6:	4ba5      	ldr	r3, [pc, #660]	; (800194c <HAL_RCC_OscConfig+0x630>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4ba4      	ldr	r3, [pc, #656]	; (800194c <HAL_RCC_OscConfig+0x630>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	0049      	lsls	r1, r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fa50 	bl	8000b68 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ce:	f7ff fa4b 	bl	8000b68 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e177      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e0:	4b9a      	ldr	r3, [pc, #616]	; (800194c <HAL_RCC_OscConfig+0x630>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x3e6>
 80016f4:	4b94      	ldr	r3, [pc, #592]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80016f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f8:	4b93      	ldr	r3, [pc, #588]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001700:	e01c      	b.n	800173c <HAL_RCC_OscConfig+0x420>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x408>
 800170a:	4b8f      	ldr	r3, [pc, #572]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 800170c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800170e:	4b8e      	ldr	r3, [pc, #568]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001710:	2104      	movs	r1, #4
 8001712:	430a      	orrs	r2, r1
 8001714:	65da      	str	r2, [r3, #92]	; 0x5c
 8001716:	4b8c      	ldr	r3, [pc, #560]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800171a:	4b8b      	ldr	r3, [pc, #556]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 800171c:	2101      	movs	r1, #1
 800171e:	430a      	orrs	r2, r1
 8001720:	65da      	str	r2, [r3, #92]	; 0x5c
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0x420>
 8001724:	4b88      	ldr	r3, [pc, #544]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001728:	4b87      	ldr	r3, [pc, #540]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 800172a:	2101      	movs	r1, #1
 800172c:	438a      	bics	r2, r1
 800172e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001730:	4b85      	ldr	r3, [pc, #532]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001734:	4b84      	ldr	r3, [pc, #528]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001736:	2104      	movs	r1, #4
 8001738:	438a      	bics	r2, r1
 800173a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d014      	beq.n	800176e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fa10 	bl	8000b68 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174c:	e009      	b.n	8001762 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7ff fa0b 	bl	8000b68 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a7d      	ldr	r2, [pc, #500]	; (8001950 <HAL_RCC_OscConfig+0x634>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e136      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	4b79      	ldr	r3, [pc, #484]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2202      	movs	r2, #2
 8001768:	4013      	ands	r3, r2
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x432>
 800176c:	e013      	b.n	8001796 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff f9fb 	bl	8000b68 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001776:	e009      	b.n	800178c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff f9f6 	bl	8000b68 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4a73      	ldr	r2, [pc, #460]	; (8001950 <HAL_RCC_OscConfig+0x634>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e121      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800178c:	4b6e      	ldr	r3, [pc, #440]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 800178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001796:	231f      	movs	r3, #31
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017a0:	4b69      	ldr	r3, [pc, #420]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80017a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80017a6:	496b      	ldr	r1, [pc, #428]	; (8001954 <HAL_RCC_OscConfig+0x638>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2220      	movs	r2, #32
 80017b2:	4013      	ands	r3, r2
 80017b4:	d039      	beq.n	800182a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d01b      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017be:	4b62      	ldr	r3, [pc, #392]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b61      	ldr	r3, [pc, #388]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	03c9      	lsls	r1, r1, #15
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff f9cc 	bl	8000b68 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d6:	f7ff f9c7 	bl	8000b68 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0f3      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017e8:	4b57      	ldr	r3, [pc, #348]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4ba>
 80017f4:	e019      	b.n	800182a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017f6:	4b54      	ldr	r3, [pc, #336]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80017fc:	4956      	ldr	r1, [pc, #344]	; (8001958 <HAL_RCC_OscConfig+0x63c>)
 80017fe:	400a      	ands	r2, r1
 8001800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001802:	f7ff f9b1 	bl	8000b68 <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180c:	f7ff f9ac 	bl	8000b68 <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0d8      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	4013      	ands	r3, r2
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x518>
 8001832:	e0cc      	b.n	80019ce <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001834:	4b44      	ldr	r3, [pc, #272]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2238      	movs	r2, #56	; 0x38
 800183a:	4013      	ands	r3, r2
 800183c:	2b10      	cmp	r3, #16
 800183e:	d100      	bne.n	8001842 <HAL_RCC_OscConfig+0x526>
 8001840:	e07b      	b.n	800193a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d156      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001850:	4942      	ldr	r1, [pc, #264]	; (800195c <HAL_RCC_OscConfig+0x640>)
 8001852:	400a      	ands	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff f987 	bl	8000b68 <HAL_GetTick>
 800185a:	0003      	movs	r3, r0
 800185c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f982 	bl	8000b68 <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e0ae      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001872:	4b35      	ldr	r3, [pc, #212]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	049b      	lsls	r3, r3, #18
 800187a:	4013      	ands	r3, r2
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187e:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	4a37      	ldr	r2, [pc, #220]	; (8001960 <HAL_RCC_OscConfig+0x644>)
 8001884:	4013      	ands	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018aa:	431a      	orrs	r2, r3
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0449      	lsls	r1, r1, #17
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	0549      	lsls	r1, r1, #21
 80018ca:	430a      	orrs	r2, r1
 80018cc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff f94b 	bl	8000b68 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff f946 	bl	8000b68 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e072      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	049b      	lsls	r3, r3, #18
 80018f2:	4013      	ands	r3, r2
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x5bc>
 80018f6:	e06a      	b.n	80019ce <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 80018fe:	4917      	ldr	r1, [pc, #92]	; (800195c <HAL_RCC_OscConfig+0x640>)
 8001900:	400a      	ands	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f930 	bl	8000b68 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f92b 	bl	8000b68 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e057      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	049b      	lsls	r3, r3, #18
 8001928:	4013      	ands	r3, r2
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_OscConfig+0x62c>)
 8001932:	490c      	ldr	r1, [pc, #48]	; (8001964 <HAL_RCC_OscConfig+0x648>)
 8001934:	400a      	ands	r2, r1
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	e049      	b.n	80019ce <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d112      	bne.n	8001968 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e044      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40021000 	.word	0x40021000
 800194c:	40007000 	.word	0x40007000
 8001950:	00001388 	.word	0x00001388
 8001954:	efffffff 	.word	0xefffffff
 8001958:	ffbfffff 	.word	0xffbfffff
 800195c:	feffffff 	.word	0xfeffffff
 8001960:	11c1808c 	.word	0x11c1808c
 8001964:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_RCC_OscConfig+0x6bc>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2203      	movs	r2, #3
 8001972:	401a      	ands	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	429a      	cmp	r2, r3
 800197a:	d126      	bne.n	80019ca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2270      	movs	r2, #112	; 0x70
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d11f      	bne.n	80019ca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	23fe      	movs	r3, #254	; 0xfe
 800198e:	01db      	lsls	r3, r3, #7
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d116      	bne.n	80019ca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	23f8      	movs	r3, #248	; 0xf8
 80019a0:	039b      	lsls	r3, r3, #14
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d10e      	bne.n	80019ca <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	23e0      	movs	r3, #224	; 0xe0
 80019b0:	051b      	lsls	r3, r3, #20
 80019b2:	401a      	ands	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	0f5b      	lsrs	r3, r3, #29
 80019c0:	075a      	lsls	r2, r3, #29
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b008      	add	sp, #32
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0e9      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_ClockConfig+0x1f0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2207      	movs	r2, #7
 80019f6:	4013      	ands	r3, r2
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d91e      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_ClockConfig+0x1f0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2207      	movs	r2, #7
 8001a04:	4393      	bics	r3, r2
 8001a06:	0019      	movs	r1, r3
 8001a08:	4b70      	ldr	r3, [pc, #448]	; (8001bcc <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a10:	f7ff f8aa 	bl	8000b68 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1a:	f7ff f8a5 	bl	8000b68 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	4a6a      	ldr	r2, [pc, #424]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e0ca      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2207      	movs	r2, #7
 8001a34:	4013      	ands	r3, r2
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1ee      	bne.n	8001a1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d015      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d006      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a50:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b5f      	ldr	r3, [pc, #380]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a56:	21e0      	movs	r1, #224	; 0xe0
 8001a58:	01c9      	lsls	r1, r1, #7
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4a5d      	ldr	r2, [pc, #372]	; (8001bd8 <HAL_RCC_ClockConfig+0x1fc>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d057      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a84:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	029b      	lsls	r3, r3, #10
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d12b      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e097      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9c:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	049b      	lsls	r3, r3, #18
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d11f      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e08b      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab4:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4013      	ands	r3, r2
 8001abe:	d113      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e07f      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001acc:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d108      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e074      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ada:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	2202      	movs	r2, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e06d      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2207      	movs	r2, #7
 8001aee:	4393      	bics	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001afc:	f7ff f834 	bl	8000b68 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7ff f82f 	bl	8000b68 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e054      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2238      	movs	r2, #56	; 0x38
 8001b20:	401a      	ands	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1ec      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2207      	movs	r2, #7
 8001b32:	4013      	ands	r3, r2
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d21e      	bcs.n	8001b78 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2207      	movs	r2, #7
 8001b40:	4393      	bics	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b4c:	f7ff f80c 	bl	8000b68 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b54:	e009      	b.n	8001b6a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b56:	f7ff f807 	bl	8000b68 <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e02c      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4013      	ands	r3, r2
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1ee      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <HAL_RCC_ClockConfig+0x200>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b96:	f000 f829 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001b9a:	0001      	movs	r1, r0
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_RCC_ClockConfig+0x204>)
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	58d3      	ldr	r3, [r2, r3]
 8001bac:	221f      	movs	r2, #31
 8001bae:	4013      	ands	r3, r2
 8001bb0:	000a      	movs	r2, r1
 8001bb2:	40da      	lsrs	r2, r3
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x208>)
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x20c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7fe ff77 	bl	8000ab0 <HAL_InitTick>
 8001bc2:	0003      	movs	r3, r0
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b004      	add	sp, #16
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	00001388 	.word	0x00001388
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	fffff0ff 	.word	0xfffff0ff
 8001bdc:	ffff8fff 	.word	0xffff8fff
 8001be0:	08003bd8 	.word	0x08003bd8
 8001be4:	20000004 	.word	0x20000004
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2238      	movs	r2, #56	; 0x38
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d10f      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0adb      	lsrs	r3, r3, #11
 8001c02:	2207      	movs	r2, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	2201      	movs	r2, #1
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	4835      	ldr	r0, [pc, #212]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c12:	f7fe fa77 	bl	8000104 <__udivsi3>
 8001c16:	0003      	movs	r3, r0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e05d      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c1c:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2238      	movs	r2, #56	; 0x38
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_GetSysClockFreq+0x100>)
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e054      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2238      	movs	r2, #56	; 0x38
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d138      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2203      	movs	r2, #3
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d10d      	bne.n	8001c74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	4824      	ldr	r0, [pc, #144]	; (8001cec <HAL_RCC_GetSysClockFreq+0x100>)
 8001c5c:	f7fe fa52 	bl	8000104 <__udivsi3>
 8001c60:	0003      	movs	r3, r0
 8001c62:	0019      	movs	r1, r3
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	227f      	movs	r2, #127	; 0x7f
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	434b      	muls	r3, r1
 8001c70:	617b      	str	r3, [r7, #20]
        break;
 8001c72:	e00d      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	481c      	ldr	r0, [pc, #112]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c78:	f7fe fa44 	bl	8000104 <__udivsi3>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	0019      	movs	r1, r3
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	227f      	movs	r2, #127	; 0x7f
 8001c88:	4013      	ands	r3, r2
 8001c8a:	434b      	muls	r3, r1
 8001c8c:	617b      	str	r3, [r7, #20]
        break;
 8001c8e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0f5b      	lsrs	r3, r3, #29
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	6978      	ldr	r0, [r7, #20]
 8001ca2:	f7fe fa2f 	bl	8000104 <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e015      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2238      	movs	r2, #56	; 0x38
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d103      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2238      	movs	r2, #56	; 0x38
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b18      	cmp	r3, #24
 8001cca:	d103      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ccc:	23fa      	movs	r3, #250	; 0xfa
 8001cce:	01db      	lsls	r3, r3, #7
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e001      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cd8:	693b      	ldr	r3, [r7, #16]
}
 8001cda:	0018      	movs	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b006      	add	sp, #24
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b5b0      	push	{r4, r5, r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d08:	f7ff fff2 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d0c:	0004      	movs	r4, r0
 8001d0e:	f7ff faf9 	bl	8001304 <LL_RCC_GetAPB1Prescaler>
 8001d12:	0003      	movs	r3, r0
 8001d14:	0b1a      	lsrs	r2, r3, #12
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	58d3      	ldr	r3, [r2, r3]
 8001d1c:	221f      	movs	r2, #31
 8001d1e:	4013      	ands	r3, r2
 8001d20:	40dc      	lsrs	r4, r3
 8001d22:	0023      	movs	r3, r4
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bdb0      	pop	{r4, r5, r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	08003c18 	.word	0x08003c18

08001d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d38:	2313      	movs	r3, #19
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d40:	2312      	movs	r3, #18
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	4013      	ands	r3, r2
 8001d52:	d100      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d54:	e0ad      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2011      	movs	r0, #17
 8001d58:	183b      	adds	r3, r7, r0
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	4013      	ands	r3, r2
 8001d68:	d110      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0549      	lsls	r1, r1, #21
 8001d74:	430a      	orrs	r2, r1
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	055b      	lsls	r3, r3, #21
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d86:	183b      	adds	r3, r7, r0
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d8c:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	0049      	lsls	r1, r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d9a:	f7fe fee5 	bl	8000b68 <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001da2:	e00b      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7fe fee0 	bl	8000b68 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d904      	bls.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001db2:	2313      	movs	r3, #19
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	2203      	movs	r2, #3
 8001db8:	701a      	strb	r2, [r3, #0]
        break;
 8001dba:	e005      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d0ed      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001dc8:	2313      	movs	r3, #19
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d15e      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dd6:	23c0      	movs	r3, #192	; 0xc0
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d019      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d014      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	0249      	lsls	r1, r1, #9
 8001e02:	430a      	orrs	r2, r1
 8001e04:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e0c:	491e      	ldr	r1, [pc, #120]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001e0e:	400a      	ands	r2, r1
 8001e10:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d016      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe fea2 	bl	8000b68 <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e28:	e00c      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fe9d 	bl	8000b68 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d904      	bls.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e3a:	2313      	movs	r3, #19
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	2203      	movs	r2, #3
 8001e40:	701a      	strb	r2, [r3, #0]
            break;
 8001e42:	e004      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2202      	movs	r2, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d0ed      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e4e:	2313      	movs	r3, #19
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e6c:	e016      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e6e:	2312      	movs	r3, #18
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	2213      	movs	r2, #19
 8001e74:	18ba      	adds	r2, r7, r2
 8001e76:	7812      	ldrb	r2, [r2, #0]
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e00f      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	fffffcff 	.word	0xfffffcff
 8001e88:	fffeffff 	.word	0xfffeffff
 8001e8c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e90:	2312      	movs	r3, #18
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2213      	movs	r2, #19
 8001e96:	18ba      	adds	r2, r7, r2
 8001e98:	7812      	ldrb	r2, [r2, #0]
 8001e9a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e9c:	2311      	movs	r3, #17
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4bb6      	ldr	r3, [pc, #728]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eaa:	4bb5      	ldr	r3, [pc, #724]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eac:	49b5      	ldr	r1, [pc, #724]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d009      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ebc:	4bb0      	ldr	r3, [pc, #704]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4bad      	ldr	r3, [pc, #692]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d009      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eda:	4ba9      	ldr	r3, [pc, #676]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	220c      	movs	r2, #12
 8001ee0:	4393      	bics	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4ba5      	ldr	r3, [pc, #660]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ef8:	4ba1      	ldr	r3, [pc, #644]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	2230      	movs	r2, #48	; 0x30
 8001efe:	4393      	bics	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	4b9e      	ldr	r3, [pc, #632]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2210      	movs	r2, #16
 8001f12:	4013      	ands	r3, r2
 8001f14:	d009      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f16:	4b9a      	ldr	r3, [pc, #616]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	4a9b      	ldr	r2, [pc, #620]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	4b96      	ldr	r3, [pc, #600]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f26:	430a      	orrs	r2, r1
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	015b      	lsls	r3, r3, #5
 8001f32:	4013      	ands	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001f36:	4b92      	ldr	r3, [pc, #584]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	4a94      	ldr	r2, [pc, #592]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	4b8e      	ldr	r3, [pc, #568]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4013      	ands	r3, r2
 8001f54:	d009      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f56:	4b8a      	ldr	r3, [pc, #552]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	4a8d      	ldr	r2, [pc, #564]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f64:	4b86      	ldr	r3, [pc, #536]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4013      	ands	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f76:	4b82      	ldr	r3, [pc, #520]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	4a86      	ldr	r2, [pc, #536]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f84:	4b7e      	ldr	r3, [pc, #504]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	4013      	ands	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f94:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	4a7f      	ldr	r2, [pc, #508]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	4b77      	ldr	r3, [pc, #476]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2240      	movs	r2, #64	; 0x40
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fb2:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	4a79      	ldr	r2, [pc, #484]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69da      	ldr	r2, [r3, #28]
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	01db      	lsls	r3, r3, #7
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d015      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fd2:	4b6b      	ldr	r3, [pc, #428]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	0899      	lsrs	r1, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fde:	4b68      	ldr	r3, [pc, #416]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	05db      	lsls	r3, r3, #23
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d106      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ff0:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4b62      	ldr	r3, [pc, #392]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	0249      	lsls	r1, r1, #9
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	031b      	lsls	r3, r3, #12
 8002006:	4013      	ands	r3, r2
 8002008:	d009      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800200a:	4b5d      	ldr	r3, [pc, #372]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	2240      	movs	r2, #64	; 0x40
 8002010:	4393      	bics	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201a:	430a      	orrs	r2, r1
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	039b      	lsls	r3, r3, #14
 8002026:	4013      	ands	r3, r2
 8002028:	d016      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800202a:	4b55      	ldr	r3, [pc, #340]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002038:	4b51      	ldr	r3, [pc, #324]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800203a:	430a      	orrs	r2, r1
 800203c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	03db      	lsls	r3, r3, #15
 8002046:	429a      	cmp	r2, r3
 8002048:	d106      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800204a:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	4b4c      	ldr	r3, [pc, #304]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0449      	lsls	r1, r1, #17
 8002054:	430a      	orrs	r2, r1
 8002056:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	03db      	lsls	r3, r3, #15
 8002060:	4013      	ands	r3, r2
 8002062:	d016      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002064:	4b46      	ldr	r3, [pc, #280]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	4a4e      	ldr	r2, [pc, #312]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800206a:	4013      	ands	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002072:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002074:	430a      	orrs	r2, r1
 8002076:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	045b      	lsls	r3, r3, #17
 8002080:	429a      	cmp	r2, r3
 8002082:	d106      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002084:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	0449      	lsls	r1, r1, #17
 800208e:	430a      	orrs	r2, r1
 8002090:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	4013      	ands	r3, r2
 800209c:	d014      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	2203      	movs	r2, #3
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1a      	ldr	r2, [r3, #32]
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d106      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	0249      	lsls	r1, r1, #9
 80020c4:	430a      	orrs	r2, r1
 80020c6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	019b      	lsls	r3, r3, #6
 80020d0:	4013      	ands	r3, r2
 80020d2:	d014      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80020d4:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	220c      	movs	r2, #12
 80020da:	4393      	bics	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d106      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	0249      	lsls	r1, r1, #9
 80020fa:	430a      	orrs	r2, r1
 80020fc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	045b      	lsls	r3, r3, #17
 8002106:	4013      	ands	r3, r2
 8002108:	d016      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	4a22      	ldr	r2, [pc, #136]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800211a:	430a      	orrs	r2, r1
 800211c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	429a      	cmp	r2, r3
 8002128:	d106      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	0449      	lsls	r1, r1, #17
 8002134:	430a      	orrs	r2, r1
 8002136:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	049b      	lsls	r3, r3, #18
 8002140:	4013      	ands	r3, r2
 8002142:	d016      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002154:	430a      	orrs	r2, r1
 8002156:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	429a      	cmp	r2, r3
 8002162:	d106      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	0449      	lsls	r1, r1, #17
 800216e:	430a      	orrs	r2, r1
 8002170:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002172:	2312      	movs	r3, #18
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b006      	add	sp, #24
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000
 8002184:	efffffff 	.word	0xefffffff
 8002188:	fffff3ff 	.word	0xfffff3ff
 800218c:	fffffcff 	.word	0xfffffcff
 8002190:	fff3ffff 	.word	0xfff3ffff
 8002194:	ffcfffff 	.word	0xffcfffff
 8002198:	ffffcfff 	.word	0xffffcfff
 800219c:	ffff3fff 	.word	0xffff3fff
 80021a0:	ffbfffff 	.word	0xffbfffff
 80021a4:	feffffff 	.word	0xfeffffff

080021a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e046      	b.n	8002248 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2284      	movs	r2, #132	; 0x84
 80021be:	589b      	ldr	r3, [r3, r2]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7fe fb92 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2284      	movs	r2, #132	; 0x84
 80021d8:	2124      	movs	r1, #36	; 0x24
 80021da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	438a      	bics	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 fc1a 	bl	8002a28 <UART_SetConfig>
 80021f4:	0003      	movs	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e024      	b.n	8002248 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f000 ff63 	bl	80030d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	490d      	ldr	r1, [pc, #52]	; (8002250 <HAL_UART_Init+0xa8>)
 800221a:	400a      	ands	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	212a      	movs	r1, #42	; 0x2a
 800222a:	438a      	bics	r2, r1
 800222c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 fffb 	bl	800323c <UART_CheckIdleState>
 8002246:	0003      	movs	r3, r0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}
 8002250:	ffffb7ff 	.word	0xffffb7ff

08002254 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	1dbb      	adds	r3, r7, #6
 8002260:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2284      	movs	r2, #132	; 0x84
 8002266:	589b      	ldr	r3, [r3, r2]
 8002268:	2b20      	cmp	r3, #32
 800226a:	d000      	beq.n	800226e <HAL_UART_Transmit_IT+0x1a>
 800226c:	e0a0      	b.n	80023b0 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_UART_Transmit_IT+0x28>
 8002274:	1dbb      	adds	r3, r7, #6
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e098      	b.n	80023b2 <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	429a      	cmp	r2, r3
 800228a:	d109      	bne.n	80022a0 <HAL_UART_Transmit_IT+0x4c>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d001      	beq.n	80022a0 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e088      	b.n	80023b2 <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	5c9b      	ldrb	r3, [r3, r2]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Transmit_IT+0x5a>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e081      	b.n	80023b2 <HAL_UART_Transmit_IT+0x15e>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1dba      	adds	r2, r7, #6
 80022c0:	2154      	movs	r1, #84	; 0x54
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1dba      	adds	r2, r7, #6
 80022ca:	2156      	movs	r1, #86	; 0x56
 80022cc:	8812      	ldrh	r2, [r2, #0]
 80022ce:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	228c      	movs	r2, #140	; 0x8c
 80022da:	2100      	movs	r1, #0
 80022dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2284      	movs	r2, #132	; 0x84
 80022e2:	2121      	movs	r1, #33	; 0x21
 80022e4:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	059b      	lsls	r3, r3, #22
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d12e      	bne.n	8002350 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	015b      	lsls	r3, r3, #5
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d107      	bne.n	800230e <HAL_UART_Transmit_IT+0xba>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <HAL_UART_Transmit_IT+0x168>)
 800230a:	675a      	str	r2, [r3, #116]	; 0x74
 800230c:	e002      	b.n	8002314 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a2b      	ldr	r2, [pc, #172]	; (80023c0 <HAL_UART_Transmit_IT+0x16c>)
 8002312:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800231c:	f3ef 8310 	mrs	r3, PRIMASK
 8002320:	61fb      	str	r3, [r7, #28]
  return(result);
 8002322:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
 8002326:	2301      	movs	r3, #1
 8002328:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	f383 8810 	msr	PRIMASK, r3
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0409      	lsls	r1, r1, #16
 8002340:	430a      	orrs	r2, r1
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	f383 8810 	msr	PRIMASK, r3
}
 800234e:	e02d      	b.n	80023ac <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	015b      	lsls	r3, r3, #5
 8002358:	429a      	cmp	r2, r3
 800235a:	d107      	bne.n	800236c <HAL_UART_Transmit_IT+0x118>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d103      	bne.n	800236c <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_UART_Transmit_IT+0x170>)
 8002368:	675a      	str	r2, [r3, #116]	; 0x74
 800236a:	e002      	b.n	8002372 <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <HAL_UART_Transmit_IT+0x174>)
 8002370:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800237a:	f3ef 8310 	mrs	r3, PRIMASK
 800237e:	613b      	str	r3, [r7, #16]
  return(result);
 8002380:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002384:	2301      	movs	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f383 8810 	msr	PRIMASK, r3
}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f383 8810 	msr	PRIMASK, r3
}
 80023aa:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b00c      	add	sp, #48	; 0x30
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	080037b9 	.word	0x080037b9
 80023c0:	080036cd 	.word	0x080036cd
 80023c4:	0800360f 	.word	0x0800360f
 80023c8:	0800355b 	.word	0x0800355b

080023cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b0aa      	sub	sp, #168	; 0xa8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	22a4      	movs	r2, #164	; 0xa4
 80023dc:	18b9      	adds	r1, r7, r2
 80023de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	20a0      	movs	r0, #160	; 0xa0
 80023e8:	1839      	adds	r1, r7, r0
 80023ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	249c      	movs	r4, #156	; 0x9c
 80023f4:	1939      	adds	r1, r7, r4
 80023f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023f8:	0011      	movs	r1, r2
 80023fa:	18bb      	adds	r3, r7, r2
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4aa0      	ldr	r2, [pc, #640]	; (8002680 <HAL_UART_IRQHandler+0x2b4>)
 8002400:	4013      	ands	r3, r2
 8002402:	2298      	movs	r2, #152	; 0x98
 8002404:	18bd      	adds	r5, r7, r2
 8002406:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002408:	18bb      	adds	r3, r7, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11a      	bne.n	8002446 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002410:	187b      	adds	r3, r7, r1
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2220      	movs	r2, #32
 8002416:	4013      	ands	r3, r2
 8002418:	d015      	beq.n	8002446 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800241a:	183b      	adds	r3, r7, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2220      	movs	r2, #32
 8002420:	4013      	ands	r3, r2
 8002422:	d105      	bne.n	8002430 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002424:	193b      	adds	r3, r7, r4
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	055b      	lsls	r3, r3, #21
 800242c:	4013      	ands	r3, r2
 800242e:	d00a      	beq.n	8002446 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	2b00      	cmp	r3, #0
 8002436:	d100      	bne.n	800243a <HAL_UART_IRQHandler+0x6e>
 8002438:	e2cf      	b.n	80029da <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	0010      	movs	r0, r2
 8002442:	4798      	blx	r3
      }
      return;
 8002444:	e2c9      	b.n	80029da <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002446:	2398      	movs	r3, #152	; 0x98
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d100      	bne.n	8002452 <HAL_UART_IRQHandler+0x86>
 8002450:	e11e      	b.n	8002690 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002452:	239c      	movs	r3, #156	; 0x9c
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a8a      	ldr	r2, [pc, #552]	; (8002684 <HAL_UART_IRQHandler+0x2b8>)
 800245a:	4013      	ands	r3, r2
 800245c:	d106      	bne.n	800246c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800245e:	23a0      	movs	r3, #160	; 0xa0
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a88      	ldr	r2, [pc, #544]	; (8002688 <HAL_UART_IRQHandler+0x2bc>)
 8002466:	4013      	ands	r3, r2
 8002468:	d100      	bne.n	800246c <HAL_UART_IRQHandler+0xa0>
 800246a:	e111      	b.n	8002690 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800246c:	23a4      	movs	r3, #164	; 0xa4
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4013      	ands	r3, r2
 8002476:	d012      	beq.n	800249e <HAL_UART_IRQHandler+0xd2>
 8002478:	23a0      	movs	r3, #160	; 0xa0
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4013      	ands	r3, r2
 8002484:	d00b      	beq.n	800249e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	228c      	movs	r2, #140	; 0x8c
 8002492:	589b      	ldr	r3, [r3, r2]
 8002494:	2201      	movs	r2, #1
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	218c      	movs	r1, #140	; 0x8c
 800249c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800249e:	23a4      	movs	r3, #164	; 0xa4
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d011      	beq.n	80024ce <HAL_UART_IRQHandler+0x102>
 80024aa:	239c      	movs	r3, #156	; 0x9c
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2201      	movs	r2, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	d00b      	beq.n	80024ce <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2202      	movs	r2, #2
 80024bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	228c      	movs	r2, #140	; 0x8c
 80024c2:	589b      	ldr	r3, [r3, r2]
 80024c4:	2204      	movs	r2, #4
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	218c      	movs	r1, #140	; 0x8c
 80024cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024ce:	23a4      	movs	r3, #164	; 0xa4
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2204      	movs	r2, #4
 80024d6:	4013      	ands	r3, r2
 80024d8:	d011      	beq.n	80024fe <HAL_UART_IRQHandler+0x132>
 80024da:	239c      	movs	r3, #156	; 0x9c
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	d00b      	beq.n	80024fe <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2204      	movs	r2, #4
 80024ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	228c      	movs	r2, #140	; 0x8c
 80024f2:	589b      	ldr	r3, [r3, r2]
 80024f4:	2202      	movs	r2, #2
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	218c      	movs	r1, #140	; 0x8c
 80024fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024fe:	23a4      	movs	r3, #164	; 0xa4
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2208      	movs	r2, #8
 8002506:	4013      	ands	r3, r2
 8002508:	d017      	beq.n	800253a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800250a:	23a0      	movs	r3, #160	; 0xa0
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2220      	movs	r2, #32
 8002512:	4013      	ands	r3, r2
 8002514:	d105      	bne.n	8002522 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002516:	239c      	movs	r3, #156	; 0x9c
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a59      	ldr	r2, [pc, #356]	; (8002684 <HAL_UART_IRQHandler+0x2b8>)
 800251e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002520:	d00b      	beq.n	800253a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2208      	movs	r2, #8
 8002528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	228c      	movs	r2, #140	; 0x8c
 800252e:	589b      	ldr	r3, [r3, r2]
 8002530:	2208      	movs	r2, #8
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	218c      	movs	r1, #140	; 0x8c
 8002538:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800253a:	23a4      	movs	r3, #164	; 0xa4
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	4013      	ands	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_UART_IRQHandler+0x1a4>
 8002548:	23a0      	movs	r3, #160	; 0xa0
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	04db      	lsls	r3, r3, #19
 8002552:	4013      	ands	r3, r2
 8002554:	d00c      	beq.n	8002570 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	228c      	movs	r2, #140	; 0x8c
 8002564:	589b      	ldr	r3, [r3, r2]
 8002566:	2220      	movs	r2, #32
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	218c      	movs	r1, #140	; 0x8c
 800256e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	228c      	movs	r2, #140	; 0x8c
 8002574:	589b      	ldr	r3, [r3, r2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d100      	bne.n	800257c <HAL_UART_IRQHandler+0x1b0>
 800257a:	e230      	b.n	80029de <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800257c:	23a4      	movs	r3, #164	; 0xa4
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2220      	movs	r2, #32
 8002584:	4013      	ands	r3, r2
 8002586:	d015      	beq.n	80025b4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002588:	23a0      	movs	r3, #160	; 0xa0
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2220      	movs	r2, #32
 8002590:	4013      	ands	r3, r2
 8002592:	d106      	bne.n	80025a2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002594:	239c      	movs	r3, #156	; 0x9c
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	055b      	lsls	r3, r3, #21
 800259e:	4013      	ands	r3, r2
 80025a0:	d008      	beq.n	80025b4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	0010      	movs	r0, r2
 80025b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	228c      	movs	r2, #140	; 0x8c
 80025b8:	589b      	ldr	r3, [r3, r2]
 80025ba:	2194      	movs	r1, #148	; 0x94
 80025bc:	187a      	adds	r2, r7, r1
 80025be:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2240      	movs	r2, #64	; 0x40
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	d004      	beq.n	80025d8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2228      	movs	r2, #40	; 0x28
 80025d4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025d6:	d047      	beq.n	8002668 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 ff40 	bl	8003460 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	d137      	bne.n	800265e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ee:	f3ef 8310 	mrs	r3, PRIMASK
 80025f2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80025f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f6:	2090      	movs	r0, #144	; 0x90
 80025f8:	183a      	adds	r2, r7, r0
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002602:	f383 8810 	msr	PRIMASK, r3
}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2140      	movs	r1, #64	; 0x40
 8002614:	438a      	bics	r2, r1
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	183b      	adds	r3, r7, r0
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002620:	f383 8810 	msr	PRIMASK, r3
}
 8002624:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002632:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_UART_IRQHandler+0x2c0>)
 8002634:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800263a:	0018      	movs	r0, r3
 800263c:	f7fe fc16 	bl	8000e6c <HAL_DMA_Abort_IT>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d01a      	beq.n	800267a <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800264e:	0018      	movs	r0, r3
 8002650:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002652:	e012      	b.n	800267a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f9d2 	bl	8002a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265c:	e00d      	b.n	800267a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f000 f9cd 	bl	8002a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002666:	e008      	b.n	800267a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0018      	movs	r0, r3
 800266c:	f000 f9c8 	bl	8002a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	228c      	movs	r2, #140	; 0x8c
 8002674:	2100      	movs	r1, #0
 8002676:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002678:	e1b1      	b.n	80029de <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267a:	46c0      	nop			; (mov r8, r8)
    return;
 800267c:	e1af      	b.n	80029de <HAL_UART_IRQHandler+0x612>
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	0000080f 	.word	0x0000080f
 8002684:	10000001 	.word	0x10000001
 8002688:	04000120 	.word	0x04000120
 800268c:	0800352d 	.word	0x0800352d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d000      	beq.n	800269a <HAL_UART_IRQHandler+0x2ce>
 8002698:	e135      	b.n	8002906 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800269a:	23a4      	movs	r3, #164	; 0xa4
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2210      	movs	r2, #16
 80026a2:	4013      	ands	r3, r2
 80026a4:	d100      	bne.n	80026a8 <HAL_UART_IRQHandler+0x2dc>
 80026a6:	e12e      	b.n	8002906 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80026a8:	23a0      	movs	r3, #160	; 0xa0
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2210      	movs	r2, #16
 80026b0:	4013      	ands	r3, r2
 80026b2:	d100      	bne.n	80026b6 <HAL_UART_IRQHandler+0x2ea>
 80026b4:	e127      	b.n	8002906 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2210      	movs	r2, #16
 80026bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2240      	movs	r2, #64	; 0x40
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d000      	beq.n	80026ce <HAL_UART_IRQHandler+0x302>
 80026cc:	e09e      	b.n	800280c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	217e      	movs	r1, #126	; 0x7e
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d100      	bne.n	80026e6 <HAL_UART_IRQHandler+0x31a>
 80026e4:	e17d      	b.n	80029e2 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	225c      	movs	r2, #92	; 0x5c
 80026ea:	5a9b      	ldrh	r3, [r3, r2]
 80026ec:	187a      	adds	r2, r7, r1
 80026ee:	8812      	ldrh	r2, [r2, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d300      	bcc.n	80026f6 <HAL_UART_IRQHandler+0x32a>
 80026f4:	e175      	b.n	80029e2 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	187a      	adds	r2, r7, r1
 80026fa:	215e      	movs	r1, #94	; 0x5e
 80026fc:	8812      	ldrh	r2, [r2, #0]
 80026fe:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2220      	movs	r2, #32
 800270a:	4013      	ands	r3, r2
 800270c:	d16f      	bne.n	80027ee <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270e:	f3ef 8310 	mrs	r3, PRIMASK
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002716:	67bb      	str	r3, [r7, #120]	; 0x78
 8002718:	2301      	movs	r3, #1
 800271a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	f383 8810 	msr	PRIMASK, r3
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	49b1      	ldr	r1, [pc, #708]	; (80029f4 <HAL_UART_IRQHandler+0x628>)
 8002730:	400a      	ands	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002736:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002740:	f3ef 8310 	mrs	r3, PRIMASK
 8002744:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002748:	677b      	str	r3, [r7, #116]	; 0x74
 800274a:	2301      	movs	r3, #1
 800274c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002750:	f383 8810 	msr	PRIMASK, r3
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	438a      	bics	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002768:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276c:	f383 8810 	msr	PRIMASK, r3
}
 8002770:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002772:	f3ef 8310 	mrs	r3, PRIMASK
 8002776:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002778:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277a:	673b      	str	r3, [r7, #112]	; 0x70
 800277c:	2301      	movs	r3, #1
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002782:	f383 8810 	msr	PRIMASK, r3
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2140      	movs	r1, #64	; 0x40
 8002794:	438a      	bics	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800279a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279e:	f383 8810 	msr	PRIMASK, r3
}
 80027a2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2288      	movs	r2, #136	; 0x88
 80027a8:	2120      	movs	r1, #32
 80027aa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b2:	f3ef 8310 	mrs	r3, PRIMASK
 80027b6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027bc:	2301      	movs	r3, #1
 80027be:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c2:	f383 8810 	msr	PRIMASK, r3
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2110      	movs	r1, #16
 80027d4:	438a      	bics	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027da:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027de:	f383 8810 	msr	PRIMASK, r3
}
 80027e2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fe fadf 	bl	8000dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	225c      	movs	r2, #92	; 0x5c
 80027f2:	5a9a      	ldrh	r2, [r3, r2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	215e      	movs	r1, #94	; 0x5e
 80027f8:	5a5b      	ldrh	r3, [r3, r1]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0011      	movs	r1, r2
 8002804:	0018      	movs	r0, r3
 8002806:	f000 f903 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800280a:	e0ea      	b.n	80029e2 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	225c      	movs	r2, #92	; 0x5c
 8002810:	5a99      	ldrh	r1, [r3, r2]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	225e      	movs	r2, #94	; 0x5e
 8002816:	5a9b      	ldrh	r3, [r3, r2]
 8002818:	b29a      	uxth	r2, r3
 800281a:	208e      	movs	r0, #142	; 0x8e
 800281c:	183b      	adds	r3, r7, r0
 800281e:	1a8a      	subs	r2, r1, r2
 8002820:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	225e      	movs	r2, #94	; 0x5e
 8002826:	5a9b      	ldrh	r3, [r3, r2]
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d100      	bne.n	8002830 <HAL_UART_IRQHandler+0x464>
 800282e:	e0da      	b.n	80029e6 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002830:	183b      	adds	r3, r7, r0
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d100      	bne.n	800283a <HAL_UART_IRQHandler+0x46e>
 8002838:	e0d5      	b.n	80029e6 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283a:	f3ef 8310 	mrs	r3, PRIMASK
 800283e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002840:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002842:	2488      	movs	r4, #136	; 0x88
 8002844:	193a      	adds	r2, r7, r4
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	2301      	movs	r3, #1
 800284a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f383 8810 	msr	PRIMASK, r3
}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4966      	ldr	r1, [pc, #408]	; (80029f8 <HAL_UART_IRQHandler+0x62c>)
 8002860:	400a      	ands	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	193b      	adds	r3, r7, r4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f383 8810 	msr	PRIMASK, r3
}
 8002870:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002872:	f3ef 8310 	mrs	r3, PRIMASK
 8002876:	61bb      	str	r3, [r7, #24]
  return(result);
 8002878:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800287a:	2484      	movs	r4, #132	; 0x84
 800287c:	193a      	adds	r2, r7, r4
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	2301      	movs	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f383 8810 	msr	PRIMASK, r3
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4959      	ldr	r1, [pc, #356]	; (80029fc <HAL_UART_IRQHandler+0x630>)
 8002898:	400a      	ands	r2, r1
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	193b      	adds	r3, r7, r4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	f383 8810 	msr	PRIMASK, r3
}
 80028a8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2288      	movs	r2, #136	; 0x88
 80028ae:	2120      	movs	r1, #32
 80028b0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028be:	f3ef 8310 	mrs	r3, PRIMASK
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c6:	2480      	movs	r4, #128	; 0x80
 80028c8:	193a      	adds	r2, r7, r4
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	2301      	movs	r3, #1
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	f383 8810 	msr	PRIMASK, r3
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2110      	movs	r1, #16
 80028e4:	438a      	bics	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	f383 8810 	msr	PRIMASK, r3
}
 80028f4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	881a      	ldrh	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0011      	movs	r1, r2
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 f886 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002904:	e06f      	b.n	80029e6 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002906:	23a4      	movs	r3, #164	; 0xa4
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	035b      	lsls	r3, r3, #13
 8002910:	4013      	ands	r3, r2
 8002912:	d010      	beq.n	8002936 <HAL_UART_IRQHandler+0x56a>
 8002914:	239c      	movs	r3, #156	; 0x9c
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	03db      	lsls	r3, r3, #15
 800291e:	4013      	ands	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	0352      	lsls	r2, r2, #13
 800292a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 ffe8 	bl	8003904 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002934:	e05a      	b.n	80029ec <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002936:	23a4      	movs	r3, #164	; 0xa4
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	4013      	ands	r3, r2
 8002940:	d016      	beq.n	8002970 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002942:	23a0      	movs	r3, #160	; 0xa0
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	4013      	ands	r3, r2
 800294c:	d106      	bne.n	800295c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800294e:	239c      	movs	r3, #156	; 0x9c
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	4013      	ands	r3, r2
 800295a:	d009      	beq.n	8002970 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002960:	2b00      	cmp	r3, #0
 8002962:	d042      	beq.n	80029ea <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	0010      	movs	r0, r2
 800296c:	4798      	blx	r3
    }
    return;
 800296e:	e03c      	b.n	80029ea <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002970:	23a4      	movs	r3, #164	; 0xa4
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2240      	movs	r2, #64	; 0x40
 8002978:	4013      	ands	r3, r2
 800297a:	d00a      	beq.n	8002992 <HAL_UART_IRQHandler+0x5c6>
 800297c:	23a0      	movs	r3, #160	; 0xa0
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	4013      	ands	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0018      	movs	r0, r3
 800298c:	f000 ff8e 	bl	80038ac <UART_EndTransmit_IT>
    return;
 8002990:	e02c      	b.n	80029ec <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002992:	23a4      	movs	r3, #164	; 0xa4
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	4013      	ands	r3, r2
 800299e:	d00b      	beq.n	80029b8 <HAL_UART_IRQHandler+0x5ec>
 80029a0:	23a0      	movs	r3, #160	; 0xa0
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	05db      	lsls	r3, r3, #23
 80029aa:	4013      	ands	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 ffb7 	bl	8003924 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029b6:	e019      	b.n	80029ec <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029b8:	23a4      	movs	r3, #164	; 0xa4
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	045b      	lsls	r3, r3, #17
 80029c2:	4013      	ands	r3, r2
 80029c4:	d012      	beq.n	80029ec <HAL_UART_IRQHandler+0x620>
 80029c6:	23a0      	movs	r3, #160	; 0xa0
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	da0d      	bge.n	80029ec <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 ff9e 	bl	8003914 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029d8:	e008      	b.n	80029ec <HAL_UART_IRQHandler+0x620>
      return;
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	e006      	b.n	80029ec <HAL_UART_IRQHandler+0x620>
    return;
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	e004      	b.n	80029ec <HAL_UART_IRQHandler+0x620>
      return;
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	e002      	b.n	80029ec <HAL_UART_IRQHandler+0x620>
      return;
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	e000      	b.n	80029ec <HAL_UART_IRQHandler+0x620>
    return;
 80029ea:	46c0      	nop			; (mov r8, r8)
  }
}
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b02a      	add	sp, #168	; 0xa8
 80029f0:	bdb0      	pop	{r4, r5, r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	fffffeff 	.word	0xfffffeff
 80029f8:	fffffedf 	.word	0xfffffedf
 80029fc:	effffffe 	.word	0xeffffffe

08002a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	000a      	movs	r2, r1
 8002a1a:	1cbb      	adds	r3, r7, #2
 8002a1c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b002      	add	sp, #8
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b090      	sub	sp, #64	; 0x40
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a30:	231a      	movs	r3, #26
 8002a32:	2220      	movs	r2, #32
 8002a34:	189b      	adds	r3, r3, r2
 8002a36:	19db      	adds	r3, r3, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4ac1      	ldr	r2, [pc, #772]	; (8002d60 <UART_SetConfig+0x338>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a66:	430b      	orrs	r3, r1
 8002a68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4abc      	ldr	r2, [pc, #752]	; (8002d64 <UART_SetConfig+0x33c>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	0018      	movs	r0, r3
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	68d9      	ldr	r1, [r3, #12]
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	0003      	movs	r3, r0
 8002a80:	430b      	orrs	r3, r1
 8002a82:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4ab6      	ldr	r2, [pc, #728]	; (8002d68 <UART_SetConfig+0x340>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <UART_SetConfig+0x80>
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4ab4      	ldr	r2, [pc, #720]	; (8002d6c <UART_SetConfig+0x344>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4ab0      	ldr	r2, [pc, #704]	; (8002d70 <UART_SetConfig+0x348>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aba:	430b      	orrs	r3, r1
 8002abc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	4393      	bics	r3, r2
 8002ac8:	0018      	movs	r0, r3
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4aa5      	ldr	r2, [pc, #660]	; (8002d74 <UART_SetConfig+0x34c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d131      	bne.n	8002b46 <UART_SetConfig+0x11e>
 8002ae2:	4ba5      	ldr	r3, [pc, #660]	; (8002d78 <UART_SetConfig+0x350>)
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d01d      	beq.n	8002b2a <UART_SetConfig+0x102>
 8002aee:	d823      	bhi.n	8002b38 <UART_SetConfig+0x110>
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d00c      	beq.n	8002b0e <UART_SetConfig+0xe6>
 8002af4:	d820      	bhi.n	8002b38 <UART_SetConfig+0x110>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <UART_SetConfig+0xd8>
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d00e      	beq.n	8002b1c <UART_SetConfig+0xf4>
 8002afe:	e01b      	b.n	8002b38 <UART_SetConfig+0x110>
 8002b00:	231b      	movs	r3, #27
 8002b02:	2220      	movs	r2, #32
 8002b04:	189b      	adds	r3, r3, r2
 8002b06:	19db      	adds	r3, r3, r7
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e154      	b.n	8002db8 <UART_SetConfig+0x390>
 8002b0e:	231b      	movs	r3, #27
 8002b10:	2220      	movs	r2, #32
 8002b12:	189b      	adds	r3, r3, r2
 8002b14:	19db      	adds	r3, r3, r7
 8002b16:	2202      	movs	r2, #2
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	e14d      	b.n	8002db8 <UART_SetConfig+0x390>
 8002b1c:	231b      	movs	r3, #27
 8002b1e:	2220      	movs	r2, #32
 8002b20:	189b      	adds	r3, r3, r2
 8002b22:	19db      	adds	r3, r3, r7
 8002b24:	2204      	movs	r2, #4
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e146      	b.n	8002db8 <UART_SetConfig+0x390>
 8002b2a:	231b      	movs	r3, #27
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	189b      	adds	r3, r3, r2
 8002b30:	19db      	adds	r3, r3, r7
 8002b32:	2208      	movs	r2, #8
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e13f      	b.n	8002db8 <UART_SetConfig+0x390>
 8002b38:	231b      	movs	r3, #27
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	189b      	adds	r3, r3, r2
 8002b3e:	19db      	adds	r3, r3, r7
 8002b40:	2210      	movs	r2, #16
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e138      	b.n	8002db8 <UART_SetConfig+0x390>
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a8c      	ldr	r2, [pc, #560]	; (8002d7c <UART_SetConfig+0x354>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d131      	bne.n	8002bb4 <UART_SetConfig+0x18c>
 8002b50:	4b89      	ldr	r3, [pc, #548]	; (8002d78 <UART_SetConfig+0x350>)
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	220c      	movs	r2, #12
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	d01d      	beq.n	8002b98 <UART_SetConfig+0x170>
 8002b5c:	d823      	bhi.n	8002ba6 <UART_SetConfig+0x17e>
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d00c      	beq.n	8002b7c <UART_SetConfig+0x154>
 8002b62:	d820      	bhi.n	8002ba6 <UART_SetConfig+0x17e>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <UART_SetConfig+0x146>
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d00e      	beq.n	8002b8a <UART_SetConfig+0x162>
 8002b6c:	e01b      	b.n	8002ba6 <UART_SetConfig+0x17e>
 8002b6e:	231b      	movs	r3, #27
 8002b70:	2220      	movs	r2, #32
 8002b72:	189b      	adds	r3, r3, r2
 8002b74:	19db      	adds	r3, r3, r7
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e11d      	b.n	8002db8 <UART_SetConfig+0x390>
 8002b7c:	231b      	movs	r3, #27
 8002b7e:	2220      	movs	r2, #32
 8002b80:	189b      	adds	r3, r3, r2
 8002b82:	19db      	adds	r3, r3, r7
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e116      	b.n	8002db8 <UART_SetConfig+0x390>
 8002b8a:	231b      	movs	r3, #27
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	19db      	adds	r3, r3, r7
 8002b92:	2204      	movs	r2, #4
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e10f      	b.n	8002db8 <UART_SetConfig+0x390>
 8002b98:	231b      	movs	r3, #27
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	19db      	adds	r3, r3, r7
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e108      	b.n	8002db8 <UART_SetConfig+0x390>
 8002ba6:	231b      	movs	r3, #27
 8002ba8:	2220      	movs	r2, #32
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	19db      	adds	r3, r3, r7
 8002bae:	2210      	movs	r2, #16
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e101      	b.n	8002db8 <UART_SetConfig+0x390>
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a71      	ldr	r2, [pc, #452]	; (8002d80 <UART_SetConfig+0x358>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d131      	bne.n	8002c22 <UART_SetConfig+0x1fa>
 8002bbe:	4b6e      	ldr	r3, [pc, #440]	; (8002d78 <UART_SetConfig+0x350>)
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	2230      	movs	r2, #48	; 0x30
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b30      	cmp	r3, #48	; 0x30
 8002bc8:	d01d      	beq.n	8002c06 <UART_SetConfig+0x1de>
 8002bca:	d823      	bhi.n	8002c14 <UART_SetConfig+0x1ec>
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d00c      	beq.n	8002bea <UART_SetConfig+0x1c2>
 8002bd0:	d820      	bhi.n	8002c14 <UART_SetConfig+0x1ec>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <UART_SetConfig+0x1b4>
 8002bd6:	2b10      	cmp	r3, #16
 8002bd8:	d00e      	beq.n	8002bf8 <UART_SetConfig+0x1d0>
 8002bda:	e01b      	b.n	8002c14 <UART_SetConfig+0x1ec>
 8002bdc:	231b      	movs	r3, #27
 8002bde:	2220      	movs	r2, #32
 8002be0:	189b      	adds	r3, r3, r2
 8002be2:	19db      	adds	r3, r3, r7
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e0e6      	b.n	8002db8 <UART_SetConfig+0x390>
 8002bea:	231b      	movs	r3, #27
 8002bec:	2220      	movs	r2, #32
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	19db      	adds	r3, r3, r7
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e0df      	b.n	8002db8 <UART_SetConfig+0x390>
 8002bf8:	231b      	movs	r3, #27
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	189b      	adds	r3, r3, r2
 8002bfe:	19db      	adds	r3, r3, r7
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e0d8      	b.n	8002db8 <UART_SetConfig+0x390>
 8002c06:	231b      	movs	r3, #27
 8002c08:	2220      	movs	r2, #32
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	19db      	adds	r3, r3, r7
 8002c0e:	2208      	movs	r2, #8
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e0d1      	b.n	8002db8 <UART_SetConfig+0x390>
 8002c14:	231b      	movs	r3, #27
 8002c16:	2220      	movs	r2, #32
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	19db      	adds	r3, r3, r7
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e0ca      	b.n	8002db8 <UART_SetConfig+0x390>
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a57      	ldr	r2, [pc, #348]	; (8002d84 <UART_SetConfig+0x35c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d106      	bne.n	8002c3a <UART_SetConfig+0x212>
 8002c2c:	231b      	movs	r3, #27
 8002c2e:	2220      	movs	r2, #32
 8002c30:	189b      	adds	r3, r3, r2
 8002c32:	19db      	adds	r3, r3, r7
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e0be      	b.n	8002db8 <UART_SetConfig+0x390>
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <UART_SetConfig+0x360>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d106      	bne.n	8002c52 <UART_SetConfig+0x22a>
 8002c44:	231b      	movs	r3, #27
 8002c46:	2220      	movs	r2, #32
 8002c48:	189b      	adds	r3, r3, r2
 8002c4a:	19db      	adds	r3, r3, r7
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e0b2      	b.n	8002db8 <UART_SetConfig+0x390>
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a4d      	ldr	r2, [pc, #308]	; (8002d8c <UART_SetConfig+0x364>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d106      	bne.n	8002c6a <UART_SetConfig+0x242>
 8002c5c:	231b      	movs	r3, #27
 8002c5e:	2220      	movs	r2, #32
 8002c60:	189b      	adds	r3, r3, r2
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e0a6      	b.n	8002db8 <UART_SetConfig+0x390>
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a3e      	ldr	r2, [pc, #248]	; (8002d68 <UART_SetConfig+0x340>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d13e      	bne.n	8002cf2 <UART_SetConfig+0x2ca>
 8002c74:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <UART_SetConfig+0x350>)
 8002c76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c78:	23c0      	movs	r3, #192	; 0xc0
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	22c0      	movs	r2, #192	; 0xc0
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d027      	beq.n	8002cd6 <UART_SetConfig+0x2ae>
 8002c86:	22c0      	movs	r2, #192	; 0xc0
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d82a      	bhi.n	8002ce4 <UART_SetConfig+0x2bc>
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d011      	beq.n	8002cba <UART_SetConfig+0x292>
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d822      	bhi.n	8002ce4 <UART_SetConfig+0x2bc>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <UART_SetConfig+0x284>
 8002ca2:	2280      	movs	r2, #128	; 0x80
 8002ca4:	00d2      	lsls	r2, r2, #3
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00e      	beq.n	8002cc8 <UART_SetConfig+0x2a0>
 8002caa:	e01b      	b.n	8002ce4 <UART_SetConfig+0x2bc>
 8002cac:	231b      	movs	r3, #27
 8002cae:	2220      	movs	r2, #32
 8002cb0:	189b      	adds	r3, r3, r2
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e07e      	b.n	8002db8 <UART_SetConfig+0x390>
 8002cba:	231b      	movs	r3, #27
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	189b      	adds	r3, r3, r2
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e077      	b.n	8002db8 <UART_SetConfig+0x390>
 8002cc8:	231b      	movs	r3, #27
 8002cca:	2220      	movs	r2, #32
 8002ccc:	189b      	adds	r3, r3, r2
 8002cce:	19db      	adds	r3, r3, r7
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e070      	b.n	8002db8 <UART_SetConfig+0x390>
 8002cd6:	231b      	movs	r3, #27
 8002cd8:	2220      	movs	r2, #32
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	2208      	movs	r2, #8
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e069      	b.n	8002db8 <UART_SetConfig+0x390>
 8002ce4:	231b      	movs	r3, #27
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	189b      	adds	r3, r3, r2
 8002cea:	19db      	adds	r3, r3, r7
 8002cec:	2210      	movs	r2, #16
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e062      	b.n	8002db8 <UART_SetConfig+0x390>
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <UART_SetConfig+0x344>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d157      	bne.n	8002dac <UART_SetConfig+0x384>
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <UART_SetConfig+0x350>)
 8002cfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d00:	23c0      	movs	r3, #192	; 0xc0
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	22c0      	movs	r2, #192	; 0xc0
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d040      	beq.n	8002d90 <UART_SetConfig+0x368>
 8002d0e:	22c0      	movs	r2, #192	; 0xc0
 8002d10:	0092      	lsls	r2, r2, #2
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d843      	bhi.n	8002d9e <UART_SetConfig+0x376>
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d011      	beq.n	8002d42 <UART_SetConfig+0x31a>
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	0092      	lsls	r2, r2, #2
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d83b      	bhi.n	8002d9e <UART_SetConfig+0x376>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <UART_SetConfig+0x30c>
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0052      	lsls	r2, r2, #1
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00e      	beq.n	8002d50 <UART_SetConfig+0x328>
 8002d32:	e034      	b.n	8002d9e <UART_SetConfig+0x376>
 8002d34:	231b      	movs	r3, #27
 8002d36:	2220      	movs	r2, #32
 8002d38:	189b      	adds	r3, r3, r2
 8002d3a:	19db      	adds	r3, r3, r7
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e03a      	b.n	8002db8 <UART_SetConfig+0x390>
 8002d42:	231b      	movs	r3, #27
 8002d44:	2220      	movs	r2, #32
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	19db      	adds	r3, r3, r7
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e033      	b.n	8002db8 <UART_SetConfig+0x390>
 8002d50:	231b      	movs	r3, #27
 8002d52:	2220      	movs	r2, #32
 8002d54:	189b      	adds	r3, r3, r2
 8002d56:	19db      	adds	r3, r3, r7
 8002d58:	2204      	movs	r2, #4
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e02c      	b.n	8002db8 <UART_SetConfig+0x390>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	cfff69f3 	.word	0xcfff69f3
 8002d64:	ffffcfff 	.word	0xffffcfff
 8002d68:	40008000 	.word	0x40008000
 8002d6c:	40008400 	.word	0x40008400
 8002d70:	11fff4ff 	.word	0x11fff4ff
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40004400 	.word	0x40004400
 8002d80:	40004800 	.word	0x40004800
 8002d84:	40004c00 	.word	0x40004c00
 8002d88:	40005000 	.word	0x40005000
 8002d8c:	40013c00 	.word	0x40013c00
 8002d90:	231b      	movs	r3, #27
 8002d92:	2220      	movs	r2, #32
 8002d94:	189b      	adds	r3, r3, r2
 8002d96:	19db      	adds	r3, r3, r7
 8002d98:	2208      	movs	r2, #8
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e00c      	b.n	8002db8 <UART_SetConfig+0x390>
 8002d9e:	231b      	movs	r3, #27
 8002da0:	2220      	movs	r2, #32
 8002da2:	189b      	adds	r3, r3, r2
 8002da4:	19db      	adds	r3, r3, r7
 8002da6:	2210      	movs	r2, #16
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e005      	b.n	8002db8 <UART_SetConfig+0x390>
 8002dac:	231b      	movs	r3, #27
 8002dae:	2220      	movs	r2, #32
 8002db0:	189b      	adds	r3, r3, r2
 8002db2:	19db      	adds	r3, r3, r7
 8002db4:	2210      	movs	r2, #16
 8002db6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4ac1      	ldr	r2, [pc, #772]	; (80030c4 <UART_SetConfig+0x69c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d005      	beq.n	8002dce <UART_SetConfig+0x3a6>
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4ac0      	ldr	r2, [pc, #768]	; (80030c8 <UART_SetConfig+0x6a0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d000      	beq.n	8002dce <UART_SetConfig+0x3a6>
 8002dcc:	e093      	b.n	8002ef6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dce:	231b      	movs	r3, #27
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	19db      	adds	r3, r3, r7
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d015      	beq.n	8002e08 <UART_SetConfig+0x3e0>
 8002ddc:	dc18      	bgt.n	8002e10 <UART_SetConfig+0x3e8>
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d00d      	beq.n	8002dfe <UART_SetConfig+0x3d6>
 8002de2:	dc15      	bgt.n	8002e10 <UART_SetConfig+0x3e8>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <UART_SetConfig+0x3c6>
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d005      	beq.n	8002df8 <UART_SetConfig+0x3d0>
 8002dec:	e010      	b.n	8002e10 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dee:	f7fe ff89 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8002df2:	0003      	movs	r3, r0
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002df6:	e014      	b.n	8002e22 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002df8:	4bb4      	ldr	r3, [pc, #720]	; (80030cc <UART_SetConfig+0x6a4>)
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dfc:	e011      	b.n	8002e22 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dfe:	f7fe fef5 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8002e02:	0003      	movs	r3, r0
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e06:	e00c      	b.n	8002e22 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e0e:	e008      	b.n	8002e22 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002e14:	231a      	movs	r3, #26
 8002e16:	2220      	movs	r2, #32
 8002e18:	189b      	adds	r3, r3, r2
 8002e1a:	19db      	adds	r3, r3, r7
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
        break;
 8002e20:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d100      	bne.n	8002e2a <UART_SetConfig+0x402>
 8002e28:	e135      	b.n	8003096 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e2e:	4ba8      	ldr	r3, [pc, #672]	; (80030d0 <UART_SetConfig+0x6a8>)
 8002e30:	0052      	lsls	r2, r2, #1
 8002e32:	5ad3      	ldrh	r3, [r2, r3]
 8002e34:	0019      	movs	r1, r3
 8002e36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e38:	f7fd f964 	bl	8000104 <__udivsi3>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	0013      	movs	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d305      	bcc.n	8002e5c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d906      	bls.n	8002e6a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002e5c:	231a      	movs	r3, #26
 8002e5e:	2220      	movs	r2, #32
 8002e60:	189b      	adds	r3, r3, r2
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e044      	b.n	8002ef4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e76:	4b96      	ldr	r3, [pc, #600]	; (80030d0 <UART_SetConfig+0x6a8>)
 8002e78:	0052      	lsls	r2, r2, #1
 8002e7a:	5ad3      	ldrh	r3, [r2, r3]
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	69b8      	ldr	r0, [r7, #24]
 8002e88:	69f9      	ldr	r1, [r7, #28]
 8002e8a:	f7fd fab1 	bl	80003f0 <__aeabi_uldivmod>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	000b      	movs	r3, r1
 8002e92:	0e11      	lsrs	r1, r2, #24
 8002e94:	021d      	lsls	r5, r3, #8
 8002e96:	430d      	orrs	r5, r1
 8002e98:	0214      	lsls	r4, r2, #8
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68b8      	ldr	r0, [r7, #8]
 8002ea8:	68f9      	ldr	r1, [r7, #12]
 8002eaa:	1900      	adds	r0, r0, r4
 8002eac:	4169      	adcs	r1, r5
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f7fd fa98 	bl	80003f0 <__aeabi_uldivmod>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	000b      	movs	r3, r1
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eca:	23c0      	movs	r3, #192	; 0xc0
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d309      	bcc.n	8002ee6 <UART_SetConfig+0x4be>
 8002ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	035b      	lsls	r3, r3, #13
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d204      	bcs.n	8002ee6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	e006      	b.n	8002ef4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002ee6:	231a      	movs	r3, #26
 8002ee8:	2220      	movs	r2, #32
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	19db      	adds	r3, r3, r7
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002ef2:	e0d0      	b.n	8003096 <UART_SetConfig+0x66e>
 8002ef4:	e0cf      	b.n	8003096 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d000      	beq.n	8002f04 <UART_SetConfig+0x4dc>
 8002f02:	e070      	b.n	8002fe6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002f04:	231b      	movs	r3, #27
 8002f06:	2220      	movs	r2, #32
 8002f08:	189b      	adds	r3, r3, r2
 8002f0a:	19db      	adds	r3, r3, r7
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d015      	beq.n	8002f3e <UART_SetConfig+0x516>
 8002f12:	dc18      	bgt.n	8002f46 <UART_SetConfig+0x51e>
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d00d      	beq.n	8002f34 <UART_SetConfig+0x50c>
 8002f18:	dc15      	bgt.n	8002f46 <UART_SetConfig+0x51e>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <UART_SetConfig+0x4fc>
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d005      	beq.n	8002f2e <UART_SetConfig+0x506>
 8002f22:	e010      	b.n	8002f46 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f24:	f7fe feee 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f2c:	e014      	b.n	8002f58 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f2e:	4b67      	ldr	r3, [pc, #412]	; (80030cc <UART_SetConfig+0x6a4>)
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f32:	e011      	b.n	8002f58 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f34:	f7fe fe5a 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f3c:	e00c      	b.n	8002f58 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f44:	e008      	b.n	8002f58 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f4a:	231a      	movs	r3, #26
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	189b      	adds	r3, r3, r2
 8002f50:	19db      	adds	r3, r3, r7
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
        break;
 8002f56:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d100      	bne.n	8002f60 <UART_SetConfig+0x538>
 8002f5e:	e09a      	b.n	8003096 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f64:	4b5a      	ldr	r3, [pc, #360]	; (80030d0 <UART_SetConfig+0x6a8>)
 8002f66:	0052      	lsls	r2, r2, #1
 8002f68:	5ad3      	ldrh	r3, [r2, r3]
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f6e:	f7fd f8c9 	bl	8000104 <__udivsi3>
 8002f72:	0003      	movs	r3, r0
 8002f74:	005a      	lsls	r2, r3, #1
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	18d2      	adds	r2, r2, r3
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0019      	movs	r1, r3
 8002f84:	0010      	movs	r0, r2
 8002f86:	f7fd f8bd 	bl	8000104 <__udivsi3>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	d921      	bls.n	8002fd8 <UART_SetConfig+0x5b0>
 8002f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	025b      	lsls	r3, r3, #9
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d21c      	bcs.n	8002fd8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	200e      	movs	r0, #14
 8002fa4:	2420      	movs	r4, #32
 8002fa6:	1903      	adds	r3, r0, r4
 8002fa8:	19db      	adds	r3, r3, r7
 8002faa:	210f      	movs	r1, #15
 8002fac:	438a      	bics	r2, r1
 8002fae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	4013      	ands	r3, r2
 8002fba:	b299      	uxth	r1, r3
 8002fbc:	1903      	adds	r3, r0, r4
 8002fbe:	19db      	adds	r3, r3, r7
 8002fc0:	1902      	adds	r2, r0, r4
 8002fc2:	19d2      	adds	r2, r2, r7
 8002fc4:	8812      	ldrh	r2, [r2, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1902      	adds	r2, r0, r4
 8002fd0:	19d2      	adds	r2, r2, r7
 8002fd2:	8812      	ldrh	r2, [r2, #0]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	e05e      	b.n	8003096 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002fd8:	231a      	movs	r3, #26
 8002fda:	2220      	movs	r2, #32
 8002fdc:	189b      	adds	r3, r3, r2
 8002fde:	19db      	adds	r3, r3, r7
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e057      	b.n	8003096 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fe6:	231b      	movs	r3, #27
 8002fe8:	2220      	movs	r2, #32
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	19db      	adds	r3, r3, r7
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d015      	beq.n	8003020 <UART_SetConfig+0x5f8>
 8002ff4:	dc18      	bgt.n	8003028 <UART_SetConfig+0x600>
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d00d      	beq.n	8003016 <UART_SetConfig+0x5ee>
 8002ffa:	dc15      	bgt.n	8003028 <UART_SetConfig+0x600>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <UART_SetConfig+0x5de>
 8003000:	2b02      	cmp	r3, #2
 8003002:	d005      	beq.n	8003010 <UART_SetConfig+0x5e8>
 8003004:	e010      	b.n	8003028 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003006:	f7fe fe7d 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 800300a:	0003      	movs	r3, r0
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800300e:	e014      	b.n	800303a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003010:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <UART_SetConfig+0x6a4>)
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003014:	e011      	b.n	800303a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003016:	f7fe fde9 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 800301a:	0003      	movs	r3, r0
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800301e:	e00c      	b.n	800303a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003026:	e008      	b.n	800303a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800302c:	231a      	movs	r3, #26
 800302e:	2220      	movs	r2, #32
 8003030:	189b      	adds	r3, r3, r2
 8003032:	19db      	adds	r3, r3, r7
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
        break;
 8003038:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d02a      	beq.n	8003096 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003044:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <UART_SetConfig+0x6a8>)
 8003046:	0052      	lsls	r2, r2, #1
 8003048:	5ad3      	ldrh	r3, [r2, r3]
 800304a:	0019      	movs	r1, r3
 800304c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800304e:	f7fd f859 	bl	8000104 <__udivsi3>
 8003052:	0003      	movs	r3, r0
 8003054:	001a      	movs	r2, r3
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	18d2      	adds	r2, r2, r3
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0019      	movs	r1, r3
 8003064:	0010      	movs	r0, r2
 8003066:	f7fd f84d 	bl	8000104 <__udivsi3>
 800306a:	0003      	movs	r3, r0
 800306c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d90a      	bls.n	800308a <UART_SetConfig+0x662>
 8003074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	025b      	lsls	r3, r3, #9
 800307a:	429a      	cmp	r2, r3
 800307c:	d205      	bcs.n	800308a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	b29a      	uxth	r2, r3
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	e005      	b.n	8003096 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800308a:	231a      	movs	r3, #26
 800308c:	2220      	movs	r2, #32
 800308e:	189b      	adds	r3, r3, r2
 8003090:	19db      	adds	r3, r3, r7
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	226a      	movs	r2, #106	; 0x6a
 800309a:	2101      	movs	r1, #1
 800309c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	2268      	movs	r2, #104	; 0x68
 80030a2:	2101      	movs	r1, #1
 80030a4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	2200      	movs	r2, #0
 80030aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	2200      	movs	r2, #0
 80030b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80030b2:	231a      	movs	r3, #26
 80030b4:	2220      	movs	r2, #32
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	19db      	adds	r3, r3, r7
 80030ba:	781b      	ldrb	r3, [r3, #0]
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b010      	add	sp, #64	; 0x40
 80030c2:	bdb0      	pop	{r4, r5, r7, pc}
 80030c4:	40008000 	.word	0x40008000
 80030c8:	40008400 	.word	0x40008400
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	08003c38 	.word	0x08003c38

080030d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	2201      	movs	r2, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	d00b      	beq.n	80030fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a4a      	ldr	r2, [pc, #296]	; (8003218 <UART_AdvFeatureConfig+0x144>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	2202      	movs	r2, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d00b      	beq.n	8003120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4a43      	ldr	r2, [pc, #268]	; (800321c <UART_AdvFeatureConfig+0x148>)
 8003110:	4013      	ands	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	2204      	movs	r2, #4
 8003126:	4013      	ands	r3, r2
 8003128:	d00b      	beq.n	8003142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a3b      	ldr	r2, [pc, #236]	; (8003220 <UART_AdvFeatureConfig+0x14c>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	2208      	movs	r2, #8
 8003148:	4013      	ands	r3, r2
 800314a:	d00b      	beq.n	8003164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <UART_AdvFeatureConfig+0x150>)
 8003154:	4013      	ands	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	2210      	movs	r2, #16
 800316a:	4013      	ands	r3, r2
 800316c:	d00b      	beq.n	8003186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a2c      	ldr	r2, [pc, #176]	; (8003228 <UART_AdvFeatureConfig+0x154>)
 8003176:	4013      	ands	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	2220      	movs	r2, #32
 800318c:	4013      	ands	r3, r2
 800318e:	d00b      	beq.n	80031a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4a25      	ldr	r2, [pc, #148]	; (800322c <UART_AdvFeatureConfig+0x158>)
 8003198:	4013      	ands	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	2240      	movs	r2, #64	; 0x40
 80031ae:	4013      	ands	r3, r2
 80031b0:	d01d      	beq.n	80031ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <UART_AdvFeatureConfig+0x15c>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	035b      	lsls	r3, r3, #13
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d10b      	bne.n	80031ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <UART_AdvFeatureConfig+0x160>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	4013      	ands	r3, r2
 80031f6:	d00b      	beq.n	8003210 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <UART_AdvFeatureConfig+0x164>)
 8003200:	4013      	ands	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}
 8003218:	fffdffff 	.word	0xfffdffff
 800321c:	fffeffff 	.word	0xfffeffff
 8003220:	fffbffff 	.word	0xfffbffff
 8003224:	ffff7fff 	.word	0xffff7fff
 8003228:	ffffefff 	.word	0xffffefff
 800322c:	ffffdfff 	.word	0xffffdfff
 8003230:	ffefffff 	.word	0xffefffff
 8003234:	ff9fffff 	.word	0xff9fffff
 8003238:	fff7ffff 	.word	0xfff7ffff

0800323c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af02      	add	r7, sp, #8
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	228c      	movs	r2, #140	; 0x8c
 8003248:	2100      	movs	r1, #0
 800324a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800324c:	f7fd fc8c 	bl	8000b68 <HAL_GetTick>
 8003250:	0003      	movs	r3, r0
 8003252:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2208      	movs	r2, #8
 800325c:	4013      	ands	r3, r2
 800325e:	2b08      	cmp	r3, #8
 8003260:	d10c      	bne.n	800327c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	0391      	lsls	r1, r2, #14
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4a18      	ldr	r2, [pc, #96]	; (80032cc <UART_CheckIdleState+0x90>)
 800326c:	9200      	str	r2, [sp, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	f000 f82e 	bl	80032d0 <UART_WaitOnFlagUntilTimeout>
 8003274:	1e03      	subs	r3, r0, #0
 8003276:	d001      	beq.n	800327c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e023      	b.n	80032c4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2204      	movs	r2, #4
 8003284:	4013      	ands	r3, r2
 8003286:	2b04      	cmp	r3, #4
 8003288:	d10c      	bne.n	80032a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	03d1      	lsls	r1, r2, #15
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <UART_CheckIdleState+0x90>)
 8003294:	9200      	str	r2, [sp, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	f000 f81a 	bl	80032d0 <UART_WaitOnFlagUntilTimeout>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d001      	beq.n	80032a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e00f      	b.n	80032c4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2284      	movs	r2, #132	; 0x84
 80032a8:	2120      	movs	r1, #32
 80032aa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2288      	movs	r2, #136	; 0x88
 80032b0:	2120      	movs	r1, #32
 80032b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2280      	movs	r2, #128	; 0x80
 80032be:	2100      	movs	r1, #0
 80032c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	01ffffff 	.word	0x01ffffff

080032d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b094      	sub	sp, #80	; 0x50
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	1dfb      	adds	r3, r7, #7
 80032de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e0:	e0a7      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e4:	3301      	adds	r3, #1
 80032e6:	d100      	bne.n	80032ea <UART_WaitOnFlagUntilTimeout+0x1a>
 80032e8:	e0a3      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fd fc3d 	bl	8000b68 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <UART_WaitOnFlagUntilTimeout+0x30>
 80032fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d13f      	bne.n	8003380 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003300:	f3ef 8310 	mrs	r3, PRIMASK
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003308:	647b      	str	r3, [r7, #68]	; 0x44
 800330a:	2301      	movs	r3, #1
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	f383 8810 	msr	PRIMASK, r3
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	494e      	ldr	r1, [pc, #312]	; (800345c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003322:	400a      	ands	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003328:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	f383 8810 	msr	PRIMASK, r3
}
 8003330:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003332:	f3ef 8310 	mrs	r3, PRIMASK
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	643b      	str	r3, [r7, #64]	; 0x40
 800333c:	2301      	movs	r3, #1
 800333e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2101      	movs	r1, #1
 8003354:	438a      	bics	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335e:	f383 8810 	msr	PRIMASK, r3
}
 8003362:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2284      	movs	r2, #132	; 0x84
 8003368:	2120      	movs	r1, #32
 800336a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2288      	movs	r2, #136	; 0x88
 8003370:	2120      	movs	r1, #32
 8003372:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	2100      	movs	r1, #0
 800337a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e069      	b.n	8003454 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2204      	movs	r2, #4
 8003388:	4013      	ands	r3, r2
 800338a:	d052      	beq.n	8003432 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	401a      	ands	r2, r3
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	429a      	cmp	r2, r3
 800339e:	d148      	bne.n	8003432 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033aa:	f3ef 8310 	mrs	r3, PRIMASK
 80033ae:	613b      	str	r3, [r7, #16]
  return(result);
 80033b0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b4:	2301      	movs	r3, #1
 80033b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4924      	ldr	r1, [pc, #144]	; (800345c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f383 8810 	msr	PRIMASK, r3
}
 80033da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033dc:	f3ef 8310 	mrs	r3, PRIMASK
 80033e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80033e2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e6:	2301      	movs	r3, #1
 80033e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	438a      	bics	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2284      	movs	r2, #132	; 0x84
 8003412:	2120      	movs	r1, #32
 8003414:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2288      	movs	r2, #136	; 0x88
 800341a:	2120      	movs	r1, #32
 800341c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	228c      	movs	r2, #140	; 0x8c
 8003422:	2120      	movs	r1, #32
 8003424:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e010      	b.n	8003454 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	4013      	ands	r3, r2
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	425a      	negs	r2, r3
 8003442:	4153      	adcs	r3, r2
 8003444:	b2db      	uxtb	r3, r3
 8003446:	001a      	movs	r2, r3
 8003448:	1dfb      	adds	r3, r7, #7
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d100      	bne.n	8003452 <UART_WaitOnFlagUntilTimeout+0x182>
 8003450:	e747      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	0018      	movs	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	b014      	add	sp, #80	; 0x50
 800345a:	bd80      	pop	{r7, pc}
 800345c:	fffffe5f 	.word	0xfffffe5f

08003460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08e      	sub	sp, #56	; 0x38
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003468:	f3ef 8310 	mrs	r3, PRIMASK
 800346c:	617b      	str	r3, [r7, #20]
  return(result);
 800346e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
 8003472:	2301      	movs	r3, #1
 8003474:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f383 8810 	msr	PRIMASK, r3
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4926      	ldr	r1, [pc, #152]	; (8003524 <UART_EndRxTransfer+0xc4>)
 800348a:	400a      	ands	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f383 8810 	msr	PRIMASK, r3
}
 8003498:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349a:	f3ef 8310 	mrs	r3, PRIMASK
 800349e:	623b      	str	r3, [r7, #32]
  return(result);
 80034a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
 80034a4:	2301      	movs	r3, #1
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	f383 8810 	msr	PRIMASK, r3
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	491b      	ldr	r1, [pc, #108]	; (8003528 <UART_EndRxTransfer+0xc8>)
 80034bc:	400a      	ands	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	f383 8810 	msr	PRIMASK, r3
}
 80034ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d118      	bne.n	8003506 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d4:	f3ef 8310 	mrs	r3, PRIMASK
 80034d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034de:	2301      	movs	r3, #1
 80034e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f383 8810 	msr	PRIMASK, r3
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2110      	movs	r1, #16
 80034f6:	438a      	bics	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f383 8810 	msr	PRIMASK, r3
}
 8003504:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2288      	movs	r2, #136	; 0x88
 800350a:	2120      	movs	r1, #32
 800350c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	671a      	str	r2, [r3, #112]	; 0x70
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b00e      	add	sp, #56	; 0x38
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	fffffedf 	.word	0xfffffedf
 8003528:	effffffe 	.word	0xeffffffe

0800352c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	225e      	movs	r2, #94	; 0x5e
 800353e:	2100      	movs	r1, #0
 8003540:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2256      	movs	r2, #86	; 0x56
 8003546:	2100      	movs	r1, #0
 8003548:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	0018      	movs	r0, r3
 800354e:	f7ff fa57 	bl	8002a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b004      	add	sp, #16
 8003558:	bd80      	pop	{r7, pc}

0800355a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b08a      	sub	sp, #40	; 0x28
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2284      	movs	r2, #132	; 0x84
 8003566:	589b      	ldr	r3, [r3, r2]
 8003568:	2b21      	cmp	r3, #33	; 0x21
 800356a:	d14c      	bne.n	8003606 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2256      	movs	r2, #86	; 0x56
 8003570:	5a9b      	ldrh	r3, [r3, r2]
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d132      	bne.n	80035de <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003578:	f3ef 8310 	mrs	r3, PRIMASK
 800357c:	60bb      	str	r3, [r7, #8]
  return(result);
 800357e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	2301      	movs	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f383 8810 	msr	PRIMASK, r3
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	438a      	bics	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f383 8810 	msr	PRIMASK, r3
}
 80035a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035aa:	f3ef 8310 	mrs	r3, PRIMASK
 80035ae:	617b      	str	r3, [r7, #20]
  return(result);
 80035b0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	2301      	movs	r3, #1
 80035b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f383 8810 	msr	PRIMASK, r3
}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2140      	movs	r1, #64	; 0x40
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f383 8810 	msr	PRIMASK, r3
}
 80035da:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80035dc:	e013      	b.n	8003606 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2256      	movs	r2, #86	; 0x56
 80035f8:	5a9b      	ldrh	r3, [r3, r2]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b299      	uxth	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2256      	movs	r2, #86	; 0x56
 8003604:	5299      	strh	r1, [r3, r2]
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b00a      	add	sp, #40	; 0x28
 800360c:	bd80      	pop	{r7, pc}

0800360e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b08c      	sub	sp, #48	; 0x30
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2284      	movs	r2, #132	; 0x84
 800361a:	589b      	ldr	r3, [r3, r2]
 800361c:	2b21      	cmp	r3, #33	; 0x21
 800361e:	d151      	bne.n	80036c4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2256      	movs	r2, #86	; 0x56
 8003624:	5a9b      	ldrh	r3, [r3, r2]
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d132      	bne.n	8003692 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362c:	f3ef 8310 	mrs	r3, PRIMASK
 8003630:	60fb      	str	r3, [r7, #12]
  return(result);
 8003632:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
 8003636:	2301      	movs	r3, #1
 8003638:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	438a      	bics	r2, r1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f383 8810 	msr	PRIMASK, r3
}
 800365c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365e:	f3ef 8310 	mrs	r3, PRIMASK
 8003662:	61bb      	str	r3, [r7, #24]
  return(result);
 8003664:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
 8003668:	2301      	movs	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f383 8810 	msr	PRIMASK, r3
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2140      	movs	r1, #64	; 0x40
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f383 8810 	msr	PRIMASK, r3
}
 800368e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003690:	e018      	b.n	80036c4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	001a      	movs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	05d2      	lsls	r2, r2, #23
 80036a4:	0dd2      	lsrs	r2, r2, #23
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2256      	movs	r2, #86	; 0x56
 80036b6:	5a9b      	ldrh	r3, [r3, r2]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b299      	uxth	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2256      	movs	r2, #86	; 0x56
 80036c2:	5299      	strh	r1, [r3, r2]
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b00c      	add	sp, #48	; 0x30
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	; 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2284      	movs	r2, #132	; 0x84
 80036d8:	589b      	ldr	r3, [r3, r2]
 80036da:	2b21      	cmp	r3, #33	; 0x21
 80036dc:	d165      	bne.n	80037aa <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80036de:	232e      	movs	r3, #46	; 0x2e
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	216a      	movs	r1, #106	; 0x6a
 80036e6:	5a52      	ldrh	r2, [r2, r1]
 80036e8:	801a      	strh	r2, [r3, #0]
 80036ea:	e059      	b.n	80037a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2256      	movs	r2, #86	; 0x56
 80036f0:	5a9b      	ldrh	r3, [r3, r2]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d133      	bne.n	8003760 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f8:	f3ef 8310 	mrs	r3, PRIMASK
 80036fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80036fe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
 8003702:	2301      	movs	r3, #1
 8003704:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f383 8810 	msr	PRIMASK, r3
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4926      	ldr	r1, [pc, #152]	; (80037b4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800371a:	400a      	ands	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f383 8810 	msr	PRIMASK, r3
}
 8003728:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372a:	f3ef 8310 	mrs	r3, PRIMASK
 800372e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003730:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
 8003734:	2301      	movs	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f383 8810 	msr	PRIMASK, r3
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2140      	movs	r1, #64	; 0x40
 800374c:	430a      	orrs	r2, r1
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	f383 8810 	msr	PRIMASK, r3
}
 800375a:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800375c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800375e:	e024      	b.n	80037aa <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	4013      	ands	r3, r2
 800376a:	d013      	beq.n	8003794 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2256      	movs	r2, #86	; 0x56
 8003786:	5a9b      	ldrh	r3, [r3, r2]
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b299      	uxth	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2256      	movs	r2, #86	; 0x56
 8003792:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003794:	212e      	movs	r1, #46	; 0x2e
 8003796:	187b      	adds	r3, r7, r1
 8003798:	881a      	ldrh	r2, [r3, #0]
 800379a:	187b      	adds	r3, r7, r1
 800379c:	3a01      	subs	r2, #1
 800379e:	801a      	strh	r2, [r3, #0]
 80037a0:	232e      	movs	r3, #46	; 0x2e
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1a0      	bne.n	80036ec <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b00c      	add	sp, #48	; 0x30
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	ff7fffff 	.word	0xff7fffff

080037b8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	; 0x30
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2284      	movs	r2, #132	; 0x84
 80037c4:	589b      	ldr	r3, [r3, r2]
 80037c6:	2b21      	cmp	r3, #33	; 0x21
 80037c8:	d16a      	bne.n	80038a0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80037ca:	232e      	movs	r3, #46	; 0x2e
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	216a      	movs	r1, #106	; 0x6a
 80037d2:	5a52      	ldrh	r2, [r2, r1]
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	e05e      	b.n	8003896 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2256      	movs	r2, #86	; 0x56
 80037dc:	5a9b      	ldrh	r3, [r3, r2]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d133      	bne.n	800384c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ea:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	2301      	movs	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4928      	ldr	r1, [pc, #160]	; (80038a8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003806:	400a      	ands	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003816:	f3ef 8310 	mrs	r3, PRIMASK
 800381a:	617b      	str	r3, [r7, #20]
  return(result);
 800381c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800381e:	623b      	str	r3, [r7, #32]
 8003820:	2301      	movs	r3, #1
 8003822:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2140      	movs	r1, #64	; 0x40
 8003838:	430a      	orrs	r2, r1
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f383 8810 	msr	PRIMASK, r3
}
 8003846:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003848:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800384a:	e029      	b.n	80038a0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	4013      	ands	r3, r2
 8003856:	d018      	beq.n	800388a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	001a      	movs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	05d2      	lsls	r2, r2, #23
 800386a:	0dd2      	lsrs	r2, r2, #23
 800386c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2256      	movs	r2, #86	; 0x56
 800387c:	5a9b      	ldrh	r3, [r3, r2]
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b299      	uxth	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2256      	movs	r2, #86	; 0x56
 8003888:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800388a:	212e      	movs	r1, #46	; 0x2e
 800388c:	187b      	adds	r3, r7, r1
 800388e:	881a      	ldrh	r2, [r3, #0]
 8003890:	187b      	adds	r3, r7, r1
 8003892:	3a01      	subs	r2, #1
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	232e      	movs	r3, #46	; 0x2e
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d19b      	bne.n	80037d8 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b00c      	add	sp, #48	; 0x30
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	ff7fffff 	.word	0xff7fffff

080038ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b4:	f3ef 8310 	mrs	r3, PRIMASK
 80038b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80038ba:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	2301      	movs	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f383 8810 	msr	PRIMASK, r3
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2140      	movs	r1, #64	; 0x40
 80038d6:	438a      	bics	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2284      	movs	r2, #132	; 0x84
 80038ea:	2120      	movs	r1, #32
 80038ec:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fc fe90 	bl	800061c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b006      	add	sp, #24
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	5c9b      	ldrb	r3, [r3, r2]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_UARTEx_DisableFifoMode+0x16>
 8003946:	2302      	movs	r3, #2
 8003948:	e027      	b.n	800399a <HAL_UARTEx_DisableFifoMode+0x66>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2284      	movs	r2, #132	; 0x84
 8003956:	2124      	movs	r1, #36	; 0x24
 8003958:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	438a      	bics	r2, r1
 8003970:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003976:	4013      	ands	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2284      	movs	r2, #132	; 0x84
 800398c:	2120      	movs	r1, #32
 800398e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b004      	add	sp, #16
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	dfffffff 	.word	0xdfffffff

080039a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	5c9b      	ldrb	r3, [r3, r2]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039bc:	2302      	movs	r3, #2
 80039be:	e02e      	b.n	8003a1e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	2101      	movs	r1, #1
 80039c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2284      	movs	r2, #132	; 0x84
 80039cc:	2124      	movs	r1, #36	; 0x24
 80039ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	438a      	bics	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	08d9      	lsrs	r1, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	0018      	movs	r0, r3
 8003a00:	f000 f854 	bl	8003aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2284      	movs	r2, #132	; 0x84
 8003a10:	2120      	movs	r1, #32
 8003a12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	2100      	movs	r1, #0
 8003a1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	5c9b      	ldrb	r3, [r3, r2]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e02f      	b.n	8003aa0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2280      	movs	r2, #128	; 0x80
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2284      	movs	r2, #132	; 0x84
 8003a4c:	2124      	movs	r1, #36	; 0x24
 8003a4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2101      	movs	r1, #1
 8003a64:	438a      	bics	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 f813 	bl	8003aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2284      	movs	r2, #132	; 0x84
 8003a92:	2120      	movs	r1, #32
 8003a94:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b004      	add	sp, #16
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	f1ffffff 	.word	0xf1ffffff

08003aac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	226a      	movs	r2, #106	; 0x6a
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2268      	movs	r2, #104	; 0x68
 8003ac8:	2101      	movs	r1, #1
 8003aca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003acc:	e043      	b.n	8003b56 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ace:	260f      	movs	r6, #15
 8003ad0:	19bb      	adds	r3, r7, r6
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ad6:	200e      	movs	r0, #14
 8003ad8:	183b      	adds	r3, r7, r0
 8003ada:	2208      	movs	r2, #8
 8003adc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	0e5b      	lsrs	r3, r3, #25
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	240d      	movs	r4, #13
 8003aea:	193b      	adds	r3, r7, r4
 8003aec:	2107      	movs	r1, #7
 8003aee:	400a      	ands	r2, r1
 8003af0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	0f5b      	lsrs	r3, r3, #29
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	250c      	movs	r5, #12
 8003afe:	197b      	adds	r3, r7, r5
 8003b00:	2107      	movs	r1, #7
 8003b02:	400a      	ands	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	197a      	adds	r2, r7, r5
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	4914      	ldr	r1, [pc, #80]	; (8003b60 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b10:	5c8a      	ldrb	r2, [r1, r2]
 8003b12:	435a      	muls	r2, r3
 8003b14:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b16:	197b      	adds	r3, r7, r5
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b1e:	0019      	movs	r1, r3
 8003b20:	f7fc fb7a 	bl	8000218 <__divsi3>
 8003b24:	0003      	movs	r3, r0
 8003b26:	b299      	uxth	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	226a      	movs	r2, #106	; 0x6a
 8003b2c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b2e:	19bb      	adds	r3, r7, r6
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	193a      	adds	r2, r7, r4
 8003b34:	7812      	ldrb	r2, [r2, #0]
 8003b36:	490a      	ldr	r1, [pc, #40]	; (8003b60 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b38:	5c8a      	ldrb	r2, [r1, r2]
 8003b3a:	435a      	muls	r2, r3
 8003b3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b46:	0019      	movs	r1, r3
 8003b48:	f7fc fb66 	bl	8000218 <__divsi3>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	b299      	uxth	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2268      	movs	r2, #104	; 0x68
 8003b54:	5299      	strh	r1, [r3, r2]
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b005      	add	sp, #20
 8003b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	08003c50 	.word	0x08003c50
 8003b64:	08003c58 	.word	0x08003c58

08003b68 <__libc_init_array>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	4d0c      	ldr	r5, [pc, #48]	; (8003ba0 <__libc_init_array+0x38>)
 8003b6e:	4c0d      	ldr	r4, [pc, #52]	; (8003ba4 <__libc_init_array+0x3c>)
 8003b70:	1b64      	subs	r4, r4, r5
 8003b72:	10a4      	asrs	r4, r4, #2
 8003b74:	42a6      	cmp	r6, r4
 8003b76:	d109      	bne.n	8003b8c <__libc_init_array+0x24>
 8003b78:	2600      	movs	r6, #0
 8003b7a:	f000 f821 	bl	8003bc0 <_init>
 8003b7e:	4d0a      	ldr	r5, [pc, #40]	; (8003ba8 <__libc_init_array+0x40>)
 8003b80:	4c0a      	ldr	r4, [pc, #40]	; (8003bac <__libc_init_array+0x44>)
 8003b82:	1b64      	subs	r4, r4, r5
 8003b84:	10a4      	asrs	r4, r4, #2
 8003b86:	42a6      	cmp	r6, r4
 8003b88:	d105      	bne.n	8003b96 <__libc_init_array+0x2e>
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	00b3      	lsls	r3, r6, #2
 8003b8e:	58eb      	ldr	r3, [r5, r3]
 8003b90:	4798      	blx	r3
 8003b92:	3601      	adds	r6, #1
 8003b94:	e7ee      	b.n	8003b74 <__libc_init_array+0xc>
 8003b96:	00b3      	lsls	r3, r6, #2
 8003b98:	58eb      	ldr	r3, [r5, r3]
 8003b9a:	4798      	blx	r3
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	e7f2      	b.n	8003b86 <__libc_init_array+0x1e>
 8003ba0:	08003c68 	.word	0x08003c68
 8003ba4:	08003c68 	.word	0x08003c68
 8003ba8:	08003c68 	.word	0x08003c68
 8003bac:	08003c6c 	.word	0x08003c6c

08003bb0 <memset>:
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	1882      	adds	r2, r0, r2
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d100      	bne.n	8003bba <memset+0xa>
 8003bb8:	4770      	bx	lr
 8003bba:	7019      	strb	r1, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	e7f9      	b.n	8003bb4 <memset+0x4>

08003bc0 <_init>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc6:	bc08      	pop	{r3}
 8003bc8:	469e      	mov	lr, r3
 8003bca:	4770      	bx	lr

08003bcc <_fini>:
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd2:	bc08      	pop	{r3}
 8003bd4:	469e      	mov	lr, r3
 8003bd6:	4770      	bx	lr
