
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f60  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a4  080040a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ac  080040ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002910  20000010  080040c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002920  080040c4  00022920  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c85b  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d11  00000000  00000000  0002c893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b408  00000000  00000000  0002f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bde7  00000000  00000000  0004aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b04fb  00000000  00000000  0005698f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106e8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002054  00000000  00000000  00106edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004004 	.word	0x08004004

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004004 	.word	0x08004004

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_TxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
/*UART interrupt Callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	dataSent = 1;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_UART_TxCpltCallback+0x18>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	20000000 	.word	0x20000000

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fa71 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f83b 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f903 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 800064a:	f000 f8e3 	bl	8000814 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800064e:	f000 f893 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	/*given values to the matrix*/
	for (uint32_t i = 0; i < 10240Ul; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e009      	b.n	800066c <main+0x34>
		data[i] = i & (0xff);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	b2d9      	uxtb	r1, r3
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <main+0x74>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	1c0a      	adds	r2, r1, #0
 8000664:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 10240Ul; i++) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	23a0      	movs	r3, #160	; 0xa0
 8000670:	019b      	lsls	r3, r3, #6
 8000672:	429a      	cmp	r2, r3
 8000674:	d3f0      	bcc.n	8000658 <main+0x20>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/*check if sending of data finished to resends again*/
		if (dataSent == 1) {
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <main+0x78>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d109      	bne.n	8000692 <main+0x5a>
			/*Transmit data Via UART2 using DMA[Normal] mode*/
			HAL_UART_Transmit_DMA(&huart2, data, sizeof(data));
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	019a      	lsls	r2, r3, #6
 8000682:	490a      	ldr	r1, [pc, #40]	; (80006ac <main+0x74>)
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <main+0x7c>)
 8000686:	0018      	movs	r0, r3
 8000688:	f002 f8de 	bl	8002848 <HAL_UART_Transmit_DMA>
			dataSent = 0;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <main+0x78>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		}
		/*Toggle PC13 LED on board*/
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	019b      	lsls	r3, r3, #6
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <main+0x80>)
 8000698:	0019      	movs	r1, r3
 800069a:	0010      	movs	r0, r2
 800069c:	f001 f8d1 	bl	8001842 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80006a0:	23fa      	movs	r3, #250	; 0xfa
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fac3 	bl	8000c30 <HAL_Delay>
		if (dataSent == 1) {
 80006aa:	e7e4      	b.n	8000676 <main+0x3e>
 80006ac:	2000011c 	.word	0x2000011c
 80006b0:	20000000 	.word	0x20000000
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	50000800 	.word	0x50000800

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b095      	sub	sp, #84	; 0x54
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	2414      	movs	r4, #20
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	233c      	movs	r3, #60	; 0x3c
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f003 fc91 	bl	8003ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	0018      	movs	r0, r3
 80006d6:	2310      	movs	r3, #16
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f003 fc8a 	bl	8003ff4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 f8c7 	bl	8001878 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2202      	movs	r2, #2
 80006ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	0052      	lsls	r2, r2, #1
 80006f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f8:	0021      	movs	r1, r4
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2240      	movs	r2, #64	; 0x40
 8000704:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2202      	movs	r2, #2
 800070a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2202      	movs	r2, #2
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2209      	movs	r2, #9
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	0292      	lsls	r2, r2, #10
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0492      	lsls	r2, r2, #18
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	05d2      	lsls	r2, r2, #23
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	187b      	adds	r3, r7, r1
 8000738:	0018      	movs	r0, r3
 800073a:	f001 f8e9 	bl	8001910 <HAL_RCC_OscConfig>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000742:	f000 f8cb 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2202      	movs	r2, #2
 8000750:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2101      	movs	r1, #1
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fc34 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800076c:	f000 f8b6 	bl	80008dc <Error_Handler>
  }
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b015      	add	sp, #84	; 0x54
 8000776:	bd90      	pop	{r4, r7, pc}

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_USART2_UART_Init+0x94>)
 800077e:	4a24      	ldr	r2, [pc, #144]	; (8000810 <MX_USART2_UART_Init+0x98>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_USART2_UART_Init+0x94>)
 8000784:	22e1      	movs	r2, #225	; 0xe1
 8000786:	0252      	lsls	r2, r2, #9
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_USART2_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_USART2_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_USART2_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_USART2_UART_Init+0x94>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 ffea 	bl	800279c <HAL_UART_Init>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007cc:	f000 f886 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	0018      	movs	r0, r3
 80007d6:	f003 fb09 	bl	8003dec <HAL_UARTEx_SetTxFifoThreshold>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007de:	f000 f87d 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	0018      	movs	r0, r3
 80007e8:	f003 fb40 	bl	8003e6c <HAL_UARTEx_SetRxFifoThreshold>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007f0:	f000 f874 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f003 fabe 	bl	8003d78 <HAL_UARTEx_DisableFifoMode>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000800:	f000 f86c 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	2000002c 	.word	0x2000002c
 8000810:	40004400 	.word	0x40004400

08000814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_DMA_Init+0x38>)
 800081c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_DMA_Init+0x38>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	639a      	str	r2, [r3, #56]	; 0x38
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_DMA_Init+0x38>)
 8000828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	2009      	movs	r0, #9
 8000838:	f000 fae0 	bl	8000dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800083c:	2009      	movs	r0, #9
 800083e:	f000 faf2 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	40021000 	.word	0x40021000

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	240c      	movs	r4, #12
 8000858:	193b      	adds	r3, r7, r4
 800085a:	0018      	movs	r0, r3
 800085c:	2314      	movs	r3, #20
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f003 fbc7 	bl	8003ff4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_GPIO_Init+0x84>)
 800086c:	2104      	movs	r1, #4
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000876:	2204      	movs	r2, #4
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_GPIO_Init+0x84>)
 800088c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	019b      	lsls	r3, r3, #6
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <MX_GPIO_Init+0x88>)
 800089c:	2200      	movs	r2, #0
 800089e:	0019      	movs	r1, r3
 80008a0:	f000 ffb2 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	0192      	lsls	r2, r2, #6
 80008aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2201      	movs	r2, #1
 80008b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <MX_GPIO_Init+0x88>)
 80008c2:	0019      	movs	r1, r3
 80008c4:	0010      	movs	r0, r2
 80008c6:	f000 fe33 	bl	8001530 <HAL_GPIO_Init>

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b009      	add	sp, #36	; 0x24
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40021000 	.word	0x40021000
 80008d8:	50000800 	.word	0x50000800

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_MspInit+0x4c>)
 80008f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_MspInit+0x4c>)
 80008f4:	2101      	movs	r1, #1
 80008f6:	430a      	orrs	r2, r1
 80008f8:	641a      	str	r2, [r3, #64]	; 0x40
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	2201      	movs	r2, #1
 8000900:	4013      	ands	r3, r2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_MspInit+0x4c>)
 8000908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_MspInit+0x4c>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	0549      	lsls	r1, r1, #21
 8000910:	430a      	orrs	r2, r1
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <HAL_MspInit+0x4c>)
 8000916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	055b      	lsls	r3, r3, #21
 800091c:	4013      	ands	r3, r2
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000922:	23c0      	movs	r3, #192	; 0xc0
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	0018      	movs	r0, r3
 8000928:	f000 f9a6 	bl	8000c78 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b002      	add	sp, #8
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b09d      	sub	sp, #116	; 0x74
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	235c      	movs	r3, #92	; 0x5c
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	0018      	movs	r0, r3
 8000946:	2314      	movs	r3, #20
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f003 fb52 	bl	8003ff4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000950:	2410      	movs	r4, #16
 8000952:	193b      	adds	r3, r7, r4
 8000954:	0018      	movs	r0, r3
 8000956:	234c      	movs	r3, #76	; 0x4c
 8000958:	001a      	movs	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	f003 fb4a 	bl	8003ff4 <memset>
  if(huart->Instance==USART2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a3b      	ldr	r2, [pc, #236]	; (8000a54 <HAL_UART_MspInit+0x11c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d16f      	bne.n	8000a4a <HAL_UART_MspInit+0x112>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2202      	movs	r2, #2
 800096e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000976:	193b      	adds	r3, r7, r4
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fcd3 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000982:	f7ff ffab 	bl	80008dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <HAL_UART_MspInit+0x120>)
 8000988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098a:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <HAL_UART_MspInit+0x120>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0289      	lsls	r1, r1, #10
 8000990:	430a      	orrs	r2, r1
 8000992:	63da      	str	r2, [r3, #60]	; 0x3c
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <HAL_UART_MspInit+0x120>)
 8000996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	029b      	lsls	r3, r3, #10
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <HAL_UART_MspInit+0x120>)
 80009a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <HAL_UART_MspInit+0x120>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <HAL_UART_MspInit+0x120>)
 80009b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ba:	215c      	movs	r1, #92	; 0x5c
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2202      	movs	r2, #2
 80009c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2201      	movs	r2, #1
 80009d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	187a      	adds	r2, r7, r1
 80009dc:	23a0      	movs	r3, #160	; 0xa0
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fda4 	bl	8001530 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_UART_MspInit+0x124>)
 80009ea:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <HAL_UART_MspInit+0x128>)
 80009ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_UART_MspInit+0x124>)
 80009f0:	2235      	movs	r2, #53	; 0x35
 80009f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_UART_MspInit+0x124>)
 80009f6:	2210      	movs	r2, #16
 80009f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x124>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_UART_MspInit+0x124>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_UART_MspInit+0x124>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_UART_MspInit+0x124>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_UART_MspInit+0x124>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0x124>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_UART_MspInit+0x124>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fa1d 	bl	8000e60 <HAL_DMA_Init>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000a2a:	f7ff ff57 	bl	80008dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_UART_MspInit+0x124>)
 8000a32:	679a      	str	r2, [r3, #120]	; 0x78
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_UART_MspInit+0x124>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	201c      	movs	r0, #28
 8000a40:	f000 f9dc 	bl	8000dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000a44:	201c      	movs	r0, #28
 8000a46:	f000 f9ee 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b01d      	add	sp, #116	; 0x74
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	200000bc 	.word	0x200000bc
 8000a60:	40020008 	.word	0x40020008

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8b6 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <DMA1_Channel1_IRQHandler+0x14>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fbda 	bl	8001254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	200000bc 	.word	0x200000bc

08000aac <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <USART2_LPUART2_IRQHandler+0x14>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 ff6e 	bl	8002994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	2000002c 	.word	0x2000002c

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad4:	f7ff fff6 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	; (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	; (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000afe:	f003 fa55 	bl	8003fac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b02:	f7ff fd99 	bl	8000638 <main>

08000b06 <LoopForever>:

LoopForever:
  b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   r0, =_estack
 8000b08:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b14:	080040b4 	.word	0x080040b4
  ldr r2, =_sbss
 8000b18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b1c:	20002920 	.word	0x20002920

08000b20 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_COMP_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_Init+0x3c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_Init+0x3c>)
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	0049      	lsls	r1, r1, #1
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f000 f810 	bl	8000b64 <HAL_InitTick>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e001      	b.n	8000b54 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff feca 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_InitTick+0x88>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d02b      	beq.n	8000bd4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_InitTick+0x8c>)
 8000b7e:	681c      	ldr	r4, [r3, #0]
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_InitTick+0x88>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	0019      	movs	r1, r3
 8000b86:	23fa      	movs	r3, #250	; 0xfa
 8000b88:	0098      	lsls	r0, r3, #2
 8000b8a:	f7ff fabb 	bl	8000104 <__udivsi3>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	0019      	movs	r1, r3
 8000b92:	0020      	movs	r0, r4
 8000b94:	f7ff fab6 	bl	8000104 <__udivsi3>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f953 	bl	8000e46 <HAL_SYSTICK_Config>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d112      	bne.n	8000bca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d80a      	bhi.n	8000bc0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2301      	movs	r3, #1
 8000bae:	425b      	negs	r3, r3
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 f922 	bl	8000dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_InitTick+0x90>)
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e00d      	b.n	8000bdc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e008      	b.n	8000bdc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bca:	230f      	movs	r3, #15
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e003      	b.n	8000bdc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b005      	add	sp, #20
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	2000000c 	.word	0x2000000c
 8000bf0:	20000004 	.word	0x20000004
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	18d2      	adds	r2, r2, r3
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	2000291c 	.word	0x2000291c

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	2000291c 	.word	0x2000291c

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff fff0 	bl	8000c1c <HAL_GetTick>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3301      	adds	r3, #1
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	001a      	movs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	189b      	adds	r3, r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	f7ff ffe0 	bl	8000c1c <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	2000000c 	.word	0x2000000c

08000c78 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	0019      	movs	r1, r3
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	fffff9ff 	.word	0xfffff9ff

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb6:	d809      	bhi.n	8000ccc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	231f      	movs	r3, #31
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_EnableIRQ+0x30>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	000a      	movs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b7f      	cmp	r3, #127	; 0x7f
 8000cec:	d828      	bhi.n	8000d40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cee:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <__NVIC_SetPriority+0xd4>)
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	33c0      	adds	r3, #192	; 0xc0
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	589b      	ldr	r3, [r3, r2]
 8000cfe:	1dfa      	adds	r2, r7, #7
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	0011      	movs	r1, r2
 8000d04:	2203      	movs	r2, #3
 8000d06:	400a      	ands	r2, r1
 8000d08:	00d2      	lsls	r2, r2, #3
 8000d0a:	21ff      	movs	r1, #255	; 0xff
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	000a      	movs	r2, r1
 8000d10:	43d2      	mvns	r2, r2
 8000d12:	401a      	ands	r2, r3
 8000d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	22ff      	movs	r2, #255	; 0xff
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0018      	movs	r0, r3
 8000d24:	2303      	movs	r3, #3
 8000d26:	4003      	ands	r3, r0
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2c:	481f      	ldr	r0, [pc, #124]	; (8000dac <__NVIC_SetPriority+0xd4>)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	430a      	orrs	r2, r1
 8000d38:	33c0      	adds	r3, #192	; 0xc0
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d3e:	e031      	b.n	8000da4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0019      	movs	r1, r3
 8000d48:	230f      	movs	r3, #15
 8000d4a:	400b      	ands	r3, r1
 8000d4c:	3b08      	subs	r3, #8
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3306      	adds	r3, #6
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	18d3      	adds	r3, r2, r3
 8000d56:	3304      	adds	r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	0011      	movs	r1, r2
 8000d60:	2203      	movs	r2, #3
 8000d62:	400a      	ands	r2, r1
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	21ff      	movs	r1, #255	; 0xff
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	401a      	ands	r2, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	4003      	ands	r3, r0
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	001c      	movs	r4, r3
 8000d90:	230f      	movs	r3, #15
 8000d92:	4023      	ands	r3, r4
 8000d94:	3b08      	subs	r3, #8
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	3306      	adds	r3, #6
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	18c3      	adds	r3, r0, r3
 8000da0:	3304      	adds	r3, #4
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b003      	add	sp, #12
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	045b      	lsls	r3, r3, #17
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d301      	bcc.n	8000dcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e010      	b.n	8000dee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <SysTick_Config+0x44>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	2103      	movs	r1, #3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff ff7c 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x44>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x44>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	210f      	movs	r1, #15
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	1c02      	adds	r2, r0, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff33 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff ffaf 	bl	8000db4 <SysTick_Config>
 8000e56:	0003      	movs	r3, r0
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e091      	b.n	8000f96 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	001a      	movs	r2, r3
 8000e78:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <HAL_DMA_Init+0x140>)
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d810      	bhi.n	8000ea0 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <HAL_DMA_Init+0x144>)
 8000e84:	4694      	mov	ip, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	2114      	movs	r1, #20
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff f93a 	bl	8000104 <__udivsi3>
 8000e90:	0003      	movs	r3, r0
 8000e92:	009a      	lsls	r2, r3, #2
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a43      	ldr	r2, [pc, #268]	; (8000fa8 <HAL_DMA_Init+0x148>)
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e9e:	e00f      	b.n	8000ec0 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a41      	ldr	r2, [pc, #260]	; (8000fac <HAL_DMA_Init+0x14c>)
 8000ea6:	4694      	mov	ip, r2
 8000ea8:	4463      	add	r3, ip
 8000eaa:	2114      	movs	r1, #20
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff f929 	bl	8000104 <__udivsi3>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	009a      	lsls	r2, r3, #2
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a3c      	ldr	r2, [pc, #240]	; (8000fb0 <HAL_DMA_Init+0x150>)
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2225      	movs	r2, #37	; 0x25
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4938      	ldr	r1, [pc, #224]	; (8000fb4 <HAL_DMA_Init+0x154>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6819      	ldr	r1, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 fa9f 	bl	8001454 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	01db      	lsls	r3, r3, #7
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d102      	bne.n	8000f28 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f30:	217f      	movs	r1, #127	; 0x7f
 8000f32:	400a      	ands	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d011      	beq.n	8000f6c <HAL_DMA_Init+0x10c>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d80d      	bhi.n	8000f6c <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 fac8 	bl	80014e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	e008      	b.n	8000f7e <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2225      	movs	r2, #37	; 0x25
 8000f88:	2101      	movs	r1, #1
 8000f8a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2224      	movs	r2, #36	; 0x24
 8000f90:	2100      	movs	r1, #0
 8000f92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40020407 	.word	0x40020407
 8000fa4:	bffdfff8 	.word	0xbffdfff8
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	bffdfbf8 	.word	0xbffdfbf8
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	ffff800f 	.word	0xffff800f

08000fb8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc6:	2317      	movs	r3, #23
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2224      	movs	r2, #36	; 0x24
 8000fd2:	5c9b      	ldrb	r3, [r3, r2]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_DMA_Start_IT+0x24>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e06f      	b.n	80010bc <HAL_DMA_Start_IT+0x104>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2224      	movs	r2, #36	; 0x24
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2225      	movs	r2, #37	; 0x25
 8000fe8:	5c9b      	ldrb	r3, [r3, r2]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d157      	bne.n	80010a0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2225      	movs	r2, #37	; 0x25
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	438a      	bics	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f000 f9e1 	bl	80013dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	2b00      	cmp	r3, #0
 8001020:	d008      	beq.n	8001034 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	210e      	movs	r1, #14
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e00f      	b.n	8001054 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2104      	movs	r1, #4
 8001040:	438a      	bics	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	210a      	movs	r1, #10
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	025b      	lsls	r3, r3, #9
 800105e:	4013      	ands	r3, r2
 8001060:	d008      	beq.n	8001074 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	0049      	lsls	r1, r1, #1
 8001070:	430a      	orrs	r2, r1
 8001072:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	0049      	lsls	r1, r1, #1
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e00a      	b.n	80010b6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2224      	movs	r2, #36	; 0x24
 80010aa:	2100      	movs	r1, #0
 80010ac:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80010ae:	2317      	movs	r3, #23
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80010b6:	2317      	movs	r3, #23
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	781b      	ldrb	r3, [r3, #0]
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b006      	add	sp, #24
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e04f      	b.n	8001176 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2225      	movs	r2, #37	; 0x25
 80010da:	5c9b      	ldrb	r3, [r3, r2]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d008      	beq.n	80010f4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2204      	movs	r2, #4
 80010e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2224      	movs	r2, #36	; 0x24
 80010ec:	2100      	movs	r1, #0
 80010ee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e040      	b.n	8001176 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	210e      	movs	r1, #14
 8001100:	438a      	bics	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110e:	491c      	ldr	r1, [pc, #112]	; (8001180 <HAL_DMA_Abort+0xbc>)
 8001110:	400a      	ands	r2, r1
 8001112:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2101      	movs	r1, #1
 8001120:	438a      	bics	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	221c      	movs	r2, #28
 800112a:	401a      	ands	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	2101      	movs	r1, #1
 8001132:	4091      	lsls	r1, r2
 8001134:	000a      	movs	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001140:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00c      	beq.n	8001164 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001154:	490a      	ldr	r1, [pc, #40]	; (8001180 <HAL_DMA_Abort+0xbc>)
 8001156:	400a      	ands	r2, r1
 8001158:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001162:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2225      	movs	r2, #37	; 0x25
 8001168:	2101      	movs	r1, #1
 800116a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2224      	movs	r2, #36	; 0x24
 8001170:	2100      	movs	r1, #0
 8001172:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	fffffeff 	.word	0xfffffeff

08001184 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118c:	210f      	movs	r1, #15
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2225      	movs	r2, #37	; 0x25
 8001198:	5c9b      	ldrb	r3, [r3, r2]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d006      	beq.n	80011ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2204      	movs	r2, #4
 80011a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e048      	b.n	8001240 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	210e      	movs	r1, #14
 80011ba:	438a      	bics	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2101      	movs	r1, #1
 80011ca:	438a      	bics	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d8:	491d      	ldr	r1, [pc, #116]	; (8001250 <HAL_DMA_Abort_IT+0xcc>)
 80011da:	400a      	ands	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	221c      	movs	r2, #28
 80011e4:	401a      	ands	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2101      	movs	r1, #1
 80011ec:	4091      	lsls	r1, r2
 80011ee:	000a      	movs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00c      	beq.n	800121e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120e:	4910      	ldr	r1, [pc, #64]	; (8001250 <HAL_DMA_Abort_IT+0xcc>)
 8001210:	400a      	ands	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800121c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2225      	movs	r2, #37	; 0x25
 8001222:	2101      	movs	r1, #1
 8001224:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2224      	movs	r2, #36	; 0x24
 800122a:	2100      	movs	r1, #0
 800122c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	0010      	movs	r0, r2
 800123e:	4798      	blx	r3
    }
  }
  return status;
 8001240:	230f      	movs	r3, #15
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	781b      	ldrb	r3, [r3, #0]
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b004      	add	sp, #16
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	fffffeff 	.word	0xfffffeff

08001254 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	221c      	movs	r2, #28
 8001272:	4013      	ands	r3, r2
 8001274:	2204      	movs	r2, #4
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4013      	ands	r3, r2
 800127e:	d026      	beq.n	80012ce <HAL_DMA_IRQHandler+0x7a>
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2204      	movs	r2, #4
 8001284:	4013      	ands	r3, r2
 8001286:	d022      	beq.n	80012ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2220      	movs	r2, #32
 8001290:	4013      	ands	r3, r2
 8001292:	d107      	bne.n	80012a4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2104      	movs	r1, #4
 80012a0:	438a      	bics	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	221c      	movs	r2, #28
 80012aa:	401a      	ands	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	2104      	movs	r1, #4
 80012b2:	4091      	lsls	r1, r2
 80012b4:	000a      	movs	r2, r1
 80012b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d100      	bne.n	80012c2 <HAL_DMA_IRQHandler+0x6e>
 80012c0:	e080      	b.n	80013c4 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	0010      	movs	r0, r2
 80012ca:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80012cc:	e07a      	b.n	80013c4 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	221c      	movs	r2, #28
 80012d4:	4013      	ands	r3, r2
 80012d6:	2202      	movs	r2, #2
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	d03c      	beq.n	800135c <HAL_DMA_IRQHandler+0x108>
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2202      	movs	r2, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d038      	beq.n	800135c <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2220      	movs	r2, #32
 80012f2:	4013      	ands	r3, r2
 80012f4:	d10b      	bne.n	800130e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	210a      	movs	r1, #10
 8001302:	438a      	bics	r2, r1
 8001304:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2225      	movs	r2, #37	; 0x25
 800130a:	2101      	movs	r1, #1
 800130c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	001a      	movs	r2, r3
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <HAL_DMA_IRQHandler+0x17c>)
 8001316:	429a      	cmp	r2, r3
 8001318:	d909      	bls.n	800132e <HAL_DMA_IRQHandler+0xda>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	221c      	movs	r2, #28
 8001320:	401a      	ands	r2, r3
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <HAL_DMA_IRQHandler+0x180>)
 8001324:	2102      	movs	r1, #2
 8001326:	4091      	lsls	r1, r2
 8001328:	000a      	movs	r2, r1
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	e008      	b.n	8001340 <HAL_DMA_IRQHandler+0xec>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	221c      	movs	r2, #28
 8001334:	401a      	ands	r2, r3
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <HAL_DMA_IRQHandler+0x184>)
 8001338:	2102      	movs	r1, #2
 800133a:	4091      	lsls	r1, r2
 800133c:	000a      	movs	r2, r1
 800133e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	2b00      	cmp	r3, #0
 800134e:	d039      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	0010      	movs	r0, r2
 8001358:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800135a:	e033      	b.n	80013c4 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	221c      	movs	r2, #28
 8001362:	4013      	ands	r3, r2
 8001364:	2208      	movs	r2, #8
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	d02a      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x172>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2208      	movs	r2, #8
 8001374:	4013      	ands	r3, r2
 8001376:	d026      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	210e      	movs	r1, #14
 8001384:	438a      	bics	r2, r1
 8001386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	221c      	movs	r2, #28
 800138e:	401a      	ands	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	2101      	movs	r1, #1
 8001396:	4091      	lsls	r1, r2
 8001398:	000a      	movs	r2, r1
 800139a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2225      	movs	r2, #37	; 0x25
 80013a6:	2101      	movs	r1, #1
 80013a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2224      	movs	r2, #36	; 0x24
 80013ae:	2100      	movs	r1, #0
 80013b0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	0010      	movs	r0, r2
 80013c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46c0      	nop			; (mov r8, r8)
}
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b004      	add	sp, #16
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	40020080 	.word	0x40020080
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020000 	.word	0x40020000

080013dc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001404:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	221c      	movs	r2, #28
 800140c:	401a      	ands	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	2101      	movs	r1, #1
 8001414:	4091      	lsls	r1, r2
 8001416:	000a      	movs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b10      	cmp	r3, #16
 8001428:	d108      	bne.n	800143c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800143a:	e007      	b.n	800144c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	60da      	str	r2, [r3, #12]
}
 800144c:	46c0      	nop			; (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b004      	add	sp, #16
 8001452:	bd80      	pop	{r7, pc}

08001454 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	001a      	movs	r2, r3
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001464:	429a      	cmp	r2, r3
 8001466:	d814      	bhi.n	8001492 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4a1a      	ldr	r2, [pc, #104]	; (80014dc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001472:	189a      	adds	r2, r3, r2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	001a      	movs	r2, r3
 800147e:	23ff      	movs	r3, #255	; 0xff
 8001480:	4013      	ands	r3, r2
 8001482:	3b08      	subs	r3, #8
 8001484:	2114      	movs	r1, #20
 8001486:	0018      	movs	r0, r3
 8001488:	f7fe fe3c 	bl	8000104 <__udivsi3>
 800148c:	0003      	movs	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	e014      	b.n	80014bc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800149c:	189a      	adds	r2, r3, r2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	001a      	movs	r2, r3
 80014a8:	23ff      	movs	r3, #255	; 0xff
 80014aa:	4013      	ands	r3, r2
 80014ac:	3b08      	subs	r3, #8
 80014ae:	2114      	movs	r1, #20
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7fe fe27 	bl	8000104 <__udivsi3>
 80014b6:	0003      	movs	r3, r0
 80014b8:	3307      	adds	r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80014c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	221f      	movs	r2, #31
 80014c6:	4013      	ands	r3, r2
 80014c8:	2201      	movs	r2, #1
 80014ca:	409a      	lsls	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b004      	add	sp, #16
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020407 	.word	0x40020407
 80014dc:	40020800 	.word	0x40020800
 80014e0:	4002081c 	.word	0x4002081c
 80014e4:	40020880 	.word	0x40020880

080014e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	227f      	movs	r2, #127	; 0x7f
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80014fe:	4694      	mov	ip, r2
 8001500:	4463      	add	r3, ip
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	001a      	movs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800150e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3b01      	subs	r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	4013      	ands	r3, r2
 8001518:	2201      	movs	r2, #1
 800151a:	409a      	lsls	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b004      	add	sp, #16
 8001526:	bd80      	pop	{r7, pc}
 8001528:	1000823f 	.word	0x1000823f
 800152c:	40020940 	.word	0x40020940

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	e14d      	b.n	80017dc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4091      	lsls	r1, r2
 800154a:	000a      	movs	r2, r1
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d100      	bne.n	8001558 <HAL_GPIO_Init+0x28>
 8001556:	e13e      	b.n	80017d6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	4013      	ands	r3, r2
 8001560:	2b01      	cmp	r3, #1
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_Init+0x40>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	4013      	ands	r3, r2
 800156c:	2b02      	cmp	r3, #2
 800156e:	d130      	bne.n	80015d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	409a      	lsls	r2, r3
 800157e:	0013      	movs	r3, r2
 8001580:	43da      	mvns	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	409a      	lsls	r2, r3
 8001592:	0013      	movs	r3, r2
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a6:	2201      	movs	r2, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	43da      	mvns	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	2201      	movs	r2, #1
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d017      	beq.n	800160e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	43da      	mvns	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	409a      	lsls	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2203      	movs	r2, #3
 8001614:	4013      	ands	r3, r2
 8001616:	2b02      	cmp	r3, #2
 8001618:	d123      	bne.n	8001662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	58d3      	ldr	r3, [r2, r3]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2207      	movs	r2, #7
 800162c:	4013      	ands	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	43da      	mvns	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2107      	movs	r1, #7
 8001646:	400b      	ands	r3, r1
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	6939      	ldr	r1, [r7, #16]
 8001660:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	43da      	mvns	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2203      	movs	r2, #3
 8001680:	401a      	ands	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	23c0      	movs	r3, #192	; 0xc0
 800169c:	029b      	lsls	r3, r3, #10
 800169e:	4013      	ands	r3, r2
 80016a0:	d100      	bne.n	80016a4 <HAL_GPIO_Init+0x174>
 80016a2:	e098      	b.n	80017d6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016a4:	4a53      	ldr	r2, [pc, #332]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3318      	adds	r3, #24
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	589b      	ldr	r3, [r3, r2]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2203      	movs	r2, #3
 80016b6:	4013      	ands	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	220f      	movs	r2, #15
 80016bc:	409a      	lsls	r2, r3
 80016be:	0013      	movs	r3, r2
 80016c0:	43da      	mvns	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	23a0      	movs	r3, #160	; 0xa0
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x1d6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a48      	ldr	r2, [pc, #288]	; (80017f8 <HAL_GPIO_Init+0x2c8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x1d2>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a47      	ldr	r2, [pc, #284]	; (80017fc <HAL_GPIO_Init+0x2cc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x1ce>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a46      	ldr	r2, [pc, #280]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x1ca>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a45      	ldr	r2, [pc, #276]	; (8001804 <HAL_GPIO_Init+0x2d4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x1c6>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e008      	b.n	8001708 <HAL_GPIO_Init+0x1d8>
 80016f6:	2305      	movs	r3, #5
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x1d8>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e004      	b.n	8001708 <HAL_GPIO_Init+0x1d8>
 80016fe:	2302      	movs	r3, #2
 8001700:	e002      	b.n	8001708 <HAL_GPIO_Init+0x1d8>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x1d8>
 8001706:	2300      	movs	r3, #0
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	2103      	movs	r1, #3
 800170c:	400a      	ands	r2, r1
 800170e:	00d2      	lsls	r2, r2, #3
 8001710:	4093      	lsls	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001718:	4936      	ldr	r1, [pc, #216]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3318      	adds	r3, #24
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43da      	mvns	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	035b      	lsls	r3, r3, #13
 800173e:	4013      	ands	r3, r2
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43da      	mvns	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	039b      	lsls	r3, r3, #14
 8001768:	4013      	ands	r3, r2
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 800177c:	2384      	movs	r3, #132	; 0x84
 800177e:	58d3      	ldr	r3, [r2, r3]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43da      	mvns	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a0:	4914      	ldr	r1, [pc, #80]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 80017a2:	2284      	movs	r2, #132	; 0x84
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	58d3      	ldr	r3, [r2, r3]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43da      	mvns	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4013      	ands	r3, r2
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ce:	4909      	ldr	r1, [pc, #36]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	40da      	lsrs	r2, r3
 80017e4:	1e13      	subs	r3, r2, #0
 80017e6:	d000      	beq.n	80017ea <HAL_GPIO_Init+0x2ba>
 80017e8:	e6aa      	b.n	8001540 <HAL_GPIO_Init+0x10>
  }
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b006      	add	sp, #24
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021800 	.word	0x40021800
 80017f8:	50000400 	.word	0x50000400
 80017fc:	50000800 	.word	0x50000800
 8001800:	50000c00 	.word	0x50000c00
 8001804:	50001000 	.word	0x50001000

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	0008      	movs	r0, r1
 8001812:	0011      	movs	r1, r2
 8001814:	1cbb      	adds	r3, r7, #2
 8001816:	1c02      	adds	r2, r0, #0
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	1c7b      	adds	r3, r7, #1
 800181c:	1c0a      	adds	r2, r1, #0
 800181e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001820:	1c7b      	adds	r3, r7, #1
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001828:	1cbb      	adds	r3, r7, #2
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001832:	1cbb      	adds	r3, r7, #2
 8001834:	881a      	ldrh	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	000a      	movs	r2, r1
 800184c:	1cbb      	adds	r3, r7, #2
 800184e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001856:	1cbb      	adds	r3, r7, #2
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	041a      	lsls	r2, r3, #16
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	1cb9      	adds	r1, r7, #2
 8001866:	8809      	ldrh	r1, [r1, #0]
 8001868:	400b      	ands	r3, r1
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b004      	add	sp, #16
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001886:	4013      	ands	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d11f      	bne.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	0013      	movs	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	189b      	adds	r3, r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4912      	ldr	r1, [pc, #72]	; (80018f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7fe fc2a 	bl	8000104 <__udivsi3>
 80018b0:	0003      	movs	r3, r0
 80018b2:	3301      	adds	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b6:	e008      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e001      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e009      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	401a      	ands	r2, r3
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	429a      	cmp	r2, r3
 80018da:	d0ed      	beq.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40007000 	.word	0x40007000
 80018ec:	fffff9ff 	.word	0xfffff9ff
 80018f0:	20000004 	.word	0x20000004
 80018f4:	000f4240 	.word	0x000f4240

080018f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <LL_RCC_GetAPB1Prescaler+0x14>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	23e0      	movs	r3, #224	; 0xe0
 8001902:	01db      	lsls	r3, r3, #7
 8001904:	4013      	ands	r3, r2
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f000 fb50 	bl	8001fc4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4013      	ands	r3, r2
 800192c:	d100      	bne.n	8001930 <HAL_RCC_OscConfig+0x20>
 800192e:	e07c      	b.n	8001a2a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001930:	4bc3      	ldr	r3, [pc, #780]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2238      	movs	r2, #56	; 0x38
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193a:	4bc1      	ldr	r3, [pc, #772]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2203      	movs	r2, #3
 8001940:	4013      	ands	r3, r2
 8001942:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b10      	cmp	r3, #16
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x40>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d002      	beq.n	8001956 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b08      	cmp	r3, #8
 8001954:	d10b      	bne.n	800196e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001956:	4bba      	ldr	r3, [pc, #744]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	029b      	lsls	r3, r3, #10
 800195e:	4013      	ands	r3, r2
 8001960:	d062      	beq.n	8001a28 <HAL_RCC_OscConfig+0x118>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d15e      	bne.n	8001a28 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e32a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	025b      	lsls	r3, r3, #9
 8001976:	429a      	cmp	r2, r3
 8001978:	d107      	bne.n	800198a <HAL_RCC_OscConfig+0x7a>
 800197a:	4bb1      	ldr	r3, [pc, #708]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4bb0      	ldr	r3, [pc, #704]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0249      	lsls	r1, r1, #9
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e020      	b.n	80019cc <HAL_RCC_OscConfig+0xbc>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	23a0      	movs	r3, #160	; 0xa0
 8001990:	02db      	lsls	r3, r3, #11
 8001992:	429a      	cmp	r2, r3
 8001994:	d10e      	bne.n	80019b4 <HAL_RCC_OscConfig+0xa4>
 8001996:	4baa      	ldr	r3, [pc, #680]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4ba9      	ldr	r3, [pc, #676]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	02c9      	lsls	r1, r1, #11
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4ba6      	ldr	r3, [pc, #664]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4ba5      	ldr	r3, [pc, #660]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0249      	lsls	r1, r1, #9
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0xbc>
 80019b4:	4ba2      	ldr	r3, [pc, #648]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4ba1      	ldr	r3, [pc, #644]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019ba:	49a2      	ldr	r1, [pc, #648]	; (8001c44 <HAL_RCC_OscConfig+0x334>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	4b9f      	ldr	r3, [pc, #636]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b9e      	ldr	r3, [pc, #632]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019c6:	49a0      	ldr	r1, [pc, #640]	; (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d014      	beq.n	80019fe <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f922 	bl	8000c1c <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019de:	f7ff f91d 	bl	8000c1c <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e2e9      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f0:	4b93      	ldr	r3, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	029b      	lsls	r3, r3, #10
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0xce>
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff f90d 	bl	8000c1c <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff f908 	bl	8000c1c <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e2d4      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1a:	4b89      	ldr	r3, [pc, #548]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0xf8>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x126>
 8001a34:	e099      	b.n	8001b6a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2238      	movs	r2, #56	; 0x38
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a40:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2203      	movs	r2, #3
 8001a46:	4013      	ands	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0x146>
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d135      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5c:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4013      	ands	r3, r2
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x164>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e2a7      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a74      	ldr	r2, [pc, #464]	; (8001c4c <HAL_RCC_OscConfig+0x33c>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	021a      	lsls	r2, r3, #8
 8001a84:	4b6e      	ldr	r3, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d112      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a90:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x340>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001aa4:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0adb      	lsrs	r3, r3, #11
 8001aaa:	2207      	movs	r2, #7
 8001aac:	4013      	ands	r3, r2
 8001aae:	4a69      	ldr	r2, [pc, #420]	; (8001c54 <HAL_RCC_OscConfig+0x344>)
 8001ab0:	40da      	lsrs	r2, r3
 8001ab2:	4b69      	ldr	r3, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x348>)
 8001ab4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab6:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <HAL_RCC_OscConfig+0x34c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7ff f852 	bl	8000b64 <HAL_InitTick>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d051      	beq.n	8001b68 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e27d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d030      	beq.n	8001b32 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x340>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0049      	lsls	r1, r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff f893 	bl	8000c1c <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff f88e 	bl	8000c1c <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e25a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4013      	ands	r3, r2
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_RCC_OscConfig+0x33c>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	4b45      	ldr	r3, [pc, #276]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	e01b      	b.n	8001b6a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b38:	4949      	ldr	r1, [pc, #292]	; (8001c60 <HAL_RCC_OscConfig+0x350>)
 8001b3a:	400a      	ands	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f86d 	bl	8000c1c <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff f868 	bl	8000c1c <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e234      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4013      	ands	r3, r2
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x238>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2208      	movs	r2, #8
 8001b70:	4013      	ands	r3, r2
 8001b72:	d047      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2238      	movs	r2, #56	; 0x38
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b18      	cmp	r3, #24
 8001b7e:	d10a      	bne.n	8001b96 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b80:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d03c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2f4>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d138      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e216      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f837 	bl	8000c1c <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff f832 	bl	8000c1c <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1fe      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d0f1      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2a4>
 8001bd0:	e018      	b.n	8001c04 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	438a      	bics	r2, r1
 8001bdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff f81d 	bl	8000c1c <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff f818 	bl	8000c1c <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1e4      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d1f1      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d100      	bne.n	8001c10 <HAL_RCC_OscConfig+0x300>
 8001c0e:	e0c7      	b.n	8001da0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c10:	231f      	movs	r3, #31
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2238      	movs	r2, #56	; 0x38
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d11f      	bne.n	8001c64 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_OscConfig+0x320>
 8001c2e:	e0b7      	b.n	8001da0 <HAL_RCC_OscConfig+0x490>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d000      	beq.n	8001c3a <HAL_RCC_OscConfig+0x32a>
 8001c38:	e0b2      	b.n	8001da0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c2      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	40021000 	.word	0x40021000
 8001c44:	fffeffff 	.word	0xfffeffff
 8001c48:	fffbffff 	.word	0xfffbffff
 8001c4c:	ffff80ff 	.word	0xffff80ff
 8001c50:	ffffc7ff 	.word	0xffffc7ff
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c64:	4bb5      	ldr	r3, [pc, #724]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	055b      	lsls	r3, r3, #21
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x364>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x366>
 8001c74:	2300      	movs	r3, #0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d011      	beq.n	8001c9e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4bb0      	ldr	r3, [pc, #704]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c7e:	4baf      	ldr	r3, [pc, #700]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	0549      	lsls	r1, r1, #21
 8001c84:	430a      	orrs	r2, r1
 8001c86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c88:	4bac      	ldr	r3, [pc, #688]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	055b      	lsls	r3, r3, #21
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c96:	231f      	movs	r3, #31
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	4ba8      	ldr	r3, [pc, #672]	; (8001f40 <HAL_RCC_OscConfig+0x630>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001caa:	4ba5      	ldr	r3, [pc, #660]	; (8001f40 <HAL_RCC_OscConfig+0x630>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4ba4      	ldr	r3, [pc, #656]	; (8001f40 <HAL_RCC_OscConfig+0x630>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	0049      	lsls	r1, r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001cb8:	f7fe ffb0 	bl	8000c1c <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7fe ffab 	bl	8000c1c <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e177      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd4:	4b9a      	ldr	r3, [pc, #616]	; (8001f40 <HAL_RCC_OscConfig+0x630>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e6>
 8001ce8:	4b94      	ldr	r3, [pc, #592]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cec:	4b93      	ldr	r3, [pc, #588]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cf4:	e01c      	b.n	8001d30 <HAL_RCC_OscConfig+0x420>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x408>
 8001cfe:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d02:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d04:	2104      	movs	r1, #4
 8001d06:	430a      	orrs	r2, r1
 8001d08:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d0a:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0e:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0x420>
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d1c:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d24:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d28:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d014      	beq.n	8001d62 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7fe ff70 	bl	8000c1c <HAL_GetTick>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7fe ff6b 	bl	8000c1c <HAL_GetTick>
 8001d46:	0002      	movs	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a7d      	ldr	r2, [pc, #500]	; (8001f44 <HAL_RCC_OscConfig+0x634>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e136      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d56:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x432>
 8001d60:	e013      	b.n	8001d8a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7fe ff5b 	bl	8000c1c <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d6a:	e009      	b.n	8001d80 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7fe ff56 	bl	8000c1c <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a73      	ldr	r2, [pc, #460]	; (8001f44 <HAL_RCC_OscConfig+0x634>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e121      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	4b6e      	ldr	r3, [pc, #440]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	2202      	movs	r2, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d8a:	231f      	movs	r3, #31
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d9a:	496b      	ldr	r1, [pc, #428]	; (8001f48 <HAL_RCC_OscConfig+0x638>)
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2220      	movs	r2, #32
 8001da6:	4013      	ands	r3, r2
 8001da8:	d039      	beq.n	8001e1e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01b      	beq.n	8001dea <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001db2:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	03c9      	lsls	r1, r1, #15
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7fe ff2c 	bl	8000c1c <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dca:	f7fe ff27 	bl	8000c1c <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0f3      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ddc:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	4013      	ands	r3, r2
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x4ba>
 8001de8:	e019      	b.n	8001e1e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dea:	4b54      	ldr	r3, [pc, #336]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001df0:	4956      	ldr	r1, [pc, #344]	; (8001f4c <HAL_RCC_OscConfig+0x63c>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7fe ff11 	bl	8000c1c <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e00:	f7fe ff0c 	bl	8000c1c <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0d8      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d100      	bne.n	8001e28 <HAL_RCC_OscConfig+0x518>
 8001e26:	e0cc      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2238      	movs	r2, #56	; 0x38
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d100      	bne.n	8001e36 <HAL_RCC_OscConfig+0x526>
 8001e34:	e07b      	b.n	8001f2e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d156      	bne.n	8001eec <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e44:	4942      	ldr	r1, [pc, #264]	; (8001f50 <HAL_RCC_OscConfig+0x640>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7fe fee7 	bl	8000c1c <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe fee2 	bl	8000c1c <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0ae      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	049b      	lsls	r3, r3, #18
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e72:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <HAL_RCC_OscConfig+0x644>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001eac:	2180      	movs	r1, #128	; 0x80
 8001eae:	0449      	lsls	r1, r1, #17
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0549      	lsls	r1, r1, #21
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7fe feab 	bl	8000c1c <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7fe fea6 	bl	8000c1c <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e072      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	049b      	lsls	r3, r3, #18
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x5bc>
 8001eea:	e06a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001ef2:	4917      	ldr	r1, [pc, #92]	; (8001f50 <HAL_RCC_OscConfig+0x640>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fe90 	bl	8000c1c <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7fe fe8b 	bl	8000c1c <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e057      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	049b      	lsls	r3, r3, #18
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001f26:	490c      	ldr	r1, [pc, #48]	; (8001f58 <HAL_RCC_OscConfig+0x648>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	e049      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e044      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	00001388 	.word	0x00001388
 8001f48:	efffffff 	.word	0xefffffff
 8001f4c:	ffbfffff 	.word	0xffbfffff
 8001f50:	feffffff 	.word	0xfeffffff
 8001f54:	11c1808c 	.word	0x11c1808c
 8001f58:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x6bc>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2203      	movs	r2, #3
 8001f66:	401a      	ands	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d126      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2270      	movs	r2, #112	; 0x70
 8001f74:	401a      	ands	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d11f      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	23fe      	movs	r3, #254	; 0xfe
 8001f82:	01db      	lsls	r3, r3, #7
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d116      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	23f8      	movs	r3, #248	; 0xf8
 8001f94:	039b      	lsls	r3, r3, #14
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d10e      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	23e0      	movs	r3, #224	; 0xe0
 8001fa4:	051b      	lsls	r3, r3, #20
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	0f5b      	lsrs	r3, r3, #29
 8001fb4:	075a      	lsls	r2, r3, #29
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b008      	add	sp, #32
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0e9      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2207      	movs	r2, #7
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d91e      	bls.n	8002030 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b73      	ldr	r3, [pc, #460]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002004:	f7fe fe0a 	bl	8000c1c <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800200c:	e009      	b.n	8002022 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200e:	f7fe fe05 	bl	8000c1c <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1f4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0ca      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2207      	movs	r2, #7
 8002028:	4013      	ands	r3, r2
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d1ee      	bne.n	800200e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d015      	beq.n	8002066 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2204      	movs	r2, #4
 8002040:	4013      	ands	r3, r2
 8002042:	d006      	beq.n	8002052 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002044:	4b60      	ldr	r3, [pc, #384]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4b5f      	ldr	r3, [pc, #380]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 800204a:	21e0      	movs	r1, #224	; 0xe0
 800204c:	01c9      	lsls	r1, r1, #7
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4a5d      	ldr	r2, [pc, #372]	; (80021cc <HAL_RCC_ClockConfig+0x1fc>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002062:	430a      	orrs	r2, r1
 8002064:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	4013      	ands	r3, r2
 800206e:	d057      	beq.n	8002120 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	4013      	ands	r3, r2
 8002082:	d12b      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e097      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002090:	4b4d      	ldr	r3, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	049b      	lsls	r3, r3, #18
 8002098:	4013      	ands	r3, r2
 800209a:	d11f      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e08b      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4013      	ands	r3, r2
 80020b2:	d113      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e07f      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d106      	bne.n	80020ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c0:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d108      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e074      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e06d      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020dc:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2207      	movs	r2, #7
 80020e2:	4393      	bics	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f0:	f7fe fd94 	bl	8000c1c <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f8:	e009      	b.n	800210e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7fe fd8f 	bl	8000c1c <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e054      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2238      	movs	r2, #56	; 0x38
 8002114:	401a      	ands	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	429a      	cmp	r2, r3
 800211e:	d1ec      	bne.n	80020fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2207      	movs	r2, #7
 8002126:	4013      	ands	r3, r2
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d21e      	bcs.n	800216c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2207      	movs	r2, #7
 8002134:	4393      	bics	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002140:	f7fe fd6c 	bl	8000c1c <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002148:	e009      	b.n	800215e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7fe fd67 	bl	8000c1c <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e02c      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2207      	movs	r2, #7
 8002164:	4013      	ands	r3, r2
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d1ee      	bne.n	800214a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2204      	movs	r2, #4
 8002172:	4013      	ands	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <HAL_RCC_ClockConfig+0x200>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800218a:	f000 f829 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800218e:	0001      	movs	r1, r0
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	220f      	movs	r2, #15
 8002198:	401a      	ands	r2, r3
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_RCC_ClockConfig+0x204>)
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	58d3      	ldr	r3, [r2, r3]
 80021a0:	221f      	movs	r2, #31
 80021a2:	4013      	ands	r3, r2
 80021a4:	000a      	movs	r2, r1
 80021a6:	40da      	lsrs	r2, r3
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x208>)
 80021aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_ClockConfig+0x20c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7fe fcd7 	bl	8000b64 <HAL_InitTick>
 80021b6:	0003      	movs	r3, r0
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40022000 	.word	0x40022000
 80021c4:	00001388 	.word	0x00001388
 80021c8:	40021000 	.word	0x40021000
 80021cc:	fffff0ff 	.word	0xfffff0ff
 80021d0:	ffff8fff 	.word	0xffff8fff
 80021d4:	0800401c 	.word	0x0800401c
 80021d8:	20000004 	.word	0x20000004
 80021dc:	20000008 	.word	0x20000008

080021e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e6:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	4013      	ands	r3, r2
 80021ee:	d10f      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0adb      	lsrs	r3, r3, #11
 80021f6:	2207      	movs	r2, #7
 80021f8:	4013      	ands	r3, r2
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	0013      	movs	r3, r2
 8002200:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	4835      	ldr	r0, [pc, #212]	; (80022dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002206:	f7fd ff7d 	bl	8000104 <__udivsi3>
 800220a:	0003      	movs	r3, r0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e05d      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2238      	movs	r2, #56	; 0x38
 8002216:	4013      	ands	r3, r2
 8002218:	2b08      	cmp	r3, #8
 800221a:	d102      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e054      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2238      	movs	r2, #56	; 0x38
 8002228:	4013      	ands	r3, r2
 800222a:	2b10      	cmp	r3, #16
 800222c:	d138      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2203      	movs	r2, #3
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	2207      	movs	r2, #7
 8002240:	4013      	ands	r3, r2
 8002242:	3301      	adds	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	4824      	ldr	r0, [pc, #144]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002250:	f7fd ff58 	bl	8000104 <__udivsi3>
 8002254:	0003      	movs	r3, r0
 8002256:	0019      	movs	r1, r3
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	227f      	movs	r2, #127	; 0x7f
 8002260:	4013      	ands	r3, r2
 8002262:	434b      	muls	r3, r1
 8002264:	617b      	str	r3, [r7, #20]
        break;
 8002266:	e00d      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	481c      	ldr	r0, [pc, #112]	; (80022dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800226c:	f7fd ff4a 	bl	8000104 <__udivsi3>
 8002270:	0003      	movs	r3, r0
 8002272:	0019      	movs	r1, r3
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	227f      	movs	r2, #127	; 0x7f
 800227c:	4013      	ands	r3, r2
 800227e:	434b      	muls	r3, r1
 8002280:	617b      	str	r3, [r7, #20]
        break;
 8002282:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0f5b      	lsrs	r3, r3, #29
 800228a:	2207      	movs	r2, #7
 800228c:	4013      	ands	r3, r2
 800228e:	3301      	adds	r3, #1
 8002290:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	6978      	ldr	r0, [r7, #20]
 8002296:	f7fd ff35 	bl	8000104 <__udivsi3>
 800229a:	0003      	movs	r3, r0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e015      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2238      	movs	r2, #56	; 0x38
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d103      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2238      	movs	r2, #56	; 0x38
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b18      	cmp	r3, #24
 80022be:	d103      	bne.n	80022c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80022c0:	23fa      	movs	r3, #250	; 0xfa
 80022c2:	01db      	lsls	r3, r3, #7
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	e001      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022cc:	693b      	ldr	r3, [r7, #16]
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b006      	add	sp, #24
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	40021000 	.word	0x40021000
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	007a1200 	.word	0x007a1200

080022e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	20000004 	.word	0x20000004

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b5b0      	push	{r4, r5, r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022fc:	f7ff fff2 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002300:	0004      	movs	r4, r0
 8002302:	f7ff faf9 	bl	80018f8 <LL_RCC_GetAPB1Prescaler>
 8002306:	0003      	movs	r3, r0
 8002308:	0b1a      	lsrs	r2, r3, #12
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	58d3      	ldr	r3, [r2, r3]
 8002310:	221f      	movs	r2, #31
 8002312:	4013      	ands	r3, r2
 8002314:	40dc      	lsrs	r4, r3
 8002316:	0023      	movs	r3, r4
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bdb0      	pop	{r4, r5, r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	0800405c 	.word	0x0800405c

08002324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800232c:	2313      	movs	r3, #19
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002334:	2312      	movs	r3, #18
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	029b      	lsls	r3, r3, #10
 8002344:	4013      	ands	r3, r2
 8002346:	d100      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002348:	e0ad      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2011      	movs	r0, #17
 800234c:	183b      	adds	r3, r7, r0
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	055b      	lsls	r3, r3, #21
 800235a:	4013      	ands	r3, r2
 800235c:	d110      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b44      	ldr	r3, [pc, #272]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	0549      	lsls	r1, r1, #21
 8002368:	430a      	orrs	r2, r1
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800236e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	055b      	lsls	r3, r3, #21
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	183b      	adds	r3, r7, r0
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002380:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	0049      	lsls	r1, r1, #1
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800238e:	f7fe fc45 	bl	8000c1c <HAL_GetTick>
 8002392:	0003      	movs	r3, r0
 8002394:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002396:	e00b      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7fe fc40 	bl	8000c1c <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d904      	bls.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80023a6:	2313      	movs	r3, #19
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2203      	movs	r2, #3
 80023ac:	701a      	strb	r2, [r3, #0]
        break;
 80023ae:	e005      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b0:	4b30      	ldr	r3, [pc, #192]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	d0ed      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80023bc:	2313      	movs	r3, #19
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d15e      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023c6:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023ca:	23c0      	movs	r3, #192	; 0xc0
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d019      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d014      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	4a24      	ldr	r2, [pc, #144]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	0249      	lsls	r1, r1, #9
 80023f6:	430a      	orrs	r2, r1
 80023f8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002400:	491e      	ldr	r1, [pc, #120]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002402:	400a      	ands	r2, r1
 8002404:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d016      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fc02 	bl	8000c1c <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241c:	e00c      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe fbfd 	bl	8000c1c <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d904      	bls.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800242e:	2313      	movs	r3, #19
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	2203      	movs	r2, #3
 8002434:	701a      	strb	r2, [r3, #0]
            break;
 8002436:	e004      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d0ed      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002442:	2313      	movs	r3, #19
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800245c:	430a      	orrs	r2, r1
 800245e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002460:	e016      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002462:	2312      	movs	r3, #18
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2213      	movs	r2, #19
 8002468:	18ba      	adds	r2, r7, r2
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e00f      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
 8002478:	fffffcff 	.word	0xfffffcff
 800247c:	fffeffff 	.word	0xfffeffff
 8002480:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002484:	2312      	movs	r3, #18
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	2213      	movs	r2, #19
 800248a:	18ba      	adds	r2, r7, r2
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002490:	2311      	movs	r3, #17
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4bb6      	ldr	r3, [pc, #728]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800249c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800249e:	4bb5      	ldr	r3, [pc, #724]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a0:	49b5      	ldr	r1, [pc, #724]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80024a2:	400a      	ands	r2, r1
 80024a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b0:	4bb0      	ldr	r3, [pc, #704]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	2203      	movs	r2, #3
 80024b6:	4393      	bics	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4bad      	ldr	r3, [pc, #692]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2202      	movs	r2, #2
 80024ca:	4013      	ands	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ce:	4ba9      	ldr	r3, [pc, #676]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	220c      	movs	r2, #12
 80024d4:	4393      	bics	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4ba5      	ldr	r3, [pc, #660]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2204      	movs	r2, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ec:	4ba1      	ldr	r3, [pc, #644]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	2230      	movs	r2, #48	; 0x30
 80024f2:	4393      	bics	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	4b9e      	ldr	r3, [pc, #632]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2210      	movs	r2, #16
 8002506:	4013      	ands	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800250a:	4b9a      	ldr	r3, [pc, #616]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	4a9b      	ldr	r2, [pc, #620]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	4b96      	ldr	r3, [pc, #600]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251a:	430a      	orrs	r2, r1
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	015b      	lsls	r3, r3, #5
 8002526:	4013      	ands	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800252a:	4b92      	ldr	r3, [pc, #584]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	4b8e      	ldr	r3, [pc, #568]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253a:	430a      	orrs	r2, r1
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4013      	ands	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800254a:	4b8a      	ldr	r3, [pc, #552]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	4a8d      	ldr	r2, [pc, #564]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002558:	4b86      	ldr	r3, [pc, #536]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800255a:	430a      	orrs	r2, r1
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4013      	ands	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800256a:	4b82      	ldr	r3, [pc, #520]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	4a86      	ldr	r2, [pc, #536]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002570:	4013      	ands	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	4b7e      	ldr	r3, [pc, #504]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800257a:	430a      	orrs	r2, r1
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2220      	movs	r2, #32
 8002584:	4013      	ands	r3, r2
 8002586:	d009      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002588:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	4a7f      	ldr	r2, [pc, #508]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	4b77      	ldr	r3, [pc, #476]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002598:	430a      	orrs	r2, r1
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	4013      	ands	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025a6:	4b73      	ldr	r3, [pc, #460]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	4a79      	ldr	r2, [pc, #484]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b6:	430a      	orrs	r2, r1
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	01db      	lsls	r3, r3, #7
 80025c2:	4013      	ands	r3, r2
 80025c4:	d015      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c6:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	0899      	lsrs	r1, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d2:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d4:	430a      	orrs	r2, r1
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	05db      	lsls	r3, r3, #23
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025e4:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	4b62      	ldr	r3, [pc, #392]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0249      	lsls	r1, r1, #9
 80025ee:	430a      	orrs	r2, r1
 80025f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	031b      	lsls	r3, r3, #12
 80025fa:	4013      	ands	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025fe:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	4393      	bics	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800260e:	430a      	orrs	r2, r1
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	039b      	lsls	r3, r3, #14
 800261a:	4013      	ands	r3, r2
 800261c:	d016      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800261e:	4b55      	ldr	r3, [pc, #340]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	4a5c      	ldr	r2, [pc, #368]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800262c:	4b51      	ldr	r3, [pc, #324]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800262e:	430a      	orrs	r2, r1
 8002630:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	03db      	lsls	r3, r3, #15
 800263a:	429a      	cmp	r2, r3
 800263c:	d106      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800263e:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0449      	lsls	r1, r1, #17
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	03db      	lsls	r3, r3, #15
 8002654:	4013      	ands	r3, r2
 8002656:	d016      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002658:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002666:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002668:	430a      	orrs	r2, r1
 800266a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	045b      	lsls	r3, r3, #17
 8002674:	429a      	cmp	r2, r3
 8002676:	d106      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0449      	lsls	r1, r1, #17
 8002682:	430a      	orrs	r2, r1
 8002684:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	4013      	ands	r3, r2
 8002690:	d014      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	2203      	movs	r2, #3
 8002698:	4393      	bics	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	4b34      	ldr	r3, [pc, #208]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d106      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026ae:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	0249      	lsls	r1, r1, #9
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	019b      	lsls	r3, r3, #6
 80026c4:	4013      	ands	r3, r2
 80026c6:	d014      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	220c      	movs	r2, #12
 80026ce:	4393      	bics	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d6:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d106      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	0249      	lsls	r1, r1, #9
 80026ee:	430a      	orrs	r2, r1
 80026f0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	045b      	lsls	r3, r3, #17
 80026fa:	4013      	ands	r3, r2
 80026fc:	d016      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800270e:	430a      	orrs	r2, r1
 8002710:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	019b      	lsls	r3, r3, #6
 800271a:	429a      	cmp	r2, r3
 800271c:	d106      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	0449      	lsls	r1, r1, #17
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	049b      	lsls	r3, r3, #18
 8002734:	4013      	ands	r3, r2
 8002736:	d016      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800273e:	4013      	ands	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002748:	430a      	orrs	r2, r1
 800274a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	0449      	lsls	r1, r1, #17
 8002762:	430a      	orrs	r2, r1
 8002764:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002766:	2312      	movs	r3, #18
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	781b      	ldrb	r3, [r3, #0]
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b006      	add	sp, #24
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	efffffff 	.word	0xefffffff
 800277c:	fffff3ff 	.word	0xfffff3ff
 8002780:	fffffcff 	.word	0xfffffcff
 8002784:	fff3ffff 	.word	0xfff3ffff
 8002788:	ffcfffff 	.word	0xffcfffff
 800278c:	ffffcfff 	.word	0xffffcfff
 8002790:	ffff3fff 	.word	0xffff3fff
 8002794:	ffbfffff 	.word	0xffbfffff
 8002798:	feffffff 	.word	0xfeffffff

0800279c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e046      	b.n	800283c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2284      	movs	r2, #132	; 0x84
 80027b2:	589b      	ldr	r3, [r3, r2]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7fe f8b8 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2284      	movs	r2, #132	; 0x84
 80027cc:	2124      	movs	r1, #36	; 0x24
 80027ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 fc0c 	bl	8003000 <UART_SetConfig>
 80027e8:	0003      	movs	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e024      	b.n	800283c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 ff55 	bl	80036ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	490d      	ldr	r1, [pc, #52]	; (8002844 <HAL_UART_Init+0xa8>)
 800280e:	400a      	ands	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	212a      	movs	r1, #42	; 0x2a
 800281e:	438a      	bics	r2, r1
 8002820:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2101      	movs	r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0018      	movs	r0, r3
 8002836:	f000 ffed 	bl	8003814 <UART_CheckIdleState>
 800283a:	0003      	movs	r3, r0
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}
 8002844:	ffffb7ff 	.word	0xffffb7ff

08002848 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	1dbb      	adds	r3, r7, #6
 8002854:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2284      	movs	r2, #132	; 0x84
 800285a:	589b      	ldr	r3, [r3, r2]
 800285c:	2b20      	cmp	r3, #32
 800285e:	d000      	beq.n	8002862 <HAL_UART_Transmit_DMA+0x1a>
 8002860:	e08c      	b.n	800297c <HAL_UART_Transmit_DMA+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_UART_Transmit_DMA+0x28>
 8002868:	1dbb      	adds	r3, r7, #6
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e084      	b.n	800297e <HAL_UART_Transmit_DMA+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	015b      	lsls	r3, r3, #5
 800287c:	429a      	cmp	r2, r3
 800287e:	d109      	bne.n	8002894 <HAL_UART_Transmit_DMA+0x4c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	d001      	beq.n	8002894 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e074      	b.n	800297e <HAL_UART_Transmit_DMA+0x136>
      }
    }

    __HAL_LOCK(huart);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Transmit_DMA+0x5a>
 800289e:	2302      	movs	r3, #2
 80028a0:	e06d      	b.n	800297e <HAL_UART_Transmit_DMA+0x136>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1dba      	adds	r2, r7, #6
 80028b4:	2154      	movs	r1, #84	; 0x54
 80028b6:	8812      	ldrh	r2, [r2, #0]
 80028b8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1dba      	adds	r2, r7, #6
 80028be:	2156      	movs	r1, #86	; 0x56
 80028c0:	8812      	ldrh	r2, [r2, #0]
 80028c2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	228c      	movs	r2, #140	; 0x8c
 80028c8:	2100      	movs	r1, #0
 80028ca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2284      	movs	r2, #132	; 0x84
 80028d0:	2121      	movs	r1, #33	; 0x21
 80028d2:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d02c      	beq.n	8002936 <HAL_UART_Transmit_DMA+0xee>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <HAL_UART_Transmit_DMA+0x140>)
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e8:	4a28      	ldr	r2, [pc, #160]	; (800298c <HAL_UART_Transmit_DMA+0x144>)
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f0:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_UART_Transmit_DMA+0x148>)
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f8:	2200      	movs	r2, #0
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002904:	0019      	movs	r1, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3328      	adds	r3, #40	; 0x28
 800290c:	001a      	movs	r2, r3
 800290e:	1dbb      	adds	r3, r7, #6
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	f7fe fb51 	bl	8000fb8 <HAL_DMA_Start_IT>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d00d      	beq.n	8002936 <HAL_UART_Transmit_DMA+0xee>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	228c      	movs	r2, #140	; 0x8c
 800291e:	2110      	movs	r1, #16
 8002920:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2284      	movs	r2, #132	; 0x84
 800292e:	2120      	movs	r1, #32
 8002930:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e023      	b.n	800297e <HAL_UART_Transmit_DMA+0x136>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	2100      	movs	r1, #0
 8002944:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002946:	f3ef 8310 	mrs	r3, PRIMASK
 800294a:	613b      	str	r3, [r7, #16]
  return(result);
 800294c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800294e:	61fb      	str	r3, [r7, #28]
 8002950:	2301      	movs	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f383 8810 	msr	PRIMASK, r3
}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f383 8810 	msr	PRIMASK, r3
}
 8002976:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	e000      	b.n	800297e <HAL_UART_Transmit_DMA+0x136>
  }
  else
  {
    return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
  }
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b008      	add	sp, #32
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	08003b85 	.word	0x08003b85
 800298c:	08003c1d 	.word	0x08003c1d
 8002990:	08003c3b 	.word	0x08003c3b

08002994 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b0aa      	sub	sp, #168	; 0xa8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	22a4      	movs	r2, #164	; 0xa4
 80029a4:	18b9      	adds	r1, r7, r2
 80029a6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	20a0      	movs	r0, #160	; 0xa0
 80029b0:	1839      	adds	r1, r7, r0
 80029b2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	249c      	movs	r4, #156	; 0x9c
 80029bc:	1939      	adds	r1, r7, r4
 80029be:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029c0:	0011      	movs	r1, r2
 80029c2:	18bb      	adds	r3, r7, r2
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4aa0      	ldr	r2, [pc, #640]	; (8002c48 <HAL_UART_IRQHandler+0x2b4>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	2298      	movs	r2, #152	; 0x98
 80029cc:	18bd      	adds	r5, r7, r2
 80029ce:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80029d0:	18bb      	adds	r3, r7, r2
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d11a      	bne.n	8002a0e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2220      	movs	r2, #32
 80029de:	4013      	ands	r3, r2
 80029e0:	d015      	beq.n	8002a0e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029e2:	183b      	adds	r3, r7, r0
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2220      	movs	r2, #32
 80029e8:	4013      	ands	r3, r2
 80029ea:	d105      	bne.n	80029f8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	055b      	lsls	r3, r3, #21
 80029f4:	4013      	ands	r3, r2
 80029f6:	d00a      	beq.n	8002a0e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d100      	bne.n	8002a02 <HAL_UART_IRQHandler+0x6e>
 8002a00:	e2cf      	b.n	8002fa2 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	0010      	movs	r0, r2
 8002a0a:	4798      	blx	r3
      }
      return;
 8002a0c:	e2c9      	b.n	8002fa2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a0e:	2398      	movs	r3, #152	; 0x98
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d100      	bne.n	8002a1a <HAL_UART_IRQHandler+0x86>
 8002a18:	e11e      	b.n	8002c58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a1a:	239c      	movs	r3, #156	; 0x9c
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a8a      	ldr	r2, [pc, #552]	; (8002c4c <HAL_UART_IRQHandler+0x2b8>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	d106      	bne.n	8002a34 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a26:	23a0      	movs	r3, #160	; 0xa0
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a88      	ldr	r2, [pc, #544]	; (8002c50 <HAL_UART_IRQHandler+0x2bc>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d100      	bne.n	8002a34 <HAL_UART_IRQHandler+0xa0>
 8002a32:	e111      	b.n	8002c58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a34:	23a4      	movs	r3, #164	; 0xa4
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d012      	beq.n	8002a66 <HAL_UART_IRQHandler+0xd2>
 8002a40:	23a0      	movs	r3, #160	; 0xa0
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2201      	movs	r2, #1
 8002a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	228c      	movs	r2, #140	; 0x8c
 8002a5a:	589b      	ldr	r3, [r3, r2]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	218c      	movs	r1, #140	; 0x8c
 8002a64:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a66:	23a4      	movs	r3, #164	; 0xa4
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d011      	beq.n	8002a96 <HAL_UART_IRQHandler+0x102>
 8002a72:	239c      	movs	r3, #156	; 0x9c
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d00b      	beq.n	8002a96 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2202      	movs	r2, #2
 8002a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	228c      	movs	r2, #140	; 0x8c
 8002a8a:	589b      	ldr	r3, [r3, r2]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	218c      	movs	r1, #140	; 0x8c
 8002a94:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a96:	23a4      	movs	r3, #164	; 0xa4
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d011      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x132>
 8002aa2:	239c      	movs	r3, #156	; 0x9c
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d00b      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	228c      	movs	r2, #140	; 0x8c
 8002aba:	589b      	ldr	r3, [r3, r2]
 8002abc:	2202      	movs	r2, #2
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	218c      	movs	r1, #140	; 0x8c
 8002ac4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ac6:	23a4      	movs	r3, #164	; 0xa4
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2208      	movs	r2, #8
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d017      	beq.n	8002b02 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ad2:	23a0      	movs	r3, #160	; 0xa0
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	4013      	ands	r3, r2
 8002adc:	d105      	bne.n	8002aea <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002ade:	239c      	movs	r3, #156	; 0x9c
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a59      	ldr	r2, [pc, #356]	; (8002c4c <HAL_UART_IRQHandler+0x2b8>)
 8002ae6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ae8:	d00b      	beq.n	8002b02 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2208      	movs	r2, #8
 8002af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	228c      	movs	r2, #140	; 0x8c
 8002af6:	589b      	ldr	r3, [r3, r2]
 8002af8:	2208      	movs	r2, #8
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	218c      	movs	r1, #140	; 0x8c
 8002b00:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b02:	23a4      	movs	r3, #164	; 0xa4
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d013      	beq.n	8002b38 <HAL_UART_IRQHandler+0x1a4>
 8002b10:	23a0      	movs	r3, #160	; 0xa0
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	04db      	lsls	r3, r3, #19
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d00c      	beq.n	8002b38 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	228c      	movs	r2, #140	; 0x8c
 8002b2c:	589b      	ldr	r3, [r3, r2]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	218c      	movs	r1, #140	; 0x8c
 8002b36:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	228c      	movs	r2, #140	; 0x8c
 8002b3c:	589b      	ldr	r3, [r3, r2]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d100      	bne.n	8002b44 <HAL_UART_IRQHandler+0x1b0>
 8002b42:	e230      	b.n	8002fa6 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b44:	23a4      	movs	r3, #164	; 0xa4
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d015      	beq.n	8002b7c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b50:	23a0      	movs	r3, #160	; 0xa0
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2220      	movs	r2, #32
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d106      	bne.n	8002b6a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b5c:	239c      	movs	r3, #156	; 0x9c
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	055b      	lsls	r3, r3, #21
 8002b66:	4013      	ands	r3, r2
 8002b68:	d008      	beq.n	8002b7c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	0010      	movs	r0, r2
 8002b7a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	228c      	movs	r2, #140	; 0x8c
 8002b80:	589b      	ldr	r3, [r3, r2]
 8002b82:	2194      	movs	r1, #148	; 0x94
 8002b84:	187a      	adds	r2, r7, r1
 8002b86:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2240      	movs	r2, #64	; 0x40
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d004      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2228      	movs	r2, #40	; 0x28
 8002b9c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b9e:	d047      	beq.n	8002c30 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 ff88 	bl	8003ab8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2240      	movs	r2, #64	; 0x40
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d137      	bne.n	8002c26 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bba:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbe:	2090      	movs	r0, #144	; 0x90
 8002bc0:	183a      	adds	r2, r7, r0
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bca:	f383 8810 	msr	PRIMASK, r3
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	438a      	bics	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002be8:	f383 8810 	msr	PRIMASK, r3
}
 8002bec:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d012      	beq.n	8002c1c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfa:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <HAL_UART_IRQHandler+0x2c0>)
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c02:	0018      	movs	r0, r3
 8002c04:	f7fe fabe 	bl	8001184 <HAL_DMA_Abort_IT>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d01a      	beq.n	8002c42 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c16:	0018      	movs	r0, r3
 8002c18:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1a:	e012      	b.n	8002c42 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 f9da 	bl	8002fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e00d      	b.n	8002c42 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 f9d5 	bl	8002fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2e:	e008      	b.n	8002c42 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f9d0 	bl	8002fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	228c      	movs	r2, #140	; 0x8c
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c40:	e1b1      	b.n	8002fa6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c42:	46c0      	nop			; (mov r8, r8)
    return;
 8002c44:	e1af      	b.n	8002fa6 <HAL_UART_IRQHandler+0x612>
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	0000080f 	.word	0x0000080f
 8002c4c:	10000001 	.word	0x10000001
 8002c50:	04000120 	.word	0x04000120
 8002c54:	08003cc1 	.word	0x08003cc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d000      	beq.n	8002c62 <HAL_UART_IRQHandler+0x2ce>
 8002c60:	e135      	b.n	8002ece <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c62:	23a4      	movs	r3, #164	; 0xa4
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d100      	bne.n	8002c70 <HAL_UART_IRQHandler+0x2dc>
 8002c6e:	e12e      	b.n	8002ece <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c70:	23a0      	movs	r3, #160	; 0xa0
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2210      	movs	r2, #16
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <HAL_UART_IRQHandler+0x2ea>
 8002c7c:	e127      	b.n	8002ece <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2210      	movs	r2, #16
 8002c84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d000      	beq.n	8002c96 <HAL_UART_IRQHandler+0x302>
 8002c94:	e09e      	b.n	8002dd4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	217e      	movs	r1, #126	; 0x7e
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002ca4:	187b      	adds	r3, r7, r1
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d100      	bne.n	8002cae <HAL_UART_IRQHandler+0x31a>
 8002cac:	e17d      	b.n	8002faa <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	225c      	movs	r2, #92	; 0x5c
 8002cb2:	5a9b      	ldrh	r3, [r3, r2]
 8002cb4:	187a      	adds	r2, r7, r1
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d300      	bcc.n	8002cbe <HAL_UART_IRQHandler+0x32a>
 8002cbc:	e175      	b.n	8002faa <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	187a      	adds	r2, r7, r1
 8002cc2:	215e      	movs	r1, #94	; 0x5e
 8002cc4:	8812      	ldrh	r2, [r2, #0]
 8002cc6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d16f      	bne.n	8002db6 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cda:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cde:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	49b1      	ldr	r1, [pc, #708]	; (8002fbc <HAL_UART_IRQHandler+0x628>)
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	f383 8810 	msr	PRIMASK, r3
}
 8002d06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d08:	f3ef 8310 	mrs	r3, PRIMASK
 8002d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d10:	677b      	str	r3, [r7, #116]	; 0x74
 8002d12:	2301      	movs	r3, #1
 8002d14:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d18:	f383 8810 	msr	PRIMASK, r3
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	438a      	bics	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d30:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d34:	f383 8810 	msr	PRIMASK, r3
}
 8002d38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d42:	673b      	str	r3, [r7, #112]	; 0x70
 8002d44:	2301      	movs	r3, #1
 8002d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4a:	f383 8810 	msr	PRIMASK, r3
}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d62:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d66:	f383 8810 	msr	PRIMASK, r3
}
 8002d6a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2288      	movs	r2, #136	; 0x88
 8002d70:	2120      	movs	r1, #32
 8002d72:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d84:	2301      	movs	r3, #1
 8002d86:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8a:	f383 8810 	msr	PRIMASK, r3
}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2110      	movs	r1, #16
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da6:	f383 8810 	msr	PRIMASK, r3
}
 8002daa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fe f987 	bl	80010c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	225c      	movs	r2, #92	; 0x5c
 8002dba:	5a9a      	ldrh	r2, [r3, r2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	215e      	movs	r1, #94	; 0x5e
 8002dc0:	5a5b      	ldrh	r3, [r3, r1]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0011      	movs	r1, r2
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 f90b 	bl	8002fe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dd2:	e0ea      	b.n	8002faa <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	225c      	movs	r2, #92	; 0x5c
 8002dd8:	5a99      	ldrh	r1, [r3, r2]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	225e      	movs	r2, #94	; 0x5e
 8002dde:	5a9b      	ldrh	r3, [r3, r2]
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	208e      	movs	r0, #142	; 0x8e
 8002de4:	183b      	adds	r3, r7, r0
 8002de6:	1a8a      	subs	r2, r1, r2
 8002de8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	225e      	movs	r2, #94	; 0x5e
 8002dee:	5a9b      	ldrh	r3, [r3, r2]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d100      	bne.n	8002df8 <HAL_UART_IRQHandler+0x464>
 8002df6:	e0da      	b.n	8002fae <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002df8:	183b      	adds	r3, r7, r0
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d100      	bne.n	8002e02 <HAL_UART_IRQHandler+0x46e>
 8002e00:	e0d5      	b.n	8002fae <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e02:	f3ef 8310 	mrs	r3, PRIMASK
 8002e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e08:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e0a:	2488      	movs	r4, #136	; 0x88
 8002e0c:	193a      	adds	r2, r7, r4
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4966      	ldr	r1, [pc, #408]	; (8002fc0 <HAL_UART_IRQHandler+0x62c>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f383 8810 	msr	PRIMASK, r3
}
 8002e38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e40:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e42:	2484      	movs	r4, #132	; 0x84
 8002e44:	193a      	adds	r2, r7, r4
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4959      	ldr	r1, [pc, #356]	; (8002fc4 <HAL_UART_IRQHandler+0x630>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	193b      	adds	r3, r7, r4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f383 8810 	msr	PRIMASK, r3
}
 8002e70:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2288      	movs	r2, #136	; 0x88
 8002e76:	2120      	movs	r1, #32
 8002e78:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e86:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8e:	2480      	movs	r4, #128	; 0x80
 8002e90:	193a      	adds	r2, r7, r4
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	2301      	movs	r3, #1
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	f383 8810 	msr	PRIMASK, r3
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2110      	movs	r1, #16
 8002eac:	438a      	bics	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	f383 8810 	msr	PRIMASK, r3
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ebe:	183b      	adds	r3, r7, r0
 8002ec0:	881a      	ldrh	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	0011      	movs	r1, r2
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 f88e 	bl	8002fe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ecc:	e06f      	b.n	8002fae <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ece:	23a4      	movs	r3, #164	; 0xa4
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	035b      	lsls	r3, r3, #13
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d010      	beq.n	8002efe <HAL_UART_IRQHandler+0x56a>
 8002edc:	239c      	movs	r3, #156	; 0x9c
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	03db      	lsls	r3, r3, #15
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	0352      	lsls	r2, r2, #13
 8002ef2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 ff25 	bl	8003d46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002efc:	e05a      	b.n	8002fb4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002efe:	23a4      	movs	r3, #164	; 0xa4
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2280      	movs	r2, #128	; 0x80
 8002f06:	4013      	ands	r3, r2
 8002f08:	d016      	beq.n	8002f38 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f0a:	23a0      	movs	r3, #160	; 0xa0
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	4013      	ands	r3, r2
 8002f14:	d106      	bne.n	8002f24 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f16:	239c      	movs	r3, #156	; 0x9c
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d042      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	0010      	movs	r0, r2
 8002f34:	4798      	blx	r3
    }
    return;
 8002f36:	e03c      	b.n	8002fb2 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f38:	23a4      	movs	r3, #164	; 0xa4
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2240      	movs	r2, #64	; 0x40
 8002f40:	4013      	ands	r3, r2
 8002f42:	d00a      	beq.n	8002f5a <HAL_UART_IRQHandler+0x5c6>
 8002f44:	23a0      	movs	r3, #160	; 0xa0
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 fecb 	bl	8003cee <UART_EndTransmit_IT>
    return;
 8002f58:	e02c      	b.n	8002fb4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f5a:	23a4      	movs	r3, #164	; 0xa4
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	4013      	ands	r3, r2
 8002f66:	d00b      	beq.n	8002f80 <HAL_UART_IRQHandler+0x5ec>
 8002f68:	23a0      	movs	r3, #160	; 0xa0
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	05db      	lsls	r3, r3, #23
 8002f72:	4013      	ands	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 fef4 	bl	8003d66 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f7e:	e019      	b.n	8002fb4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f80:	23a4      	movs	r3, #164	; 0xa4
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	045b      	lsls	r3, r3, #17
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d012      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x620>
 8002f8e:	23a0      	movs	r3, #160	; 0xa0
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da0d      	bge.n	8002fb4 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 fedb 	bl	8003d56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fa0:	e008      	b.n	8002fb4 <HAL_UART_IRQHandler+0x620>
      return;
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	e006      	b.n	8002fb4 <HAL_UART_IRQHandler+0x620>
    return;
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	e004      	b.n	8002fb4 <HAL_UART_IRQHandler+0x620>
      return;
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	e002      	b.n	8002fb4 <HAL_UART_IRQHandler+0x620>
      return;
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	e000      	b.n	8002fb4 <HAL_UART_IRQHandler+0x620>
    return;
 8002fb2:	46c0      	nop			; (mov r8, r8)
  }
}
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b02a      	add	sp, #168	; 0xa8
 8002fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	fffffeff 	.word	0xfffffeff
 8002fc0:	fffffedf 	.word	0xfffffedf
 8002fc4:	effffffe 	.word	0xeffffffe

08002fc8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b002      	add	sp, #8
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	000a      	movs	r2, r1
 8002ff2:	1cbb      	adds	r3, r7, #2
 8002ff4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b002      	add	sp, #8
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b090      	sub	sp, #64	; 0x40
 8003004:	af00      	add	r7, sp, #0
 8003006:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003008:	231a      	movs	r3, #26
 800300a:	2220      	movs	r2, #32
 800300c:	189b      	adds	r3, r3, r2
 800300e:	19db      	adds	r3, r3, r7
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	431a      	orrs	r2, r3
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	431a      	orrs	r2, r3
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4313      	orrs	r3, r2
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4ac1      	ldr	r2, [pc, #772]	; (8003338 <UART_SetConfig+0x338>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	430b      	orrs	r3, r1
 8003040:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4abc      	ldr	r2, [pc, #752]	; (800333c <UART_SetConfig+0x33c>)
 800304a:	4013      	ands	r3, r2
 800304c:	0018      	movs	r0, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	68d9      	ldr	r1, [r3, #12]
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	0003      	movs	r3, r0
 8003058:	430b      	orrs	r3, r1
 800305a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4ab6      	ldr	r2, [pc, #728]	; (8003340 <UART_SetConfig+0x340>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d009      	beq.n	8003080 <UART_SetConfig+0x80>
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4ab4      	ldr	r2, [pc, #720]	; (8003344 <UART_SetConfig+0x344>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800307c:	4313      	orrs	r3, r2
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4ab0      	ldr	r2, [pc, #704]	; (8003348 <UART_SetConfig+0x348>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	430b      	orrs	r3, r1
 8003094:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	220f      	movs	r2, #15
 800309e:	4393      	bics	r3, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	0003      	movs	r3, r0
 80030ac:	430b      	orrs	r3, r1
 80030ae:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4aa5      	ldr	r2, [pc, #660]	; (800334c <UART_SetConfig+0x34c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d131      	bne.n	800311e <UART_SetConfig+0x11e>
 80030ba:	4ba5      	ldr	r3, [pc, #660]	; (8003350 <UART_SetConfig+0x350>)
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	2203      	movs	r2, #3
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d01d      	beq.n	8003102 <UART_SetConfig+0x102>
 80030c6:	d823      	bhi.n	8003110 <UART_SetConfig+0x110>
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d00c      	beq.n	80030e6 <UART_SetConfig+0xe6>
 80030cc:	d820      	bhi.n	8003110 <UART_SetConfig+0x110>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <UART_SetConfig+0xd8>
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d00e      	beq.n	80030f4 <UART_SetConfig+0xf4>
 80030d6:	e01b      	b.n	8003110 <UART_SetConfig+0x110>
 80030d8:	231b      	movs	r3, #27
 80030da:	2220      	movs	r2, #32
 80030dc:	189b      	adds	r3, r3, r2
 80030de:	19db      	adds	r3, r3, r7
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e154      	b.n	8003390 <UART_SetConfig+0x390>
 80030e6:	231b      	movs	r3, #27
 80030e8:	2220      	movs	r2, #32
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	19db      	adds	r3, r3, r7
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e14d      	b.n	8003390 <UART_SetConfig+0x390>
 80030f4:	231b      	movs	r3, #27
 80030f6:	2220      	movs	r2, #32
 80030f8:	189b      	adds	r3, r3, r2
 80030fa:	19db      	adds	r3, r3, r7
 80030fc:	2204      	movs	r2, #4
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e146      	b.n	8003390 <UART_SetConfig+0x390>
 8003102:	231b      	movs	r3, #27
 8003104:	2220      	movs	r2, #32
 8003106:	189b      	adds	r3, r3, r2
 8003108:	19db      	adds	r3, r3, r7
 800310a:	2208      	movs	r2, #8
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e13f      	b.n	8003390 <UART_SetConfig+0x390>
 8003110:	231b      	movs	r3, #27
 8003112:	2220      	movs	r2, #32
 8003114:	189b      	adds	r3, r3, r2
 8003116:	19db      	adds	r3, r3, r7
 8003118:	2210      	movs	r2, #16
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e138      	b.n	8003390 <UART_SetConfig+0x390>
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a8c      	ldr	r2, [pc, #560]	; (8003354 <UART_SetConfig+0x354>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d131      	bne.n	800318c <UART_SetConfig+0x18c>
 8003128:	4b89      	ldr	r3, [pc, #548]	; (8003350 <UART_SetConfig+0x350>)
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	220c      	movs	r2, #12
 800312e:	4013      	ands	r3, r2
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d01d      	beq.n	8003170 <UART_SetConfig+0x170>
 8003134:	d823      	bhi.n	800317e <UART_SetConfig+0x17e>
 8003136:	2b08      	cmp	r3, #8
 8003138:	d00c      	beq.n	8003154 <UART_SetConfig+0x154>
 800313a:	d820      	bhi.n	800317e <UART_SetConfig+0x17e>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <UART_SetConfig+0x146>
 8003140:	2b04      	cmp	r3, #4
 8003142:	d00e      	beq.n	8003162 <UART_SetConfig+0x162>
 8003144:	e01b      	b.n	800317e <UART_SetConfig+0x17e>
 8003146:	231b      	movs	r3, #27
 8003148:	2220      	movs	r2, #32
 800314a:	189b      	adds	r3, r3, r2
 800314c:	19db      	adds	r3, r3, r7
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e11d      	b.n	8003390 <UART_SetConfig+0x390>
 8003154:	231b      	movs	r3, #27
 8003156:	2220      	movs	r2, #32
 8003158:	189b      	adds	r3, r3, r2
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e116      	b.n	8003390 <UART_SetConfig+0x390>
 8003162:	231b      	movs	r3, #27
 8003164:	2220      	movs	r2, #32
 8003166:	189b      	adds	r3, r3, r2
 8003168:	19db      	adds	r3, r3, r7
 800316a:	2204      	movs	r2, #4
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e10f      	b.n	8003390 <UART_SetConfig+0x390>
 8003170:	231b      	movs	r3, #27
 8003172:	2220      	movs	r2, #32
 8003174:	189b      	adds	r3, r3, r2
 8003176:	19db      	adds	r3, r3, r7
 8003178:	2208      	movs	r2, #8
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e108      	b.n	8003390 <UART_SetConfig+0x390>
 800317e:	231b      	movs	r3, #27
 8003180:	2220      	movs	r2, #32
 8003182:	189b      	adds	r3, r3, r2
 8003184:	19db      	adds	r3, r3, r7
 8003186:	2210      	movs	r2, #16
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e101      	b.n	8003390 <UART_SetConfig+0x390>
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a71      	ldr	r2, [pc, #452]	; (8003358 <UART_SetConfig+0x358>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d131      	bne.n	80031fa <UART_SetConfig+0x1fa>
 8003196:	4b6e      	ldr	r3, [pc, #440]	; (8003350 <UART_SetConfig+0x350>)
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	2230      	movs	r2, #48	; 0x30
 800319c:	4013      	ands	r3, r2
 800319e:	2b30      	cmp	r3, #48	; 0x30
 80031a0:	d01d      	beq.n	80031de <UART_SetConfig+0x1de>
 80031a2:	d823      	bhi.n	80031ec <UART_SetConfig+0x1ec>
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d00c      	beq.n	80031c2 <UART_SetConfig+0x1c2>
 80031a8:	d820      	bhi.n	80031ec <UART_SetConfig+0x1ec>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <UART_SetConfig+0x1b4>
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d00e      	beq.n	80031d0 <UART_SetConfig+0x1d0>
 80031b2:	e01b      	b.n	80031ec <UART_SetConfig+0x1ec>
 80031b4:	231b      	movs	r3, #27
 80031b6:	2220      	movs	r2, #32
 80031b8:	189b      	adds	r3, r3, r2
 80031ba:	19db      	adds	r3, r3, r7
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e0e6      	b.n	8003390 <UART_SetConfig+0x390>
 80031c2:	231b      	movs	r3, #27
 80031c4:	2220      	movs	r2, #32
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	19db      	adds	r3, r3, r7
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e0df      	b.n	8003390 <UART_SetConfig+0x390>
 80031d0:	231b      	movs	r3, #27
 80031d2:	2220      	movs	r2, #32
 80031d4:	189b      	adds	r3, r3, r2
 80031d6:	19db      	adds	r3, r3, r7
 80031d8:	2204      	movs	r2, #4
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e0d8      	b.n	8003390 <UART_SetConfig+0x390>
 80031de:	231b      	movs	r3, #27
 80031e0:	2220      	movs	r2, #32
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	19db      	adds	r3, r3, r7
 80031e6:	2208      	movs	r2, #8
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e0d1      	b.n	8003390 <UART_SetConfig+0x390>
 80031ec:	231b      	movs	r3, #27
 80031ee:	2220      	movs	r2, #32
 80031f0:	189b      	adds	r3, r3, r2
 80031f2:	19db      	adds	r3, r3, r7
 80031f4:	2210      	movs	r2, #16
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e0ca      	b.n	8003390 <UART_SetConfig+0x390>
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a57      	ldr	r2, [pc, #348]	; (800335c <UART_SetConfig+0x35c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d106      	bne.n	8003212 <UART_SetConfig+0x212>
 8003204:	231b      	movs	r3, #27
 8003206:	2220      	movs	r2, #32
 8003208:	189b      	adds	r3, r3, r2
 800320a:	19db      	adds	r3, r3, r7
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e0be      	b.n	8003390 <UART_SetConfig+0x390>
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a52      	ldr	r2, [pc, #328]	; (8003360 <UART_SetConfig+0x360>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d106      	bne.n	800322a <UART_SetConfig+0x22a>
 800321c:	231b      	movs	r3, #27
 800321e:	2220      	movs	r2, #32
 8003220:	189b      	adds	r3, r3, r2
 8003222:	19db      	adds	r3, r3, r7
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e0b2      	b.n	8003390 <UART_SetConfig+0x390>
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a4d      	ldr	r2, [pc, #308]	; (8003364 <UART_SetConfig+0x364>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d106      	bne.n	8003242 <UART_SetConfig+0x242>
 8003234:	231b      	movs	r3, #27
 8003236:	2220      	movs	r2, #32
 8003238:	189b      	adds	r3, r3, r2
 800323a:	19db      	adds	r3, r3, r7
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e0a6      	b.n	8003390 <UART_SetConfig+0x390>
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a3e      	ldr	r2, [pc, #248]	; (8003340 <UART_SetConfig+0x340>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d13e      	bne.n	80032ca <UART_SetConfig+0x2ca>
 800324c:	4b40      	ldr	r3, [pc, #256]	; (8003350 <UART_SetConfig+0x350>)
 800324e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003250:	23c0      	movs	r3, #192	; 0xc0
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	4013      	ands	r3, r2
 8003256:	22c0      	movs	r2, #192	; 0xc0
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	4293      	cmp	r3, r2
 800325c:	d027      	beq.n	80032ae <UART_SetConfig+0x2ae>
 800325e:	22c0      	movs	r2, #192	; 0xc0
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	4293      	cmp	r3, r2
 8003264:	d82a      	bhi.n	80032bc <UART_SetConfig+0x2bc>
 8003266:	2280      	movs	r2, #128	; 0x80
 8003268:	0112      	lsls	r2, r2, #4
 800326a:	4293      	cmp	r3, r2
 800326c:	d011      	beq.n	8003292 <UART_SetConfig+0x292>
 800326e:	2280      	movs	r2, #128	; 0x80
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	4293      	cmp	r3, r2
 8003274:	d822      	bhi.n	80032bc <UART_SetConfig+0x2bc>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <UART_SetConfig+0x284>
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	00d2      	lsls	r2, r2, #3
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <UART_SetConfig+0x2a0>
 8003282:	e01b      	b.n	80032bc <UART_SetConfig+0x2bc>
 8003284:	231b      	movs	r3, #27
 8003286:	2220      	movs	r2, #32
 8003288:	189b      	adds	r3, r3, r2
 800328a:	19db      	adds	r3, r3, r7
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e07e      	b.n	8003390 <UART_SetConfig+0x390>
 8003292:	231b      	movs	r3, #27
 8003294:	2220      	movs	r2, #32
 8003296:	189b      	adds	r3, r3, r2
 8003298:	19db      	adds	r3, r3, r7
 800329a:	2202      	movs	r2, #2
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e077      	b.n	8003390 <UART_SetConfig+0x390>
 80032a0:	231b      	movs	r3, #27
 80032a2:	2220      	movs	r2, #32
 80032a4:	189b      	adds	r3, r3, r2
 80032a6:	19db      	adds	r3, r3, r7
 80032a8:	2204      	movs	r2, #4
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e070      	b.n	8003390 <UART_SetConfig+0x390>
 80032ae:	231b      	movs	r3, #27
 80032b0:	2220      	movs	r2, #32
 80032b2:	189b      	adds	r3, r3, r2
 80032b4:	19db      	adds	r3, r3, r7
 80032b6:	2208      	movs	r2, #8
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e069      	b.n	8003390 <UART_SetConfig+0x390>
 80032bc:	231b      	movs	r3, #27
 80032be:	2220      	movs	r2, #32
 80032c0:	189b      	adds	r3, r3, r2
 80032c2:	19db      	adds	r3, r3, r7
 80032c4:	2210      	movs	r2, #16
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e062      	b.n	8003390 <UART_SetConfig+0x390>
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <UART_SetConfig+0x344>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d157      	bne.n	8003384 <UART_SetConfig+0x384>
 80032d4:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <UART_SetConfig+0x350>)
 80032d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032d8:	23c0      	movs	r3, #192	; 0xc0
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4013      	ands	r3, r2
 80032de:	22c0      	movs	r2, #192	; 0xc0
 80032e0:	0092      	lsls	r2, r2, #2
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d040      	beq.n	8003368 <UART_SetConfig+0x368>
 80032e6:	22c0      	movs	r2, #192	; 0xc0
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d843      	bhi.n	8003376 <UART_SetConfig+0x376>
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	0092      	lsls	r2, r2, #2
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d011      	beq.n	800331a <UART_SetConfig+0x31a>
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	0092      	lsls	r2, r2, #2
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d83b      	bhi.n	8003376 <UART_SetConfig+0x376>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <UART_SetConfig+0x30c>
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	0052      	lsls	r2, r2, #1
 8003306:	4293      	cmp	r3, r2
 8003308:	d00e      	beq.n	8003328 <UART_SetConfig+0x328>
 800330a:	e034      	b.n	8003376 <UART_SetConfig+0x376>
 800330c:	231b      	movs	r3, #27
 800330e:	2220      	movs	r2, #32
 8003310:	189b      	adds	r3, r3, r2
 8003312:	19db      	adds	r3, r3, r7
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e03a      	b.n	8003390 <UART_SetConfig+0x390>
 800331a:	231b      	movs	r3, #27
 800331c:	2220      	movs	r2, #32
 800331e:	189b      	adds	r3, r3, r2
 8003320:	19db      	adds	r3, r3, r7
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e033      	b.n	8003390 <UART_SetConfig+0x390>
 8003328:	231b      	movs	r3, #27
 800332a:	2220      	movs	r2, #32
 800332c:	189b      	adds	r3, r3, r2
 800332e:	19db      	adds	r3, r3, r7
 8003330:	2204      	movs	r2, #4
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e02c      	b.n	8003390 <UART_SetConfig+0x390>
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	cfff69f3 	.word	0xcfff69f3
 800333c:	ffffcfff 	.word	0xffffcfff
 8003340:	40008000 	.word	0x40008000
 8003344:	40008400 	.word	0x40008400
 8003348:	11fff4ff 	.word	0x11fff4ff
 800334c:	40013800 	.word	0x40013800
 8003350:	40021000 	.word	0x40021000
 8003354:	40004400 	.word	0x40004400
 8003358:	40004800 	.word	0x40004800
 800335c:	40004c00 	.word	0x40004c00
 8003360:	40005000 	.word	0x40005000
 8003364:	40013c00 	.word	0x40013c00
 8003368:	231b      	movs	r3, #27
 800336a:	2220      	movs	r2, #32
 800336c:	189b      	adds	r3, r3, r2
 800336e:	19db      	adds	r3, r3, r7
 8003370:	2208      	movs	r2, #8
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e00c      	b.n	8003390 <UART_SetConfig+0x390>
 8003376:	231b      	movs	r3, #27
 8003378:	2220      	movs	r2, #32
 800337a:	189b      	adds	r3, r3, r2
 800337c:	19db      	adds	r3, r3, r7
 800337e:	2210      	movs	r2, #16
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e005      	b.n	8003390 <UART_SetConfig+0x390>
 8003384:	231b      	movs	r3, #27
 8003386:	2220      	movs	r2, #32
 8003388:	189b      	adds	r3, r3, r2
 800338a:	19db      	adds	r3, r3, r7
 800338c:	2210      	movs	r2, #16
 800338e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4ac1      	ldr	r2, [pc, #772]	; (800369c <UART_SetConfig+0x69c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d005      	beq.n	80033a6 <UART_SetConfig+0x3a6>
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4ac0      	ldr	r2, [pc, #768]	; (80036a0 <UART_SetConfig+0x6a0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d000      	beq.n	80033a6 <UART_SetConfig+0x3a6>
 80033a4:	e093      	b.n	80034ce <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a6:	231b      	movs	r3, #27
 80033a8:	2220      	movs	r2, #32
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	19db      	adds	r3, r3, r7
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d015      	beq.n	80033e0 <UART_SetConfig+0x3e0>
 80033b4:	dc18      	bgt.n	80033e8 <UART_SetConfig+0x3e8>
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d00d      	beq.n	80033d6 <UART_SetConfig+0x3d6>
 80033ba:	dc15      	bgt.n	80033e8 <UART_SetConfig+0x3e8>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <UART_SetConfig+0x3c6>
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d005      	beq.n	80033d0 <UART_SetConfig+0x3d0>
 80033c4:	e010      	b.n	80033e8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c6:	f7fe ff97 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 80033ca:	0003      	movs	r3, r0
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ce:	e014      	b.n	80033fa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d0:	4bb4      	ldr	r3, [pc, #720]	; (80036a4 <UART_SetConfig+0x6a4>)
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033d4:	e011      	b.n	80033fa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d6:	f7fe ff03 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 80033da:	0003      	movs	r3, r0
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033de:	e00c      	b.n	80033fa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033e6:	e008      	b.n	80033fa <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033ec:	231a      	movs	r3, #26
 80033ee:	2220      	movs	r2, #32
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
        break;
 80033f8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d100      	bne.n	8003402 <UART_SetConfig+0x402>
 8003400:	e135      	b.n	800366e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003406:	4ba8      	ldr	r3, [pc, #672]	; (80036a8 <UART_SetConfig+0x6a8>)
 8003408:	0052      	lsls	r2, r2, #1
 800340a:	5ad3      	ldrh	r3, [r2, r3]
 800340c:	0019      	movs	r1, r3
 800340e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003410:	f7fc fe78 	bl	8000104 <__udivsi3>
 8003414:	0003      	movs	r3, r0
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	0013      	movs	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	189b      	adds	r3, r3, r2
 8003422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003424:	429a      	cmp	r2, r3
 8003426:	d305      	bcc.n	8003434 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800342e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003430:	429a      	cmp	r2, r3
 8003432:	d906      	bls.n	8003442 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003434:	231a      	movs	r3, #26
 8003436:	2220      	movs	r2, #32
 8003438:	189b      	adds	r3, r3, r2
 800343a:	19db      	adds	r3, r3, r7
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	e044      	b.n	80034cc <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800344e:	4b96      	ldr	r3, [pc, #600]	; (80036a8 <UART_SetConfig+0x6a8>)
 8003450:	0052      	lsls	r2, r2, #1
 8003452:	5ad3      	ldrh	r3, [r2, r3]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	69b8      	ldr	r0, [r7, #24]
 8003460:	69f9      	ldr	r1, [r7, #28]
 8003462:	f7fc ffc5 	bl	80003f0 <__aeabi_uldivmod>
 8003466:	0002      	movs	r2, r0
 8003468:	000b      	movs	r3, r1
 800346a:	0e11      	lsrs	r1, r2, #24
 800346c:	021d      	lsls	r5, r3, #8
 800346e:	430d      	orrs	r5, r1
 8003470:	0214      	lsls	r4, r2, #8
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	1900      	adds	r0, r0, r4
 8003484:	4169      	adcs	r1, r5
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	2300      	movs	r3, #0
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f7fc ffac 	bl	80003f0 <__aeabi_uldivmod>
 8003498:	0002      	movs	r2, r0
 800349a:	000b      	movs	r3, r1
 800349c:	0013      	movs	r3, r2
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a2:	23c0      	movs	r3, #192	; 0xc0
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d309      	bcc.n	80034be <UART_SetConfig+0x4be>
 80034aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	035b      	lsls	r3, r3, #13
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d204      	bcs.n	80034be <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	e006      	b.n	80034cc <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80034be:	231a      	movs	r3, #26
 80034c0:	2220      	movs	r2, #32
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	19db      	adds	r3, r3, r7
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80034ca:	e0d0      	b.n	800366e <UART_SetConfig+0x66e>
 80034cc:	e0cf      	b.n	800366e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d000      	beq.n	80034dc <UART_SetConfig+0x4dc>
 80034da:	e070      	b.n	80035be <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80034dc:	231b      	movs	r3, #27
 80034de:	2220      	movs	r2, #32
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	19db      	adds	r3, r3, r7
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d015      	beq.n	8003516 <UART_SetConfig+0x516>
 80034ea:	dc18      	bgt.n	800351e <UART_SetConfig+0x51e>
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d00d      	beq.n	800350c <UART_SetConfig+0x50c>
 80034f0:	dc15      	bgt.n	800351e <UART_SetConfig+0x51e>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <UART_SetConfig+0x4fc>
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d005      	beq.n	8003506 <UART_SetConfig+0x506>
 80034fa:	e010      	b.n	800351e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034fc:	f7fe fefc 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8003500:	0003      	movs	r3, r0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003504:	e014      	b.n	8003530 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <UART_SetConfig+0x6a4>)
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800350a:	e011      	b.n	8003530 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800350c:	f7fe fe68 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8003510:	0003      	movs	r3, r0
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003514:	e00c      	b.n	8003530 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800351c:	e008      	b.n	8003530 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003522:	231a      	movs	r3, #26
 8003524:	2220      	movs	r2, #32
 8003526:	189b      	adds	r3, r3, r2
 8003528:	19db      	adds	r3, r3, r7
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
        break;
 800352e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003532:	2b00      	cmp	r3, #0
 8003534:	d100      	bne.n	8003538 <UART_SetConfig+0x538>
 8003536:	e09a      	b.n	800366e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800353c:	4b5a      	ldr	r3, [pc, #360]	; (80036a8 <UART_SetConfig+0x6a8>)
 800353e:	0052      	lsls	r2, r2, #1
 8003540:	5ad3      	ldrh	r3, [r2, r3]
 8003542:	0019      	movs	r1, r3
 8003544:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003546:	f7fc fddd 	bl	8000104 <__udivsi3>
 800354a:	0003      	movs	r3, r0
 800354c:	005a      	lsls	r2, r3, #1
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	18d2      	adds	r2, r2, r3
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	0019      	movs	r1, r3
 800355c:	0010      	movs	r0, r2
 800355e:	f7fc fdd1 	bl	8000104 <__udivsi3>
 8003562:	0003      	movs	r3, r0
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	2b0f      	cmp	r3, #15
 800356a:	d921      	bls.n	80035b0 <UART_SetConfig+0x5b0>
 800356c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	025b      	lsls	r3, r3, #9
 8003572:	429a      	cmp	r2, r3
 8003574:	d21c      	bcs.n	80035b0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	b29a      	uxth	r2, r3
 800357a:	200e      	movs	r0, #14
 800357c:	2420      	movs	r4, #32
 800357e:	1903      	adds	r3, r0, r4
 8003580:	19db      	adds	r3, r3, r7
 8003582:	210f      	movs	r1, #15
 8003584:	438a      	bics	r2, r1
 8003586:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	b29b      	uxth	r3, r3
 800358e:	2207      	movs	r2, #7
 8003590:	4013      	ands	r3, r2
 8003592:	b299      	uxth	r1, r3
 8003594:	1903      	adds	r3, r0, r4
 8003596:	19db      	adds	r3, r3, r7
 8003598:	1902      	adds	r2, r0, r4
 800359a:	19d2      	adds	r2, r2, r7
 800359c:	8812      	ldrh	r2, [r2, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	1902      	adds	r2, r0, r4
 80035a8:	19d2      	adds	r2, r2, r7
 80035aa:	8812      	ldrh	r2, [r2, #0]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	e05e      	b.n	800366e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80035b0:	231a      	movs	r3, #26
 80035b2:	2220      	movs	r2, #32
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	19db      	adds	r3, r3, r7
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e057      	b.n	800366e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035be:	231b      	movs	r3, #27
 80035c0:	2220      	movs	r2, #32
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	19db      	adds	r3, r3, r7
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d015      	beq.n	80035f8 <UART_SetConfig+0x5f8>
 80035cc:	dc18      	bgt.n	8003600 <UART_SetConfig+0x600>
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d00d      	beq.n	80035ee <UART_SetConfig+0x5ee>
 80035d2:	dc15      	bgt.n	8003600 <UART_SetConfig+0x600>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <UART_SetConfig+0x5de>
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d005      	beq.n	80035e8 <UART_SetConfig+0x5e8>
 80035dc:	e010      	b.n	8003600 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035de:	f7fe fe8b 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 80035e2:	0003      	movs	r3, r0
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035e6:	e014      	b.n	8003612 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <UART_SetConfig+0x6a4>)
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035ec:	e011      	b.n	8003612 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7fe fdf7 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 80035f2:	0003      	movs	r3, r0
 80035f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035f6:	e00c      	b.n	8003612 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035fe:	e008      	b.n	8003612 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003604:	231a      	movs	r3, #26
 8003606:	2220      	movs	r2, #32
 8003608:	189b      	adds	r3, r3, r2
 800360a:	19db      	adds	r3, r3, r7
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
        break;
 8003610:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02a      	beq.n	800366e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800361c:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <UART_SetConfig+0x6a8>)
 800361e:	0052      	lsls	r2, r2, #1
 8003620:	5ad3      	ldrh	r3, [r2, r3]
 8003622:	0019      	movs	r1, r3
 8003624:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003626:	f7fc fd6d 	bl	8000104 <__udivsi3>
 800362a:	0003      	movs	r3, r0
 800362c:	001a      	movs	r2, r3
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	18d2      	adds	r2, r2, r3
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	0019      	movs	r1, r3
 800363c:	0010      	movs	r0, r2
 800363e:	f7fc fd61 	bl	8000104 <__udivsi3>
 8003642:	0003      	movs	r3, r0
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	2b0f      	cmp	r3, #15
 800364a:	d90a      	bls.n	8003662 <UART_SetConfig+0x662>
 800364c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	025b      	lsls	r3, r3, #9
 8003652:	429a      	cmp	r2, r3
 8003654:	d205      	bcs.n	8003662 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	b29a      	uxth	r2, r3
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	e005      	b.n	800366e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003662:	231a      	movs	r3, #26
 8003664:	2220      	movs	r2, #32
 8003666:	189b      	adds	r3, r3, r2
 8003668:	19db      	adds	r3, r3, r7
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	226a      	movs	r2, #106	; 0x6a
 8003672:	2101      	movs	r1, #1
 8003674:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	2268      	movs	r2, #104	; 0x68
 800367a:	2101      	movs	r1, #1
 800367c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	2200      	movs	r2, #0
 8003682:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	2200      	movs	r2, #0
 8003688:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800368a:	231a      	movs	r3, #26
 800368c:	2220      	movs	r2, #32
 800368e:	189b      	adds	r3, r3, r2
 8003690:	19db      	adds	r3, r3, r7
 8003692:	781b      	ldrb	r3, [r3, #0]
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b010      	add	sp, #64	; 0x40
 800369a:	bdb0      	pop	{r4, r5, r7, pc}
 800369c:	40008000 	.word	0x40008000
 80036a0:	40008400 	.word	0x40008400
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	0800407c 	.word	0x0800407c

080036ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	2201      	movs	r2, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <UART_AdvFeatureConfig+0x144>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d00b      	beq.n	80036f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4a43      	ldr	r2, [pc, #268]	; (80037f4 <UART_AdvFeatureConfig+0x148>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	0019      	movs	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	2204      	movs	r2, #4
 80036fe:	4013      	ands	r3, r2
 8003700:	d00b      	beq.n	800371a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a3b      	ldr	r2, [pc, #236]	; (80037f8 <UART_AdvFeatureConfig+0x14c>)
 800370a:	4013      	ands	r3, r2
 800370c:	0019      	movs	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	2208      	movs	r2, #8
 8003720:	4013      	ands	r3, r2
 8003722:	d00b      	beq.n	800373c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4a34      	ldr	r2, [pc, #208]	; (80037fc <UART_AdvFeatureConfig+0x150>)
 800372c:	4013      	ands	r3, r2
 800372e:	0019      	movs	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	2210      	movs	r2, #16
 8003742:	4013      	ands	r3, r2
 8003744:	d00b      	beq.n	800375e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a2c      	ldr	r2, [pc, #176]	; (8003800 <UART_AdvFeatureConfig+0x154>)
 800374e:	4013      	ands	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	2220      	movs	r2, #32
 8003764:	4013      	ands	r3, r2
 8003766:	d00b      	beq.n	8003780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4a25      	ldr	r2, [pc, #148]	; (8003804 <UART_AdvFeatureConfig+0x158>)
 8003770:	4013      	ands	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	4013      	ands	r3, r2
 8003788:	d01d      	beq.n	80037c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <UART_AdvFeatureConfig+0x15c>)
 8003792:	4013      	ands	r3, r2
 8003794:	0019      	movs	r1, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	035b      	lsls	r3, r3, #13
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d10b      	bne.n	80037c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4a15      	ldr	r2, [pc, #84]	; (800380c <UART_AdvFeatureConfig+0x160>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	0019      	movs	r1, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	2280      	movs	r2, #128	; 0x80
 80037cc:	4013      	ands	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <UART_AdvFeatureConfig+0x164>)
 80037d8:	4013      	ands	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	fffdffff 	.word	0xfffdffff
 80037f4:	fffeffff 	.word	0xfffeffff
 80037f8:	fffbffff 	.word	0xfffbffff
 80037fc:	ffff7fff 	.word	0xffff7fff
 8003800:	ffffefff 	.word	0xffffefff
 8003804:	ffffdfff 	.word	0xffffdfff
 8003808:	ffefffff 	.word	0xffefffff
 800380c:	ff9fffff 	.word	0xff9fffff
 8003810:	fff7ffff 	.word	0xfff7ffff

08003814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	228c      	movs	r2, #140	; 0x8c
 8003820:	2100      	movs	r1, #0
 8003822:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003824:	f7fd f9fa 	bl	8000c1c <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2208      	movs	r2, #8
 8003834:	4013      	ands	r3, r2
 8003836:	2b08      	cmp	r3, #8
 8003838:	d10c      	bne.n	8003854 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	0391      	lsls	r1, r2, #14
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <UART_CheckIdleState+0x90>)
 8003844:	9200      	str	r2, [sp, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	f000 f82e 	bl	80038a8 <UART_WaitOnFlagUntilTimeout>
 800384c:	1e03      	subs	r3, r0, #0
 800384e:	d001      	beq.n	8003854 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e023      	b.n	800389c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2204      	movs	r2, #4
 800385c:	4013      	ands	r3, r2
 800385e:	2b04      	cmp	r3, #4
 8003860:	d10c      	bne.n	800387c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2280      	movs	r2, #128	; 0x80
 8003866:	03d1      	lsls	r1, r2, #15
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <UART_CheckIdleState+0x90>)
 800386c:	9200      	str	r2, [sp, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	f000 f81a 	bl	80038a8 <UART_WaitOnFlagUntilTimeout>
 8003874:	1e03      	subs	r3, r0, #0
 8003876:	d001      	beq.n	800387c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e00f      	b.n	800389c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2284      	movs	r2, #132	; 0x84
 8003880:	2120      	movs	r1, #32
 8003882:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2288      	movs	r2, #136	; 0x88
 8003888:	2120      	movs	r1, #32
 800388a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	2100      	movs	r1, #0
 8003898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b004      	add	sp, #16
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	01ffffff 	.word	0x01ffffff

080038a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b094      	sub	sp, #80	; 0x50
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	1dfb      	adds	r3, r7, #7
 80038b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b8:	e0a7      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038bc:	3301      	adds	r3, #1
 80038be:	d100      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80038c0:	e0a3      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fd f9ab 	bl	8000c1c <HAL_GetTick>
 80038c6:	0002      	movs	r2, r0
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d13f      	bne.n	8003958 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d8:	f3ef 8310 	mrs	r3, PRIMASK
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038e0:	647b      	str	r3, [r7, #68]	; 0x44
 80038e2:	2301      	movs	r3, #1
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	494e      	ldr	r1, [pc, #312]	; (8003a34 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80038fa:	400a      	ands	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800390a:	f3ef 8310 	mrs	r3, PRIMASK
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	643b      	str	r3, [r7, #64]	; 0x40
 8003914:	2301      	movs	r3, #1
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	f383 8810 	msr	PRIMASK, r3
}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2101      	movs	r1, #1
 800392c:	438a      	bics	r2, r1
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2284      	movs	r2, #132	; 0x84
 8003940:	2120      	movs	r1, #32
 8003942:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2288      	movs	r2, #136	; 0x88
 8003948:	2120      	movs	r1, #32
 800394a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	2100      	movs	r1, #0
 8003952:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e069      	b.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2204      	movs	r2, #4
 8003960:	4013      	ands	r3, r2
 8003962:	d052      	beq.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	401a      	ands	r2, r3
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	429a      	cmp	r2, r3
 8003976:	d148      	bne.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2280      	movs	r2, #128	; 0x80
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003982:	f3ef 8310 	mrs	r3, PRIMASK
 8003986:	613b      	str	r3, [r7, #16]
  return(result);
 8003988:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800398a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800398c:	2301      	movs	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4924      	ldr	r1, [pc, #144]	; (8003a34 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80039a4:	400a      	ands	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f383 8810 	msr	PRIMASK, r3
}
 80039b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b4:	f3ef 8310 	mrs	r3, PRIMASK
 80039b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80039ba:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80039be:	2301      	movs	r3, #1
 80039c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f383 8810 	msr	PRIMASK, r3
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	438a      	bics	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f383 8810 	msr	PRIMASK, r3
}
 80039e4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2284      	movs	r2, #132	; 0x84
 80039ea:	2120      	movs	r1, #32
 80039ec:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2288      	movs	r2, #136	; 0x88
 80039f2:	2120      	movs	r1, #32
 80039f4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	228c      	movs	r2, #140	; 0x8c
 80039fa:	2120      	movs	r1, #32
 80039fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	2100      	movs	r1, #0
 8003a04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e010      	b.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	4013      	ands	r3, r2
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	425a      	negs	r2, r3
 8003a1a:	4153      	adcs	r3, r2
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	001a      	movs	r2, r3
 8003a20:	1dfb      	adds	r3, r7, #7
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d100      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x182>
 8003a28:	e747      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b014      	add	sp, #80	; 0x50
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	fffffe5f 	.word	0xfffffe5f

08003a38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a40:	f3ef 8310 	mrs	r3, PRIMASK
 8003a44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a46:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f383 8810 	msr	PRIMASK, r3
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	21c0      	movs	r1, #192	; 0xc0
 8003a62:	438a      	bics	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f383 8810 	msr	PRIMASK, r3
}
 8003a70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a72:	f3ef 8310 	mrs	r3, PRIMASK
 8003a76:	617b      	str	r3, [r7, #20]
  return(result);
 8003a78:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003a7a:	623b      	str	r3, [r7, #32]
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <UART_EndTxTransfer+0x7c>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f383 8810 	msr	PRIMASK, r3
}
 8003aa2:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2284      	movs	r2, #132	; 0x84
 8003aa8:	2120      	movs	r1, #32
 8003aaa:	5099      	str	r1, [r3, r2]
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b00a      	add	sp, #40	; 0x28
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	ff7fffff 	.word	0xff7fffff

08003ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08e      	sub	sp, #56	; 0x38
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ac6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aca:	2301      	movs	r3, #1
 8003acc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4926      	ldr	r1, [pc, #152]	; (8003b7c <UART_EndRxTransfer+0xc4>)
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f383 8810 	msr	PRIMASK, r3
}
 8003af0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af2:	f3ef 8310 	mrs	r3, PRIMASK
 8003af6:	623b      	str	r3, [r7, #32]
  return(result);
 8003af8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003afa:	633b      	str	r3, [r7, #48]	; 0x30
 8003afc:	2301      	movs	r3, #1
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f383 8810 	msr	PRIMASK, r3
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	491b      	ldr	r1, [pc, #108]	; (8003b80 <UART_EndRxTransfer+0xc8>)
 8003b14:	400a      	ands	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d118      	bne.n	8003b5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b36:	2301      	movs	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f383 8810 	msr	PRIMASK, r3
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2110      	movs	r1, #16
 8003b4e:	438a      	bics	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2288      	movs	r2, #136	; 0x88
 8003b62:	2120      	movs	r1, #32
 8003b64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b00e      	add	sp, #56	; 0x38
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	fffffedf 	.word	0xfffffedf
 8003b80:	effffffe 	.word	0xeffffffe

08003b84 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d135      	bne.n	8003c0a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	2256      	movs	r2, #86	; 0x56
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bac:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	438a      	bics	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bde:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
 8003be2:	2301      	movs	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f383 8810 	msr	PRIMASK, r3
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	e004      	b.n	8003c14 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7fc fd05 	bl	800061c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b00c      	add	sp, #48	; 0x30
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff f9cb 	bl	8002fc8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2284      	movs	r2, #132	; 0x84
 8003c4c:	589b      	ldr	r3, [r3, r2]
 8003c4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2288      	movs	r2, #136	; 0x88
 8003c54:	589b      	ldr	r3, [r3, r2]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2280      	movs	r2, #128	; 0x80
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b80      	cmp	r3, #128	; 0x80
 8003c64:	d10a      	bne.n	8003c7c <UART_DMAError+0x42>
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b21      	cmp	r3, #33	; 0x21
 8003c6a:	d107      	bne.n	8003c7c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2256      	movs	r2, #86	; 0x56
 8003c70:	2100      	movs	r1, #0
 8003c72:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff fede 	bl	8003a38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2240      	movs	r2, #64	; 0x40
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d10a      	bne.n	8003ca0 <UART_DMAError+0x66>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b22      	cmp	r3, #34	; 0x22
 8003c8e:	d107      	bne.n	8003ca0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	225e      	movs	r2, #94	; 0x5e
 8003c94:	2100      	movs	r1, #0
 8003c96:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7ff ff0c 	bl	8003ab8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	228c      	movs	r2, #140	; 0x8c
 8003ca4:	589b      	ldr	r3, [r3, r2]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	218c      	movs	r1, #140	; 0x8c
 8003cae:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7ff f990 	bl	8002fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b006      	add	sp, #24
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	225e      	movs	r2, #94	; 0x5e
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2256      	movs	r2, #86	; 0x56
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff f979 	bl	8002fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b004      	add	sp, #16
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	2301      	movs	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f383 8810 	msr	PRIMASK, r3
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2140      	movs	r1, #64	; 0x40
 8003d18:	438a      	bics	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2284      	movs	r2, #132	; 0x84
 8003d2c:	2120      	movs	r1, #32
 8003d2e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7fc fc6f 	bl	800061c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b006      	add	sp, #24
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b002      	add	sp, #8
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b002      	add	sp, #8
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b002      	add	sp, #8
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	5c9b      	ldrb	r3, [r3, r2]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_UARTEx_DisableFifoMode+0x16>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e027      	b.n	8003dde <HAL_UARTEx_DisableFifoMode+0x66>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2284      	movs	r2, #132	; 0x84
 8003d9a:	2124      	movs	r1, #36	; 0x24
 8003d9c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	438a      	bics	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a0b      	ldr	r2, [pc, #44]	; (8003de8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2284      	movs	r2, #132	; 0x84
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	2100      	movs	r1, #0
 8003dda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b004      	add	sp, #16
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	dfffffff 	.word	0xdfffffff

08003dec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2280      	movs	r2, #128	; 0x80
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e02e      	b.n	8003e62 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	2101      	movs	r1, #1
 8003e0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2284      	movs	r2, #132	; 0x84
 8003e10:	2124      	movs	r1, #36	; 0x24
 8003e12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2101      	movs	r1, #1
 8003e28:	438a      	bics	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	08d9      	lsrs	r1, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 f854 	bl	8003ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2284      	movs	r2, #132	; 0x84
 8003e54:	2120      	movs	r1, #32
 8003e56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2280      	movs	r2, #128	; 0x80
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	5c9b      	ldrb	r3, [r3, r2]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e02f      	b.n	8003ee4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	2101      	movs	r1, #1
 8003e8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2284      	movs	r2, #132	; 0x84
 8003e90:	2124      	movs	r1, #36	; 0x24
 8003e92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	; (8003eec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 f813 	bl	8003ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2284      	movs	r2, #132	; 0x84
 8003ed6:	2120      	movs	r1, #32
 8003ed8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	2100      	movs	r1, #0
 8003ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b004      	add	sp, #16
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	f1ffffff 	.word	0xf1ffffff

08003ef0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d108      	bne.n	8003f12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	226a      	movs	r2, #106	; 0x6a
 8003f04:	2101      	movs	r1, #1
 8003f06:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2268      	movs	r2, #104	; 0x68
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f10:	e043      	b.n	8003f9a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f12:	260f      	movs	r6, #15
 8003f14:	19bb      	adds	r3, r7, r6
 8003f16:	2208      	movs	r2, #8
 8003f18:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f1a:	200e      	movs	r0, #14
 8003f1c:	183b      	adds	r3, r7, r0
 8003f1e:	2208      	movs	r2, #8
 8003f20:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	0e5b      	lsrs	r3, r3, #25
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	240d      	movs	r4, #13
 8003f2e:	193b      	adds	r3, r7, r4
 8003f30:	2107      	movs	r1, #7
 8003f32:	400a      	ands	r2, r1
 8003f34:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	0f5b      	lsrs	r3, r3, #29
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	250c      	movs	r5, #12
 8003f42:	197b      	adds	r3, r7, r5
 8003f44:	2107      	movs	r1, #7
 8003f46:	400a      	ands	r2, r1
 8003f48:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f4a:	183b      	adds	r3, r7, r0
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	197a      	adds	r2, r7, r5
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	4914      	ldr	r1, [pc, #80]	; (8003fa4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f54:	5c8a      	ldrb	r2, [r1, r2]
 8003f56:	435a      	muls	r2, r3
 8003f58:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f5a:	197b      	adds	r3, r7, r5
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f62:	0019      	movs	r1, r3
 8003f64:	f7fc f958 	bl	8000218 <__divsi3>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	b299      	uxth	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	226a      	movs	r2, #106	; 0x6a
 8003f70:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f72:	19bb      	adds	r3, r7, r6
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	193a      	adds	r2, r7, r4
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	490a      	ldr	r1, [pc, #40]	; (8003fa4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f7c:	5c8a      	ldrb	r2, [r1, r2]
 8003f7e:	435a      	muls	r2, r3
 8003f80:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f82:	193b      	adds	r3, r7, r4
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	f7fc f944 	bl	8000218 <__divsi3>
 8003f90:	0003      	movs	r3, r0
 8003f92:	b299      	uxth	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2268      	movs	r2, #104	; 0x68
 8003f98:	5299      	strh	r1, [r3, r2]
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b005      	add	sp, #20
 8003fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	08004094 	.word	0x08004094
 8003fa8:	0800409c 	.word	0x0800409c

08003fac <__libc_init_array>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	2600      	movs	r6, #0
 8003fb0:	4d0c      	ldr	r5, [pc, #48]	; (8003fe4 <__libc_init_array+0x38>)
 8003fb2:	4c0d      	ldr	r4, [pc, #52]	; (8003fe8 <__libc_init_array+0x3c>)
 8003fb4:	1b64      	subs	r4, r4, r5
 8003fb6:	10a4      	asrs	r4, r4, #2
 8003fb8:	42a6      	cmp	r6, r4
 8003fba:	d109      	bne.n	8003fd0 <__libc_init_array+0x24>
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	f000 f821 	bl	8004004 <_init>
 8003fc2:	4d0a      	ldr	r5, [pc, #40]	; (8003fec <__libc_init_array+0x40>)
 8003fc4:	4c0a      	ldr	r4, [pc, #40]	; (8003ff0 <__libc_init_array+0x44>)
 8003fc6:	1b64      	subs	r4, r4, r5
 8003fc8:	10a4      	asrs	r4, r4, #2
 8003fca:	42a6      	cmp	r6, r4
 8003fcc:	d105      	bne.n	8003fda <__libc_init_array+0x2e>
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	00b3      	lsls	r3, r6, #2
 8003fd2:	58eb      	ldr	r3, [r5, r3]
 8003fd4:	4798      	blx	r3
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	e7ee      	b.n	8003fb8 <__libc_init_array+0xc>
 8003fda:	00b3      	lsls	r3, r6, #2
 8003fdc:	58eb      	ldr	r3, [r5, r3]
 8003fde:	4798      	blx	r3
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	e7f2      	b.n	8003fca <__libc_init_array+0x1e>
 8003fe4:	080040ac 	.word	0x080040ac
 8003fe8:	080040ac 	.word	0x080040ac
 8003fec:	080040ac 	.word	0x080040ac
 8003ff0:	080040b0 	.word	0x080040b0

08003ff4 <memset>:
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	1882      	adds	r2, r0, r2
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d100      	bne.n	8003ffe <memset+0xa>
 8003ffc:	4770      	bx	lr
 8003ffe:	7019      	strb	r1, [r3, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	e7f9      	b.n	8003ff8 <memset+0x4>

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
