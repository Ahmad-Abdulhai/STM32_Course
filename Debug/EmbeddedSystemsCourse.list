
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004898  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004954  08004954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049dc  080049dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049e4  080049e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08004a5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004a5c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c952  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d09  00000000  00000000  0002c9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b474  00000000  00000000  0002f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be31  00000000  00000000  0004ad64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b05c6  00000000  00000000  00056b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010715b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a4  00000000  00000000  001071ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800493c 	.word	0x0800493c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800493c 	.word	0x0800493c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <HAL_UART_RxCpltCallback>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
/*Receiving data interrupt callback
 * Once all the 1 byte have been received, an interrupt will trigger and the RX complete callback will be called.*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4b40      	ldr	r3, [pc, #256]	; (8000738 <HAL_UART_RxCpltCallback+0x10c>)
 8000638:	429a      	cmp	r2, r3
 800063a:	d000      	beq.n	800063e <HAL_UART_RxCpltCallback+0x12>
 800063c:	e078      	b.n	8000730 <HAL_UART_RxCpltCallback+0x104>
		/*Increase index of the rxData array with every byte received and print the received byte onrxData array */
		memcpy(rxData + indx, &temp, 1);
 800063e:	4b3f      	ldr	r3, [pc, #252]	; (800073c <HAL_UART_RxCpltCallback+0x110>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	001a      	movs	r2, r3
 8000644:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <HAL_UART_RxCpltCallback+0x114>)
 8000646:	18d3      	adds	r3, r2, r3
 8000648:	4a3e      	ldr	r2, [pc, #248]	; (8000744 <HAL_UART_RxCpltCallback+0x118>)
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	701a      	strb	r2, [r3, #0]
		/*echo transmit the received byte*/
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp),10);
 800064e:	493d      	ldr	r1, [pc, #244]	; (8000744 <HAL_UART_RxCpltCallback+0x118>)
 8000650:	4839      	ldr	r0, [pc, #228]	; (8000738 <HAL_UART_RxCpltCallback+0x10c>)
 8000652:	230a      	movs	r3, #10
 8000654:	2201      	movs	r2, #1
 8000656:	f002 f863 	bl	8002720 <HAL_UART_Transmit>
		++indx;
 800065a:	4b38      	ldr	r3, [pc, #224]	; (800073c <HAL_UART_RxCpltCallback+0x110>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b36      	ldr	r3, [pc, #216]	; (800073c <HAL_UART_RxCpltCallback+0x110>)
 8000664:	701a      	strb	r2, [r3, #0]
		/*Reset the index after reached 10 bytes received*/
		if (indx >= RX_DATA_BUFFER)
 8000666:	4b35      	ldr	r3, [pc, #212]	; (800073c <HAL_UART_RxCpltCallback+0x110>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b09      	cmp	r3, #9
 800066c:	d902      	bls.n	8000674 <HAL_UART_RxCpltCallback+0x48>
			indx = 0;
 800066e:	4b33      	ldr	r3, [pc, #204]	; (800073c <HAL_UART_RxCpltCallback+0x110>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
		/*Now the command has been fully received and ready for comparison and determination of the order  */
		if (temp == '\r') {
 8000674:	4b33      	ldr	r3, [pc, #204]	; (8000744 <HAL_UART_RxCpltCallback+0x118>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b0d      	cmp	r3, #13
 800067a:	d153      	bne.n	8000724 <HAL_UART_RxCpltCallback+0xf8>
			memcpy(command, rxData, indx);
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <HAL_UART_RxCpltCallback+0x110>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	001a      	movs	r2, r3
 8000682:	492f      	ldr	r1, [pc, #188]	; (8000740 <HAL_UART_RxCpltCallback+0x114>)
 8000684:	4b30      	ldr	r3, [pc, #192]	; (8000748 <HAL_UART_RxCpltCallback+0x11c>)
 8000686:	0018      	movs	r0, r3
 8000688:	f004 f934 	bl	80048f4 <memcpy>
			indx = 0;
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <HAL_UART_RxCpltCallback+0x110>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
			/*Compare the Received command*/
			if (!strncmp(command, LedOn, strlen(LedOn))) {
 8000692:	4b2e      	ldr	r3, [pc, #184]	; (800074c <HAL_UART_RxCpltCallback+0x120>)
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff fd35 	bl	8000104 <strlen>
 800069a:	0002      	movs	r2, r0
 800069c:	492b      	ldr	r1, [pc, #172]	; (800074c <HAL_UART_RxCpltCallback+0x120>)
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <HAL_UART_RxCpltCallback+0x11c>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f004 f938 	bl	8004916 <strncmp>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d112      	bne.n	80006d0 <HAL_UART_RxCpltCallback+0xa4>
				/*SET PC13 LED on board*/
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	019b      	lsls	r3, r3, #6
 80006ae:	4828      	ldr	r0, [pc, #160]	; (8000750 <HAL_UART_RxCpltCallback+0x124>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	0019      	movs	r1, r3
 80006b4:	f001 f82e 	bl	8001714 <HAL_GPIO_WritePin>
				/*Transmitting user message"LED is turned ON\r\n"*/
				HAL_UART_Transmit(&huart2, (uint8_t*) UserMSG[1], strlen(UserMSG[1]), 200);
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <HAL_UART_RxCpltCallback+0x128>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fd22 	bl	8000104 <strlen>
 80006c0:	0003      	movs	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4923      	ldr	r1, [pc, #140]	; (8000754 <HAL_UART_RxCpltCallback+0x128>)
 80006c6:	481c      	ldr	r0, [pc, #112]	; (8000738 <HAL_UART_RxCpltCallback+0x10c>)
 80006c8:	23c8      	movs	r3, #200	; 0xc8
 80006ca:	f002 f829 	bl	8002720 <HAL_UART_Transmit>
 80006ce:	e029      	b.n	8000724 <HAL_UART_RxCpltCallback+0xf8>

			} else if (!strncmp(command, LedOff, strlen(LedOff))) {
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <HAL_UART_RxCpltCallback+0x12c>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff fd16 	bl	8000104 <strlen>
 80006d8:	0002      	movs	r2, r0
 80006da:	491f      	ldr	r1, [pc, #124]	; (8000758 <HAL_UART_RxCpltCallback+0x12c>)
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <HAL_UART_RxCpltCallback+0x11c>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f004 f919 	bl	8004916 <strncmp>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d112      	bne.n	800070e <HAL_UART_RxCpltCallback+0xe2>
				/*RESET PC13 LED on board*/
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	019b      	lsls	r3, r3, #6
 80006ec:	4818      	ldr	r0, [pc, #96]	; (8000750 <HAL_UART_RxCpltCallback+0x124>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	0019      	movs	r1, r3
 80006f2:	f001 f80f 	bl	8001714 <HAL_GPIO_WritePin>
				/*Transmitting user message"LED is turned OFF\r\n"*/
				HAL_UART_Transmit(&huart2, (uint8_t*) UserMSG[2], strlen(UserMSG[2]), 200);
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <HAL_UART_RxCpltCallback+0x130>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff fd03 	bl	8000104 <strlen>
 80006fe:	0003      	movs	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	4916      	ldr	r1, [pc, #88]	; (800075c <HAL_UART_RxCpltCallback+0x130>)
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <HAL_UART_RxCpltCallback+0x10c>)
 8000706:	23c8      	movs	r3, #200	; 0xc8
 8000708:	f002 f80a 	bl	8002720 <HAL_UART_Transmit>
 800070c:	e00a      	b.n	8000724 <HAL_UART_RxCpltCallback+0xf8>

			} else {
				/*Transmitting user message"Not Recognized Command\r\n"*/
				HAL_UART_Transmit(&huart2, (uint8_t*) UserMSG[0], strlen(UserMSG[0]), 200);
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_UART_RxCpltCallback+0x134>)
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff fcf7 	bl	8000104 <strlen>
 8000716:	0003      	movs	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	4911      	ldr	r1, [pc, #68]	; (8000760 <HAL_UART_RxCpltCallback+0x134>)
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <HAL_UART_RxCpltCallback+0x10c>)
 800071e:	23c8      	movs	r3, #200	; 0xc8
 8000720:	f001 fffe 	bl	8002720 <HAL_UART_Transmit>
			}
		}
		/* The interrupt is disabled after each trigger, so we need to call the Receive_IT function again at the end of the callback.*/
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <HAL_UART_RxCpltCallback+0x118>)
 8000726:	4b04      	ldr	r3, [pc, #16]	; (8000738 <HAL_UART_RxCpltCallback+0x10c>)
 8000728:	2201      	movs	r2, #1
 800072a:	0018      	movs	r0, r3
 800072c:	f002 f8a4 	bl	8002878 <HAL_UART_Receive_IT>
	}
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000008c 	.word	0x2000008c
 800073c:	20000187 	.word	0x20000187
 8000740:	2000017c 	.word	0x2000017c
 8000744:	20000186 	.word	0x20000186
 8000748:	20000188 	.word	0x20000188
 800074c:	20000000 	.word	0x20000000
 8000750:	50000800 	.word	0x50000800
 8000754:	2000002b 	.word	0x2000002b
 8000758:	20000008 	.word	0x20000008
 800075c:	20000046 	.word	0x20000046
 8000760:	20000010 	.word	0x20000010

08000764 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000768:	f000 fa48 	bl	8000bfc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800076c:	f000 f812 	bl	8000794 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000770:	f000 f8da 	bl	8000928 <MX_GPIO_Init>
	MX_DMA_Init();
 8000774:	f000 f8ba 	bl	80008ec <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000778:	f000 f86a 	bl	8000850 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	/*Received data via UART2 in Interrupt mode*/
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 800077c:	4903      	ldr	r1, [pc, #12]	; (800078c <main+0x28>)
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <main+0x2c>)
 8000780:	2201      	movs	r2, #1
 8000782:	0018      	movs	r0, r3
 8000784:	f002 f878 	bl	8002878 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000788:	e7fe      	b.n	8000788 <main+0x24>
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000186 	.word	0x20000186
 8000790:	2000008c 	.word	0x2000008c

08000794 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b095      	sub	sp, #84	; 0x54
 8000798:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800079a:	2414      	movs	r4, #20
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	233c      	movs	r3, #60	; 0x3c
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f004 f8ae 	bl	8004906 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0018      	movs	r0, r3
 80007ae:	2310      	movs	r3, #16
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f004 f8a7 	bl	8004906 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 ffc7 	bl	8001750 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2202      	movs	r2, #2
 80007c6:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0052      	lsls	r2, r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007d0:	0021      	movs	r1, r4
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2240      	movs	r2, #64	; 0x40
 80007dc:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2202      	movs	r2, #2
 80007e2:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2202      	movs	r2, #2
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 9;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2209      	movs	r2, #9
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	0292      	lsls	r2, r2, #10
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0492      	lsls	r2, r2, #18
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	05d2      	lsls	r2, r2, #23
 800080c:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800080e:	187b      	adds	r3, r7, r1
 8000810:	0018      	movs	r0, r3
 8000812:	f000 ffe9 	bl	80017e8 <HAL_RCC_OscConfig>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x8a>
		Error_Handler();
 800081a:	f000 f8cb 	bl	80009b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2202      	movs	r2, #2
 8000828:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2101      	movs	r1, #1
 800083a:	0018      	movs	r0, r3
 800083c:	f001 fb34 	bl	8001ea8 <HAL_RCC_ClockConfig>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xb4>
		Error_Handler();
 8000844:	f000 f8b6 	bl	80009b4 <Error_Handler>
	}
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b015      	add	sp, #84	; 0x54
 800084e:	bd90      	pop	{r4, r7, pc}

08000850 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 8000856:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <MX_USART2_UART_Init+0x98>)
 8000858:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 800085c:	22e1      	movs	r2, #225	; 0xe1
 800085e:	0252      	lsls	r2, r2, #9
 8000860:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 800089a:	0018      	movs	r0, r3
 800089c:	f001 feea 	bl	8002674 <HAL_UART_Init>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 80008a4:	f000 f886 	bl	80009b4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	0018      	movs	r0, r3
 80008ae:	f003 ff1d 	bl	80046ec <HAL_UARTEx_SetTxFifoThreshold>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80008b6:	f000 f87d 	bl	80009b4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 80008bc:	2100      	movs	r1, #0
 80008be:	0018      	movs	r0, r3
 80008c0:	f003 ff54 	bl	800476c <HAL_UARTEx_SetRxFifoThreshold>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80008c8:	f000 f874 	bl	80009b4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f003 fed2 	bl	8004678 <HAL_UARTEx_DisableFifoMode>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80008d8:	f000 f86c 	bl	80009b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA_Init+0x38>)
 80008f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_DMA_Init+0x38>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	430a      	orrs	r2, r1
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_DMA_Init+0x38>)
 8000900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000902:	2201      	movs	r2, #1
 8000904:	4013      	ands	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	2009      	movs	r0, #9
 8000910:	f000 fabc 	bl	8000e8c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000914:	2009      	movs	r0, #9
 8000916:	f000 face 	bl	8000eb6 <HAL_NVIC_EnableIRQ>

}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40021000 	.word	0x40021000

08000928 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800092e:	240c      	movs	r4, #12
 8000930:	193b      	adds	r3, r7, r4
 8000932:	0018      	movs	r0, r3
 8000934:	2314      	movs	r3, #20
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f003 ffe4 	bl	8004906 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_GPIO_Init+0x84>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_GPIO_Init+0x84>)
 8000944:	2104      	movs	r1, #4
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_GPIO_Init+0x84>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094e:	2204      	movs	r2, #4
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_GPIO_Init+0x84>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_GPIO_Init+0x84>)
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	635a      	str	r2, [r3, #52]	; 0x34
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_GPIO_Init+0x84>)
 8000964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000966:	2201      	movs	r2, #1
 8000968:	4013      	ands	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	019b      	lsls	r3, r3, #6
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <MX_GPIO_Init+0x88>)
 8000974:	2200      	movs	r2, #0
 8000976:	0019      	movs	r1, r3
 8000978:	f000 fecc 	bl	8001714 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	0192      	lsls	r2, r2, #6
 8000982:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2201      	movs	r2, #1
 8000988:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	193b      	adds	r3, r7, r4
 8000998:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <MX_GPIO_Init+0x88>)
 800099a:	0019      	movs	r1, r3
 800099c:	0010      	movs	r0, r2
 800099e:	f000 fd4d 	bl	800143c <HAL_GPIO_Init>

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b009      	add	sp, #36	; 0x24
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000
 80009b0:	50000800 	.word	0x50000800

080009b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_MspInit+0x4c>)
 80009c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	641a      	str	r2, [r3, #64]	; 0x40
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0549      	lsls	r1, r1, #21
 80009e8:	430a      	orrs	r2, r1
 80009ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	055b      	lsls	r3, r3, #21
 80009f4:	4013      	ands	r3, r2
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009fa:	23c0      	movs	r3, #192	; 0xc0
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 f982 	bl	8000d08 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b09d      	sub	sp, #116	; 0x74
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	235c      	movs	r3, #92	; 0x5c
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2314      	movs	r3, #20
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f003 ff6f 	bl	8004906 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	2410      	movs	r4, #16
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	234c      	movs	r3, #76	; 0x4c
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f003 ff67 	bl	8004906 <memset>
  if(huart->Instance==USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a3b      	ldr	r2, [pc, #236]	; (8000b2c <HAL_UART_MspInit+0x11c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d16f      	bne.n	8000b22 <HAL_UART_MspInit+0x112>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2202      	movs	r2, #2
 8000a46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 fbd3 	bl	80021fc <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a5a:	f7ff ffab 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0289      	lsls	r1, r1, #10
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	029b      	lsls	r3, r3, #10
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a92:	215c      	movs	r1, #92	; 0x5c
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2201      	movs	r2, #1
 8000ab0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	187a      	adds	r2, r7, r1
 8000ab4:	23a0      	movs	r3, #160	; 0xa0
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fcbe 	bl	800143c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_UART_MspInit+0x128>)
 8000ac4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ac8:	2235      	movs	r2, #53	; 0x35
 8000aca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ace:	2210      	movs	r2, #16
 8000ad0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000aec:	2220      	movs	r2, #32
 8000aee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 f9f9 	bl	8000ef0 <HAL_DMA_Init>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000b02:	f7ff ff57 	bl	80009b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000b0a:	679a      	str	r2, [r3, #120]	; 0x78
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	201c      	movs	r0, #28
 8000b18:	f000 f9b8 	bl	8000e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000b1c:	201c      	movs	r0, #28
 8000b1e:	f000 f9ca 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b01d      	add	sp, #116	; 0x74
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000
 8000b34:	2000011c 	.word	0x2000011c
 8000b38:	40020008 	.word	0x40020008

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f8b6 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <DMA1_Channel1_IRQHandler+0x14>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fb30 	bl	80011d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	2000011c 	.word	0x2000011c

08000b84 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <USART2_LPUART2_IRQHandler+0x14>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f001 fee4 	bl	8002958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	2000008c 	.word	0x2000008c

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000baa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bac:	f7ff fff6 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bd6:	f003 fe69 	bl	80048ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bda:	f7ff fdc3 	bl	8000764 <main>

08000bde <LoopForever>:

LoopForever:
  b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   r0, =_estack
 8000be0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bec:	080049ec 	.word	0x080049ec
  ldr r2, =_sbss
 8000bf0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf4:	20000194 	.word	0x20000194

08000bf8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_COMP_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x3c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Init+0x3c>)
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	0049      	lsls	r1, r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 f810 	bl	8000c3c <HAL_InitTick>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e001      	b.n	8000c2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff feca 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	781b      	ldrb	r3, [r3, #0]
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	230f      	movs	r3, #15
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_InitTick+0x88>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d02b      	beq.n	8000cac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_InitTick+0x8c>)
 8000c56:	681c      	ldr	r4, [r3, #0]
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_InitTick+0x88>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	23fa      	movs	r3, #250	; 0xfa
 8000c60:	0098      	lsls	r0, r3, #2
 8000c62:	f7ff fa57 	bl	8000114 <__udivsi3>
 8000c66:	0003      	movs	r3, r0
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	f7ff fa52 	bl	8000114 <__udivsi3>
 8000c70:	0003      	movs	r3, r0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f92f 	bl	8000ed6 <HAL_SYSTICK_Config>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d112      	bne.n	8000ca2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d80a      	bhi.n	8000c98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	2301      	movs	r3, #1
 8000c86:	425b      	negs	r3, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f8fe 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_InitTick+0x90>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e00d      	b.n	8000cb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e008      	b.n	8000cb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e003      	b.n	8000cb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cac:	230f      	movs	r3, #15
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b005      	add	sp, #20
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	2000006c 	.word	0x2000006c
 8000cc8:	20000064 	.word	0x20000064
 8000ccc:	20000068 	.word	0x20000068

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	001a      	movs	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	18d2      	adds	r2, r2, r3
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	2000006c 	.word	0x2000006c
 8000cf0:	20000190 	.word	0x20000190

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20000190 	.word	0x20000190

08000d08 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d16:	4013      	ands	r3, r2
 8000d18:	0019      	movs	r1, r3
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	fffff9ff 	.word	0xfffff9ff

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b7f      	cmp	r3, #127	; 0x7f
 8000d46:	d809      	bhi.n	8000d5c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	231f      	movs	r3, #31
 8000d50:	401a      	ands	r2, r3
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_EnableIRQ+0x30>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	4091      	lsls	r1, r2
 8000d58:	000a      	movs	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	0002      	movs	r2, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7c:	d828      	bhi.n	8000dd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7e:	4a2f      	ldr	r2, [pc, #188]	; (8000e3c <__NVIC_SetPriority+0xd4>)
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	33c0      	adds	r3, #192	; 0xc0
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	589b      	ldr	r3, [r3, r2]
 8000d8e:	1dfa      	adds	r2, r7, #7
 8000d90:	7812      	ldrb	r2, [r2, #0]
 8000d92:	0011      	movs	r1, r2
 8000d94:	2203      	movs	r2, #3
 8000d96:	400a      	ands	r2, r1
 8000d98:	00d2      	lsls	r2, r2, #3
 8000d9a:	21ff      	movs	r1, #255	; 0xff
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	000a      	movs	r2, r1
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	401a      	ands	r2, r3
 8000da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	019b      	lsls	r3, r3, #6
 8000daa:	22ff      	movs	r2, #255	; 0xff
 8000dac:	401a      	ands	r2, r3
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	0018      	movs	r0, r3
 8000db4:	2303      	movs	r3, #3
 8000db6:	4003      	ands	r3, r0
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	481f      	ldr	r0, [pc, #124]	; (8000e3c <__NVIC_SetPriority+0xd4>)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	33c0      	adds	r3, #192	; 0xc0
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dce:	e031      	b.n	8000e34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <__NVIC_SetPriority+0xd8>)
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	230f      	movs	r3, #15
 8000dda:	400b      	ands	r3, r1
 8000ddc:	3b08      	subs	r3, #8
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3306      	adds	r3, #6
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	18d3      	adds	r3, r2, r3
 8000de6:	3304      	adds	r3, #4
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1dfa      	adds	r2, r7, #7
 8000dec:	7812      	ldrb	r2, [r2, #0]
 8000dee:	0011      	movs	r1, r2
 8000df0:	2203      	movs	r2, #3
 8000df2:	400a      	ands	r2, r1
 8000df4:	00d2      	lsls	r2, r2, #3
 8000df6:	21ff      	movs	r1, #255	; 0xff
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	43d2      	mvns	r2, r2
 8000dfe:	401a      	ands	r2, r3
 8000e00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	019b      	lsls	r3, r3, #6
 8000e06:	22ff      	movs	r2, #255	; 0xff
 8000e08:	401a      	ands	r2, r3
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	0018      	movs	r0, r3
 8000e10:	2303      	movs	r3, #3
 8000e12:	4003      	ands	r3, r0
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <__NVIC_SetPriority+0xd8>)
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	001c      	movs	r4, r3
 8000e20:	230f      	movs	r3, #15
 8000e22:	4023      	ands	r3, r4
 8000e24:	3b08      	subs	r3, #8
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	3306      	adds	r3, #6
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	18c3      	adds	r3, r0, r3
 8000e30:	3304      	adds	r3, #4
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b003      	add	sp, #12
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	045b      	lsls	r3, r3, #17
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d301      	bcc.n	8000e5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e010      	b.n	8000e7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <SysTick_Config+0x44>)
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	3a01      	subs	r2, #1
 8000e62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e64:	2301      	movs	r3, #1
 8000e66:	425b      	negs	r3, r3
 8000e68:	2103      	movs	r1, #3
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff ff7c 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x44>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x44>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	0018      	movs	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	210f      	movs	r1, #15
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	1c02      	adds	r2, r0, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	0002      	movs	r2, r0
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ff33 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff ffaf 	bl	8000e44 <SysTick_Config>
 8000ee6:	0003      	movs	r3, r0
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e091      	b.n	8001026 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	001a      	movs	r2, r3
 8000f08:	4b49      	ldr	r3, [pc, #292]	; (8001030 <HAL_DMA_Init+0x140>)
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d810      	bhi.n	8000f30 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a48      	ldr	r2, [pc, #288]	; (8001034 <HAL_DMA_Init+0x144>)
 8000f14:	4694      	mov	ip, r2
 8000f16:	4463      	add	r3, ip
 8000f18:	2114      	movs	r1, #20
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f7ff f8fa 	bl	8000114 <__udivsi3>
 8000f20:	0003      	movs	r3, r0
 8000f22:	009a      	lsls	r2, r3, #2
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a43      	ldr	r2, [pc, #268]	; (8001038 <HAL_DMA_Init+0x148>)
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f2e:	e00f      	b.n	8000f50 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a41      	ldr	r2, [pc, #260]	; (800103c <HAL_DMA_Init+0x14c>)
 8000f36:	4694      	mov	ip, r2
 8000f38:	4463      	add	r3, ip
 8000f3a:	2114      	movs	r1, #20
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff f8e9 	bl	8000114 <__udivsi3>
 8000f42:	0003      	movs	r3, r0
 8000f44:	009a      	lsls	r2, r3, #2
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a3c      	ldr	r2, [pc, #240]	; (8001040 <HAL_DMA_Init+0x150>)
 8000f4e:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2225      	movs	r2, #37	; 0x25
 8000f54:	2102      	movs	r1, #2
 8000f56:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4938      	ldr	r1, [pc, #224]	; (8001044 <HAL_DMA_Init+0x154>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6819      	ldr	r1, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 f9dd 	bl	8001360 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	01db      	lsls	r3, r3, #7
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d102      	bne.n	8000fb8 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc0:	217f      	movs	r1, #127	; 0x7f
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000fce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d011      	beq.n	8000ffc <HAL_DMA_Init+0x10c>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d80d      	bhi.n	8000ffc <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fa06 	bl	80013f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	e008      	b.n	800100e <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2225      	movs	r2, #37	; 0x25
 8001018:	2101      	movs	r1, #1
 800101a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2224      	movs	r2, #36	; 0x24
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	0018      	movs	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40020407 	.word	0x40020407
 8001034:	bffdfff8 	.word	0xbffdfff8
 8001038:	40020000 	.word	0x40020000
 800103c:	bffdfbf8 	.word	0xbffdfbf8
 8001040:	40020400 	.word	0x40020400
 8001044:	ffff800f 	.word	0xffff800f

08001048 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e04f      	b.n	80010fa <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	; 0x25
 800105e:	5c9b      	ldrb	r3, [r3, r2]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d008      	beq.n	8001078 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2204      	movs	r2, #4
 800106a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2224      	movs	r2, #36	; 0x24
 8001070:	2100      	movs	r1, #0
 8001072:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e040      	b.n	80010fa <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	210e      	movs	r1, #14
 8001084:	438a      	bics	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001092:	491c      	ldr	r1, [pc, #112]	; (8001104 <HAL_DMA_Abort+0xbc>)
 8001094:	400a      	ands	r2, r1
 8001096:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2101      	movs	r1, #1
 80010a4:	438a      	bics	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	221c      	movs	r2, #28
 80010ae:	401a      	ands	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	2101      	movs	r1, #1
 80010b6:	4091      	lsls	r1, r2
 80010b8:	000a      	movs	r2, r1
 80010ba:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00c      	beq.n	80010e8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d8:	490a      	ldr	r1, [pc, #40]	; (8001104 <HAL_DMA_Abort+0xbc>)
 80010da:	400a      	ands	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2225      	movs	r2, #37	; 0x25
 80010ec:	2101      	movs	r1, #1
 80010ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	fffffeff 	.word	0xfffffeff

08001108 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001110:	210f      	movs	r1, #15
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2225      	movs	r2, #37	; 0x25
 800111c:	5c9b      	ldrb	r3, [r3, r2]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d006      	beq.n	8001132 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2204      	movs	r2, #4
 8001128:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e048      	b.n	80011c4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	210e      	movs	r1, #14
 800113e:	438a      	bics	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	438a      	bics	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115c:	491d      	ldr	r1, [pc, #116]	; (80011d4 <HAL_DMA_Abort_IT+0xcc>)
 800115e:	400a      	ands	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	221c      	movs	r2, #28
 8001168:	401a      	ands	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	2101      	movs	r1, #1
 8001170:	4091      	lsls	r1, r2
 8001172:	000a      	movs	r2, r1
 8001174:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800117e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00c      	beq.n	80011a2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001192:	4910      	ldr	r1, [pc, #64]	; (80011d4 <HAL_DMA_Abort_IT+0xcc>)
 8001194:	400a      	ands	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2225      	movs	r2, #37	; 0x25
 80011a6:	2101      	movs	r1, #1
 80011a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2224      	movs	r2, #36	; 0x24
 80011ae:	2100      	movs	r1, #0
 80011b0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	0010      	movs	r0, r2
 80011c2:	4798      	blx	r3
    }
  }
  return status;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	781b      	ldrb	r3, [r3, #0]
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	fffffeff 	.word	0xfffffeff

080011d8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	221c      	movs	r2, #28
 80011f6:	4013      	ands	r3, r2
 80011f8:	2204      	movs	r2, #4
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	d026      	beq.n	8001252 <HAL_DMA_IRQHandler+0x7a>
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2204      	movs	r2, #4
 8001208:	4013      	ands	r3, r2
 800120a:	d022      	beq.n	8001252 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2220      	movs	r2, #32
 8001214:	4013      	ands	r3, r2
 8001216:	d107      	bne.n	8001228 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2104      	movs	r1, #4
 8001224:	438a      	bics	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	221c      	movs	r2, #28
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	2104      	movs	r1, #4
 8001236:	4091      	lsls	r1, r2
 8001238:	000a      	movs	r2, r1
 800123a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	2b00      	cmp	r3, #0
 8001242:	d100      	bne.n	8001246 <HAL_DMA_IRQHandler+0x6e>
 8001244:	e080      	b.n	8001348 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	0010      	movs	r0, r2
 800124e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001250:	e07a      	b.n	8001348 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	221c      	movs	r2, #28
 8001258:	4013      	ands	r3, r2
 800125a:	2202      	movs	r2, #2
 800125c:	409a      	lsls	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4013      	ands	r3, r2
 8001264:	d03c      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x108>
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2202      	movs	r2, #2
 800126a:	4013      	ands	r3, r2
 800126c:	d038      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2220      	movs	r2, #32
 8001276:	4013      	ands	r3, r2
 8001278:	d10b      	bne.n	8001292 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	210a      	movs	r1, #10
 8001286:	438a      	bics	r2, r1
 8001288:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2225      	movs	r2, #37	; 0x25
 800128e:	2101      	movs	r1, #1
 8001290:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	001a      	movs	r2, r3
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_DMA_IRQHandler+0x17c>)
 800129a:	429a      	cmp	r2, r3
 800129c:	d909      	bls.n	80012b2 <HAL_DMA_IRQHandler+0xda>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	221c      	movs	r2, #28
 80012a4:	401a      	ands	r2, r3
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <HAL_DMA_IRQHandler+0x180>)
 80012a8:	2102      	movs	r1, #2
 80012aa:	4091      	lsls	r1, r2
 80012ac:	000a      	movs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	e008      	b.n	80012c4 <HAL_DMA_IRQHandler+0xec>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	221c      	movs	r2, #28
 80012b8:	401a      	ands	r2, r3
 80012ba:	4b28      	ldr	r3, [pc, #160]	; (800135c <HAL_DMA_IRQHandler+0x184>)
 80012bc:	2102      	movs	r1, #2
 80012be:	4091      	lsls	r1, r2
 80012c0:	000a      	movs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2224      	movs	r2, #36	; 0x24
 80012c8:	2100      	movs	r1, #0
 80012ca:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d039      	beq.n	8001348 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	0010      	movs	r0, r2
 80012dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80012de:	e033      	b.n	8001348 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	221c      	movs	r2, #28
 80012e6:	4013      	ands	r3, r2
 80012e8:	2208      	movs	r2, #8
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	d02a      	beq.n	800134a <HAL_DMA_IRQHandler+0x172>
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2208      	movs	r2, #8
 80012f8:	4013      	ands	r3, r2
 80012fa:	d026      	beq.n	800134a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	210e      	movs	r1, #14
 8001308:	438a      	bics	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	221c      	movs	r2, #28
 8001312:	401a      	ands	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	2101      	movs	r1, #1
 800131a:	4091      	lsls	r1, r2
 800131c:	000a      	movs	r2, r1
 800131e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2225      	movs	r2, #37	; 0x25
 800132a:	2101      	movs	r1, #1
 800132c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2224      	movs	r2, #36	; 0x24
 8001332:	2100      	movs	r1, #0
 8001334:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	0010      	movs	r0, r2
 8001346:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46c0      	nop			; (mov r8, r8)
}
 800134c:	46bd      	mov	sp, r7
 800134e:	b004      	add	sp, #16
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	40020080 	.word	0x40020080
 8001358:	40020400 	.word	0x40020400
 800135c:	40020000 	.word	0x40020000

08001360 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	001a      	movs	r2, r3
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001370:	429a      	cmp	r2, r3
 8001372:	d814      	bhi.n	800139e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800137e:	189a      	adds	r2, r3, r2
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	001a      	movs	r2, r3
 800138a:	23ff      	movs	r3, #255	; 0xff
 800138c:	4013      	ands	r3, r2
 800138e:	3b08      	subs	r3, #8
 8001390:	2114      	movs	r1, #20
 8001392:	0018      	movs	r0, r3
 8001394:	f7fe febe 	bl	8000114 <__udivsi3>
 8001398:	0003      	movs	r3, r0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e014      	b.n	80013c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4a11      	ldr	r2, [pc, #68]	; (80013ec <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80013a8:	189a      	adds	r2, r3, r2
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	001a      	movs	r2, r3
 80013b4:	23ff      	movs	r3, #255	; 0xff
 80013b6:	4013      	ands	r3, r2
 80013b8:	3b08      	subs	r3, #8
 80013ba:	2114      	movs	r1, #20
 80013bc:	0018      	movs	r0, r3
 80013be:	f7fe fea9 	bl	8000114 <__udivsi3>
 80013c2:	0003      	movs	r3, r0
 80013c4:	3307      	adds	r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80013cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	221f      	movs	r2, #31
 80013d2:	4013      	ands	r3, r2
 80013d4:	2201      	movs	r2, #1
 80013d6:	409a      	lsls	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b004      	add	sp, #16
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40020407 	.word	0x40020407
 80013e8:	40020800 	.word	0x40020800
 80013ec:	4002081c 	.word	0x4002081c
 80013f0:	40020880 	.word	0x40020880

080013f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	227f      	movs	r2, #127	; 0x7f
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800140a:	4694      	mov	ip, r2
 800140c:	4463      	add	r3, ip
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	001a      	movs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800141a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3b01      	subs	r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	4013      	ands	r3, r2
 8001424:	2201      	movs	r2, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b004      	add	sp, #16
 8001432:	bd80      	pop	{r7, pc}
 8001434:	1000823f 	.word	0x1000823f
 8001438:	40020940 	.word	0x40020940

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e14d      	b.n	80016e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4091      	lsls	r1, r2
 8001456:	000a      	movs	r2, r1
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d100      	bne.n	8001464 <HAL_GPIO_Init+0x28>
 8001462:	e13e      	b.n	80016e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	4013      	ands	r3, r2
 800146c:	2b01      	cmp	r3, #1
 800146e:	d005      	beq.n	800147c <HAL_GPIO_Init+0x40>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	4013      	ands	r3, r2
 8001478:	2b02      	cmp	r3, #2
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	409a      	lsls	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	43da      	mvns	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	409a      	lsls	r2, r3
 800149e:	0013      	movs	r3, r2
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	2201      	movs	r2, #1
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2203      	movs	r2, #3
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d017      	beq.n	800151a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	43da      	mvns	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	4013      	ands	r3, r2
 8001522:	2b02      	cmp	r3, #2
 8001524:	d123      	bne.n	800156e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	58d3      	ldr	r3, [r2, r3]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2207      	movs	r2, #7
 8001538:	4013      	ands	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2107      	movs	r1, #7
 8001552:	400b      	ands	r3, r1
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	6939      	ldr	r1, [r7, #16]
 800156c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	401a      	ands	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	23c0      	movs	r3, #192	; 0xc0
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	4013      	ands	r3, r2
 80015ac:	d100      	bne.n	80015b0 <HAL_GPIO_Init+0x174>
 80015ae:	e098      	b.n	80016e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015b0:	4a53      	ldr	r2, [pc, #332]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3318      	adds	r3, #24
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	589b      	ldr	r3, [r3, r2]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2203      	movs	r2, #3
 80015c2:	4013      	ands	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	220f      	movs	r2, #15
 80015c8:	409a      	lsls	r2, r3
 80015ca:	0013      	movs	r3, r2
 80015cc:	43da      	mvns	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	23a0      	movs	r3, #160	; 0xa0
 80015d8:	05db      	lsls	r3, r3, #23
 80015da:	429a      	cmp	r2, r3
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x1d6>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a48      	ldr	r2, [pc, #288]	; (8001704 <HAL_GPIO_Init+0x2c8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x1d2>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a47      	ldr	r2, [pc, #284]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x1ce>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a46      	ldr	r2, [pc, #280]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x1ca>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a45      	ldr	r2, [pc, #276]	; (8001710 <HAL_GPIO_Init+0x2d4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x1c6>
 80015fe:	2304      	movs	r3, #4
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x1d8>
 8001602:	2305      	movs	r3, #5
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x1d8>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x1d8>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x1d8>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x1d8>
 8001612:	2300      	movs	r3, #0
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	2103      	movs	r1, #3
 8001618:	400a      	ands	r2, r1
 800161a:	00d2      	lsls	r2, r2, #3
 800161c:	4093      	lsls	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001624:	4936      	ldr	r1, [pc, #216]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3318      	adds	r3, #24
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001632:	4b33      	ldr	r3, [pc, #204]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43da      	mvns	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	035b      	lsls	r3, r3, #13
 800164a:	4013      	ands	r3, r2
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43da      	mvns	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	039b      	lsls	r3, r3, #14
 8001674:	4013      	ands	r3, r2
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001686:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001688:	2384      	movs	r3, #132	; 0x84
 800168a:	58d3      	ldr	r3, [r2, r3]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43da      	mvns	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	029b      	lsls	r3, r3, #10
 80016a0:	4013      	ands	r3, r2
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ac:	4914      	ldr	r1, [pc, #80]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 80016ae:	2284      	movs	r2, #132	; 0x84
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	58d3      	ldr	r3, [r2, r3]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	025b      	lsls	r3, r3, #9
 80016ce:	4013      	ands	r3, r2
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016da:	4909      	ldr	r1, [pc, #36]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	40da      	lsrs	r2, r3
 80016f0:	1e13      	subs	r3, r2, #0
 80016f2:	d000      	beq.n	80016f6 <HAL_GPIO_Init+0x2ba>
 80016f4:	e6aa      	b.n	800144c <HAL_GPIO_Init+0x10>
  }
}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b006      	add	sp, #24
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021800 	.word	0x40021800
 8001704:	50000400 	.word	0x50000400
 8001708:	50000800 	.word	0x50000800
 800170c:	50000c00 	.word	0x50000c00
 8001710:	50001000 	.word	0x50001000

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	0008      	movs	r0, r1
 800171e:	0011      	movs	r1, r2
 8001720:	1cbb      	adds	r3, r7, #2
 8001722:	1c02      	adds	r2, r0, #0
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	1c7b      	adds	r3, r7, #1
 8001728:	1c0a      	adds	r2, r1, #0
 800172a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172c:	1c7b      	adds	r3, r7, #1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001734:	1cbb      	adds	r3, r7, #2
 8001736:	881a      	ldrh	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800173e:	1cbb      	adds	r3, r7, #2
 8001740:	881a      	ldrh	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800175e:	4013      	ands	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	429a      	cmp	r2, r3
 8001772:	d11f      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	0013      	movs	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	189b      	adds	r3, r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4912      	ldr	r1, [pc, #72]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001782:	0018      	movs	r0, r3
 8001784:	f7fe fcc6 	bl	8000114 <__udivsi3>
 8001788:	0003      	movs	r3, r0
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800178e:	e008      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3b01      	subs	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e001      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e009      	b.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	401a      	ands	r2, r3
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d0ed      	beq.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b004      	add	sp, #16
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40007000 	.word	0x40007000
 80017c4:	fffff9ff 	.word	0xfffff9ff
 80017c8:	20000064 	.word	0x20000064
 80017cc:	000f4240 	.word	0x000f4240

080017d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	23e0      	movs	r3, #224	; 0xe0
 80017da:	01db      	lsls	r3, r3, #7
 80017dc:	4013      	ands	r3, r2
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f000 fb50 	bl	8001e9c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	4013      	ands	r3, r2
 8001804:	d100      	bne.n	8001808 <HAL_RCC_OscConfig+0x20>
 8001806:	e07c      	b.n	8001902 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001808:	4bc3      	ldr	r3, [pc, #780]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2238      	movs	r2, #56	; 0x38
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001812:	4bc1      	ldr	r3, [pc, #772]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2203      	movs	r2, #3
 8001818:	4013      	ands	r3, r2
 800181a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b10      	cmp	r3, #16
 8001820:	d102      	bne.n	8001828 <HAL_RCC_OscConfig+0x40>
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d002      	beq.n	800182e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2b08      	cmp	r3, #8
 800182c:	d10b      	bne.n	8001846 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182e:	4bba      	ldr	r3, [pc, #744]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	029b      	lsls	r3, r3, #10
 8001836:	4013      	ands	r3, r2
 8001838:	d062      	beq.n	8001900 <HAL_RCC_OscConfig+0x118>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d15e      	bne.n	8001900 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e32a      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	025b      	lsls	r3, r3, #9
 800184e:	429a      	cmp	r2, r3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_OscConfig+0x7a>
 8001852:	4bb1      	ldr	r3, [pc, #708]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4bb0      	ldr	r3, [pc, #704]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0249      	lsls	r1, r1, #9
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e020      	b.n	80018a4 <HAL_RCC_OscConfig+0xbc>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	23a0      	movs	r3, #160	; 0xa0
 8001868:	02db      	lsls	r3, r3, #11
 800186a:	429a      	cmp	r2, r3
 800186c:	d10e      	bne.n	800188c <HAL_RCC_OscConfig+0xa4>
 800186e:	4baa      	ldr	r3, [pc, #680]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4ba9      	ldr	r3, [pc, #676]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	02c9      	lsls	r1, r1, #11
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	4ba6      	ldr	r3, [pc, #664]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4ba5      	ldr	r3, [pc, #660]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	0249      	lsls	r1, r1, #9
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e00b      	b.n	80018a4 <HAL_RCC_OscConfig+0xbc>
 800188c:	4ba2      	ldr	r3, [pc, #648]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4ba1      	ldr	r3, [pc, #644]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001892:	49a2      	ldr	r1, [pc, #648]	; (8001b1c <HAL_RCC_OscConfig+0x334>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	4b9f      	ldr	r3, [pc, #636]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b9e      	ldr	r3, [pc, #632]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800189e:	49a0      	ldr	r1, [pc, #640]	; (8001b20 <HAL_RCC_OscConfig+0x338>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d014      	beq.n	80018d6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa22 	bl	8000cf4 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b6:	f7ff fa1d 	bl	8000cf4 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	; 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e2e9      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c8:	4b93      	ldr	r3, [pc, #588]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	029b      	lsls	r3, r3, #10
 80018d0:	4013      	ands	r3, r2
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0xce>
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff fa0d 	bl	8000cf4 <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fa08 	bl	8000cf4 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e2d4      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f2:	4b89      	ldr	r3, [pc, #548]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	029b      	lsls	r3, r3, #10
 80018fa:	4013      	ands	r3, r2
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0xf8>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d100      	bne.n	800190e <HAL_RCC_OscConfig+0x126>
 800190c:	e099      	b.n	8001a42 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190e:	4b82      	ldr	r3, [pc, #520]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2238      	movs	r2, #56	; 0x38
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001918:	4b7f      	ldr	r3, [pc, #508]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b10      	cmp	r3, #16
 8001926:	d102      	bne.n	800192e <HAL_RCC_OscConfig+0x146>
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d002      	beq.n	8001934 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d135      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001934:	4b78      	ldr	r3, [pc, #480]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4013      	ands	r3, r2
 800193e:	d005      	beq.n	800194c <HAL_RCC_OscConfig+0x164>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e2a7      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b72      	ldr	r3, [pc, #456]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a74      	ldr	r2, [pc, #464]	; (8001b24 <HAL_RCC_OscConfig+0x33c>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	021a      	lsls	r2, r3, #8
 800195c:	4b6e      	ldr	r3, [pc, #440]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800195e:	430a      	orrs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d112      	bne.n	800198e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001968:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a6e      	ldr	r2, [pc, #440]	; (8001b28 <HAL_RCC_OscConfig+0x340>)
 800196e:	4013      	ands	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800197c:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0adb      	lsrs	r3, r3, #11
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	4a69      	ldr	r2, [pc, #420]	; (8001b2c <HAL_RCC_OscConfig+0x344>)
 8001988:	40da      	lsrs	r2, r3
 800198a:	4b69      	ldr	r3, [pc, #420]	; (8001b30 <HAL_RCC_OscConfig+0x348>)
 800198c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800198e:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <HAL_RCC_OscConfig+0x34c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0018      	movs	r0, r3
 8001994:	f7ff f952 	bl	8000c3c <HAL_InitTick>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d051      	beq.n	8001a40 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e27d      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d030      	beq.n	8001a0a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019a8:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a5e      	ldr	r2, [pc, #376]	; (8001b28 <HAL_RCC_OscConfig+0x340>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019bc:	4b56      	ldr	r3, [pc, #344]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b55      	ldr	r3, [pc, #340]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 80019c2:	2180      	movs	r1, #128	; 0x80
 80019c4:	0049      	lsls	r1, r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff f993 	bl	8000cf4 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff f98e 	bl	8000cf4 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e25a      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e6:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4013      	ands	r3, r2
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_RCC_OscConfig+0x33c>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	021a      	lsls	r2, r3, #8
 8001a02:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	e01b      	b.n	8001a42 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001a10:	4949      	ldr	r1, [pc, #292]	; (8001b38 <HAL_RCC_OscConfig+0x350>)
 8001a12:	400a      	ands	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff f96d 	bl	8000cf4 <HAL_GetTick>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff f968 	bl	8000cf4 <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e234      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x238>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a40:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2208      	movs	r2, #8
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d047      	beq.n	8001adc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a4c:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2238      	movs	r2, #56	; 0x38
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b18      	cmp	r3, #24
 8001a56:	d10a      	bne.n	8001a6e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d03c      	beq.n	8001adc <HAL_RCC_OscConfig+0x2f4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d138      	bne.n	8001adc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e216      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d019      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a76:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff f937 	bl	8000cf4 <HAL_GetTick>
 8001a86:	0003      	movs	r3, r0
 8001a88:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7ff f932 	bl	8000cf4 <HAL_GetTick>
 8001a90:	0002      	movs	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1fe      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d0f1      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2a4>
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001aac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	438a      	bics	r2, r1
 8001ab4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f91d 	bl	8000cf4 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f918 	bl	8000cf4 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1e4      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d1f1      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d100      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x300>
 8001ae6:	e0c7      	b.n	8001c78 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae8:	231f      	movs	r3, #31
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2238      	movs	r2, #56	; 0x38
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d11f      	bne.n	8001b3c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_OscConfig+0x330>)
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d100      	bne.n	8001b08 <HAL_RCC_OscConfig+0x320>
 8001b06:	e0b7      	b.n	8001c78 <HAL_RCC_OscConfig+0x490>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d000      	beq.n	8001b12 <HAL_RCC_OscConfig+0x32a>
 8001b10:	e0b2      	b.n	8001c78 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1c2      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	fffeffff 	.word	0xfffeffff
 8001b20:	fffbffff 	.word	0xfffbffff
 8001b24:	ffff80ff 	.word	0xffff80ff
 8001b28:	ffffc7ff 	.word	0xffffc7ff
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	20000064 	.word	0x20000064
 8001b34:	20000068 	.word	0x20000068
 8001b38:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b3c:	4bb5      	ldr	r3, [pc, #724]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	055b      	lsls	r3, r3, #21
 8001b44:	4013      	ands	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_OscConfig+0x364>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x366>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d011      	beq.n	8001b76 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4bb0      	ldr	r3, [pc, #704]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b56:	4baf      	ldr	r3, [pc, #700]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	0549      	lsls	r1, r1, #21
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b60:	4bac      	ldr	r3, [pc, #688]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	055b      	lsls	r3, r3, #21
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b6e:	231f      	movs	r3, #31
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b76:	4ba8      	ldr	r3, [pc, #672]	; (8001e18 <HAL_RCC_OscConfig+0x630>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d11a      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b82:	4ba5      	ldr	r3, [pc, #660]	; (8001e18 <HAL_RCC_OscConfig+0x630>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4ba4      	ldr	r3, [pc, #656]	; (8001e18 <HAL_RCC_OscConfig+0x630>)
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	0049      	lsls	r1, r1, #1
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b90:	f7ff f8b0 	bl	8000cf4 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7ff f8ab 	bl	8000cf4 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e177      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bac:	4b9a      	ldr	r3, [pc, #616]	; (8001e18 <HAL_RCC_OscConfig+0x630>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x3e6>
 8001bc0:	4b94      	ldr	r3, [pc, #592]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001bc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc4:	4b93      	ldr	r3, [pc, #588]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x420>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x408>
 8001bd6:	4b8f      	ldr	r3, [pc, #572]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bda:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001bdc:	2104      	movs	r1, #4
 8001bde:	430a      	orrs	r2, r1
 8001be0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001be2:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001be4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001be6:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	430a      	orrs	r2, r1
 8001bec:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0x420>
 8001bf0:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001bf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bf4:	4b87      	ldr	r3, [pc, #540]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bfc:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c00:	4b84      	ldr	r3, [pc, #528]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001c02:	2104      	movs	r1, #4
 8001c04:	438a      	bics	r2, r1
 8001c06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d014      	beq.n	8001c3a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f870 	bl	8000cf4 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff f86b 	bl	8000cf4 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a7d      	ldr	r2, [pc, #500]	; (8001e1c <HAL_RCC_OscConfig+0x634>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e136      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2e:	4b79      	ldr	r3, [pc, #484]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	2202      	movs	r2, #2
 8001c34:	4013      	ands	r3, r2
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x432>
 8001c38:	e013      	b.n	8001c62 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f85b 	bl	8000cf4 <HAL_GetTick>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c42:	e009      	b.n	8001c58 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7ff f856 	bl	8000cf4 <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	4a73      	ldr	r2, [pc, #460]	; (8001e1c <HAL_RCC_OscConfig+0x634>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e121      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c58:	4b6e      	ldr	r3, [pc, #440]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c62:	231f      	movs	r3, #31
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c6c:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c70:	4b68      	ldr	r3, [pc, #416]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001c72:	496b      	ldr	r1, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x638>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d039      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c8a:	4b62      	ldr	r3, [pc, #392]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001c90:	2180      	movs	r1, #128	; 0x80
 8001c92:	03c9      	lsls	r1, r1, #15
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff f82c 	bl	8000cf4 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca2:	f7ff f827 	bl	8000cf4 <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e0f3      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001cb4:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x4ba>
 8001cc0:	e019      	b.n	8001cf6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cc2:	4b54      	ldr	r3, [pc, #336]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001cc8:	4956      	ldr	r1, [pc, #344]	; (8001e24 <HAL_RCC_OscConfig+0x63c>)
 8001cca:	400a      	ands	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff f811 	bl	8000cf4 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd8:	f7ff f80c 	bl	8000cf4 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0d8      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cea:	4b4a      	ldr	r3, [pc, #296]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d100      	bne.n	8001d00 <HAL_RCC_OscConfig+0x518>
 8001cfe:	e0cc      	b.n	8001e9a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d00:	4b44      	ldr	r3, [pc, #272]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2238      	movs	r2, #56	; 0x38
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_OscConfig+0x526>
 8001d0c:	e07b      	b.n	8001e06 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d156      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d1c:	4942      	ldr	r1, [pc, #264]	; (8001e28 <HAL_RCC_OscConfig+0x640>)
 8001d1e:	400a      	ands	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7fe ffe7 	bl	8000cf4 <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7fe ffe2 	bl	8000cf4 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e0ae      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	049b      	lsls	r3, r3, #18
 8001d46:	4013      	ands	r3, r2
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	4a37      	ldr	r2, [pc, #220]	; (8001e2c <HAL_RCC_OscConfig+0x644>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	431a      	orrs	r2, r3
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	0449      	lsls	r1, r1, #17
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	0549      	lsls	r1, r1, #21
 8001d96:	430a      	orrs	r2, r1
 8001d98:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7fe ffab 	bl	8000cf4 <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe ffa6 	bl	8000cf4 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e072      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	049b      	lsls	r3, r3, #18
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x5bc>
 8001dc2:	e06a      	b.n	8001e9a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001dca:	4917      	ldr	r1, [pc, #92]	; (8001e28 <HAL_RCC_OscConfig+0x640>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7fe ff90 	bl	8000cf4 <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe ff8b 	bl	8000cf4 <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e057      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	049b      	lsls	r3, r3, #18
 8001df4:	4013      	ands	r3, r2
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_OscConfig+0x62c>)
 8001dfe:	490c      	ldr	r1, [pc, #48]	; (8001e30 <HAL_RCC_OscConfig+0x648>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	e049      	b.n	8001e9a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d112      	bne.n	8001e34 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e044      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	00001388 	.word	0x00001388
 8001e20:	efffffff 	.word	0xefffffff
 8001e24:	ffbfffff 	.word	0xffbfffff
 8001e28:	feffffff 	.word	0xfeffffff
 8001e2c:	11c1808c 	.word	0x11c1808c
 8001e30:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x6bc>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d126      	bne.n	8001e96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2270      	movs	r2, #112	; 0x70
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11f      	bne.n	8001e96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	23fe      	movs	r3, #254	; 0xfe
 8001e5a:	01db      	lsls	r3, r3, #7
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d116      	bne.n	8001e96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	23f8      	movs	r3, #248	; 0xf8
 8001e6c:	039b      	lsls	r3, r3, #14
 8001e6e:	401a      	ands	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d10e      	bne.n	8001e96 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	23e0      	movs	r3, #224	; 0xe0
 8001e7c:	051b      	lsls	r3, r3, #20
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	0f5b      	lsrs	r3, r3, #29
 8001e8c:	075a      	lsls	r2, r3, #29
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b008      	add	sp, #32
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0e9      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b76      	ldr	r3, [pc, #472]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d91e      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b73      	ldr	r3, [pc, #460]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2207      	movs	r2, #7
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	4b70      	ldr	r3, [pc, #448]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001edc:	f7fe ff0a 	bl	8000cf4 <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee6:	f7fe ff05 	bl	8000cf4 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	4a6a      	ldr	r2, [pc, #424]	; (800209c <HAL_RCC_ClockConfig+0x1f4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0ca      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2207      	movs	r2, #7
 8001f00:	4013      	ands	r3, r2
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2204      	movs	r2, #4
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d006      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f1c:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f22:	21e0      	movs	r1, #224	; 0xe0
 8001f24:	01c9      	lsls	r1, r1, #7
 8001f26:	430a      	orrs	r2, r1
 8001f28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4a5d      	ldr	r2, [pc, #372]	; (80020a4 <HAL_RCC_ClockConfig+0x1fc>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	d057      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	029b      	lsls	r3, r3, #10
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d12b      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e097      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	049b      	lsls	r3, r3, #18
 8001f70:	4013      	ands	r3, r2
 8001f72:	d11f      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e08b      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d113      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e07f      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f98:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d108      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e074      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2202      	movs	r2, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e06d      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2207      	movs	r2, #7
 8001fba:	4393      	bics	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fe94 	bl	8000cf4 <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd2:	f7fe fe8f 	bl	8000cf4 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	4a2f      	ldr	r2, [pc, #188]	; (800209c <HAL_RCC_ClockConfig+0x1f4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e054      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2238      	movs	r2, #56	; 0x38
 8001fec:	401a      	ands	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1ec      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	4013      	ands	r3, r2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d21e      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2207      	movs	r2, #7
 800200c:	4393      	bics	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002018:	f7fe fe6c 	bl	8000cf4 <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002020:	e009      	b.n	8002036 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002022:	f7fe fe67 	bl	8000cf4 <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <HAL_RCC_ClockConfig+0x1f4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e02c      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2207      	movs	r2, #7
 800203c:	4013      	ands	r3, r2
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d1ee      	bne.n	8002022 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2204      	movs	r2, #4
 800204a:	4013      	ands	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_RCC_ClockConfig+0x200>)
 8002054:	4013      	ands	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 800205e:	430a      	orrs	r2, r1
 8002060:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002062:	f000 f829 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002066:	0001      	movs	r1, r0
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	220f      	movs	r2, #15
 8002070:	401a      	ands	r2, r3
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_RCC_ClockConfig+0x204>)
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	58d3      	ldr	r3, [r2, r3]
 8002078:	221f      	movs	r2, #31
 800207a:	4013      	ands	r3, r2
 800207c:	000a      	movs	r2, r1
 800207e:	40da      	lsrs	r2, r3
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_ClockConfig+0x208>)
 8002082:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x20c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0018      	movs	r0, r3
 800208a:	f7fe fdd7 	bl	8000c3c <HAL_InitTick>
 800208e:	0003      	movs	r3, r0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b004      	add	sp, #16
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40022000 	.word	0x40022000
 800209c:	00001388 	.word	0x00001388
 80020a0:	40021000 	.word	0x40021000
 80020a4:	fffff0ff 	.word	0xfffff0ff
 80020a8:	ffff8fff 	.word	0xffff8fff
 80020ac:	08004954 	.word	0x08004954
 80020b0:	20000064 	.word	0x20000064
 80020b4:	20000068 	.word	0x20000068

080020b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020be:	4b3c      	ldr	r3, [pc, #240]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2238      	movs	r2, #56	; 0x38
 80020c4:	4013      	ands	r3, r2
 80020c6:	d10f      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020c8:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0adb      	lsrs	r3, r3, #11
 80020ce:	2207      	movs	r2, #7
 80020d0:	4013      	ands	r3, r2
 80020d2:	2201      	movs	r2, #1
 80020d4:	409a      	lsls	r2, r3
 80020d6:	0013      	movs	r3, r2
 80020d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	4835      	ldr	r0, [pc, #212]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020de:	f7fe f819 	bl	8000114 <__udivsi3>
 80020e2:	0003      	movs	r3, r0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	e05d      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e8:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2238      	movs	r2, #56	; 0x38
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d102      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f4:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e054      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2238      	movs	r2, #56	; 0x38
 8002100:	4013      	ands	r3, r2
 8002102:	2b10      	cmp	r3, #16
 8002104:	d138      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2203      	movs	r2, #3
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	2207      	movs	r2, #7
 8002118:	4013      	ands	r3, r2
 800211a:	3301      	adds	r3, #1
 800211c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d10d      	bne.n	8002140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	4824      	ldr	r0, [pc, #144]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002128:	f7fd fff4 	bl	8000114 <__udivsi3>
 800212c:	0003      	movs	r3, r0
 800212e:	0019      	movs	r1, r3
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	227f      	movs	r2, #127	; 0x7f
 8002138:	4013      	ands	r3, r2
 800213a:	434b      	muls	r3, r1
 800213c:	617b      	str	r3, [r7, #20]
        break;
 800213e:	e00d      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	481c      	ldr	r0, [pc, #112]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002144:	f7fd ffe6 	bl	8000114 <__udivsi3>
 8002148:	0003      	movs	r3, r0
 800214a:	0019      	movs	r1, r3
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	227f      	movs	r2, #127	; 0x7f
 8002154:	4013      	ands	r3, r2
 8002156:	434b      	muls	r3, r1
 8002158:	617b      	str	r3, [r7, #20]
        break;
 800215a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0f5b      	lsrs	r3, r3, #29
 8002162:	2207      	movs	r2, #7
 8002164:	4013      	ands	r3, r2
 8002166:	3301      	adds	r3, #1
 8002168:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	6978      	ldr	r0, [r7, #20]
 800216e:	f7fd ffd1 	bl	8000114 <__udivsi3>
 8002172:	0003      	movs	r3, r0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	e015      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2238      	movs	r2, #56	; 0x38
 800217e:	4013      	ands	r3, r2
 8002180:	2b20      	cmp	r3, #32
 8002182:	d103      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2238      	movs	r2, #56	; 0x38
 8002192:	4013      	ands	r3, r2
 8002194:	2b18      	cmp	r3, #24
 8002196:	d103      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002198:	23fa      	movs	r3, #250	; 0xfa
 800219a:	01db      	lsls	r3, r3, #7
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e001      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021a4:	693b      	ldr	r3, [r7, #16]
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b006      	add	sp, #24
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	40021000 	.word	0x40021000
 80021b4:	00f42400 	.word	0x00f42400
 80021b8:	007a1200 	.word	0x007a1200

080021bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <HAL_RCC_GetHCLKFreq+0x10>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	20000064 	.word	0x20000064

080021d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021d4:	f7ff fff2 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 80021d8:	0004      	movs	r4, r0
 80021da:	f7ff faf9 	bl	80017d0 <LL_RCC_GetAPB1Prescaler>
 80021de:	0003      	movs	r3, r0
 80021e0:	0b1a      	lsrs	r2, r3, #12
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	58d3      	ldr	r3, [r2, r3]
 80021e8:	221f      	movs	r2, #31
 80021ea:	4013      	ands	r3, r2
 80021ec:	40dc      	lsrs	r4, r3
 80021ee:	0023      	movs	r3, r4
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bdb0      	pop	{r4, r5, r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	08004994 	.word	0x08004994

080021fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002204:	2313      	movs	r3, #19
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800220c:	2312      	movs	r3, #18
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002220:	e0ad      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2011      	movs	r0, #17
 8002224:	183b      	adds	r3, r7, r0
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800222c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	055b      	lsls	r3, r3, #21
 8002232:	4013      	ands	r3, r2
 8002234:	d110      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0549      	lsls	r1, r1, #21
 8002240:	430a      	orrs	r2, r1
 8002242:	63da      	str	r2, [r3, #60]	; 0x3c
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	055b      	lsls	r3, r3, #21
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002252:	183b      	adds	r3, r7, r0
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002258:	4b3c      	ldr	r3, [pc, #240]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	0049      	lsls	r1, r1, #1
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002266:	f7fe fd45 	bl	8000cf4 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800226e:	e00b      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002270:	f7fe fd40 	bl	8000cf4 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d904      	bls.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800227e:	2313      	movs	r3, #19
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2203      	movs	r2, #3
 8002284:	701a      	strb	r2, [r3, #0]
        break;
 8002286:	e005      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4013      	ands	r3, r2
 8002292:	d0ed      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002294:	2313      	movs	r3, #19
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d15e      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022a2:	23c0      	movs	r3, #192	; 0xc0
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d019      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d014      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022ba:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	4a24      	ldr	r2, [pc, #144]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	0249      	lsls	r1, r1, #9
 80022ce:	430a      	orrs	r2, r1
 80022d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022d8:	491e      	ldr	r1, [pc, #120]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80022da:	400a      	ands	r2, r1
 80022dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	d016      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe fd02 	bl	8000cf4 <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f4:	e00c      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe fcfd 	bl	8000cf4 <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	4a15      	ldr	r2, [pc, #84]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d904      	bls.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002306:	2313      	movs	r3, #19
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	2203      	movs	r2, #3
 800230c:	701a      	strb	r2, [r3, #0]
            break;
 800230e:	e004      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	2202      	movs	r2, #2
 8002316:	4013      	ands	r3, r2
 8002318:	d0ed      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800231a:	2313      	movs	r3, #19
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002334:	430a      	orrs	r2, r1
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c
 8002338:	e016      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800233a:	2312      	movs	r3, #18
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2213      	movs	r2, #19
 8002340:	18ba      	adds	r2, r7, r2
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e00f      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
 8002350:	fffffcff 	.word	0xfffffcff
 8002354:	fffeffff 	.word	0xfffeffff
 8002358:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800235c:	2312      	movs	r3, #18
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2213      	movs	r2, #19
 8002362:	18ba      	adds	r2, r7, r2
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002368:	2311      	movs	r3, #17
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d105      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002372:	4bb6      	ldr	r3, [pc, #728]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002376:	4bb5      	ldr	r3, [pc, #724]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002378:	49b5      	ldr	r1, [pc, #724]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800237a:	400a      	ands	r2, r1
 800237c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	4013      	ands	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002388:	4bb0      	ldr	r3, [pc, #704]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	2203      	movs	r2, #3
 800238e:	4393      	bics	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	4bad      	ldr	r3, [pc, #692]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002398:	430a      	orrs	r2, r1
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023a6:	4ba9      	ldr	r3, [pc, #676]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	220c      	movs	r2, #12
 80023ac:	4393      	bics	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4ba5      	ldr	r3, [pc, #660]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2204      	movs	r2, #4
 80023c0:	4013      	ands	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023c4:	4ba1      	ldr	r3, [pc, #644]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	2230      	movs	r2, #48	; 0x30
 80023ca:	4393      	bics	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b9e      	ldr	r3, [pc, #632]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d4:	430a      	orrs	r2, r1
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2210      	movs	r2, #16
 80023de:	4013      	ands	r3, r2
 80023e0:	d009      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023e2:	4b9a      	ldr	r3, [pc, #616]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	4a9b      	ldr	r2, [pc, #620]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	0019      	movs	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	4b96      	ldr	r3, [pc, #600]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f2:	430a      	orrs	r2, r1
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	015b      	lsls	r3, r3, #5
 80023fe:	4013      	ands	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002402:	4b92      	ldr	r3, [pc, #584]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	4a94      	ldr	r2, [pc, #592]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	4b8e      	ldr	r3, [pc, #568]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002412:	430a      	orrs	r2, r1
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4013      	ands	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002422:	4b8a      	ldr	r3, [pc, #552]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	4a8d      	ldr	r2, [pc, #564]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002430:	4b86      	ldr	r3, [pc, #536]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002432:	430a      	orrs	r2, r1
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4013      	ands	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002442:	4b82      	ldr	r3, [pc, #520]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	4a86      	ldr	r2, [pc, #536]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002450:	4b7e      	ldr	r3, [pc, #504]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002452:	430a      	orrs	r2, r1
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2220      	movs	r2, #32
 800245c:	4013      	ands	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002460:	4b7a      	ldr	r3, [pc, #488]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	4a7f      	ldr	r2, [pc, #508]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	4b77      	ldr	r3, [pc, #476]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002470:	430a      	orrs	r2, r1
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2240      	movs	r2, #64	; 0x40
 800247a:	4013      	ands	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800247e:	4b73      	ldr	r3, [pc, #460]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	4a79      	ldr	r2, [pc, #484]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002484:	4013      	ands	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800248e:	430a      	orrs	r2, r1
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	01db      	lsls	r3, r3, #7
 800249a:	4013      	ands	r3, r2
 800249c:	d015      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800249e:	4b6b      	ldr	r3, [pc, #428]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	0899      	lsrs	r1, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024aa:	4b68      	ldr	r3, [pc, #416]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ac:	430a      	orrs	r2, r1
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	05db      	lsls	r3, r3, #23
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d106      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024bc:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	4b62      	ldr	r3, [pc, #392]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	0249      	lsls	r1, r1, #9
 80024c6:	430a      	orrs	r2, r1
 80024c8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	031b      	lsls	r3, r3, #12
 80024d2:	4013      	ands	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024d6:	4b5d      	ldr	r3, [pc, #372]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	4393      	bics	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	039b      	lsls	r3, r3, #14
 80024f2:	4013      	ands	r3, r2
 80024f4:	d016      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024f6:	4b55      	ldr	r3, [pc, #340]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	4a5c      	ldr	r2, [pc, #368]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002504:	4b51      	ldr	r3, [pc, #324]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002506:	430a      	orrs	r2, r1
 8002508:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	03db      	lsls	r3, r3, #15
 8002512:	429a      	cmp	r2, r3
 8002514:	d106      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002516:	4b4d      	ldr	r3, [pc, #308]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b4c      	ldr	r3, [pc, #304]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0449      	lsls	r1, r1, #17
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	03db      	lsls	r3, r3, #15
 800252c:	4013      	ands	r3, r2
 800252e:	d016      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002530:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800253e:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002540:	430a      	orrs	r2, r1
 8002542:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	045b      	lsls	r3, r3, #17
 800254c:	429a      	cmp	r2, r3
 800254e:	d106      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002550:	4b3e      	ldr	r3, [pc, #248]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	0449      	lsls	r1, r1, #17
 800255a:	430a      	orrs	r2, r1
 800255c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	4013      	ands	r3, r2
 8002568:	d014      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	2203      	movs	r2, #3
 8002570:	4393      	bics	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800257a:	430a      	orrs	r2, r1
 800257c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d106      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002586:	4b31      	ldr	r3, [pc, #196]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	0249      	lsls	r1, r1, #9
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	019b      	lsls	r3, r3, #6
 800259c:	4013      	ands	r3, r2
 800259e:	d014      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	220c      	movs	r2, #12
 80025a6:	4393      	bics	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ae:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d106      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	0249      	lsls	r1, r1, #9
 80025c6:	430a      	orrs	r2, r1
 80025c8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	045b      	lsls	r3, r3, #17
 80025d2:	4013      	ands	r3, r2
 80025d4:	d016      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	4a22      	ldr	r2, [pc, #136]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80025dc:	4013      	ands	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	019b      	lsls	r3, r3, #6
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d106      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	0449      	lsls	r1, r1, #17
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	049b      	lsls	r3, r3, #18
 800260c:	4013      	ands	r3, r2
 800260e:	d016      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4a10      	ldr	r2, [pc, #64]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002620:	430a      	orrs	r2, r1
 8002622:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	429a      	cmp	r2, r3
 800262e:	d106      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	0449      	lsls	r1, r1, #17
 800263a:	430a      	orrs	r2, r1
 800263c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800263e:	2312      	movs	r3, #18
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	781b      	ldrb	r3, [r3, #0]
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b006      	add	sp, #24
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	efffffff 	.word	0xefffffff
 8002654:	fffff3ff 	.word	0xfffff3ff
 8002658:	fffffcff 	.word	0xfffffcff
 800265c:	fff3ffff 	.word	0xfff3ffff
 8002660:	ffcfffff 	.word	0xffcfffff
 8002664:	ffffcfff 	.word	0xffffcfff
 8002668:	ffff3fff 	.word	0xffff3fff
 800266c:	ffbfffff 	.word	0xffbfffff
 8002670:	feffffff 	.word	0xfeffffff

08002674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e046      	b.n	8002714 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2284      	movs	r2, #132	; 0x84
 800268a:	589b      	ldr	r3, [r3, r2]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	2100      	movs	r1, #0
 8002696:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	0018      	movs	r0, r3
 800269c:	f7fe f9b8 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2284      	movs	r2, #132	; 0x84
 80026a4:	2124      	movs	r1, #36	; 0x24
 80026a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2101      	movs	r1, #1
 80026b4:	438a      	bics	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fc82 	bl	8002fc4 <UART_SetConfig>
 80026c0:	0003      	movs	r3, r0
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e024      	b.n	8002714 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 ffcb 	bl	8003670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	490d      	ldr	r1, [pc, #52]	; (800271c <HAL_UART_Init+0xa8>)
 80026e6:	400a      	ands	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	212a      	movs	r1, #42	; 0x2a
 80026f6:	438a      	bics	r2, r1
 80026f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2101      	movs	r1, #1
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0018      	movs	r0, r3
 800270e:	f001 f863 	bl	80037d8 <UART_CheckIdleState>
 8002712:	0003      	movs	r3, r0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}
 800271c:	ffffb7ff 	.word	0xffffb7ff

08002720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	1dbb      	adds	r3, r7, #6
 800272e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2284      	movs	r2, #132	; 0x84
 8002734:	589b      	ldr	r3, [r3, r2]
 8002736:	2b20      	cmp	r3, #32
 8002738:	d000      	beq.n	800273c <HAL_UART_Transmit+0x1c>
 800273a:	e097      	b.n	800286c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_UART_Transmit+0x2a>
 8002742:	1dbb      	adds	r3, r7, #6
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e08f      	b.n	800286e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	015b      	lsls	r3, r3, #5
 8002756:	429a      	cmp	r2, r3
 8002758:	d109      	bne.n	800276e <HAL_UART_Transmit+0x4e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d105      	bne.n	800276e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	d001      	beq.n	800276e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e07f      	b.n	800286e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_UART_Transmit+0x5c>
 8002778:	2302      	movs	r3, #2
 800277a:	e078      	b.n	800286e <HAL_UART_Transmit+0x14e>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	2101      	movs	r1, #1
 8002782:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	228c      	movs	r2, #140	; 0x8c
 8002788:	2100      	movs	r1, #0
 800278a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2284      	movs	r2, #132	; 0x84
 8002790:	2121      	movs	r1, #33	; 0x21
 8002792:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002794:	f7fe faae 	bl	8000cf4 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1dba      	adds	r2, r7, #6
 80027a0:	2154      	movs	r1, #84	; 0x54
 80027a2:	8812      	ldrh	r2, [r2, #0]
 80027a4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1dba      	adds	r2, r7, #6
 80027aa:	2156      	movs	r1, #86	; 0x56
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	015b      	lsls	r3, r3, #5
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d108      	bne.n	80027ce <HAL_UART_Transmit+0xae>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d104      	bne.n	80027ce <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	e003      	b.n	80027d6 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	2100      	movs	r1, #0
 80027dc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80027de:	e02c      	b.n	800283a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	0013      	movs	r3, r2
 80027ea:	2200      	movs	r2, #0
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	f001 f83d 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d001      	beq.n	80027fa <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e039      	b.n	800286e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	001a      	movs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	05d2      	lsls	r2, r2, #23
 800280c:	0dd2      	lsrs	r2, r2, #23
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	3302      	adds	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e007      	b.n	8002828 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2256      	movs	r2, #86	; 0x56
 800282c:	5a9b      	ldrh	r3, [r3, r2]
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b299      	uxth	r1, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2256      	movs	r2, #86	; 0x56
 8002838:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2256      	movs	r2, #86	; 0x56
 800283e:	5a9b      	ldrh	r3, [r3, r2]
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1cc      	bne.n	80027e0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	0013      	movs	r3, r2
 8002850:	2200      	movs	r2, #0
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	f001 f80a 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d001      	beq.n	8002860 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e006      	b.n	800286e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2284      	movs	r2, #132	; 0x84
 8002864:	2120      	movs	r1, #32
 8002866:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b008      	add	sp, #32
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	1dbb      	adds	r3, r7, #6
 8002884:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2288      	movs	r2, #136	; 0x88
 800288a:	589b      	ldr	r3, [r3, r2]
 800288c:	2b20      	cmp	r3, #32
 800288e:	d15a      	bne.n	8002946 <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_UART_Receive_IT+0x26>
 8002896:	1dbb      	adds	r3, r7, #6
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e052      	b.n	8002948 <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	015b      	lsls	r3, r3, #5
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d109      	bne.n	80028c2 <HAL_UART_Receive_IT+0x4a>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2201      	movs	r2, #1
 80028ba:	4013      	ands	r3, r2
 80028bc:	d001      	beq.n	80028c2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e042      	b.n	8002948 <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	5c9b      	ldrb	r3, [r3, r2]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_UART_Receive_IT+0x58>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e03b      	b.n	8002948 <HAL_UART_Receive_IT+0xd0>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	2101      	movs	r1, #1
 80028d6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_UART_Receive_IT+0xd8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d025      	beq.n	8002934 <HAL_UART_Receive_IT+0xbc>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <HAL_UART_Receive_IT+0xdc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d020      	beq.n	8002934 <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	4013      	ands	r3, r2
 80028fe:	d019      	beq.n	8002934 <HAL_UART_Receive_IT+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002900:	f3ef 8310 	mrs	r3, PRIMASK
 8002904:	613b      	str	r3, [r7, #16]
  return(result);
 8002906:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	2301      	movs	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f383 8810 	msr	PRIMASK, r3
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	04c9      	lsls	r1, r1, #19
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f383 8810 	msr	PRIMASK, r3
}
 8002932:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002934:	1dbb      	adds	r3, r7, #6
 8002936:	881a      	ldrh	r2, [r3, #0]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	0018      	movs	r0, r3
 800293e:	f001 f85d 	bl	80039fc <UART_Start_Receive_IT>
 8002942:	0003      	movs	r3, r0
 8002944:	e000      	b.n	8002948 <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002946:	2302      	movs	r3, #2
  }
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	b008      	add	sp, #32
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40008000 	.word	0x40008000
 8002954:	40008400 	.word	0x40008400

08002958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b0aa      	sub	sp, #168	; 0xa8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	22a4      	movs	r2, #164	; 0xa4
 8002968:	18b9      	adds	r1, r7, r2
 800296a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	20a0      	movs	r0, #160	; 0xa0
 8002974:	1839      	adds	r1, r7, r0
 8002976:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	249c      	movs	r4, #156	; 0x9c
 8002980:	1939      	adds	r1, r7, r4
 8002982:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002984:	0011      	movs	r1, r2
 8002986:	18bb      	adds	r3, r7, r2
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4aa0      	ldr	r2, [pc, #640]	; (8002c0c <HAL_UART_IRQHandler+0x2b4>)
 800298c:	4013      	ands	r3, r2
 800298e:	2298      	movs	r2, #152	; 0x98
 8002990:	18bd      	adds	r5, r7, r2
 8002992:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002994:	18bb      	adds	r3, r7, r2
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d11a      	bne.n	80029d2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800299c:	187b      	adds	r3, r7, r1
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2220      	movs	r2, #32
 80029a2:	4013      	ands	r3, r2
 80029a4:	d015      	beq.n	80029d2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2220      	movs	r2, #32
 80029ac:	4013      	ands	r3, r2
 80029ae:	d105      	bne.n	80029bc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029b0:	193b      	adds	r3, r7, r4
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	055b      	lsls	r3, r3, #21
 80029b8:	4013      	ands	r3, r2
 80029ba:	d00a      	beq.n	80029d2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d100      	bne.n	80029c6 <HAL_UART_IRQHandler+0x6e>
 80029c4:	e2cf      	b.n	8002f66 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	0010      	movs	r0, r2
 80029ce:	4798      	blx	r3
      }
      return;
 80029d0:	e2c9      	b.n	8002f66 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029d2:	2398      	movs	r3, #152	; 0x98
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d100      	bne.n	80029de <HAL_UART_IRQHandler+0x86>
 80029dc:	e11e      	b.n	8002c1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80029de:	239c      	movs	r3, #156	; 0x9c
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a8a      	ldr	r2, [pc, #552]	; (8002c10 <HAL_UART_IRQHandler+0x2b8>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	d106      	bne.n	80029f8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80029ea:	23a0      	movs	r3, #160	; 0xa0
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a88      	ldr	r2, [pc, #544]	; (8002c14 <HAL_UART_IRQHandler+0x2bc>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	d100      	bne.n	80029f8 <HAL_UART_IRQHandler+0xa0>
 80029f6:	e111      	b.n	8002c1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029f8:	23a4      	movs	r3, #164	; 0xa4
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4013      	ands	r3, r2
 8002a02:	d012      	beq.n	8002a2a <HAL_UART_IRQHandler+0xd2>
 8002a04:	23a0      	movs	r3, #160	; 0xa0
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	228c      	movs	r2, #140	; 0x8c
 8002a1e:	589b      	ldr	r3, [r3, r2]
 8002a20:	2201      	movs	r2, #1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	218c      	movs	r1, #140	; 0x8c
 8002a28:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a2a:	23a4      	movs	r3, #164	; 0xa4
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2202      	movs	r2, #2
 8002a32:	4013      	ands	r3, r2
 8002a34:	d011      	beq.n	8002a5a <HAL_UART_IRQHandler+0x102>
 8002a36:	239c      	movs	r3, #156	; 0x9c
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d00b      	beq.n	8002a5a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2202      	movs	r2, #2
 8002a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	228c      	movs	r2, #140	; 0x8c
 8002a4e:	589b      	ldr	r3, [r3, r2]
 8002a50:	2204      	movs	r2, #4
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	218c      	movs	r1, #140	; 0x8c
 8002a58:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a5a:	23a4      	movs	r3, #164	; 0xa4
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2204      	movs	r2, #4
 8002a62:	4013      	ands	r3, r2
 8002a64:	d011      	beq.n	8002a8a <HAL_UART_IRQHandler+0x132>
 8002a66:	239c      	movs	r3, #156	; 0x9c
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d00b      	beq.n	8002a8a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2204      	movs	r2, #4
 8002a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	228c      	movs	r2, #140	; 0x8c
 8002a7e:	589b      	ldr	r3, [r3, r2]
 8002a80:	2202      	movs	r2, #2
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	218c      	movs	r1, #140	; 0x8c
 8002a88:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a8a:	23a4      	movs	r3, #164	; 0xa4
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2208      	movs	r2, #8
 8002a92:	4013      	ands	r3, r2
 8002a94:	d017      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a96:	23a0      	movs	r3, #160	; 0xa0
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d105      	bne.n	8002aae <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002aa2:	239c      	movs	r3, #156	; 0x9c
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a59      	ldr	r2, [pc, #356]	; (8002c10 <HAL_UART_IRQHandler+0x2b8>)
 8002aaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002aac:	d00b      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	228c      	movs	r2, #140	; 0x8c
 8002aba:	589b      	ldr	r3, [r3, r2]
 8002abc:	2208      	movs	r2, #8
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	218c      	movs	r1, #140	; 0x8c
 8002ac4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ac6:	23a4      	movs	r3, #164	; 0xa4
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_UART_IRQHandler+0x1a4>
 8002ad4:	23a0      	movs	r3, #160	; 0xa0
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	04db      	lsls	r3, r3, #19
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d00c      	beq.n	8002afc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	228c      	movs	r2, #140	; 0x8c
 8002af0:	589b      	ldr	r3, [r3, r2]
 8002af2:	2220      	movs	r2, #32
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	218c      	movs	r1, #140	; 0x8c
 8002afa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	228c      	movs	r2, #140	; 0x8c
 8002b00:	589b      	ldr	r3, [r3, r2]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d100      	bne.n	8002b08 <HAL_UART_IRQHandler+0x1b0>
 8002b06:	e230      	b.n	8002f6a <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b08:	23a4      	movs	r3, #164	; 0xa4
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	4013      	ands	r3, r2
 8002b12:	d015      	beq.n	8002b40 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b14:	23a0      	movs	r3, #160	; 0xa0
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d106      	bne.n	8002b2e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b20:	239c      	movs	r3, #156	; 0x9c
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	055b      	lsls	r3, r3, #21
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d008      	beq.n	8002b40 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	228c      	movs	r2, #140	; 0x8c
 8002b44:	589b      	ldr	r3, [r3, r2]
 8002b46:	2194      	movs	r1, #148	; 0x94
 8002b48:	187a      	adds	r2, r7, r1
 8002b4a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2240      	movs	r2, #64	; 0x40
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b40      	cmp	r3, #64	; 0x40
 8002b58:	d004      	beq.n	8002b64 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2228      	movs	r2, #40	; 0x28
 8002b60:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b62:	d047      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f001 f874 	bl	8003c54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	d137      	bne.n	8002bea <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b7e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b82:	2090      	movs	r0, #144	; 0x90
 8002b84:	183a      	adds	r2, r7, r0
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b8e:	f383 8810 	msr	PRIMASK, r3
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2140      	movs	r1, #64	; 0x40
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	183b      	adds	r3, r7, r0
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bac:	f383 8810 	msr	PRIMASK, r3
}
 8002bb0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <HAL_UART_IRQHandler+0x2c0>)
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7fe fa9e 	bl	8001108 <HAL_DMA_Abort_IT>
 8002bcc:	1e03      	subs	r3, r0, #0
 8002bce:	d01a      	beq.n	8002c06 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bda:	0018      	movs	r0, r3
 8002bdc:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bde:	e012      	b.n	8002c06 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f9da 	bl	8002f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	e00d      	b.n	8002c06 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 f9d5 	bl	8002f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf2:	e008      	b.n	8002c06 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 f9d0 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	228c      	movs	r2, #140	; 0x8c
 8002c00:	2100      	movs	r1, #0
 8002c02:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c04:	e1b1      	b.n	8002f6a <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c06:	46c0      	nop			; (mov r8, r8)
    return;
 8002c08:	e1af      	b.n	8002f6a <HAL_UART_IRQHandler+0x612>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	0000080f 	.word	0x0000080f
 8002c10:	10000001 	.word	0x10000001
 8002c14:	04000120 	.word	0x04000120
 8002c18:	08003d21 	.word	0x08003d21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d000      	beq.n	8002c26 <HAL_UART_IRQHandler+0x2ce>
 8002c24:	e135      	b.n	8002e92 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c26:	23a4      	movs	r3, #164	; 0xa4
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d100      	bne.n	8002c34 <HAL_UART_IRQHandler+0x2dc>
 8002c32:	e12e      	b.n	8002e92 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c34:	23a0      	movs	r3, #160	; 0xa0
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <HAL_UART_IRQHandler+0x2ea>
 8002c40:	e127      	b.n	8002e92 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2210      	movs	r2, #16
 8002c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2240      	movs	r2, #64	; 0x40
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d000      	beq.n	8002c5a <HAL_UART_IRQHandler+0x302>
 8002c58:	e09e      	b.n	8002d98 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	217e      	movs	r1, #126	; 0x7e
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d100      	bne.n	8002c72 <HAL_UART_IRQHandler+0x31a>
 8002c70:	e17d      	b.n	8002f6e <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	225c      	movs	r2, #92	; 0x5c
 8002c76:	5a9b      	ldrh	r3, [r3, r2]
 8002c78:	187a      	adds	r2, r7, r1
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d300      	bcc.n	8002c82 <HAL_UART_IRQHandler+0x32a>
 8002c80:	e175      	b.n	8002f6e <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	187a      	adds	r2, r7, r1
 8002c86:	215e      	movs	r1, #94	; 0x5e
 8002c88:	8812      	ldrh	r2, [r2, #0]
 8002c8a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2220      	movs	r2, #32
 8002c96:	4013      	ands	r3, r2
 8002c98:	d16f      	bne.n	8002d7a <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ca2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002caa:	f383 8810 	msr	PRIMASK, r3
}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	49b1      	ldr	r1, [pc, #708]	; (8002f80 <HAL_UART_IRQHandler+0x628>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	f383 8810 	msr	PRIMASK, r3
}
 8002cca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	677b      	str	r3, [r7, #116]	; 0x74
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cdc:	f383 8810 	msr	PRIMASK, r3
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	438a      	bics	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf8:	f383 8810 	msr	PRIMASK, r3
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002d02:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d06:	673b      	str	r3, [r7, #112]	; 0x70
 8002d08:	2301      	movs	r3, #1
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0e:	f383 8810 	msr	PRIMASK, r3
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2140      	movs	r1, #64	; 0x40
 8002d20:	438a      	bics	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d26:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2a:	f383 8810 	msr	PRIMASK, r3
}
 8002d2e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2288      	movs	r2, #136	; 0x88
 8002d34:	2120      	movs	r1, #32
 8002d36:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d42:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d48:	2301      	movs	r3, #1
 8002d4a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2110      	movs	r1, #16
 8002d60:	438a      	bics	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6a:	f383 8810 	msr	PRIMASK, r3
}
 8002d6e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7fe f967 	bl	8001048 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	225c      	movs	r2, #92	; 0x5c
 8002d7e:	5a9a      	ldrh	r2, [r3, r2]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	215e      	movs	r1, #94	; 0x5e
 8002d84:	5a5b      	ldrh	r3, [r3, r1]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f90b 	bl	8002fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d96:	e0ea      	b.n	8002f6e <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	225c      	movs	r2, #92	; 0x5c
 8002d9c:	5a99      	ldrh	r1, [r3, r2]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	225e      	movs	r2, #94	; 0x5e
 8002da2:	5a9b      	ldrh	r3, [r3, r2]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	208e      	movs	r0, #142	; 0x8e
 8002da8:	183b      	adds	r3, r7, r0
 8002daa:	1a8a      	subs	r2, r1, r2
 8002dac:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	225e      	movs	r2, #94	; 0x5e
 8002db2:	5a9b      	ldrh	r3, [r3, r2]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d100      	bne.n	8002dbc <HAL_UART_IRQHandler+0x464>
 8002dba:	e0da      	b.n	8002f72 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d100      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x46e>
 8002dc4:	e0d5      	b.n	8002f72 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dca:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002dce:	2488      	movs	r4, #136	; 0x88
 8002dd0:	193a      	adds	r2, r7, r4
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f383 8810 	msr	PRIMASK, r3
}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4966      	ldr	r1, [pc, #408]	; (8002f84 <HAL_UART_IRQHandler+0x62c>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002e02:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e04:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e06:	2484      	movs	r4, #132	; 0x84
 8002e08:	193a      	adds	r2, r7, r4
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f383 8810 	msr	PRIMASK, r3
}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4959      	ldr	r1, [pc, #356]	; (8002f88 <HAL_UART_IRQHandler+0x630>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	193b      	adds	r3, r7, r4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	f383 8810 	msr	PRIMASK, r3
}
 8002e34:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2288      	movs	r2, #136	; 0x88
 8002e3a:	2120      	movs	r1, #32
 8002e3c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e52:	2480      	movs	r4, #128	; 0x80
 8002e54:	193a      	adds	r2, r7, r4
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	f383 8810 	msr	PRIMASK, r3
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2110      	movs	r1, #16
 8002e70:	438a      	bics	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	193b      	adds	r3, r7, r4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	f383 8810 	msr	PRIMASK, r3
}
 8002e80:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e82:	183b      	adds	r3, r7, r0
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0011      	movs	r1, r2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f000 f88e 	bl	8002fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e90:	e06f      	b.n	8002f72 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e92:	23a4      	movs	r3, #164	; 0xa4
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	035b      	lsls	r3, r3, #13
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d010      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x56a>
 8002ea0:	239c      	movs	r3, #156	; 0x9c
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	03db      	lsls	r3, r3, #15
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	0352      	lsls	r2, r2, #13
 8002eb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f001 fbc4 	bl	8004648 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ec0:	e05a      	b.n	8002f78 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002ec2:	23a4      	movs	r3, #164	; 0xa4
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2280      	movs	r2, #128	; 0x80
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d016      	beq.n	8002efc <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002ece:	23a0      	movs	r3, #160	; 0xa0
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002eda:	239c      	movs	r3, #156	; 0x9c
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d009      	beq.n	8002efc <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d042      	beq.n	8002f76 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	0010      	movs	r0, r2
 8002ef8:	4798      	blx	r3
    }
    return;
 8002efa:	e03c      	b.n	8002f76 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002efc:	23a4      	movs	r3, #164	; 0xa4
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2240      	movs	r2, #64	; 0x40
 8002f04:	4013      	ands	r3, r2
 8002f06:	d00a      	beq.n	8002f1e <HAL_UART_IRQHandler+0x5c6>
 8002f08:	23a0      	movs	r3, #160	; 0xa0
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	4013      	ands	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 ff19 	bl	8003d4e <UART_EndTransmit_IT>
    return;
 8002f1c:	e02c      	b.n	8002f78 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f1e:	23a4      	movs	r3, #164	; 0xa4
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <HAL_UART_IRQHandler+0x5ec>
 8002f2c:	23a0      	movs	r3, #160	; 0xa0
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	05db      	lsls	r3, r3, #23
 8002f36:	4013      	ands	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f001 fb93 	bl	8004668 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f42:	e019      	b.n	8002f78 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f44:	23a4      	movs	r3, #164	; 0xa4
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	045b      	lsls	r3, r3, #17
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d012      	beq.n	8002f78 <HAL_UART_IRQHandler+0x620>
 8002f52:	23a0      	movs	r3, #160	; 0xa0
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da0d      	bge.n	8002f78 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f001 fb7a 	bl	8004658 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f64:	e008      	b.n	8002f78 <HAL_UART_IRQHandler+0x620>
      return;
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	e006      	b.n	8002f78 <HAL_UART_IRQHandler+0x620>
    return;
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	e004      	b.n	8002f78 <HAL_UART_IRQHandler+0x620>
      return;
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	e002      	b.n	8002f78 <HAL_UART_IRQHandler+0x620>
      return;
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	e000      	b.n	8002f78 <HAL_UART_IRQHandler+0x620>
    return;
 8002f76:	46c0      	nop			; (mov r8, r8)
  }
}
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b02a      	add	sp, #168	; 0xa8
 8002f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	fffffeff 	.word	0xfffffeff
 8002f84:	fffffedf 	.word	0xfffffedf
 8002f88:	effffffe 	.word	0xeffffffe

08002f8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	000a      	movs	r2, r1
 8002fb6:	1cbb      	adds	r3, r7, #2
 8002fb8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc4:	b5b0      	push	{r4, r5, r7, lr}
 8002fc6:	b090      	sub	sp, #64	; 0x40
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fcc:	231a      	movs	r3, #26
 8002fce:	2220      	movs	r2, #32
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	19db      	adds	r3, r3, r7
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4ac1      	ldr	r2, [pc, #772]	; (80032fc <UART_SetConfig+0x338>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003002:	430b      	orrs	r3, r1
 8003004:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4abc      	ldr	r2, [pc, #752]	; (8003300 <UART_SetConfig+0x33c>)
 800300e:	4013      	ands	r3, r2
 8003010:	0018      	movs	r0, r3
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	68d9      	ldr	r1, [r3, #12]
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	0003      	movs	r3, r0
 800301c:	430b      	orrs	r3, r1
 800301e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4ab6      	ldr	r2, [pc, #728]	; (8003304 <UART_SetConfig+0x340>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d009      	beq.n	8003044 <UART_SetConfig+0x80>
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4ab4      	ldr	r2, [pc, #720]	; (8003308 <UART_SetConfig+0x344>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003040:	4313      	orrs	r3, r2
 8003042:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4ab0      	ldr	r2, [pc, #704]	; (800330c <UART_SetConfig+0x348>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003056:	430b      	orrs	r3, r1
 8003058:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	220f      	movs	r2, #15
 8003062:	4393      	bics	r3, r2
 8003064:	0018      	movs	r0, r3
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	0003      	movs	r3, r0
 8003070:	430b      	orrs	r3, r1
 8003072:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4aa5      	ldr	r2, [pc, #660]	; (8003310 <UART_SetConfig+0x34c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d131      	bne.n	80030e2 <UART_SetConfig+0x11e>
 800307e:	4ba5      	ldr	r3, [pc, #660]	; (8003314 <UART_SetConfig+0x350>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	2203      	movs	r2, #3
 8003084:	4013      	ands	r3, r2
 8003086:	2b03      	cmp	r3, #3
 8003088:	d01d      	beq.n	80030c6 <UART_SetConfig+0x102>
 800308a:	d823      	bhi.n	80030d4 <UART_SetConfig+0x110>
 800308c:	2b02      	cmp	r3, #2
 800308e:	d00c      	beq.n	80030aa <UART_SetConfig+0xe6>
 8003090:	d820      	bhi.n	80030d4 <UART_SetConfig+0x110>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <UART_SetConfig+0xd8>
 8003096:	2b01      	cmp	r3, #1
 8003098:	d00e      	beq.n	80030b8 <UART_SetConfig+0xf4>
 800309a:	e01b      	b.n	80030d4 <UART_SetConfig+0x110>
 800309c:	231b      	movs	r3, #27
 800309e:	2220      	movs	r2, #32
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e154      	b.n	8003354 <UART_SetConfig+0x390>
 80030aa:	231b      	movs	r3, #27
 80030ac:	2220      	movs	r2, #32
 80030ae:	189b      	adds	r3, r3, r2
 80030b0:	19db      	adds	r3, r3, r7
 80030b2:	2202      	movs	r2, #2
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e14d      	b.n	8003354 <UART_SetConfig+0x390>
 80030b8:	231b      	movs	r3, #27
 80030ba:	2220      	movs	r2, #32
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	19db      	adds	r3, r3, r7
 80030c0:	2204      	movs	r2, #4
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e146      	b.n	8003354 <UART_SetConfig+0x390>
 80030c6:	231b      	movs	r3, #27
 80030c8:	2220      	movs	r2, #32
 80030ca:	189b      	adds	r3, r3, r2
 80030cc:	19db      	adds	r3, r3, r7
 80030ce:	2208      	movs	r2, #8
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e13f      	b.n	8003354 <UART_SetConfig+0x390>
 80030d4:	231b      	movs	r3, #27
 80030d6:	2220      	movs	r2, #32
 80030d8:	189b      	adds	r3, r3, r2
 80030da:	19db      	adds	r3, r3, r7
 80030dc:	2210      	movs	r2, #16
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e138      	b.n	8003354 <UART_SetConfig+0x390>
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a8c      	ldr	r2, [pc, #560]	; (8003318 <UART_SetConfig+0x354>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d131      	bne.n	8003150 <UART_SetConfig+0x18c>
 80030ec:	4b89      	ldr	r3, [pc, #548]	; (8003314 <UART_SetConfig+0x350>)
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	220c      	movs	r2, #12
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d01d      	beq.n	8003134 <UART_SetConfig+0x170>
 80030f8:	d823      	bhi.n	8003142 <UART_SetConfig+0x17e>
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d00c      	beq.n	8003118 <UART_SetConfig+0x154>
 80030fe:	d820      	bhi.n	8003142 <UART_SetConfig+0x17e>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <UART_SetConfig+0x146>
 8003104:	2b04      	cmp	r3, #4
 8003106:	d00e      	beq.n	8003126 <UART_SetConfig+0x162>
 8003108:	e01b      	b.n	8003142 <UART_SetConfig+0x17e>
 800310a:	231b      	movs	r3, #27
 800310c:	2220      	movs	r2, #32
 800310e:	189b      	adds	r3, r3, r2
 8003110:	19db      	adds	r3, r3, r7
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e11d      	b.n	8003354 <UART_SetConfig+0x390>
 8003118:	231b      	movs	r3, #27
 800311a:	2220      	movs	r2, #32
 800311c:	189b      	adds	r3, r3, r2
 800311e:	19db      	adds	r3, r3, r7
 8003120:	2202      	movs	r2, #2
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e116      	b.n	8003354 <UART_SetConfig+0x390>
 8003126:	231b      	movs	r3, #27
 8003128:	2220      	movs	r2, #32
 800312a:	189b      	adds	r3, r3, r2
 800312c:	19db      	adds	r3, r3, r7
 800312e:	2204      	movs	r2, #4
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e10f      	b.n	8003354 <UART_SetConfig+0x390>
 8003134:	231b      	movs	r3, #27
 8003136:	2220      	movs	r2, #32
 8003138:	189b      	adds	r3, r3, r2
 800313a:	19db      	adds	r3, r3, r7
 800313c:	2208      	movs	r2, #8
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e108      	b.n	8003354 <UART_SetConfig+0x390>
 8003142:	231b      	movs	r3, #27
 8003144:	2220      	movs	r2, #32
 8003146:	189b      	adds	r3, r3, r2
 8003148:	19db      	adds	r3, r3, r7
 800314a:	2210      	movs	r2, #16
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e101      	b.n	8003354 <UART_SetConfig+0x390>
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a71      	ldr	r2, [pc, #452]	; (800331c <UART_SetConfig+0x358>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d131      	bne.n	80031be <UART_SetConfig+0x1fa>
 800315a:	4b6e      	ldr	r3, [pc, #440]	; (8003314 <UART_SetConfig+0x350>)
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	2230      	movs	r2, #48	; 0x30
 8003160:	4013      	ands	r3, r2
 8003162:	2b30      	cmp	r3, #48	; 0x30
 8003164:	d01d      	beq.n	80031a2 <UART_SetConfig+0x1de>
 8003166:	d823      	bhi.n	80031b0 <UART_SetConfig+0x1ec>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d00c      	beq.n	8003186 <UART_SetConfig+0x1c2>
 800316c:	d820      	bhi.n	80031b0 <UART_SetConfig+0x1ec>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <UART_SetConfig+0x1b4>
 8003172:	2b10      	cmp	r3, #16
 8003174:	d00e      	beq.n	8003194 <UART_SetConfig+0x1d0>
 8003176:	e01b      	b.n	80031b0 <UART_SetConfig+0x1ec>
 8003178:	231b      	movs	r3, #27
 800317a:	2220      	movs	r2, #32
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e0e6      	b.n	8003354 <UART_SetConfig+0x390>
 8003186:	231b      	movs	r3, #27
 8003188:	2220      	movs	r2, #32
 800318a:	189b      	adds	r3, r3, r2
 800318c:	19db      	adds	r3, r3, r7
 800318e:	2202      	movs	r2, #2
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e0df      	b.n	8003354 <UART_SetConfig+0x390>
 8003194:	231b      	movs	r3, #27
 8003196:	2220      	movs	r2, #32
 8003198:	189b      	adds	r3, r3, r2
 800319a:	19db      	adds	r3, r3, r7
 800319c:	2204      	movs	r2, #4
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e0d8      	b.n	8003354 <UART_SetConfig+0x390>
 80031a2:	231b      	movs	r3, #27
 80031a4:	2220      	movs	r2, #32
 80031a6:	189b      	adds	r3, r3, r2
 80031a8:	19db      	adds	r3, r3, r7
 80031aa:	2208      	movs	r2, #8
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e0d1      	b.n	8003354 <UART_SetConfig+0x390>
 80031b0:	231b      	movs	r3, #27
 80031b2:	2220      	movs	r2, #32
 80031b4:	189b      	adds	r3, r3, r2
 80031b6:	19db      	adds	r3, r3, r7
 80031b8:	2210      	movs	r2, #16
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e0ca      	b.n	8003354 <UART_SetConfig+0x390>
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a57      	ldr	r2, [pc, #348]	; (8003320 <UART_SetConfig+0x35c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d106      	bne.n	80031d6 <UART_SetConfig+0x212>
 80031c8:	231b      	movs	r3, #27
 80031ca:	2220      	movs	r2, #32
 80031cc:	189b      	adds	r3, r3, r2
 80031ce:	19db      	adds	r3, r3, r7
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e0be      	b.n	8003354 <UART_SetConfig+0x390>
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a52      	ldr	r2, [pc, #328]	; (8003324 <UART_SetConfig+0x360>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d106      	bne.n	80031ee <UART_SetConfig+0x22a>
 80031e0:	231b      	movs	r3, #27
 80031e2:	2220      	movs	r2, #32
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	19db      	adds	r3, r3, r7
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e0b2      	b.n	8003354 <UART_SetConfig+0x390>
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a4d      	ldr	r2, [pc, #308]	; (8003328 <UART_SetConfig+0x364>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d106      	bne.n	8003206 <UART_SetConfig+0x242>
 80031f8:	231b      	movs	r3, #27
 80031fa:	2220      	movs	r2, #32
 80031fc:	189b      	adds	r3, r3, r2
 80031fe:	19db      	adds	r3, r3, r7
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e0a6      	b.n	8003354 <UART_SetConfig+0x390>
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3e      	ldr	r2, [pc, #248]	; (8003304 <UART_SetConfig+0x340>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d13e      	bne.n	800328e <UART_SetConfig+0x2ca>
 8003210:	4b40      	ldr	r3, [pc, #256]	; (8003314 <UART_SetConfig+0x350>)
 8003212:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003214:	23c0      	movs	r3, #192	; 0xc0
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4013      	ands	r3, r2
 800321a:	22c0      	movs	r2, #192	; 0xc0
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	4293      	cmp	r3, r2
 8003220:	d027      	beq.n	8003272 <UART_SetConfig+0x2ae>
 8003222:	22c0      	movs	r2, #192	; 0xc0
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	4293      	cmp	r3, r2
 8003228:	d82a      	bhi.n	8003280 <UART_SetConfig+0x2bc>
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	0112      	lsls	r2, r2, #4
 800322e:	4293      	cmp	r3, r2
 8003230:	d011      	beq.n	8003256 <UART_SetConfig+0x292>
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	0112      	lsls	r2, r2, #4
 8003236:	4293      	cmp	r3, r2
 8003238:	d822      	bhi.n	8003280 <UART_SetConfig+0x2bc>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <UART_SetConfig+0x284>
 800323e:	2280      	movs	r2, #128	; 0x80
 8003240:	00d2      	lsls	r2, r2, #3
 8003242:	4293      	cmp	r3, r2
 8003244:	d00e      	beq.n	8003264 <UART_SetConfig+0x2a0>
 8003246:	e01b      	b.n	8003280 <UART_SetConfig+0x2bc>
 8003248:	231b      	movs	r3, #27
 800324a:	2220      	movs	r2, #32
 800324c:	189b      	adds	r3, r3, r2
 800324e:	19db      	adds	r3, r3, r7
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e07e      	b.n	8003354 <UART_SetConfig+0x390>
 8003256:	231b      	movs	r3, #27
 8003258:	2220      	movs	r2, #32
 800325a:	189b      	adds	r3, r3, r2
 800325c:	19db      	adds	r3, r3, r7
 800325e:	2202      	movs	r2, #2
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e077      	b.n	8003354 <UART_SetConfig+0x390>
 8003264:	231b      	movs	r3, #27
 8003266:	2220      	movs	r2, #32
 8003268:	189b      	adds	r3, r3, r2
 800326a:	19db      	adds	r3, r3, r7
 800326c:	2204      	movs	r2, #4
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e070      	b.n	8003354 <UART_SetConfig+0x390>
 8003272:	231b      	movs	r3, #27
 8003274:	2220      	movs	r2, #32
 8003276:	189b      	adds	r3, r3, r2
 8003278:	19db      	adds	r3, r3, r7
 800327a:	2208      	movs	r2, #8
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e069      	b.n	8003354 <UART_SetConfig+0x390>
 8003280:	231b      	movs	r3, #27
 8003282:	2220      	movs	r2, #32
 8003284:	189b      	adds	r3, r3, r2
 8003286:	19db      	adds	r3, r3, r7
 8003288:	2210      	movs	r2, #16
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e062      	b.n	8003354 <UART_SetConfig+0x390>
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <UART_SetConfig+0x344>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d157      	bne.n	8003348 <UART_SetConfig+0x384>
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <UART_SetConfig+0x350>)
 800329a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800329c:	23c0      	movs	r3, #192	; 0xc0
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4013      	ands	r3, r2
 80032a2:	22c0      	movs	r2, #192	; 0xc0
 80032a4:	0092      	lsls	r2, r2, #2
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d040      	beq.n	800332c <UART_SetConfig+0x368>
 80032aa:	22c0      	movs	r2, #192	; 0xc0
 80032ac:	0092      	lsls	r2, r2, #2
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d843      	bhi.n	800333a <UART_SetConfig+0x376>
 80032b2:	2280      	movs	r2, #128	; 0x80
 80032b4:	0092      	lsls	r2, r2, #2
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d011      	beq.n	80032de <UART_SetConfig+0x31a>
 80032ba:	2280      	movs	r2, #128	; 0x80
 80032bc:	0092      	lsls	r2, r2, #2
 80032be:	4293      	cmp	r3, r2
 80032c0:	d83b      	bhi.n	800333a <UART_SetConfig+0x376>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <UART_SetConfig+0x30c>
 80032c6:	2280      	movs	r2, #128	; 0x80
 80032c8:	0052      	lsls	r2, r2, #1
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00e      	beq.n	80032ec <UART_SetConfig+0x328>
 80032ce:	e034      	b.n	800333a <UART_SetConfig+0x376>
 80032d0:	231b      	movs	r3, #27
 80032d2:	2220      	movs	r2, #32
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	19db      	adds	r3, r3, r7
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e03a      	b.n	8003354 <UART_SetConfig+0x390>
 80032de:	231b      	movs	r3, #27
 80032e0:	2220      	movs	r2, #32
 80032e2:	189b      	adds	r3, r3, r2
 80032e4:	19db      	adds	r3, r3, r7
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e033      	b.n	8003354 <UART_SetConfig+0x390>
 80032ec:	231b      	movs	r3, #27
 80032ee:	2220      	movs	r2, #32
 80032f0:	189b      	adds	r3, r3, r2
 80032f2:	19db      	adds	r3, r3, r7
 80032f4:	2204      	movs	r2, #4
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e02c      	b.n	8003354 <UART_SetConfig+0x390>
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	cfff69f3 	.word	0xcfff69f3
 8003300:	ffffcfff 	.word	0xffffcfff
 8003304:	40008000 	.word	0x40008000
 8003308:	40008400 	.word	0x40008400
 800330c:	11fff4ff 	.word	0x11fff4ff
 8003310:	40013800 	.word	0x40013800
 8003314:	40021000 	.word	0x40021000
 8003318:	40004400 	.word	0x40004400
 800331c:	40004800 	.word	0x40004800
 8003320:	40004c00 	.word	0x40004c00
 8003324:	40005000 	.word	0x40005000
 8003328:	40013c00 	.word	0x40013c00
 800332c:	231b      	movs	r3, #27
 800332e:	2220      	movs	r2, #32
 8003330:	189b      	adds	r3, r3, r2
 8003332:	19db      	adds	r3, r3, r7
 8003334:	2208      	movs	r2, #8
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e00c      	b.n	8003354 <UART_SetConfig+0x390>
 800333a:	231b      	movs	r3, #27
 800333c:	2220      	movs	r2, #32
 800333e:	189b      	adds	r3, r3, r2
 8003340:	19db      	adds	r3, r3, r7
 8003342:	2210      	movs	r2, #16
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e005      	b.n	8003354 <UART_SetConfig+0x390>
 8003348:	231b      	movs	r3, #27
 800334a:	2220      	movs	r2, #32
 800334c:	189b      	adds	r3, r3, r2
 800334e:	19db      	adds	r3, r3, r7
 8003350:	2210      	movs	r2, #16
 8003352:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4ac1      	ldr	r2, [pc, #772]	; (8003660 <UART_SetConfig+0x69c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d005      	beq.n	800336a <UART_SetConfig+0x3a6>
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4ac0      	ldr	r2, [pc, #768]	; (8003664 <UART_SetConfig+0x6a0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d000      	beq.n	800336a <UART_SetConfig+0x3a6>
 8003368:	e093      	b.n	8003492 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800336a:	231b      	movs	r3, #27
 800336c:	2220      	movs	r2, #32
 800336e:	189b      	adds	r3, r3, r2
 8003370:	19db      	adds	r3, r3, r7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d015      	beq.n	80033a4 <UART_SetConfig+0x3e0>
 8003378:	dc18      	bgt.n	80033ac <UART_SetConfig+0x3e8>
 800337a:	2b04      	cmp	r3, #4
 800337c:	d00d      	beq.n	800339a <UART_SetConfig+0x3d6>
 800337e:	dc15      	bgt.n	80033ac <UART_SetConfig+0x3e8>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <UART_SetConfig+0x3c6>
 8003384:	2b02      	cmp	r3, #2
 8003386:	d005      	beq.n	8003394 <UART_SetConfig+0x3d0>
 8003388:	e010      	b.n	80033ac <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338a:	f7fe ff21 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 800338e:	0003      	movs	r3, r0
 8003390:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003392:	e014      	b.n	80033be <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003394:	4bb4      	ldr	r3, [pc, #720]	; (8003668 <UART_SetConfig+0x6a4>)
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003398:	e011      	b.n	80033be <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339a:	f7fe fe8d 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 800339e:	0003      	movs	r3, r0
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033a2:	e00c      	b.n	80033be <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033aa:	e008      	b.n	80033be <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033b0:	231a      	movs	r3, #26
 80033b2:	2220      	movs	r2, #32
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
        break;
 80033bc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d100      	bne.n	80033c6 <UART_SetConfig+0x402>
 80033c4:	e135      	b.n	8003632 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ca:	4ba8      	ldr	r3, [pc, #672]	; (800366c <UART_SetConfig+0x6a8>)
 80033cc:	0052      	lsls	r2, r2, #1
 80033ce:	5ad3      	ldrh	r3, [r2, r3]
 80033d0:	0019      	movs	r1, r3
 80033d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033d4:	f7fc fe9e 	bl	8000114 <__udivsi3>
 80033d8:	0003      	movs	r3, r0
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	0013      	movs	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	189b      	adds	r3, r3, r2
 80033e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d305      	bcc.n	80033f8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d906      	bls.n	8003406 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80033f8:	231a      	movs	r3, #26
 80033fa:	2220      	movs	r2, #32
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e044      	b.n	8003490 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003412:	4b96      	ldr	r3, [pc, #600]	; (800366c <UART_SetConfig+0x6a8>)
 8003414:	0052      	lsls	r2, r2, #1
 8003416:	5ad3      	ldrh	r3, [r2, r3]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	69b8      	ldr	r0, [r7, #24]
 8003424:	69f9      	ldr	r1, [r7, #28]
 8003426:	f7fc ffeb 	bl	8000400 <__aeabi_uldivmod>
 800342a:	0002      	movs	r2, r0
 800342c:	000b      	movs	r3, r1
 800342e:	0e11      	lsrs	r1, r2, #24
 8003430:	021d      	lsls	r5, r3, #8
 8003432:	430d      	orrs	r5, r1
 8003434:	0214      	lsls	r4, r2, #8
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68b8      	ldr	r0, [r7, #8]
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	1900      	adds	r0, r0, r4
 8003448:	4169      	adcs	r1, r5
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f7fc ffd2 	bl	8000400 <__aeabi_uldivmod>
 800345c:	0002      	movs	r2, r0
 800345e:	000b      	movs	r3, r1
 8003460:	0013      	movs	r3, r2
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003466:	23c0      	movs	r3, #192	; 0xc0
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	429a      	cmp	r2, r3
 800346c:	d309      	bcc.n	8003482 <UART_SetConfig+0x4be>
 800346e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	035b      	lsls	r3, r3, #13
 8003474:	429a      	cmp	r2, r3
 8003476:	d204      	bcs.n	8003482 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347e:	60da      	str	r2, [r3, #12]
 8003480:	e006      	b.n	8003490 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003482:	231a      	movs	r3, #26
 8003484:	2220      	movs	r2, #32
 8003486:	189b      	adds	r3, r3, r2
 8003488:	19db      	adds	r3, r3, r7
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800348e:	e0d0      	b.n	8003632 <UART_SetConfig+0x66e>
 8003490:	e0cf      	b.n	8003632 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	429a      	cmp	r2, r3
 800349c:	d000      	beq.n	80034a0 <UART_SetConfig+0x4dc>
 800349e:	e070      	b.n	8003582 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80034a0:	231b      	movs	r3, #27
 80034a2:	2220      	movs	r2, #32
 80034a4:	189b      	adds	r3, r3, r2
 80034a6:	19db      	adds	r3, r3, r7
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d015      	beq.n	80034da <UART_SetConfig+0x516>
 80034ae:	dc18      	bgt.n	80034e2 <UART_SetConfig+0x51e>
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d00d      	beq.n	80034d0 <UART_SetConfig+0x50c>
 80034b4:	dc15      	bgt.n	80034e2 <UART_SetConfig+0x51e>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <UART_SetConfig+0x4fc>
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d005      	beq.n	80034ca <UART_SetConfig+0x506>
 80034be:	e010      	b.n	80034e2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c0:	f7fe fe86 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 80034c4:	0003      	movs	r3, r0
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034c8:	e014      	b.n	80034f4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034ca:	4b67      	ldr	r3, [pc, #412]	; (8003668 <UART_SetConfig+0x6a4>)
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ce:	e011      	b.n	80034f4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d0:	f7fe fdf2 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 80034d4:	0003      	movs	r3, r0
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034d8:	e00c      	b.n	80034f4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034e0:	e008      	b.n	80034f4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034e6:	231a      	movs	r3, #26
 80034e8:	2220      	movs	r2, #32
 80034ea:	189b      	adds	r3, r3, r2
 80034ec:	19db      	adds	r3, r3, r7
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
        break;
 80034f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d100      	bne.n	80034fc <UART_SetConfig+0x538>
 80034fa:	e09a      	b.n	8003632 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003500:	4b5a      	ldr	r3, [pc, #360]	; (800366c <UART_SetConfig+0x6a8>)
 8003502:	0052      	lsls	r2, r2, #1
 8003504:	5ad3      	ldrh	r3, [r2, r3]
 8003506:	0019      	movs	r1, r3
 8003508:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800350a:	f7fc fe03 	bl	8000114 <__udivsi3>
 800350e:	0003      	movs	r3, r0
 8003510:	005a      	lsls	r2, r3, #1
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	18d2      	adds	r2, r2, r3
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	0019      	movs	r1, r3
 8003520:	0010      	movs	r0, r2
 8003522:	f7fc fdf7 	bl	8000114 <__udivsi3>
 8003526:	0003      	movs	r3, r0
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	2b0f      	cmp	r3, #15
 800352e:	d921      	bls.n	8003574 <UART_SetConfig+0x5b0>
 8003530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	025b      	lsls	r3, r3, #9
 8003536:	429a      	cmp	r2, r3
 8003538:	d21c      	bcs.n	8003574 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	b29a      	uxth	r2, r3
 800353e:	200e      	movs	r0, #14
 8003540:	2420      	movs	r4, #32
 8003542:	1903      	adds	r3, r0, r4
 8003544:	19db      	adds	r3, r3, r7
 8003546:	210f      	movs	r1, #15
 8003548:	438a      	bics	r2, r1
 800354a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	2207      	movs	r2, #7
 8003554:	4013      	ands	r3, r2
 8003556:	b299      	uxth	r1, r3
 8003558:	1903      	adds	r3, r0, r4
 800355a:	19db      	adds	r3, r3, r7
 800355c:	1902      	adds	r2, r0, r4
 800355e:	19d2      	adds	r2, r2, r7
 8003560:	8812      	ldrh	r2, [r2, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	1902      	adds	r2, r0, r4
 800356c:	19d2      	adds	r2, r2, r7
 800356e:	8812      	ldrh	r2, [r2, #0]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	e05e      	b.n	8003632 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003574:	231a      	movs	r3, #26
 8003576:	2220      	movs	r2, #32
 8003578:	189b      	adds	r3, r3, r2
 800357a:	19db      	adds	r3, r3, r7
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e057      	b.n	8003632 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003582:	231b      	movs	r3, #27
 8003584:	2220      	movs	r2, #32
 8003586:	189b      	adds	r3, r3, r2
 8003588:	19db      	adds	r3, r3, r7
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d015      	beq.n	80035bc <UART_SetConfig+0x5f8>
 8003590:	dc18      	bgt.n	80035c4 <UART_SetConfig+0x600>
 8003592:	2b04      	cmp	r3, #4
 8003594:	d00d      	beq.n	80035b2 <UART_SetConfig+0x5ee>
 8003596:	dc15      	bgt.n	80035c4 <UART_SetConfig+0x600>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <UART_SetConfig+0x5de>
 800359c:	2b02      	cmp	r3, #2
 800359e:	d005      	beq.n	80035ac <UART_SetConfig+0x5e8>
 80035a0:	e010      	b.n	80035c4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a2:	f7fe fe15 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 80035a6:	0003      	movs	r3, r0
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035aa:	e014      	b.n	80035d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ac:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <UART_SetConfig+0x6a4>)
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035b0:	e011      	b.n	80035d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b2:	f7fe fd81 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 80035b6:	0003      	movs	r3, r0
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035ba:	e00c      	b.n	80035d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035c2:	e008      	b.n	80035d6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035c8:	231a      	movs	r3, #26
 80035ca:	2220      	movs	r2, #32
 80035cc:	189b      	adds	r3, r3, r2
 80035ce:	19db      	adds	r3, r3, r7
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
        break;
 80035d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02a      	beq.n	8003632 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e0:	4b22      	ldr	r3, [pc, #136]	; (800366c <UART_SetConfig+0x6a8>)
 80035e2:	0052      	lsls	r2, r2, #1
 80035e4:	5ad3      	ldrh	r3, [r2, r3]
 80035e6:	0019      	movs	r1, r3
 80035e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035ea:	f7fc fd93 	bl	8000114 <__udivsi3>
 80035ee:	0003      	movs	r3, r0
 80035f0:	001a      	movs	r2, r3
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	18d2      	adds	r2, r2, r3
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	0019      	movs	r1, r3
 8003600:	0010      	movs	r0, r2
 8003602:	f7fc fd87 	bl	8000114 <__udivsi3>
 8003606:	0003      	movs	r3, r0
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	2b0f      	cmp	r3, #15
 800360e:	d90a      	bls.n	8003626 <UART_SetConfig+0x662>
 8003610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	025b      	lsls	r3, r3, #9
 8003616:	429a      	cmp	r2, r3
 8003618:	d205      	bcs.n	8003626 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	b29a      	uxth	r2, r3
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e005      	b.n	8003632 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003626:	231a      	movs	r3, #26
 8003628:	2220      	movs	r2, #32
 800362a:	189b      	adds	r3, r3, r2
 800362c:	19db      	adds	r3, r3, r7
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	226a      	movs	r2, #106	; 0x6a
 8003636:	2101      	movs	r1, #1
 8003638:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	2268      	movs	r2, #104	; 0x68
 800363e:	2101      	movs	r1, #1
 8003640:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	2200      	movs	r2, #0
 8003646:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	2200      	movs	r2, #0
 800364c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800364e:	231a      	movs	r3, #26
 8003650:	2220      	movs	r2, #32
 8003652:	189b      	adds	r3, r3, r2
 8003654:	19db      	adds	r3, r3, r7
 8003656:	781b      	ldrb	r3, [r3, #0]
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b010      	add	sp, #64	; 0x40
 800365e:	bdb0      	pop	{r4, r5, r7, pc}
 8003660:	40008000 	.word	0x40008000
 8003664:	40008400 	.word	0x40008400
 8003668:	00f42400 	.word	0x00f42400
 800366c:	080049b4 	.word	0x080049b4

08003670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	2201      	movs	r2, #1
 800367e:	4013      	ands	r3, r2
 8003680:	d00b      	beq.n	800369a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a4a      	ldr	r2, [pc, #296]	; (80037b4 <UART_AdvFeatureConfig+0x144>)
 800368a:	4013      	ands	r3, r2
 800368c:	0019      	movs	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	2202      	movs	r2, #2
 80036a0:	4013      	ands	r3, r2
 80036a2:	d00b      	beq.n	80036bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4a43      	ldr	r2, [pc, #268]	; (80037b8 <UART_AdvFeatureConfig+0x148>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	0019      	movs	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	2204      	movs	r2, #4
 80036c2:	4013      	ands	r3, r2
 80036c4:	d00b      	beq.n	80036de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <UART_AdvFeatureConfig+0x14c>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	2208      	movs	r2, #8
 80036e4:	4013      	ands	r3, r2
 80036e6:	d00b      	beq.n	8003700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a34      	ldr	r2, [pc, #208]	; (80037c0 <UART_AdvFeatureConfig+0x150>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2210      	movs	r2, #16
 8003706:	4013      	ands	r3, r2
 8003708:	d00b      	beq.n	8003722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <UART_AdvFeatureConfig+0x154>)
 8003712:	4013      	ands	r3, r2
 8003714:	0019      	movs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	2220      	movs	r2, #32
 8003728:	4013      	ands	r3, r2
 800372a:	d00b      	beq.n	8003744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <UART_AdvFeatureConfig+0x158>)
 8003734:	4013      	ands	r3, r2
 8003736:	0019      	movs	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	2240      	movs	r2, #64	; 0x40
 800374a:	4013      	ands	r3, r2
 800374c:	d01d      	beq.n	800378a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <UART_AdvFeatureConfig+0x15c>)
 8003756:	4013      	ands	r3, r2
 8003758:	0019      	movs	r1, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	035b      	lsls	r3, r3, #13
 800376e:	429a      	cmp	r2, r3
 8003770:	d10b      	bne.n	800378a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <UART_AdvFeatureConfig+0x160>)
 800377a:	4013      	ands	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	4013      	ands	r3, r2
 8003792:	d00b      	beq.n	80037ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <UART_AdvFeatureConfig+0x164>)
 800379c:	4013      	ands	r3, r2
 800379e:	0019      	movs	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	fffdffff 	.word	0xfffdffff
 80037b8:	fffeffff 	.word	0xfffeffff
 80037bc:	fffbffff 	.word	0xfffbffff
 80037c0:	ffff7fff 	.word	0xffff7fff
 80037c4:	ffffefff 	.word	0xffffefff
 80037c8:	ffffdfff 	.word	0xffffdfff
 80037cc:	ffefffff 	.word	0xffefffff
 80037d0:	ff9fffff 	.word	0xff9fffff
 80037d4:	fff7ffff 	.word	0xfff7ffff

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	228c      	movs	r2, #140	; 0x8c
 80037e4:	2100      	movs	r1, #0
 80037e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fa84 	bl	8000cf4 <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2208      	movs	r2, #8
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d10c      	bne.n	8003818 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	0391      	lsls	r1, r2, #14
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4a18      	ldr	r2, [pc, #96]	; (8003868 <UART_CheckIdleState+0x90>)
 8003808:	9200      	str	r2, [sp, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	f000 f82e 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d001      	beq.n	8003818 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e023      	b.n	8003860 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2204      	movs	r2, #4
 8003820:	4013      	ands	r3, r2
 8003822:	2b04      	cmp	r3, #4
 8003824:	d10c      	bne.n	8003840 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2280      	movs	r2, #128	; 0x80
 800382a:	03d1      	lsls	r1, r2, #15
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <UART_CheckIdleState+0x90>)
 8003830:	9200      	str	r2, [sp, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	f000 f81a 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 8003838:	1e03      	subs	r3, r0, #0
 800383a:	d001      	beq.n	8003840 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e00f      	b.n	8003860 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2284      	movs	r2, #132	; 0x84
 8003844:	2120      	movs	r1, #32
 8003846:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2288      	movs	r2, #136	; 0x88
 800384c:	2120      	movs	r1, #32
 800384e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	2100      	movs	r1, #0
 800385c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b004      	add	sp, #16
 8003866:	bd80      	pop	{r7, pc}
 8003868:	01ffffff 	.word	0x01ffffff

0800386c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b094      	sub	sp, #80	; 0x50
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	1dfb      	adds	r3, r7, #7
 800387a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387c:	e0a7      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003880:	3301      	adds	r3, #1
 8003882:	d100      	bne.n	8003886 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003884:	e0a3      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fd fa35 	bl	8000cf4 <HAL_GetTick>
 800388a:	0002      	movs	r2, r0
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <UART_WaitOnFlagUntilTimeout+0x30>
 8003896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003898:	2b00      	cmp	r3, #0
 800389a:	d13f      	bne.n	800391c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389c:	f3ef 8310 	mrs	r3, PRIMASK
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038a4:	647b      	str	r3, [r7, #68]	; 0x44
 80038a6:	2301      	movs	r3, #1
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	f383 8810 	msr	PRIMASK, r3
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	494e      	ldr	r1, [pc, #312]	; (80039f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80038be:	400a      	ands	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	f383 8810 	msr	PRIMASK, r3
}
 80038cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ce:	f3ef 8310 	mrs	r3, PRIMASK
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40
 80038d8:	2301      	movs	r3, #1
 80038da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	f383 8810 	msr	PRIMASK, r3
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2101      	movs	r1, #1
 80038f0:	438a      	bics	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fa:	f383 8810 	msr	PRIMASK, r3
}
 80038fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2284      	movs	r2, #132	; 0x84
 8003904:	2120      	movs	r1, #32
 8003906:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2288      	movs	r2, #136	; 0x88
 800390c:	2120      	movs	r1, #32
 800390e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2280      	movs	r2, #128	; 0x80
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e069      	b.n	80039f0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2204      	movs	r2, #4
 8003924:	4013      	ands	r3, r2
 8003926:	d052      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69da      	ldr	r2, [r3, #28]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	401a      	ands	r2, r3
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	429a      	cmp	r2, r3
 800393a:	d148      	bne.n	80039ce <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	613b      	str	r3, [r7, #16]
  return(result);
 800394c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003950:	2301      	movs	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4924      	ldr	r1, [pc, #144]	; (80039f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003968:	400a      	ands	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	61fb      	str	r3, [r7, #28]
  return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
 8003982:	2301      	movs	r3, #1
 8003984:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	438a      	bics	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2284      	movs	r2, #132	; 0x84
 80039ae:	2120      	movs	r1, #32
 80039b0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2288      	movs	r2, #136	; 0x88
 80039b6:	2120      	movs	r1, #32
 80039b8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	228c      	movs	r2, #140	; 0x8c
 80039be:	2120      	movs	r1, #32
 80039c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2280      	movs	r2, #128	; 0x80
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e010      	b.n	80039f0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	425a      	negs	r2, r3
 80039de:	4153      	adcs	r3, r2
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	001a      	movs	r2, r3
 80039e4:	1dfb      	adds	r3, r7, #7
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d100      	bne.n	80039ee <UART_WaitOnFlagUntilTimeout+0x182>
 80039ec:	e747      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b014      	add	sp, #80	; 0x50
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	fffffe5f 	.word	0xfffffe5f

080039fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b098      	sub	sp, #96	; 0x60
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1dba      	adds	r2, r7, #6
 8003a14:	215c      	movs	r1, #92	; 0x5c
 8003a16:	8812      	ldrh	r2, [r2, #0]
 8003a18:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1dba      	adds	r2, r7, #6
 8003a1e:	215e      	movs	r1, #94	; 0x5e
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	015b      	lsls	r3, r3, #5
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10d      	bne.n	8003a52 <UART_Start_Receive_IT+0x56>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <UART_Start_Receive_IT+0x4c>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2260      	movs	r2, #96	; 0x60
 8003a42:	497f      	ldr	r1, [pc, #508]	; (8003c40 <UART_Start_Receive_IT+0x244>)
 8003a44:	5299      	strh	r1, [r3, r2]
 8003a46:	e02e      	b.n	8003aa6 <UART_Start_Receive_IT+0xaa>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2260      	movs	r2, #96	; 0x60
 8003a4c:	21ff      	movs	r1, #255	; 0xff
 8003a4e:	5299      	strh	r1, [r3, r2]
 8003a50:	e029      	b.n	8003aa6 <UART_Start_Receive_IT+0xaa>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <UART_Start_Receive_IT+0x7a>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <UART_Start_Receive_IT+0x70>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2260      	movs	r2, #96	; 0x60
 8003a66:	21ff      	movs	r1, #255	; 0xff
 8003a68:	5299      	strh	r1, [r3, r2]
 8003a6a:	e01c      	b.n	8003aa6 <UART_Start_Receive_IT+0xaa>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2260      	movs	r2, #96	; 0x60
 8003a70:	217f      	movs	r1, #127	; 0x7f
 8003a72:	5299      	strh	r1, [r3, r2]
 8003a74:	e017      	b.n	8003aa6 <UART_Start_Receive_IT+0xaa>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	055b      	lsls	r3, r3, #21
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d10d      	bne.n	8003a9e <UART_Start_Receive_IT+0xa2>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d104      	bne.n	8003a94 <UART_Start_Receive_IT+0x98>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2260      	movs	r2, #96	; 0x60
 8003a8e:	217f      	movs	r1, #127	; 0x7f
 8003a90:	5299      	strh	r1, [r3, r2]
 8003a92:	e008      	b.n	8003aa6 <UART_Start_Receive_IT+0xaa>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2260      	movs	r2, #96	; 0x60
 8003a98:	213f      	movs	r1, #63	; 0x3f
 8003a9a:	5299      	strh	r1, [r3, r2]
 8003a9c:	e003      	b.n	8003aa6 <UART_Start_Receive_IT+0xaa>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2260      	movs	r2, #96	; 0x60
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	228c      	movs	r2, #140	; 0x8c
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2288      	movs	r2, #136	; 0x88
 8003ab2:	2122      	movs	r1, #34	; 0x22
 8003ab4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aba:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae2:	f383 8810 	msr	PRIMASK, r3
}
 8003ae6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	059b      	lsls	r3, r3, #22
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d154      	bne.n	8003b9e <UART_Start_Receive_IT+0x1a2>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2268      	movs	r2, #104	; 0x68
 8003af8:	5a9b      	ldrh	r3, [r3, r2]
 8003afa:	1dba      	adds	r2, r7, #6
 8003afc:	8812      	ldrh	r2, [r2, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d34d      	bcc.n	8003b9e <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	015b      	lsls	r3, r3, #5
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d107      	bne.n	8003b1e <UART_Start_Receive_IT+0x122>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a4a      	ldr	r2, [pc, #296]	; (8003c44 <UART_Start_Receive_IT+0x248>)
 8003b1a:	671a      	str	r2, [r3, #112]	; 0x70
 8003b1c:	e002      	b.n	8003b24 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a49      	ldr	r2, [pc, #292]	; (8003c48 <UART_Start_Receive_IT+0x24c>)
 8003b22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2280      	movs	r2, #128	; 0x80
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d019      	beq.n	8003b68 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b34:	f3ef 8310 	mrs	r3, PRIMASK
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b3e:	2301      	movs	r3, #1
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	0049      	lsls	r1, r1, #1
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	f383 8810 	msr	PRIMASK, r3
}
 8003b66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b68:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b70:	657b      	str	r3, [r7, #84]	; 0x54
 8003b72:	2301      	movs	r3, #1
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	0549      	lsls	r1, r1, #21
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b92:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	f383 8810 	msr	PRIMASK, r3
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	e04b      	b.n	8003c36 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	015b      	lsls	r3, r3, #5
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d107      	bne.n	8003bba <UART_Start_Receive_IT+0x1be>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <UART_Start_Receive_IT+0x250>)
 8003bb6:	671a      	str	r2, [r3, #112]	; 0x70
 8003bb8:	e002      	b.n	8003bc0 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a24      	ldr	r2, [pc, #144]	; (8003c50 <UART_Start_Receive_IT+0x254>)
 8003bbe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d019      	beq.n	8003c04 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bda:	2301      	movs	r3, #1
 8003bdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2190      	movs	r1, #144	; 0x90
 8003bf2:	0049      	lsls	r1, r1, #1
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	f383 8810 	msr	PRIMASK, r3
}
 8003c02:	e018      	b.n	8003c36 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c04:	f3ef 8310 	mrs	r3, PRIMASK
 8003c08:	613b      	str	r3, [r7, #16]
  return(result);
 8003c0a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c0e:	2301      	movs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f383 8810 	msr	PRIMASK, r3
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2120      	movs	r1, #32
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f383 8810 	msr	PRIMASK, r3
}
 8003c34:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b018      	add	sp, #96	; 0x60
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	000001ff 	.word	0x000001ff
 8003c44:	08004365 	.word	0x08004365
 8003c48:	08004081 	.word	0x08004081
 8003c4c:	08003f15 	.word	0x08003f15
 8003c50:	08003da9 	.word	0x08003da9

08003c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	; 0x38
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c60:	617b      	str	r3, [r7, #20]
  return(result);
 8003c62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
 8003c66:	2301      	movs	r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f383 8810 	msr	PRIMASK, r3
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4926      	ldr	r1, [pc, #152]	; (8003d18 <UART_EndRxTransfer+0xc4>)
 8003c7e:	400a      	ands	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f383 8810 	msr	PRIMASK, r3
}
 8003c8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c92:	623b      	str	r3, [r7, #32]
  return(result);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
 8003c98:	2301      	movs	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	491b      	ldr	r1, [pc, #108]	; (8003d1c <UART_EndRxTransfer+0xc8>)
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	f383 8810 	msr	PRIMASK, r3
}
 8003cbe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d118      	bne.n	8003cfa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ccc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f383 8810 	msr	PRIMASK, r3
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2110      	movs	r1, #16
 8003cea:	438a      	bics	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f383 8810 	msr	PRIMASK, r3
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2288      	movs	r2, #136	; 0x88
 8003cfe:	2120      	movs	r1, #32
 8003d00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b00e      	add	sp, #56	; 0x38
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	fffffedf 	.word	0xfffffedf
 8003d1c:	effffffe 	.word	0xeffffffe

08003d20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	225e      	movs	r2, #94	; 0x5e
 8003d32:	2100      	movs	r1, #0
 8003d34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2256      	movs	r2, #86	; 0x56
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7ff f92b 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b004      	add	sp, #16
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b086      	sub	sp, #24
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d56:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	2301      	movs	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f383 8810 	msr	PRIMASK, r3
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2140      	movs	r1, #64	; 0x40
 8003d78:	438a      	bics	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f383 8810 	msr	PRIMASK, r3
}
 8003d86:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2284      	movs	r2, #132	; 0x84
 8003d8c:	2120      	movs	r1, #32
 8003d8e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7ff f8f7 	bl	8002f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b006      	add	sp, #24
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b090      	sub	sp, #64	; 0x40
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003db0:	203e      	movs	r0, #62	; 0x3e
 8003db2:	183b      	adds	r3, r7, r0
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	2160      	movs	r1, #96	; 0x60
 8003db8:	5a52      	ldrh	r2, [r2, r1]
 8003dba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2288      	movs	r2, #136	; 0x88
 8003dc0:	589b      	ldr	r3, [r3, r2]
 8003dc2:	2b22      	cmp	r3, #34	; 0x22
 8003dc4:	d000      	beq.n	8003dc8 <UART_RxISR_8BIT+0x20>
 8003dc6:	e097      	b.n	8003ef8 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dce:	213c      	movs	r1, #60	; 0x3c
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	183b      	adds	r3, r7, r0
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b2d9      	uxtb	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	400a      	ands	r2, r1
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	225e      	movs	r2, #94	; 0x5e
 8003df8:	5a9b      	ldrh	r3, [r3, r2]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b299      	uxth	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	225e      	movs	r2, #94	; 0x5e
 8003e04:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	225e      	movs	r2, #94	; 0x5e
 8003e0a:	5a9b      	ldrh	r3, [r3, r2]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d000      	beq.n	8003e14 <UART_RxISR_8BIT+0x6c>
 8003e12:	e079      	b.n	8003f08 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e14:	f3ef 8310 	mrs	r3, PRIMASK
 8003e18:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f383 8810 	msr	PRIMASK, r3
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4936      	ldr	r1, [pc, #216]	; (8003f10 <UART_RxISR_8BIT+0x168>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f383 8810 	msr	PRIMASK, r3
}
 8003e44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e46:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e50:	2301      	movs	r3, #1
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	f383 8810 	msr	PRIMASK, r3
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	438a      	bics	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	f383 8810 	msr	PRIMASK, r3
}
 8003e76:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2288      	movs	r2, #136	; 0x88
 8003e7c:	2120      	movs	r1, #32
 8003e7e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d12f      	bne.n	8003eee <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e94:	f3ef 8310 	mrs	r3, PRIMASK
 8003e98:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e9a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f383 8810 	msr	PRIMASK, r3
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2110      	movs	r1, #16
 8003eb6:	438a      	bics	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f383 8810 	msr	PRIMASK, r3
}
 8003ec4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d103      	bne.n	8003edc <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	225c      	movs	r2, #92	; 0x5c
 8003ee0:	5a9a      	ldrh	r2, [r3, r2]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0011      	movs	r1, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff f860 	bl	8002fac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003eec:	e00c      	b.n	8003f08 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7fc fb9b 	bl	800062c <HAL_UART_RxCpltCallback>
}
 8003ef6:	e007      	b.n	8003f08 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2108      	movs	r1, #8
 8003f04:	430a      	orrs	r2, r1
 8003f06:	619a      	str	r2, [r3, #24]
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b010      	add	sp, #64	; 0x40
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	fffffedf 	.word	0xfffffedf

08003f14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b090      	sub	sp, #64	; 0x40
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f1c:	203e      	movs	r0, #62	; 0x3e
 8003f1e:	183b      	adds	r3, r7, r0
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	2160      	movs	r1, #96	; 0x60
 8003f24:	5a52      	ldrh	r2, [r2, r1]
 8003f26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2288      	movs	r2, #136	; 0x88
 8003f2c:	589b      	ldr	r3, [r3, r2]
 8003f2e:	2b22      	cmp	r3, #34	; 0x22
 8003f30:	d000      	beq.n	8003f34 <UART_RxISR_16BIT+0x20>
 8003f32:	e097      	b.n	8004064 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f3a:	213c      	movs	r1, #60	; 0x3c
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	183a      	adds	r2, r7, r0
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	8812      	ldrh	r2, [r2, #0]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	1c9a      	adds	r2, r3, #2
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	225e      	movs	r2, #94	; 0x5e
 8003f64:	5a9b      	ldrh	r3, [r3, r2]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b299      	uxth	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	225e      	movs	r2, #94	; 0x5e
 8003f70:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	225e      	movs	r2, #94	; 0x5e
 8003f76:	5a9b      	ldrh	r3, [r3, r2]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d000      	beq.n	8003f80 <UART_RxISR_16BIT+0x6c>
 8003f7e:	e079      	b.n	8004074 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f80:	f3ef 8310 	mrs	r3, PRIMASK
 8003f84:	617b      	str	r3, [r7, #20]
  return(result);
 8003f86:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f383 8810 	msr	PRIMASK, r3
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4936      	ldr	r1, [pc, #216]	; (800407c <UART_RxISR_16BIT+0x168>)
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb6:	623b      	str	r3, [r7, #32]
  return(result);
 8003fb8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2288      	movs	r2, #136	; 0x88
 8003fe8:	2120      	movs	r1, #32
 8003fea:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d12f      	bne.n	800405a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004000:	f3ef 8310 	mrs	r3, PRIMASK
 8004004:	60bb      	str	r3, [r7, #8]
  return(result);
 8004006:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400a:	2301      	movs	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f383 8810 	msr	PRIMASK, r3
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2110      	movs	r1, #16
 8004022:	438a      	bics	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f383 8810 	msr	PRIMASK, r3
}
 8004030:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	2210      	movs	r2, #16
 800403a:	4013      	ands	r3, r2
 800403c:	2b10      	cmp	r3, #16
 800403e:	d103      	bne.n	8004048 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2210      	movs	r2, #16
 8004046:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	225c      	movs	r2, #92	; 0x5c
 800404c:	5a9a      	ldrh	r2, [r3, r2]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0011      	movs	r1, r2
 8004052:	0018      	movs	r0, r3
 8004054:	f7fe ffaa 	bl	8002fac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004058:	e00c      	b.n	8004074 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f7fc fae5 	bl	800062c <HAL_UART_RxCpltCallback>
}
 8004062:	e007      	b.n	8004074 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2108      	movs	r1, #8
 8004070:	430a      	orrs	r2, r1
 8004072:	619a      	str	r2, [r3, #24]
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b010      	add	sp, #64	; 0x40
 800407a:	bd80      	pop	{r7, pc}
 800407c:	fffffedf 	.word	0xfffffedf

08004080 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b09c      	sub	sp, #112	; 0x70
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004088:	236a      	movs	r3, #106	; 0x6a
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	2160      	movs	r1, #96	; 0x60
 8004090:	5a52      	ldrh	r2, [r2, r1]
 8004092:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2288      	movs	r2, #136	; 0x88
 80040b0:	589b      	ldr	r3, [r3, r2]
 80040b2:	2b22      	cmp	r3, #34	; 0x22
 80040b4:	d000      	beq.n	80040b8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80040b6:	e141      	b.n	800433c <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80040b8:	235e      	movs	r3, #94	; 0x5e
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	2168      	movs	r1, #104	; 0x68
 80040c0:	5a52      	ldrh	r2, [r2, r1]
 80040c2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80040c4:	e0e8      	b.n	8004298 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040cc:	215c      	movs	r1, #92	; 0x5c
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040d2:	187b      	adds	r3, r7, r1
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	236a      	movs	r3, #106	; 0x6a
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b2d9      	uxtb	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	400a      	ands	r2, r1
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	225e      	movs	r2, #94	; 0x5e
 80040f8:	5a9b      	ldrh	r3, [r3, r2]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b299      	uxth	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	225e      	movs	r2, #94	; 0x5e
 8004104:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800410e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004110:	2207      	movs	r2, #7
 8004112:	4013      	ands	r3, r2
 8004114:	d049      	beq.n	80041aa <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004118:	2201      	movs	r2, #1
 800411a:	4013      	ands	r3, r2
 800411c:	d010      	beq.n	8004140 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800411e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4013      	ands	r3, r2
 8004126:	d00b      	beq.n	8004140 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	228c      	movs	r2, #140	; 0x8c
 8004134:	589b      	ldr	r3, [r3, r2]
 8004136:	2201      	movs	r2, #1
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	218c      	movs	r1, #140	; 0x8c
 800413e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	2202      	movs	r2, #2
 8004144:	4013      	ands	r3, r2
 8004146:	d00f      	beq.n	8004168 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800414a:	2201      	movs	r2, #1
 800414c:	4013      	ands	r3, r2
 800414e:	d00b      	beq.n	8004168 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2202      	movs	r2, #2
 8004156:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	228c      	movs	r2, #140	; 0x8c
 800415c:	589b      	ldr	r3, [r3, r2]
 800415e:	2204      	movs	r2, #4
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	218c      	movs	r1, #140	; 0x8c
 8004166:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	2204      	movs	r2, #4
 800416c:	4013      	ands	r3, r2
 800416e:	d00f      	beq.n	8004190 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004172:	2201      	movs	r2, #1
 8004174:	4013      	ands	r3, r2
 8004176:	d00b      	beq.n	8004190 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2204      	movs	r2, #4
 800417e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	228c      	movs	r2, #140	; 0x8c
 8004184:	589b      	ldr	r3, [r3, r2]
 8004186:	2202      	movs	r2, #2
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	218c      	movs	r1, #140	; 0x8c
 800418e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	228c      	movs	r2, #140	; 0x8c
 8004194:	589b      	ldr	r3, [r3, r2]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	0018      	movs	r0, r3
 800419e:	f7fe fefd 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	228c      	movs	r2, #140	; 0x8c
 80041a6:	2100      	movs	r1, #0
 80041a8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	225e      	movs	r2, #94	; 0x5e
 80041ae:	5a9b      	ldrh	r3, [r3, r2]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d170      	bne.n	8004298 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041be:	65bb      	str	r3, [r7, #88]	; 0x58
 80041c0:	2301      	movs	r3, #1
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	495f      	ldr	r1, [pc, #380]	; (8004354 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 80041d8:	400a      	ands	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	f383 8810 	msr	PRIMASK, r3
}
 80041e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ec:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041f0:	657b      	str	r3, [r7, #84]	; 0x54
 80041f2:	2301      	movs	r3, #1
 80041f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f8:	f383 8810 	msr	PRIMASK, r3
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4953      	ldr	r1, [pc, #332]	; (8004358 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800420a:	400a      	ands	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004210:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004214:	f383 8810 	msr	PRIMASK, r3
}
 8004218:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2288      	movs	r2, #136	; 0x88
 800421e:	2120      	movs	r1, #32
 8004220:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d12f      	bne.n	8004290 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004236:	f3ef 8310 	mrs	r3, PRIMASK
 800423a:	623b      	str	r3, [r7, #32]
  return(result);
 800423c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423e:	653b      	str	r3, [r7, #80]	; 0x50
 8004240:	2301      	movs	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	f383 8810 	msr	PRIMASK, r3
}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2110      	movs	r1, #16
 8004258:	438a      	bics	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	2210      	movs	r2, #16
 8004270:	4013      	ands	r3, r2
 8004272:	2b10      	cmp	r3, #16
 8004274:	d103      	bne.n	800427e <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	225c      	movs	r2, #92	; 0x5c
 8004282:	5a9a      	ldrh	r2, [r3, r2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0011      	movs	r1, r2
 8004288:	0018      	movs	r0, r3
 800428a:	f7fe fe8f 	bl	8002fac <HAL_UARTEx_RxEventCallback>
 800428e:	e003      	b.n	8004298 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	0018      	movs	r0, r3
 8004294:	f7fc f9ca 	bl	800062c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004298:	235e      	movs	r3, #94	; 0x5e
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <UART_RxISR_8BIT_FIFOEN+0x22c>
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	2220      	movs	r2, #32
 80042a6:	4013      	ands	r3, r2
 80042a8:	d000      	beq.n	80042ac <UART_RxISR_8BIT_FIFOEN+0x22c>
 80042aa:	e70c      	b.n	80040c6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80042ac:	204e      	movs	r0, #78	; 0x4e
 80042ae:	183b      	adds	r3, r7, r0
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	215e      	movs	r1, #94	; 0x5e
 80042b4:	5a52      	ldrh	r2, [r2, r1]
 80042b6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042b8:	0001      	movs	r1, r0
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d044      	beq.n	800434c <UART_RxISR_8BIT_FIFOEN+0x2cc>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2268      	movs	r2, #104	; 0x68
 80042c6:	5a9b      	ldrh	r3, [r3, r2]
 80042c8:	187a      	adds	r2, r7, r1
 80042ca:	8812      	ldrh	r2, [r2, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d23d      	bcs.n	800434c <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
 80042d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80042d6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80042da:	2301      	movs	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	491a      	ldr	r1, [pc, #104]	; (800435c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80042f2:	400a      	ands	r2, r1
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f383 8810 	msr	PRIMASK, r3
}
 8004300:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a16      	ldr	r2, [pc, #88]	; (8004360 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004306:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004308:	f3ef 8310 	mrs	r3, PRIMASK
 800430c:	617b      	str	r3, [r7, #20]
  return(result);
 800430e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004310:	647b      	str	r3, [r7, #68]	; 0x44
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f383 8810 	msr	PRIMASK, r3
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2120      	movs	r1, #32
 800432a:	430a      	orrs	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800433a:	e007      	b.n	800434c <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2108      	movs	r1, #8
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b01c      	add	sp, #112	; 0x70
 8004352:	bd80      	pop	{r7, pc}
 8004354:	fffffeff 	.word	0xfffffeff
 8004358:	effffffe 	.word	0xeffffffe
 800435c:	efffffff 	.word	0xefffffff
 8004360:	08003da9 	.word	0x08003da9

08004364 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b09e      	sub	sp, #120	; 0x78
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800436c:	2372      	movs	r3, #114	; 0x72
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	2160      	movs	r1, #96	; 0x60
 8004374:	5a52      	ldrh	r2, [r2, r1]
 8004376:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2288      	movs	r2, #136	; 0x88
 8004394:	589b      	ldr	r3, [r3, r2]
 8004396:	2b22      	cmp	r3, #34	; 0x22
 8004398:	d000      	beq.n	800439c <UART_RxISR_16BIT_FIFOEN+0x38>
 800439a:	e141      	b.n	8004620 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800439c:	2366      	movs	r3, #102	; 0x66
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	2168      	movs	r1, #104	; 0x68
 80043a4:	5a52      	ldrh	r2, [r2, r1]
 80043a6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043a8:	e0e8      	b.n	800457c <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b0:	2164      	movs	r1, #100	; 0x64
 80043b2:	187b      	adds	r3, r7, r1
 80043b4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	2272      	movs	r2, #114	; 0x72
 80043c0:	18ba      	adds	r2, r7, r2
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	8812      	ldrh	r2, [r2, #0]
 80043c6:	4013      	ands	r3, r2
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	1c9a      	adds	r2, r3, #2
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	225e      	movs	r2, #94	; 0x5e
 80043dc:	5a9b      	ldrh	r3, [r3, r2]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b299      	uxth	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	225e      	movs	r2, #94	; 0x5e
 80043e8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80043f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f4:	2207      	movs	r2, #7
 80043f6:	4013      	ands	r3, r2
 80043f8:	d049      	beq.n	800448e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043fc:	2201      	movs	r2, #1
 80043fe:	4013      	ands	r3, r2
 8004400:	d010      	beq.n	8004424 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004402:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4013      	ands	r3, r2
 800440a:	d00b      	beq.n	8004424 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2201      	movs	r2, #1
 8004412:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	228c      	movs	r2, #140	; 0x8c
 8004418:	589b      	ldr	r3, [r3, r2]
 800441a:	2201      	movs	r2, #1
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	218c      	movs	r1, #140	; 0x8c
 8004422:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004426:	2202      	movs	r2, #2
 8004428:	4013      	ands	r3, r2
 800442a:	d00f      	beq.n	800444c <UART_RxISR_16BIT_FIFOEN+0xe8>
 800442c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800442e:	2201      	movs	r2, #1
 8004430:	4013      	ands	r3, r2
 8004432:	d00b      	beq.n	800444c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2202      	movs	r2, #2
 800443a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	228c      	movs	r2, #140	; 0x8c
 8004440:	589b      	ldr	r3, [r3, r2]
 8004442:	2204      	movs	r2, #4
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	218c      	movs	r1, #140	; 0x8c
 800444a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800444c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444e:	2204      	movs	r2, #4
 8004450:	4013      	ands	r3, r2
 8004452:	d00f      	beq.n	8004474 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004456:	2201      	movs	r2, #1
 8004458:	4013      	ands	r3, r2
 800445a:	d00b      	beq.n	8004474 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2204      	movs	r2, #4
 8004462:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	228c      	movs	r2, #140	; 0x8c
 8004468:	589b      	ldr	r3, [r3, r2]
 800446a:	2202      	movs	r2, #2
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	218c      	movs	r1, #140	; 0x8c
 8004472:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	228c      	movs	r2, #140	; 0x8c
 8004478:	589b      	ldr	r3, [r3, r2]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f7fe fd8b 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	228c      	movs	r2, #140	; 0x8c
 800448a:	2100      	movs	r1, #0
 800448c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	225e      	movs	r2, #94	; 0x5e
 8004492:	5a9b      	ldrh	r3, [r3, r2]
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d170      	bne.n	800457c <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800449a:	f3ef 8310 	mrs	r3, PRIMASK
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a4:	2301      	movs	r3, #1
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044aa:	f383 8810 	msr	PRIMASK, r3
}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	495f      	ldr	r1, [pc, #380]	; (8004638 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 80044bc:	400a      	ands	r2, r1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	f383 8810 	msr	PRIMASK, r3
}
 80044ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044cc:	f3ef 8310 	mrs	r3, PRIMASK
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80044d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044d6:	2301      	movs	r3, #1
 80044d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044dc:	f383 8810 	msr	PRIMASK, r3
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4953      	ldr	r1, [pc, #332]	; (800463c <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80044ee:	400a      	ands	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]
 80044f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044f4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f8:	f383 8810 	msr	PRIMASK, r3
}
 80044fc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2288      	movs	r2, #136	; 0x88
 8004502:	2120      	movs	r1, #32
 8004504:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d12f      	bne.n	8004574 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800451a:	f3ef 8310 	mrs	r3, PRIMASK
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004522:	657b      	str	r3, [r7, #84]	; 0x54
 8004524:	2301      	movs	r3, #1
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	f383 8810 	msr	PRIMASK, r3
}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2110      	movs	r1, #16
 800453c:	438a      	bics	r2, r1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	f383 8810 	msr	PRIMASK, r3
}
 800454a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	2210      	movs	r2, #16
 8004554:	4013      	ands	r3, r2
 8004556:	2b10      	cmp	r3, #16
 8004558:	d103      	bne.n	8004562 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2210      	movs	r2, #16
 8004560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	225c      	movs	r2, #92	; 0x5c
 8004566:	5a9a      	ldrh	r2, [r3, r2]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	0011      	movs	r1, r2
 800456c:	0018      	movs	r0, r3
 800456e:	f7fe fd1d 	bl	8002fac <HAL_UARTEx_RxEventCallback>
 8004572:	e003      	b.n	800457c <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	0018      	movs	r0, r3
 8004578:	f7fc f858 	bl	800062c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800457c:	2366      	movs	r3, #102	; 0x66
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004588:	2220      	movs	r2, #32
 800458a:	4013      	ands	r3, r2
 800458c:	d000      	beq.n	8004590 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800458e:	e70c      	b.n	80043aa <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004590:	2052      	movs	r0, #82	; 0x52
 8004592:	183b      	adds	r3, r7, r0
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	215e      	movs	r1, #94	; 0x5e
 8004598:	5a52      	ldrh	r2, [r2, r1]
 800459a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800459c:	0001      	movs	r1, r0
 800459e:	187b      	adds	r3, r7, r1
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d044      	beq.n	8004630 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2268      	movs	r2, #104	; 0x68
 80045aa:	5a9b      	ldrh	r3, [r3, r2]
 80045ac:	187a      	adds	r2, r7, r1
 80045ae:	8812      	ldrh	r2, [r2, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d23d      	bcs.n	8004630 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b4:	f3ef 8310 	mrs	r3, PRIMASK
 80045b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80045ba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80045bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045be:	2301      	movs	r3, #1
 80045c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	491a      	ldr	r1, [pc, #104]	; (8004640 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80045d6:	400a      	ands	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f383 8810 	msr	PRIMASK, r3
}
 80045e4:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a16      	ldr	r2, [pc, #88]	; (8004644 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80045ea:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ec:	f3ef 8310 	mrs	r3, PRIMASK
 80045f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80045f2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80045f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f6:	2301      	movs	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f383 8810 	msr	PRIMASK, r3
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2120      	movs	r1, #32
 800460e:	430a      	orrs	r2, r1
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004614:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800461e:	e007      	b.n	8004630 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2108      	movs	r1, #8
 800462c:	430a      	orrs	r2, r1
 800462e:	619a      	str	r2, [r3, #24]
}
 8004630:	46c0      	nop			; (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	b01e      	add	sp, #120	; 0x78
 8004636:	bd80      	pop	{r7, pc}
 8004638:	fffffeff 	.word	0xfffffeff
 800463c:	effffffe 	.word	0xeffffffe
 8004640:	efffffff 	.word	0xefffffff
 8004644:	08003f15 	.word	0x08003f15

08004648 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b002      	add	sp, #8
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b002      	add	sp, #8
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2280      	movs	r2, #128	; 0x80
 8004684:	5c9b      	ldrb	r3, [r3, r2]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_UARTEx_DisableFifoMode+0x16>
 800468a:	2302      	movs	r3, #2
 800468c:	e027      	b.n	80046de <HAL_UARTEx_DisableFifoMode+0x66>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2280      	movs	r2, #128	; 0x80
 8004692:	2101      	movs	r1, #1
 8004694:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2284      	movs	r2, #132	; 0x84
 800469a:	2124      	movs	r1, #36	; 0x24
 800469c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2101      	movs	r1, #1
 80046b2:	438a      	bics	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a0b      	ldr	r2, [pc, #44]	; (80046e8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2284      	movs	r2, #132	; 0x84
 80046d0:	2120      	movs	r1, #32
 80046d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	2100      	movs	r1, #0
 80046da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b004      	add	sp, #16
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	dfffffff 	.word	0xdfffffff

080046ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	5c9b      	ldrb	r3, [r3, r2]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004700:	2302      	movs	r3, #2
 8004702:	e02e      	b.n	8004762 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	2101      	movs	r1, #1
 800470a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2284      	movs	r2, #132	; 0x84
 8004710:	2124      	movs	r1, #36	; 0x24
 8004712:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2101      	movs	r1, #1
 8004728:	438a      	bics	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	08d9      	lsrs	r1, r3, #3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 f854 	bl	80047f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2284      	movs	r2, #132	; 0x84
 8004754:	2120      	movs	r1, #32
 8004756:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	2100      	movs	r1, #0
 800475e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	0018      	movs	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	b004      	add	sp, #16
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	5c9b      	ldrb	r3, [r3, r2]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e02f      	b.n	80047e4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	2101      	movs	r1, #1
 800478a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2284      	movs	r2, #132	; 0x84
 8004790:	2124      	movs	r1, #36	; 0x24
 8004792:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2101      	movs	r1, #1
 80047a8:	438a      	bics	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	4a0e      	ldr	r2, [pc, #56]	; (80047ec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	0019      	movs	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f000 f813 	bl	80047f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2284      	movs	r2, #132	; 0x84
 80047d6:	2120      	movs	r1, #32
 80047d8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2280      	movs	r2, #128	; 0x80
 80047de:	2100      	movs	r1, #0
 80047e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	0018      	movs	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b004      	add	sp, #16
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	f1ffffff 	.word	0xf1ffffff

080047f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d108      	bne.n	8004812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	226a      	movs	r2, #106	; 0x6a
 8004804:	2101      	movs	r1, #1
 8004806:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2268      	movs	r2, #104	; 0x68
 800480c:	2101      	movs	r1, #1
 800480e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004810:	e043      	b.n	800489a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004812:	260f      	movs	r6, #15
 8004814:	19bb      	adds	r3, r7, r6
 8004816:	2208      	movs	r2, #8
 8004818:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800481a:	200e      	movs	r0, #14
 800481c:	183b      	adds	r3, r7, r0
 800481e:	2208      	movs	r2, #8
 8004820:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	0e5b      	lsrs	r3, r3, #25
 800482a:	b2da      	uxtb	r2, r3
 800482c:	240d      	movs	r4, #13
 800482e:	193b      	adds	r3, r7, r4
 8004830:	2107      	movs	r1, #7
 8004832:	400a      	ands	r2, r1
 8004834:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	0f5b      	lsrs	r3, r3, #29
 800483e:	b2da      	uxtb	r2, r3
 8004840:	250c      	movs	r5, #12
 8004842:	197b      	adds	r3, r7, r5
 8004844:	2107      	movs	r1, #7
 8004846:	400a      	ands	r2, r1
 8004848:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800484a:	183b      	adds	r3, r7, r0
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	197a      	adds	r2, r7, r5
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	4914      	ldr	r1, [pc, #80]	; (80048a4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004854:	5c8a      	ldrb	r2, [r1, r2]
 8004856:	435a      	muls	r2, r3
 8004858:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800485a:	197b      	adds	r3, r7, r5
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004860:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004862:	0019      	movs	r1, r3
 8004864:	f7fb fce0 	bl	8000228 <__divsi3>
 8004868:	0003      	movs	r3, r0
 800486a:	b299      	uxth	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	226a      	movs	r2, #106	; 0x6a
 8004870:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004872:	19bb      	adds	r3, r7, r6
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	193a      	adds	r2, r7, r4
 8004878:	7812      	ldrb	r2, [r2, #0]
 800487a:	490a      	ldr	r1, [pc, #40]	; (80048a4 <UARTEx_SetNbDataToProcess+0xb4>)
 800487c:	5c8a      	ldrb	r2, [r1, r2]
 800487e:	435a      	muls	r2, r3
 8004880:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004882:	193b      	adds	r3, r7, r4
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004888:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800488a:	0019      	movs	r1, r3
 800488c:	f7fb fccc 	bl	8000228 <__divsi3>
 8004890:	0003      	movs	r3, r0
 8004892:	b299      	uxth	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2268      	movs	r2, #104	; 0x68
 8004898:	5299      	strh	r1, [r3, r2]
}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b005      	add	sp, #20
 80048a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	080049cc 	.word	0x080049cc
 80048a8:	080049d4 	.word	0x080049d4

080048ac <__libc_init_array>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	2600      	movs	r6, #0
 80048b0:	4d0c      	ldr	r5, [pc, #48]	; (80048e4 <__libc_init_array+0x38>)
 80048b2:	4c0d      	ldr	r4, [pc, #52]	; (80048e8 <__libc_init_array+0x3c>)
 80048b4:	1b64      	subs	r4, r4, r5
 80048b6:	10a4      	asrs	r4, r4, #2
 80048b8:	42a6      	cmp	r6, r4
 80048ba:	d109      	bne.n	80048d0 <__libc_init_array+0x24>
 80048bc:	2600      	movs	r6, #0
 80048be:	f000 f83d 	bl	800493c <_init>
 80048c2:	4d0a      	ldr	r5, [pc, #40]	; (80048ec <__libc_init_array+0x40>)
 80048c4:	4c0a      	ldr	r4, [pc, #40]	; (80048f0 <__libc_init_array+0x44>)
 80048c6:	1b64      	subs	r4, r4, r5
 80048c8:	10a4      	asrs	r4, r4, #2
 80048ca:	42a6      	cmp	r6, r4
 80048cc:	d105      	bne.n	80048da <__libc_init_array+0x2e>
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	00b3      	lsls	r3, r6, #2
 80048d2:	58eb      	ldr	r3, [r5, r3]
 80048d4:	4798      	blx	r3
 80048d6:	3601      	adds	r6, #1
 80048d8:	e7ee      	b.n	80048b8 <__libc_init_array+0xc>
 80048da:	00b3      	lsls	r3, r6, #2
 80048dc:	58eb      	ldr	r3, [r5, r3]
 80048de:	4798      	blx	r3
 80048e0:	3601      	adds	r6, #1
 80048e2:	e7f2      	b.n	80048ca <__libc_init_array+0x1e>
 80048e4:	080049e4 	.word	0x080049e4
 80048e8:	080049e4 	.word	0x080049e4
 80048ec:	080049e4 	.word	0x080049e4
 80048f0:	080049e8 	.word	0x080049e8

080048f4 <memcpy>:
 80048f4:	2300      	movs	r3, #0
 80048f6:	b510      	push	{r4, lr}
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d100      	bne.n	80048fe <memcpy+0xa>
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	5ccc      	ldrb	r4, [r1, r3]
 8004900:	54c4      	strb	r4, [r0, r3]
 8004902:	3301      	adds	r3, #1
 8004904:	e7f8      	b.n	80048f8 <memcpy+0x4>

08004906 <memset>:
 8004906:	0003      	movs	r3, r0
 8004908:	1882      	adds	r2, r0, r2
 800490a:	4293      	cmp	r3, r2
 800490c:	d100      	bne.n	8004910 <memset+0xa>
 800490e:	4770      	bx	lr
 8004910:	7019      	strb	r1, [r3, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	e7f9      	b.n	800490a <memset+0x4>

08004916 <strncmp>:
 8004916:	b530      	push	{r4, r5, lr}
 8004918:	0005      	movs	r5, r0
 800491a:	1e10      	subs	r0, r2, #0
 800491c:	d008      	beq.n	8004930 <strncmp+0x1a>
 800491e:	2400      	movs	r4, #0
 8004920:	3a01      	subs	r2, #1
 8004922:	5d2b      	ldrb	r3, [r5, r4]
 8004924:	5d08      	ldrb	r0, [r1, r4]
 8004926:	4283      	cmp	r3, r0
 8004928:	d101      	bne.n	800492e <strncmp+0x18>
 800492a:	4294      	cmp	r4, r2
 800492c:	d101      	bne.n	8004932 <strncmp+0x1c>
 800492e:	1a18      	subs	r0, r3, r0
 8004930:	bd30      	pop	{r4, r5, pc}
 8004932:	3401      	adds	r4, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f4      	bne.n	8004922 <strncmp+0xc>
 8004938:	e7f9      	b.n	800492e <strncmp+0x18>
	...

0800493c <_init>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr

08004948 <_fini>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr
