
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000642c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006618  08006618  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006618  08006618  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006618  08006618  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006618  08006618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08006690  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08006690  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcef  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002138  00000000  00000000  0002dd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  0002fec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00030d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d83c  00000000  00000000  00031a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8a6  00000000  00000000  0004f284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf6f2  00000000  00000000  0005eb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e21c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ac  00000000  00000000  0011e26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080064d0 	.word	0x080064d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080064d0 	.word	0x080064d0

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_f2uiz>:
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	b510      	push	{r4, lr}
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	1c04      	adds	r4, r0, #0
 8000238:	f001 f912 	bl	8001460 <__aeabi_fcmpge>
 800023c:	2800      	cmp	r0, #0
 800023e:	d103      	bne.n	8000248 <__aeabi_f2uiz+0x18>
 8000240:	1c20      	adds	r0, r4, #0
 8000242:	f000 f9d9 	bl	80005f8 <__aeabi_f2iz>
 8000246:	bd10      	pop	{r4, pc}
 8000248:	219e      	movs	r1, #158	; 0x9e
 800024a:	1c20      	adds	r0, r4, #0
 800024c:	05c9      	lsls	r1, r1, #23
 800024e:	f000 f825 	bl	800029c <__aeabi_fsub>
 8000252:	f000 f9d1 	bl	80005f8 <__aeabi_f2iz>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	061b      	lsls	r3, r3, #24
 800025a:	469c      	mov	ip, r3
 800025c:	4460      	add	r0, ip
 800025e:	e7f2      	b.n	8000246 <__aeabi_f2uiz+0x16>

08000260 <__aeabi_d2uiz>:
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	2200      	movs	r2, #0
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__aeabi_d2uiz+0x38>)
 8000266:	0004      	movs	r4, r0
 8000268:	000d      	movs	r5, r1
 800026a:	f001 f8bf 	bl	80013ec <__aeabi_dcmpge>
 800026e:	2800      	cmp	r0, #0
 8000270:	d104      	bne.n	800027c <__aeabi_d2uiz+0x1c>
 8000272:	0020      	movs	r0, r4
 8000274:	0029      	movs	r1, r5
 8000276:	f001 f81f 	bl	80012b8 <__aeabi_d2iz>
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <__aeabi_d2uiz+0x38>)
 800027e:	2200      	movs	r2, #0
 8000280:	0020      	movs	r0, r4
 8000282:	0029      	movs	r1, r5
 8000284:	f000 fc86 	bl	8000b94 <__aeabi_dsub>
 8000288:	f001 f816 	bl	80012b8 <__aeabi_d2iz>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	061b      	lsls	r3, r3, #24
 8000290:	469c      	mov	ip, r3
 8000292:	4460      	add	r0, ip
 8000294:	e7f1      	b.n	800027a <__aeabi_d2uiz+0x1a>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	41e00000 	.word	0x41e00000

0800029c <__aeabi_fsub>:
 800029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	0243      	lsls	r3, r0, #9
 80002a4:	0a5b      	lsrs	r3, r3, #9
 80002a6:	024e      	lsls	r6, r1, #9
 80002a8:	00da      	lsls	r2, r3, #3
 80002aa:	4694      	mov	ip, r2
 80002ac:	0a72      	lsrs	r2, r6, #9
 80002ae:	4691      	mov	r9, r2
 80002b0:	0045      	lsls	r5, r0, #1
 80002b2:	004a      	lsls	r2, r1, #1
 80002b4:	b580      	push	{r7, lr}
 80002b6:	0e2d      	lsrs	r5, r5, #24
 80002b8:	001f      	movs	r7, r3
 80002ba:	0fc4      	lsrs	r4, r0, #31
 80002bc:	0e12      	lsrs	r2, r2, #24
 80002be:	0fc9      	lsrs	r1, r1, #31
 80002c0:	09b6      	lsrs	r6, r6, #6
 80002c2:	2aff      	cmp	r2, #255	; 0xff
 80002c4:	d05b      	beq.n	800037e <__aeabi_fsub+0xe2>
 80002c6:	2001      	movs	r0, #1
 80002c8:	4041      	eors	r1, r0
 80002ca:	428c      	cmp	r4, r1
 80002cc:	d039      	beq.n	8000342 <__aeabi_fsub+0xa6>
 80002ce:	1aa8      	subs	r0, r5, r2
 80002d0:	2800      	cmp	r0, #0
 80002d2:	dd5a      	ble.n	800038a <__aeabi_fsub+0xee>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	d06a      	beq.n	80003ae <__aeabi_fsub+0x112>
 80002d8:	2dff      	cmp	r5, #255	; 0xff
 80002da:	d100      	bne.n	80002de <__aeabi_fsub+0x42>
 80002dc:	e0d9      	b.n	8000492 <__aeabi_fsub+0x1f6>
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	04d2      	lsls	r2, r2, #19
 80002e2:	4316      	orrs	r6, r2
 80002e4:	281b      	cmp	r0, #27
 80002e6:	dc00      	bgt.n	80002ea <__aeabi_fsub+0x4e>
 80002e8:	e0e9      	b.n	80004be <__aeabi_fsub+0x222>
 80002ea:	2001      	movs	r0, #1
 80002ec:	4663      	mov	r3, ip
 80002ee:	1a18      	subs	r0, r3, r0
 80002f0:	0143      	lsls	r3, r0, #5
 80002f2:	d400      	bmi.n	80002f6 <__aeabi_fsub+0x5a>
 80002f4:	e0b4      	b.n	8000460 <__aeabi_fsub+0x1c4>
 80002f6:	0180      	lsls	r0, r0, #6
 80002f8:	0987      	lsrs	r7, r0, #6
 80002fa:	0038      	movs	r0, r7
 80002fc:	f001 f8ba 	bl	8001474 <__clzsi2>
 8000300:	3805      	subs	r0, #5
 8000302:	4087      	lsls	r7, r0
 8000304:	4285      	cmp	r5, r0
 8000306:	dc00      	bgt.n	800030a <__aeabi_fsub+0x6e>
 8000308:	e0cc      	b.n	80004a4 <__aeabi_fsub+0x208>
 800030a:	1a2d      	subs	r5, r5, r0
 800030c:	48b5      	ldr	r0, [pc, #724]	; (80005e4 <__aeabi_fsub+0x348>)
 800030e:	4038      	ands	r0, r7
 8000310:	0743      	lsls	r3, r0, #29
 8000312:	d004      	beq.n	800031e <__aeabi_fsub+0x82>
 8000314:	230f      	movs	r3, #15
 8000316:	4003      	ands	r3, r0
 8000318:	2b04      	cmp	r3, #4
 800031a:	d000      	beq.n	800031e <__aeabi_fsub+0x82>
 800031c:	3004      	adds	r0, #4
 800031e:	0143      	lsls	r3, r0, #5
 8000320:	d400      	bmi.n	8000324 <__aeabi_fsub+0x88>
 8000322:	e0a0      	b.n	8000466 <__aeabi_fsub+0x1ca>
 8000324:	1c6a      	adds	r2, r5, #1
 8000326:	2dfe      	cmp	r5, #254	; 0xfe
 8000328:	d100      	bne.n	800032c <__aeabi_fsub+0x90>
 800032a:	e08d      	b.n	8000448 <__aeabi_fsub+0x1ac>
 800032c:	0180      	lsls	r0, r0, #6
 800032e:	0a47      	lsrs	r7, r0, #9
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	05d0      	lsls	r0, r2, #23
 8000334:	4338      	orrs	r0, r7
 8000336:	07e4      	lsls	r4, r4, #31
 8000338:	4320      	orrs	r0, r4
 800033a:	bcc0      	pop	{r6, r7}
 800033c:	46b9      	mov	r9, r7
 800033e:	46b0      	mov	r8, r6
 8000340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000342:	1aa8      	subs	r0, r5, r2
 8000344:	4680      	mov	r8, r0
 8000346:	2800      	cmp	r0, #0
 8000348:	dd45      	ble.n	80003d6 <__aeabi_fsub+0x13a>
 800034a:	2a00      	cmp	r2, #0
 800034c:	d070      	beq.n	8000430 <__aeabi_fsub+0x194>
 800034e:	2dff      	cmp	r5, #255	; 0xff
 8000350:	d100      	bne.n	8000354 <__aeabi_fsub+0xb8>
 8000352:	e09e      	b.n	8000492 <__aeabi_fsub+0x1f6>
 8000354:	2380      	movs	r3, #128	; 0x80
 8000356:	04db      	lsls	r3, r3, #19
 8000358:	431e      	orrs	r6, r3
 800035a:	4643      	mov	r3, r8
 800035c:	2b1b      	cmp	r3, #27
 800035e:	dc00      	bgt.n	8000362 <__aeabi_fsub+0xc6>
 8000360:	e0d2      	b.n	8000508 <__aeabi_fsub+0x26c>
 8000362:	2001      	movs	r0, #1
 8000364:	4460      	add	r0, ip
 8000366:	0143      	lsls	r3, r0, #5
 8000368:	d57a      	bpl.n	8000460 <__aeabi_fsub+0x1c4>
 800036a:	3501      	adds	r5, #1
 800036c:	2dff      	cmp	r5, #255	; 0xff
 800036e:	d06b      	beq.n	8000448 <__aeabi_fsub+0x1ac>
 8000370:	2301      	movs	r3, #1
 8000372:	4a9d      	ldr	r2, [pc, #628]	; (80005e8 <__aeabi_fsub+0x34c>)
 8000374:	4003      	ands	r3, r0
 8000376:	0840      	lsrs	r0, r0, #1
 8000378:	4010      	ands	r0, r2
 800037a:	4318      	orrs	r0, r3
 800037c:	e7c8      	b.n	8000310 <__aeabi_fsub+0x74>
 800037e:	2e00      	cmp	r6, #0
 8000380:	d020      	beq.n	80003c4 <__aeabi_fsub+0x128>
 8000382:	428c      	cmp	r4, r1
 8000384:	d023      	beq.n	80003ce <__aeabi_fsub+0x132>
 8000386:	0028      	movs	r0, r5
 8000388:	38ff      	subs	r0, #255	; 0xff
 800038a:	2800      	cmp	r0, #0
 800038c:	d039      	beq.n	8000402 <__aeabi_fsub+0x166>
 800038e:	1b57      	subs	r7, r2, r5
 8000390:	2d00      	cmp	r5, #0
 8000392:	d000      	beq.n	8000396 <__aeabi_fsub+0xfa>
 8000394:	e09d      	b.n	80004d2 <__aeabi_fsub+0x236>
 8000396:	4663      	mov	r3, ip
 8000398:	2b00      	cmp	r3, #0
 800039a:	d100      	bne.n	800039e <__aeabi_fsub+0x102>
 800039c:	e0db      	b.n	8000556 <__aeabi_fsub+0x2ba>
 800039e:	1e7b      	subs	r3, r7, #1
 80003a0:	2f01      	cmp	r7, #1
 80003a2:	d100      	bne.n	80003a6 <__aeabi_fsub+0x10a>
 80003a4:	e10d      	b.n	80005c2 <__aeabi_fsub+0x326>
 80003a6:	2fff      	cmp	r7, #255	; 0xff
 80003a8:	d071      	beq.n	800048e <__aeabi_fsub+0x1f2>
 80003aa:	001f      	movs	r7, r3
 80003ac:	e098      	b.n	80004e0 <__aeabi_fsub+0x244>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d100      	bne.n	80003b4 <__aeabi_fsub+0x118>
 80003b2:	e0a7      	b.n	8000504 <__aeabi_fsub+0x268>
 80003b4:	1e42      	subs	r2, r0, #1
 80003b6:	2801      	cmp	r0, #1
 80003b8:	d100      	bne.n	80003bc <__aeabi_fsub+0x120>
 80003ba:	e0e6      	b.n	800058a <__aeabi_fsub+0x2ee>
 80003bc:	28ff      	cmp	r0, #255	; 0xff
 80003be:	d068      	beq.n	8000492 <__aeabi_fsub+0x1f6>
 80003c0:	0010      	movs	r0, r2
 80003c2:	e78f      	b.n	80002e4 <__aeabi_fsub+0x48>
 80003c4:	2001      	movs	r0, #1
 80003c6:	4041      	eors	r1, r0
 80003c8:	42a1      	cmp	r1, r4
 80003ca:	d000      	beq.n	80003ce <__aeabi_fsub+0x132>
 80003cc:	e77f      	b.n	80002ce <__aeabi_fsub+0x32>
 80003ce:	20ff      	movs	r0, #255	; 0xff
 80003d0:	4240      	negs	r0, r0
 80003d2:	4680      	mov	r8, r0
 80003d4:	44a8      	add	r8, r5
 80003d6:	4640      	mov	r0, r8
 80003d8:	2800      	cmp	r0, #0
 80003da:	d038      	beq.n	800044e <__aeabi_fsub+0x1b2>
 80003dc:	1b51      	subs	r1, r2, r5
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d100      	bne.n	80003e4 <__aeabi_fsub+0x148>
 80003e2:	e0ae      	b.n	8000542 <__aeabi_fsub+0x2a6>
 80003e4:	2aff      	cmp	r2, #255	; 0xff
 80003e6:	d100      	bne.n	80003ea <__aeabi_fsub+0x14e>
 80003e8:	e0df      	b.n	80005aa <__aeabi_fsub+0x30e>
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	4660      	mov	r0, ip
 80003ee:	04db      	lsls	r3, r3, #19
 80003f0:	4318      	orrs	r0, r3
 80003f2:	4684      	mov	ip, r0
 80003f4:	291b      	cmp	r1, #27
 80003f6:	dc00      	bgt.n	80003fa <__aeabi_fsub+0x15e>
 80003f8:	e0d9      	b.n	80005ae <__aeabi_fsub+0x312>
 80003fa:	2001      	movs	r0, #1
 80003fc:	0015      	movs	r5, r2
 80003fe:	1980      	adds	r0, r0, r6
 8000400:	e7b1      	b.n	8000366 <__aeabi_fsub+0xca>
 8000402:	20fe      	movs	r0, #254	; 0xfe
 8000404:	1c6a      	adds	r2, r5, #1
 8000406:	4210      	tst	r0, r2
 8000408:	d171      	bne.n	80004ee <__aeabi_fsub+0x252>
 800040a:	2d00      	cmp	r5, #0
 800040c:	d000      	beq.n	8000410 <__aeabi_fsub+0x174>
 800040e:	e0a6      	b.n	800055e <__aeabi_fsub+0x2c2>
 8000410:	4663      	mov	r3, ip
 8000412:	2b00      	cmp	r3, #0
 8000414:	d100      	bne.n	8000418 <__aeabi_fsub+0x17c>
 8000416:	e0d9      	b.n	80005cc <__aeabi_fsub+0x330>
 8000418:	2200      	movs	r2, #0
 800041a:	2e00      	cmp	r6, #0
 800041c:	d100      	bne.n	8000420 <__aeabi_fsub+0x184>
 800041e:	e788      	b.n	8000332 <__aeabi_fsub+0x96>
 8000420:	1b98      	subs	r0, r3, r6
 8000422:	0143      	lsls	r3, r0, #5
 8000424:	d400      	bmi.n	8000428 <__aeabi_fsub+0x18c>
 8000426:	e0e1      	b.n	80005ec <__aeabi_fsub+0x350>
 8000428:	4663      	mov	r3, ip
 800042a:	000c      	movs	r4, r1
 800042c:	1af0      	subs	r0, r6, r3
 800042e:	e76f      	b.n	8000310 <__aeabi_fsub+0x74>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_fsub+0x19a>
 8000434:	e0b7      	b.n	80005a6 <__aeabi_fsub+0x30a>
 8000436:	0002      	movs	r2, r0
 8000438:	3a01      	subs	r2, #1
 800043a:	2801      	cmp	r0, #1
 800043c:	d100      	bne.n	8000440 <__aeabi_fsub+0x1a4>
 800043e:	e09c      	b.n	800057a <__aeabi_fsub+0x2de>
 8000440:	28ff      	cmp	r0, #255	; 0xff
 8000442:	d026      	beq.n	8000492 <__aeabi_fsub+0x1f6>
 8000444:	4690      	mov	r8, r2
 8000446:	e788      	b.n	800035a <__aeabi_fsub+0xbe>
 8000448:	22ff      	movs	r2, #255	; 0xff
 800044a:	2700      	movs	r7, #0
 800044c:	e771      	b.n	8000332 <__aeabi_fsub+0x96>
 800044e:	20fe      	movs	r0, #254	; 0xfe
 8000450:	1c6a      	adds	r2, r5, #1
 8000452:	4210      	tst	r0, r2
 8000454:	d064      	beq.n	8000520 <__aeabi_fsub+0x284>
 8000456:	2aff      	cmp	r2, #255	; 0xff
 8000458:	d0f6      	beq.n	8000448 <__aeabi_fsub+0x1ac>
 800045a:	0015      	movs	r5, r2
 800045c:	4466      	add	r6, ip
 800045e:	0870      	lsrs	r0, r6, #1
 8000460:	0743      	lsls	r3, r0, #29
 8000462:	d000      	beq.n	8000466 <__aeabi_fsub+0x1ca>
 8000464:	e756      	b.n	8000314 <__aeabi_fsub+0x78>
 8000466:	08c3      	lsrs	r3, r0, #3
 8000468:	2dff      	cmp	r5, #255	; 0xff
 800046a:	d012      	beq.n	8000492 <__aeabi_fsub+0x1f6>
 800046c:	025b      	lsls	r3, r3, #9
 800046e:	0a5f      	lsrs	r7, r3, #9
 8000470:	b2ea      	uxtb	r2, r5
 8000472:	e75e      	b.n	8000332 <__aeabi_fsub+0x96>
 8000474:	4662      	mov	r2, ip
 8000476:	2a00      	cmp	r2, #0
 8000478:	d100      	bne.n	800047c <__aeabi_fsub+0x1e0>
 800047a:	e096      	b.n	80005aa <__aeabi_fsub+0x30e>
 800047c:	2e00      	cmp	r6, #0
 800047e:	d008      	beq.n	8000492 <__aeabi_fsub+0x1f6>
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	03d2      	lsls	r2, r2, #15
 8000484:	4213      	tst	r3, r2
 8000486:	d004      	beq.n	8000492 <__aeabi_fsub+0x1f6>
 8000488:	4648      	mov	r0, r9
 800048a:	4210      	tst	r0, r2
 800048c:	d101      	bne.n	8000492 <__aeabi_fsub+0x1f6>
 800048e:	000c      	movs	r4, r1
 8000490:	464b      	mov	r3, r9
 8000492:	2b00      	cmp	r3, #0
 8000494:	d0d8      	beq.n	8000448 <__aeabi_fsub+0x1ac>
 8000496:	2780      	movs	r7, #128	; 0x80
 8000498:	03ff      	lsls	r7, r7, #15
 800049a:	431f      	orrs	r7, r3
 800049c:	027f      	lsls	r7, r7, #9
 800049e:	22ff      	movs	r2, #255	; 0xff
 80004a0:	0a7f      	lsrs	r7, r7, #9
 80004a2:	e746      	b.n	8000332 <__aeabi_fsub+0x96>
 80004a4:	2320      	movs	r3, #32
 80004a6:	003a      	movs	r2, r7
 80004a8:	1b45      	subs	r5, r0, r5
 80004aa:	0038      	movs	r0, r7
 80004ac:	3501      	adds	r5, #1
 80004ae:	40ea      	lsrs	r2, r5
 80004b0:	1b5d      	subs	r5, r3, r5
 80004b2:	40a8      	lsls	r0, r5
 80004b4:	1e43      	subs	r3, r0, #1
 80004b6:	4198      	sbcs	r0, r3
 80004b8:	2500      	movs	r5, #0
 80004ba:	4310      	orrs	r0, r2
 80004bc:	e728      	b.n	8000310 <__aeabi_fsub+0x74>
 80004be:	2320      	movs	r3, #32
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	0032      	movs	r2, r6
 80004c4:	409e      	lsls	r6, r3
 80004c6:	40c2      	lsrs	r2, r0
 80004c8:	0030      	movs	r0, r6
 80004ca:	1e43      	subs	r3, r0, #1
 80004cc:	4198      	sbcs	r0, r3
 80004ce:	4310      	orrs	r0, r2
 80004d0:	e70c      	b.n	80002ec <__aeabi_fsub+0x50>
 80004d2:	2aff      	cmp	r2, #255	; 0xff
 80004d4:	d0db      	beq.n	800048e <__aeabi_fsub+0x1f2>
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	4660      	mov	r0, ip
 80004da:	04db      	lsls	r3, r3, #19
 80004dc:	4318      	orrs	r0, r3
 80004de:	4684      	mov	ip, r0
 80004e0:	2f1b      	cmp	r7, #27
 80004e2:	dd56      	ble.n	8000592 <__aeabi_fsub+0x2f6>
 80004e4:	2001      	movs	r0, #1
 80004e6:	000c      	movs	r4, r1
 80004e8:	0015      	movs	r5, r2
 80004ea:	1a30      	subs	r0, r6, r0
 80004ec:	e700      	b.n	80002f0 <__aeabi_fsub+0x54>
 80004ee:	4663      	mov	r3, ip
 80004f0:	1b9f      	subs	r7, r3, r6
 80004f2:	017b      	lsls	r3, r7, #5
 80004f4:	d43d      	bmi.n	8000572 <__aeabi_fsub+0x2d6>
 80004f6:	2f00      	cmp	r7, #0
 80004f8:	d000      	beq.n	80004fc <__aeabi_fsub+0x260>
 80004fa:	e6fe      	b.n	80002fa <__aeabi_fsub+0x5e>
 80004fc:	2400      	movs	r4, #0
 80004fe:	2200      	movs	r2, #0
 8000500:	2700      	movs	r7, #0
 8000502:	e716      	b.n	8000332 <__aeabi_fsub+0x96>
 8000504:	0005      	movs	r5, r0
 8000506:	e7af      	b.n	8000468 <__aeabi_fsub+0x1cc>
 8000508:	0032      	movs	r2, r6
 800050a:	4643      	mov	r3, r8
 800050c:	4641      	mov	r1, r8
 800050e:	40da      	lsrs	r2, r3
 8000510:	2320      	movs	r3, #32
 8000512:	1a5b      	subs	r3, r3, r1
 8000514:	409e      	lsls	r6, r3
 8000516:	0030      	movs	r0, r6
 8000518:	1e43      	subs	r3, r0, #1
 800051a:	4198      	sbcs	r0, r3
 800051c:	4310      	orrs	r0, r2
 800051e:	e721      	b.n	8000364 <__aeabi_fsub+0xc8>
 8000520:	2d00      	cmp	r5, #0
 8000522:	d1a7      	bne.n	8000474 <__aeabi_fsub+0x1d8>
 8000524:	4663      	mov	r3, ip
 8000526:	2b00      	cmp	r3, #0
 8000528:	d059      	beq.n	80005de <__aeabi_fsub+0x342>
 800052a:	2200      	movs	r2, #0
 800052c:	2e00      	cmp	r6, #0
 800052e:	d100      	bne.n	8000532 <__aeabi_fsub+0x296>
 8000530:	e6ff      	b.n	8000332 <__aeabi_fsub+0x96>
 8000532:	0030      	movs	r0, r6
 8000534:	4460      	add	r0, ip
 8000536:	0143      	lsls	r3, r0, #5
 8000538:	d592      	bpl.n	8000460 <__aeabi_fsub+0x1c4>
 800053a:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <__aeabi_fsub+0x348>)
 800053c:	3501      	adds	r5, #1
 800053e:	4018      	ands	r0, r3
 8000540:	e78e      	b.n	8000460 <__aeabi_fsub+0x1c4>
 8000542:	4663      	mov	r3, ip
 8000544:	2b00      	cmp	r3, #0
 8000546:	d047      	beq.n	80005d8 <__aeabi_fsub+0x33c>
 8000548:	1e4b      	subs	r3, r1, #1
 800054a:	2901      	cmp	r1, #1
 800054c:	d015      	beq.n	800057a <__aeabi_fsub+0x2de>
 800054e:	29ff      	cmp	r1, #255	; 0xff
 8000550:	d02b      	beq.n	80005aa <__aeabi_fsub+0x30e>
 8000552:	0019      	movs	r1, r3
 8000554:	e74e      	b.n	80003f4 <__aeabi_fsub+0x158>
 8000556:	000c      	movs	r4, r1
 8000558:	464b      	mov	r3, r9
 800055a:	003d      	movs	r5, r7
 800055c:	e784      	b.n	8000468 <__aeabi_fsub+0x1cc>
 800055e:	4662      	mov	r2, ip
 8000560:	2a00      	cmp	r2, #0
 8000562:	d18b      	bne.n	800047c <__aeabi_fsub+0x1e0>
 8000564:	2e00      	cmp	r6, #0
 8000566:	d192      	bne.n	800048e <__aeabi_fsub+0x1f2>
 8000568:	2780      	movs	r7, #128	; 0x80
 800056a:	2400      	movs	r4, #0
 800056c:	22ff      	movs	r2, #255	; 0xff
 800056e:	03ff      	lsls	r7, r7, #15
 8000570:	e6df      	b.n	8000332 <__aeabi_fsub+0x96>
 8000572:	4663      	mov	r3, ip
 8000574:	000c      	movs	r4, r1
 8000576:	1af7      	subs	r7, r6, r3
 8000578:	e6bf      	b.n	80002fa <__aeabi_fsub+0x5e>
 800057a:	0030      	movs	r0, r6
 800057c:	4460      	add	r0, ip
 800057e:	2501      	movs	r5, #1
 8000580:	0143      	lsls	r3, r0, #5
 8000582:	d400      	bmi.n	8000586 <__aeabi_fsub+0x2ea>
 8000584:	e76c      	b.n	8000460 <__aeabi_fsub+0x1c4>
 8000586:	2502      	movs	r5, #2
 8000588:	e6f2      	b.n	8000370 <__aeabi_fsub+0xd4>
 800058a:	4663      	mov	r3, ip
 800058c:	2501      	movs	r5, #1
 800058e:	1b98      	subs	r0, r3, r6
 8000590:	e6ae      	b.n	80002f0 <__aeabi_fsub+0x54>
 8000592:	2320      	movs	r3, #32
 8000594:	4664      	mov	r4, ip
 8000596:	4660      	mov	r0, ip
 8000598:	40fc      	lsrs	r4, r7
 800059a:	1bdf      	subs	r7, r3, r7
 800059c:	40b8      	lsls	r0, r7
 800059e:	1e43      	subs	r3, r0, #1
 80005a0:	4198      	sbcs	r0, r3
 80005a2:	4320      	orrs	r0, r4
 80005a4:	e79f      	b.n	80004e6 <__aeabi_fsub+0x24a>
 80005a6:	0005      	movs	r5, r0
 80005a8:	e75e      	b.n	8000468 <__aeabi_fsub+0x1cc>
 80005aa:	464b      	mov	r3, r9
 80005ac:	e771      	b.n	8000492 <__aeabi_fsub+0x1f6>
 80005ae:	2320      	movs	r3, #32
 80005b0:	4665      	mov	r5, ip
 80005b2:	4660      	mov	r0, ip
 80005b4:	40cd      	lsrs	r5, r1
 80005b6:	1a59      	subs	r1, r3, r1
 80005b8:	4088      	lsls	r0, r1
 80005ba:	1e43      	subs	r3, r0, #1
 80005bc:	4198      	sbcs	r0, r3
 80005be:	4328      	orrs	r0, r5
 80005c0:	e71c      	b.n	80003fc <__aeabi_fsub+0x160>
 80005c2:	4663      	mov	r3, ip
 80005c4:	000c      	movs	r4, r1
 80005c6:	2501      	movs	r5, #1
 80005c8:	1af0      	subs	r0, r6, r3
 80005ca:	e691      	b.n	80002f0 <__aeabi_fsub+0x54>
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d095      	beq.n	80004fc <__aeabi_fsub+0x260>
 80005d0:	000c      	movs	r4, r1
 80005d2:	464f      	mov	r7, r9
 80005d4:	2200      	movs	r2, #0
 80005d6:	e6ac      	b.n	8000332 <__aeabi_fsub+0x96>
 80005d8:	464b      	mov	r3, r9
 80005da:	000d      	movs	r5, r1
 80005dc:	e744      	b.n	8000468 <__aeabi_fsub+0x1cc>
 80005de:	464f      	mov	r7, r9
 80005e0:	2200      	movs	r2, #0
 80005e2:	e6a6      	b.n	8000332 <__aeabi_fsub+0x96>
 80005e4:	fbffffff 	.word	0xfbffffff
 80005e8:	7dffffff 	.word	0x7dffffff
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fsub+0x356>
 80005f0:	e736      	b.n	8000460 <__aeabi_fsub+0x1c4>
 80005f2:	2400      	movs	r4, #0
 80005f4:	2700      	movs	r7, #0
 80005f6:	e69c      	b.n	8000332 <__aeabi_fsub+0x96>

080005f8 <__aeabi_f2iz>:
 80005f8:	0241      	lsls	r1, r0, #9
 80005fa:	0042      	lsls	r2, r0, #1
 80005fc:	0fc3      	lsrs	r3, r0, #31
 80005fe:	0a49      	lsrs	r1, r1, #9
 8000600:	2000      	movs	r0, #0
 8000602:	0e12      	lsrs	r2, r2, #24
 8000604:	2a7e      	cmp	r2, #126	; 0x7e
 8000606:	dd03      	ble.n	8000610 <__aeabi_f2iz+0x18>
 8000608:	2a9d      	cmp	r2, #157	; 0x9d
 800060a:	dd02      	ble.n	8000612 <__aeabi_f2iz+0x1a>
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <__aeabi_f2iz+0x3c>)
 800060e:	1898      	adds	r0, r3, r2
 8000610:	4770      	bx	lr
 8000612:	2080      	movs	r0, #128	; 0x80
 8000614:	0400      	lsls	r0, r0, #16
 8000616:	4301      	orrs	r1, r0
 8000618:	2a95      	cmp	r2, #149	; 0x95
 800061a:	dc07      	bgt.n	800062c <__aeabi_f2iz+0x34>
 800061c:	2096      	movs	r0, #150	; 0x96
 800061e:	1a82      	subs	r2, r0, r2
 8000620:	40d1      	lsrs	r1, r2
 8000622:	4248      	negs	r0, r1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f3      	bne.n	8000610 <__aeabi_f2iz+0x18>
 8000628:	0008      	movs	r0, r1
 800062a:	e7f1      	b.n	8000610 <__aeabi_f2iz+0x18>
 800062c:	3a96      	subs	r2, #150	; 0x96
 800062e:	4091      	lsls	r1, r2
 8000630:	e7f7      	b.n	8000622 <__aeabi_f2iz+0x2a>
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	7fffffff 	.word	0x7fffffff

08000638 <__aeabi_ui2f>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	1e05      	subs	r5, r0, #0
 800063c:	d00e      	beq.n	800065c <__aeabi_ui2f+0x24>
 800063e:	f000 ff19 	bl	8001474 <__clzsi2>
 8000642:	239e      	movs	r3, #158	; 0x9e
 8000644:	0004      	movs	r4, r0
 8000646:	1a1b      	subs	r3, r3, r0
 8000648:	2b96      	cmp	r3, #150	; 0x96
 800064a:	dc0c      	bgt.n	8000666 <__aeabi_ui2f+0x2e>
 800064c:	2808      	cmp	r0, #8
 800064e:	dd01      	ble.n	8000654 <__aeabi_ui2f+0x1c>
 8000650:	3c08      	subs	r4, #8
 8000652:	40a5      	lsls	r5, r4
 8000654:	026d      	lsls	r5, r5, #9
 8000656:	0a6d      	lsrs	r5, r5, #9
 8000658:	b2d8      	uxtb	r0, r3
 800065a:	e001      	b.n	8000660 <__aeabi_ui2f+0x28>
 800065c:	2000      	movs	r0, #0
 800065e:	2500      	movs	r5, #0
 8000660:	05c0      	lsls	r0, r0, #23
 8000662:	4328      	orrs	r0, r5
 8000664:	bd70      	pop	{r4, r5, r6, pc}
 8000666:	2b99      	cmp	r3, #153	; 0x99
 8000668:	dd09      	ble.n	800067e <__aeabi_ui2f+0x46>
 800066a:	0002      	movs	r2, r0
 800066c:	0029      	movs	r1, r5
 800066e:	321b      	adds	r2, #27
 8000670:	4091      	lsls	r1, r2
 8000672:	1e4a      	subs	r2, r1, #1
 8000674:	4191      	sbcs	r1, r2
 8000676:	2205      	movs	r2, #5
 8000678:	1a12      	subs	r2, r2, r0
 800067a:	40d5      	lsrs	r5, r2
 800067c:	430d      	orrs	r5, r1
 800067e:	2c05      	cmp	r4, #5
 8000680:	dc12      	bgt.n	80006a8 <__aeabi_ui2f+0x70>
 8000682:	0029      	movs	r1, r5
 8000684:	4e0c      	ldr	r6, [pc, #48]	; (80006b8 <__aeabi_ui2f+0x80>)
 8000686:	4031      	ands	r1, r6
 8000688:	076a      	lsls	r2, r5, #29
 800068a:	d009      	beq.n	80006a0 <__aeabi_ui2f+0x68>
 800068c:	200f      	movs	r0, #15
 800068e:	4028      	ands	r0, r5
 8000690:	2804      	cmp	r0, #4
 8000692:	d005      	beq.n	80006a0 <__aeabi_ui2f+0x68>
 8000694:	3104      	adds	r1, #4
 8000696:	014a      	lsls	r2, r1, #5
 8000698:	d502      	bpl.n	80006a0 <__aeabi_ui2f+0x68>
 800069a:	239f      	movs	r3, #159	; 0x9f
 800069c:	4031      	ands	r1, r6
 800069e:	1b1b      	subs	r3, r3, r4
 80006a0:	0189      	lsls	r1, r1, #6
 80006a2:	0a4d      	lsrs	r5, r1, #9
 80006a4:	b2d8      	uxtb	r0, r3
 80006a6:	e7db      	b.n	8000660 <__aeabi_ui2f+0x28>
 80006a8:	1f62      	subs	r2, r4, #5
 80006aa:	4095      	lsls	r5, r2
 80006ac:	0029      	movs	r1, r5
 80006ae:	4e02      	ldr	r6, [pc, #8]	; (80006b8 <__aeabi_ui2f+0x80>)
 80006b0:	4031      	ands	r1, r6
 80006b2:	076a      	lsls	r2, r5, #29
 80006b4:	d0f4      	beq.n	80006a0 <__aeabi_ui2f+0x68>
 80006b6:	e7e9      	b.n	800068c <__aeabi_ui2f+0x54>
 80006b8:	fbffffff 	.word	0xfbffffff

080006bc <__aeabi_dmul>:
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	4657      	mov	r7, sl
 80006c0:	464e      	mov	r6, r9
 80006c2:	4645      	mov	r5, r8
 80006c4:	46de      	mov	lr, fp
 80006c6:	b5e0      	push	{r5, r6, r7, lr}
 80006c8:	4698      	mov	r8, r3
 80006ca:	030c      	lsls	r4, r1, #12
 80006cc:	004b      	lsls	r3, r1, #1
 80006ce:	0006      	movs	r6, r0
 80006d0:	4692      	mov	sl, r2
 80006d2:	b087      	sub	sp, #28
 80006d4:	0b24      	lsrs	r4, r4, #12
 80006d6:	0d5b      	lsrs	r3, r3, #21
 80006d8:	0fcf      	lsrs	r7, r1, #31
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dmul+0x24>
 80006de:	e15c      	b.n	800099a <__aeabi_dmul+0x2de>
 80006e0:	4ad9      	ldr	r2, [pc, #868]	; (8000a48 <__aeabi_dmul+0x38c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d100      	bne.n	80006e8 <__aeabi_dmul+0x2c>
 80006e6:	e175      	b.n	80009d4 <__aeabi_dmul+0x318>
 80006e8:	0f42      	lsrs	r2, r0, #29
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	4314      	orrs	r4, r2
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0412      	lsls	r2, r2, #16
 80006f2:	4314      	orrs	r4, r2
 80006f4:	4ad5      	ldr	r2, [pc, #852]	; (8000a4c <__aeabi_dmul+0x390>)
 80006f6:	00c5      	lsls	r5, r0, #3
 80006f8:	4694      	mov	ip, r2
 80006fa:	4463      	add	r3, ip
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	4699      	mov	r9, r3
 8000702:	469b      	mov	fp, r3
 8000704:	4643      	mov	r3, r8
 8000706:	4642      	mov	r2, r8
 8000708:	031e      	lsls	r6, r3, #12
 800070a:	0fd2      	lsrs	r2, r2, #31
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4650      	mov	r0, sl
 8000710:	4690      	mov	r8, r2
 8000712:	0b36      	lsrs	r6, r6, #12
 8000714:	0d5b      	lsrs	r3, r3, #21
 8000716:	d100      	bne.n	800071a <__aeabi_dmul+0x5e>
 8000718:	e120      	b.n	800095c <__aeabi_dmul+0x2a0>
 800071a:	4acb      	ldr	r2, [pc, #812]	; (8000a48 <__aeabi_dmul+0x38c>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d100      	bne.n	8000722 <__aeabi_dmul+0x66>
 8000720:	e162      	b.n	80009e8 <__aeabi_dmul+0x32c>
 8000722:	49ca      	ldr	r1, [pc, #808]	; (8000a4c <__aeabi_dmul+0x390>)
 8000724:	0f42      	lsrs	r2, r0, #29
 8000726:	468c      	mov	ip, r1
 8000728:	9900      	ldr	r1, [sp, #0]
 800072a:	4463      	add	r3, ip
 800072c:	00f6      	lsls	r6, r6, #3
 800072e:	468c      	mov	ip, r1
 8000730:	4316      	orrs	r6, r2
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	449c      	add	ip, r3
 8000736:	0412      	lsls	r2, r2, #16
 8000738:	4663      	mov	r3, ip
 800073a:	4316      	orrs	r6, r2
 800073c:	00c2      	lsls	r2, r0, #3
 800073e:	2000      	movs	r0, #0
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	9900      	ldr	r1, [sp, #0]
 8000744:	4643      	mov	r3, r8
 8000746:	3101      	adds	r1, #1
 8000748:	468c      	mov	ip, r1
 800074a:	4649      	mov	r1, r9
 800074c:	407b      	eors	r3, r7
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	290f      	cmp	r1, #15
 8000752:	d826      	bhi.n	80007a2 <__aeabi_dmul+0xe6>
 8000754:	4bbe      	ldr	r3, [pc, #760]	; (8000a50 <__aeabi_dmul+0x394>)
 8000756:	0089      	lsls	r1, r1, #2
 8000758:	5859      	ldr	r1, [r3, r1]
 800075a:	468f      	mov	pc, r1
 800075c:	4643      	mov	r3, r8
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	0034      	movs	r4, r6
 8000762:	0015      	movs	r5, r2
 8000764:	4683      	mov	fp, r0
 8000766:	465b      	mov	r3, fp
 8000768:	2b02      	cmp	r3, #2
 800076a:	d016      	beq.n	800079a <__aeabi_dmul+0xde>
 800076c:	2b03      	cmp	r3, #3
 800076e:	d100      	bne.n	8000772 <__aeabi_dmul+0xb6>
 8000770:	e203      	b.n	8000b7a <__aeabi_dmul+0x4be>
 8000772:	2b01      	cmp	r3, #1
 8000774:	d000      	beq.n	8000778 <__aeabi_dmul+0xbc>
 8000776:	e0cd      	b.n	8000914 <__aeabi_dmul+0x258>
 8000778:	2200      	movs	r2, #0
 800077a:	2400      	movs	r4, #0
 800077c:	2500      	movs	r5, #0
 800077e:	9b01      	ldr	r3, [sp, #4]
 8000780:	0512      	lsls	r2, r2, #20
 8000782:	4322      	orrs	r2, r4
 8000784:	07db      	lsls	r3, r3, #31
 8000786:	431a      	orrs	r2, r3
 8000788:	0028      	movs	r0, r5
 800078a:	0011      	movs	r1, r2
 800078c:	b007      	add	sp, #28
 800078e:	bcf0      	pop	{r4, r5, r6, r7}
 8000790:	46bb      	mov	fp, r7
 8000792:	46b2      	mov	sl, r6
 8000794:	46a9      	mov	r9, r5
 8000796:	46a0      	mov	r8, r4
 8000798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079a:	2400      	movs	r4, #0
 800079c:	2500      	movs	r5, #0
 800079e:	4aaa      	ldr	r2, [pc, #680]	; (8000a48 <__aeabi_dmul+0x38c>)
 80007a0:	e7ed      	b.n	800077e <__aeabi_dmul+0xc2>
 80007a2:	0c28      	lsrs	r0, r5, #16
 80007a4:	042d      	lsls	r5, r5, #16
 80007a6:	0c2d      	lsrs	r5, r5, #16
 80007a8:	002b      	movs	r3, r5
 80007aa:	0c11      	lsrs	r1, r2, #16
 80007ac:	0412      	lsls	r2, r2, #16
 80007ae:	0c12      	lsrs	r2, r2, #16
 80007b0:	4353      	muls	r3, r2
 80007b2:	4698      	mov	r8, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	002f      	movs	r7, r5
 80007b8:	4343      	muls	r3, r0
 80007ba:	4699      	mov	r9, r3
 80007bc:	434f      	muls	r7, r1
 80007be:	444f      	add	r7, r9
 80007c0:	46bb      	mov	fp, r7
 80007c2:	4647      	mov	r7, r8
 80007c4:	000b      	movs	r3, r1
 80007c6:	0c3f      	lsrs	r7, r7, #16
 80007c8:	46ba      	mov	sl, r7
 80007ca:	4343      	muls	r3, r0
 80007cc:	44da      	add	sl, fp
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	45d1      	cmp	r9, sl
 80007d2:	d904      	bls.n	80007de <__aeabi_dmul+0x122>
 80007d4:	2780      	movs	r7, #128	; 0x80
 80007d6:	027f      	lsls	r7, r7, #9
 80007d8:	46b9      	mov	r9, r7
 80007da:	444b      	add	r3, r9
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	4653      	mov	r3, sl
 80007e0:	0c1b      	lsrs	r3, r3, #16
 80007e2:	469b      	mov	fp, r3
 80007e4:	4653      	mov	r3, sl
 80007e6:	041f      	lsls	r7, r3, #16
 80007e8:	4643      	mov	r3, r8
 80007ea:	041b      	lsls	r3, r3, #16
 80007ec:	0c1b      	lsrs	r3, r3, #16
 80007ee:	4698      	mov	r8, r3
 80007f0:	003b      	movs	r3, r7
 80007f2:	4443      	add	r3, r8
 80007f4:	9304      	str	r3, [sp, #16]
 80007f6:	0c33      	lsrs	r3, r6, #16
 80007f8:	0436      	lsls	r6, r6, #16
 80007fa:	0c36      	lsrs	r6, r6, #16
 80007fc:	4698      	mov	r8, r3
 80007fe:	0033      	movs	r3, r6
 8000800:	4343      	muls	r3, r0
 8000802:	4699      	mov	r9, r3
 8000804:	4643      	mov	r3, r8
 8000806:	4343      	muls	r3, r0
 8000808:	002f      	movs	r7, r5
 800080a:	469a      	mov	sl, r3
 800080c:	4643      	mov	r3, r8
 800080e:	4377      	muls	r7, r6
 8000810:	435d      	muls	r5, r3
 8000812:	0c38      	lsrs	r0, r7, #16
 8000814:	444d      	add	r5, r9
 8000816:	1945      	adds	r5, r0, r5
 8000818:	45a9      	cmp	r9, r5
 800081a:	d903      	bls.n	8000824 <__aeabi_dmul+0x168>
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	025b      	lsls	r3, r3, #9
 8000820:	4699      	mov	r9, r3
 8000822:	44ca      	add	sl, r9
 8000824:	043f      	lsls	r7, r7, #16
 8000826:	0c28      	lsrs	r0, r5, #16
 8000828:	0c3f      	lsrs	r7, r7, #16
 800082a:	042d      	lsls	r5, r5, #16
 800082c:	19ed      	adds	r5, r5, r7
 800082e:	0c27      	lsrs	r7, r4, #16
 8000830:	0424      	lsls	r4, r4, #16
 8000832:	0c24      	lsrs	r4, r4, #16
 8000834:	0003      	movs	r3, r0
 8000836:	0020      	movs	r0, r4
 8000838:	4350      	muls	r0, r2
 800083a:	437a      	muls	r2, r7
 800083c:	4691      	mov	r9, r2
 800083e:	003a      	movs	r2, r7
 8000840:	4453      	add	r3, sl
 8000842:	9305      	str	r3, [sp, #20]
 8000844:	0c03      	lsrs	r3, r0, #16
 8000846:	469a      	mov	sl, r3
 8000848:	434a      	muls	r2, r1
 800084a:	4361      	muls	r1, r4
 800084c:	4449      	add	r1, r9
 800084e:	4451      	add	r1, sl
 8000850:	44ab      	add	fp, r5
 8000852:	4589      	cmp	r9, r1
 8000854:	d903      	bls.n	800085e <__aeabi_dmul+0x1a2>
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	025b      	lsls	r3, r3, #9
 800085a:	4699      	mov	r9, r3
 800085c:	444a      	add	r2, r9
 800085e:	0400      	lsls	r0, r0, #16
 8000860:	0c0b      	lsrs	r3, r1, #16
 8000862:	0c00      	lsrs	r0, r0, #16
 8000864:	0409      	lsls	r1, r1, #16
 8000866:	1809      	adds	r1, r1, r0
 8000868:	0020      	movs	r0, r4
 800086a:	4699      	mov	r9, r3
 800086c:	4643      	mov	r3, r8
 800086e:	4370      	muls	r0, r6
 8000870:	435c      	muls	r4, r3
 8000872:	437e      	muls	r6, r7
 8000874:	435f      	muls	r7, r3
 8000876:	0c03      	lsrs	r3, r0, #16
 8000878:	4698      	mov	r8, r3
 800087a:	19a4      	adds	r4, r4, r6
 800087c:	4444      	add	r4, r8
 800087e:	444a      	add	r2, r9
 8000880:	9703      	str	r7, [sp, #12]
 8000882:	42a6      	cmp	r6, r4
 8000884:	d904      	bls.n	8000890 <__aeabi_dmul+0x1d4>
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	025b      	lsls	r3, r3, #9
 800088a:	4698      	mov	r8, r3
 800088c:	4447      	add	r7, r8
 800088e:	9703      	str	r7, [sp, #12]
 8000890:	0423      	lsls	r3, r4, #16
 8000892:	9e02      	ldr	r6, [sp, #8]
 8000894:	469a      	mov	sl, r3
 8000896:	9b05      	ldr	r3, [sp, #20]
 8000898:	445e      	add	r6, fp
 800089a:	4698      	mov	r8, r3
 800089c:	42ae      	cmp	r6, r5
 800089e:	41ad      	sbcs	r5, r5
 80008a0:	1876      	adds	r6, r6, r1
 80008a2:	428e      	cmp	r6, r1
 80008a4:	4189      	sbcs	r1, r1
 80008a6:	0400      	lsls	r0, r0, #16
 80008a8:	0c00      	lsrs	r0, r0, #16
 80008aa:	4450      	add	r0, sl
 80008ac:	4440      	add	r0, r8
 80008ae:	426d      	negs	r5, r5
 80008b0:	1947      	adds	r7, r0, r5
 80008b2:	46b8      	mov	r8, r7
 80008b4:	4693      	mov	fp, r2
 80008b6:	4249      	negs	r1, r1
 80008b8:	4689      	mov	r9, r1
 80008ba:	44c3      	add	fp, r8
 80008bc:	44d9      	add	r9, fp
 80008be:	4298      	cmp	r0, r3
 80008c0:	4180      	sbcs	r0, r0
 80008c2:	45a8      	cmp	r8, r5
 80008c4:	41ad      	sbcs	r5, r5
 80008c6:	4593      	cmp	fp, r2
 80008c8:	4192      	sbcs	r2, r2
 80008ca:	4589      	cmp	r9, r1
 80008cc:	4189      	sbcs	r1, r1
 80008ce:	426d      	negs	r5, r5
 80008d0:	4240      	negs	r0, r0
 80008d2:	4328      	orrs	r0, r5
 80008d4:	0c24      	lsrs	r4, r4, #16
 80008d6:	4252      	negs	r2, r2
 80008d8:	4249      	negs	r1, r1
 80008da:	430a      	orrs	r2, r1
 80008dc:	9b03      	ldr	r3, [sp, #12]
 80008de:	1900      	adds	r0, r0, r4
 80008e0:	1880      	adds	r0, r0, r2
 80008e2:	18c7      	adds	r7, r0, r3
 80008e4:	464b      	mov	r3, r9
 80008e6:	0ddc      	lsrs	r4, r3, #23
 80008e8:	9b04      	ldr	r3, [sp, #16]
 80008ea:	0275      	lsls	r5, r6, #9
 80008ec:	431d      	orrs	r5, r3
 80008ee:	1e6a      	subs	r2, r5, #1
 80008f0:	4195      	sbcs	r5, r2
 80008f2:	464b      	mov	r3, r9
 80008f4:	0df6      	lsrs	r6, r6, #23
 80008f6:	027f      	lsls	r7, r7, #9
 80008f8:	4335      	orrs	r5, r6
 80008fa:	025a      	lsls	r2, r3, #9
 80008fc:	433c      	orrs	r4, r7
 80008fe:	4315      	orrs	r5, r2
 8000900:	01fb      	lsls	r3, r7, #7
 8000902:	d400      	bmi.n	8000906 <__aeabi_dmul+0x24a>
 8000904:	e11c      	b.n	8000b40 <__aeabi_dmul+0x484>
 8000906:	2101      	movs	r1, #1
 8000908:	086a      	lsrs	r2, r5, #1
 800090a:	400d      	ands	r5, r1
 800090c:	4315      	orrs	r5, r2
 800090e:	07e2      	lsls	r2, r4, #31
 8000910:	4315      	orrs	r5, r2
 8000912:	0864      	lsrs	r4, r4, #1
 8000914:	494f      	ldr	r1, [pc, #316]	; (8000a54 <__aeabi_dmul+0x398>)
 8000916:	4461      	add	r1, ip
 8000918:	2900      	cmp	r1, #0
 800091a:	dc00      	bgt.n	800091e <__aeabi_dmul+0x262>
 800091c:	e0b0      	b.n	8000a80 <__aeabi_dmul+0x3c4>
 800091e:	076b      	lsls	r3, r5, #29
 8000920:	d009      	beq.n	8000936 <__aeabi_dmul+0x27a>
 8000922:	220f      	movs	r2, #15
 8000924:	402a      	ands	r2, r5
 8000926:	2a04      	cmp	r2, #4
 8000928:	d005      	beq.n	8000936 <__aeabi_dmul+0x27a>
 800092a:	1d2a      	adds	r2, r5, #4
 800092c:	42aa      	cmp	r2, r5
 800092e:	41ad      	sbcs	r5, r5
 8000930:	426d      	negs	r5, r5
 8000932:	1964      	adds	r4, r4, r5
 8000934:	0015      	movs	r5, r2
 8000936:	01e3      	lsls	r3, r4, #7
 8000938:	d504      	bpl.n	8000944 <__aeabi_dmul+0x288>
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <__aeabi_dmul+0x39c>)
 800093e:	00c9      	lsls	r1, r1, #3
 8000940:	4014      	ands	r4, r2
 8000942:	4461      	add	r1, ip
 8000944:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <__aeabi_dmul+0x3a0>)
 8000946:	4291      	cmp	r1, r2
 8000948:	dd00      	ble.n	800094c <__aeabi_dmul+0x290>
 800094a:	e726      	b.n	800079a <__aeabi_dmul+0xde>
 800094c:	0762      	lsls	r2, r4, #29
 800094e:	08ed      	lsrs	r5, r5, #3
 8000950:	0264      	lsls	r4, r4, #9
 8000952:	0549      	lsls	r1, r1, #21
 8000954:	4315      	orrs	r5, r2
 8000956:	0b24      	lsrs	r4, r4, #12
 8000958:	0d4a      	lsrs	r2, r1, #21
 800095a:	e710      	b.n	800077e <__aeabi_dmul+0xc2>
 800095c:	4652      	mov	r2, sl
 800095e:	4332      	orrs	r2, r6
 8000960:	d100      	bne.n	8000964 <__aeabi_dmul+0x2a8>
 8000962:	e07f      	b.n	8000a64 <__aeabi_dmul+0x3a8>
 8000964:	2e00      	cmp	r6, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dmul+0x2ae>
 8000968:	e0dc      	b.n	8000b24 <__aeabi_dmul+0x468>
 800096a:	0030      	movs	r0, r6
 800096c:	f000 fd82 	bl	8001474 <__clzsi2>
 8000970:	0002      	movs	r2, r0
 8000972:	3a0b      	subs	r2, #11
 8000974:	231d      	movs	r3, #29
 8000976:	0001      	movs	r1, r0
 8000978:	1a9b      	subs	r3, r3, r2
 800097a:	4652      	mov	r2, sl
 800097c:	3908      	subs	r1, #8
 800097e:	40da      	lsrs	r2, r3
 8000980:	408e      	lsls	r6, r1
 8000982:	4316      	orrs	r6, r2
 8000984:	4652      	mov	r2, sl
 8000986:	408a      	lsls	r2, r1
 8000988:	9b00      	ldr	r3, [sp, #0]
 800098a:	4935      	ldr	r1, [pc, #212]	; (8000a60 <__aeabi_dmul+0x3a4>)
 800098c:	1a18      	subs	r0, r3, r0
 800098e:	0003      	movs	r3, r0
 8000990:	468c      	mov	ip, r1
 8000992:	4463      	add	r3, ip
 8000994:	2000      	movs	r0, #0
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	e6d3      	b.n	8000742 <__aeabi_dmul+0x86>
 800099a:	0025      	movs	r5, r4
 800099c:	4305      	orrs	r5, r0
 800099e:	d04a      	beq.n	8000a36 <__aeabi_dmul+0x37a>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dmul+0x2ea>
 80009a4:	e0b0      	b.n	8000b08 <__aeabi_dmul+0x44c>
 80009a6:	0020      	movs	r0, r4
 80009a8:	f000 fd64 	bl	8001474 <__clzsi2>
 80009ac:	0001      	movs	r1, r0
 80009ae:	0002      	movs	r2, r0
 80009b0:	390b      	subs	r1, #11
 80009b2:	231d      	movs	r3, #29
 80009b4:	0010      	movs	r0, r2
 80009b6:	1a5b      	subs	r3, r3, r1
 80009b8:	0031      	movs	r1, r6
 80009ba:	0035      	movs	r5, r6
 80009bc:	3808      	subs	r0, #8
 80009be:	4084      	lsls	r4, r0
 80009c0:	40d9      	lsrs	r1, r3
 80009c2:	4085      	lsls	r5, r0
 80009c4:	430c      	orrs	r4, r1
 80009c6:	4826      	ldr	r0, [pc, #152]	; (8000a60 <__aeabi_dmul+0x3a4>)
 80009c8:	1a83      	subs	r3, r0, r2
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2300      	movs	r3, #0
 80009ce:	4699      	mov	r9, r3
 80009d0:	469b      	mov	fp, r3
 80009d2:	e697      	b.n	8000704 <__aeabi_dmul+0x48>
 80009d4:	0005      	movs	r5, r0
 80009d6:	4325      	orrs	r5, r4
 80009d8:	d126      	bne.n	8000a28 <__aeabi_dmul+0x36c>
 80009da:	2208      	movs	r2, #8
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2302      	movs	r3, #2
 80009e0:	2400      	movs	r4, #0
 80009e2:	4691      	mov	r9, r2
 80009e4:	469b      	mov	fp, r3
 80009e6:	e68d      	b.n	8000704 <__aeabi_dmul+0x48>
 80009e8:	4652      	mov	r2, sl
 80009ea:	9b00      	ldr	r3, [sp, #0]
 80009ec:	4332      	orrs	r2, r6
 80009ee:	d110      	bne.n	8000a12 <__aeabi_dmul+0x356>
 80009f0:	4915      	ldr	r1, [pc, #84]	; (8000a48 <__aeabi_dmul+0x38c>)
 80009f2:	2600      	movs	r6, #0
 80009f4:	468c      	mov	ip, r1
 80009f6:	4463      	add	r3, ip
 80009f8:	4649      	mov	r1, r9
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2302      	movs	r3, #2
 80009fe:	4319      	orrs	r1, r3
 8000a00:	4689      	mov	r9, r1
 8000a02:	2002      	movs	r0, #2
 8000a04:	e69d      	b.n	8000742 <__aeabi_dmul+0x86>
 8000a06:	465b      	mov	r3, fp
 8000a08:	9701      	str	r7, [sp, #4]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_dmul+0x354>
 8000a0e:	e6ad      	b.n	800076c <__aeabi_dmul+0xb0>
 8000a10:	e6c3      	b.n	800079a <__aeabi_dmul+0xde>
 8000a12:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <__aeabi_dmul+0x38c>)
 8000a14:	2003      	movs	r0, #3
 8000a16:	4694      	mov	ip, r2
 8000a18:	4463      	add	r3, ip
 8000a1a:	464a      	mov	r2, r9
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2303      	movs	r3, #3
 8000a20:	431a      	orrs	r2, r3
 8000a22:	4691      	mov	r9, r2
 8000a24:	4652      	mov	r2, sl
 8000a26:	e68c      	b.n	8000742 <__aeabi_dmul+0x86>
 8000a28:	220c      	movs	r2, #12
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	0005      	movs	r5, r0
 8000a30:	4691      	mov	r9, r2
 8000a32:	469b      	mov	fp, r3
 8000a34:	e666      	b.n	8000704 <__aeabi_dmul+0x48>
 8000a36:	2304      	movs	r3, #4
 8000a38:	4699      	mov	r9, r3
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	2400      	movs	r4, #0
 8000a42:	469b      	mov	fp, r3
 8000a44:	e65e      	b.n	8000704 <__aeabi_dmul+0x48>
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	000007ff 	.word	0x000007ff
 8000a4c:	fffffc01 	.word	0xfffffc01
 8000a50:	08006510 	.word	0x08006510
 8000a54:	000003ff 	.word	0x000003ff
 8000a58:	feffffff 	.word	0xfeffffff
 8000a5c:	000007fe 	.word	0x000007fe
 8000a60:	fffffc0d 	.word	0xfffffc0d
 8000a64:	4649      	mov	r1, r9
 8000a66:	2301      	movs	r3, #1
 8000a68:	4319      	orrs	r1, r3
 8000a6a:	4689      	mov	r9, r1
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	2001      	movs	r0, #1
 8000a70:	e667      	b.n	8000742 <__aeabi_dmul+0x86>
 8000a72:	2300      	movs	r3, #0
 8000a74:	2480      	movs	r4, #128	; 0x80
 8000a76:	2500      	movs	r5, #0
 8000a78:	4a43      	ldr	r2, [pc, #268]	; (8000b88 <__aeabi_dmul+0x4cc>)
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	0324      	lsls	r4, r4, #12
 8000a7e:	e67e      	b.n	800077e <__aeabi_dmul+0xc2>
 8000a80:	2001      	movs	r0, #1
 8000a82:	1a40      	subs	r0, r0, r1
 8000a84:	2838      	cmp	r0, #56	; 0x38
 8000a86:	dd00      	ble.n	8000a8a <__aeabi_dmul+0x3ce>
 8000a88:	e676      	b.n	8000778 <__aeabi_dmul+0xbc>
 8000a8a:	281f      	cmp	r0, #31
 8000a8c:	dd5b      	ble.n	8000b46 <__aeabi_dmul+0x48a>
 8000a8e:	221f      	movs	r2, #31
 8000a90:	0023      	movs	r3, r4
 8000a92:	4252      	negs	r2, r2
 8000a94:	1a51      	subs	r1, r2, r1
 8000a96:	40cb      	lsrs	r3, r1
 8000a98:	0019      	movs	r1, r3
 8000a9a:	2820      	cmp	r0, #32
 8000a9c:	d003      	beq.n	8000aa6 <__aeabi_dmul+0x3ea>
 8000a9e:	4a3b      	ldr	r2, [pc, #236]	; (8000b8c <__aeabi_dmul+0x4d0>)
 8000aa0:	4462      	add	r2, ip
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	4325      	orrs	r5, r4
 8000aa6:	1e6a      	subs	r2, r5, #1
 8000aa8:	4195      	sbcs	r5, r2
 8000aaa:	002a      	movs	r2, r5
 8000aac:	430a      	orrs	r2, r1
 8000aae:	2107      	movs	r1, #7
 8000ab0:	000d      	movs	r5, r1
 8000ab2:	2400      	movs	r4, #0
 8000ab4:	4015      	ands	r5, r2
 8000ab6:	4211      	tst	r1, r2
 8000ab8:	d05b      	beq.n	8000b72 <__aeabi_dmul+0x4b6>
 8000aba:	210f      	movs	r1, #15
 8000abc:	2400      	movs	r4, #0
 8000abe:	4011      	ands	r1, r2
 8000ac0:	2904      	cmp	r1, #4
 8000ac2:	d053      	beq.n	8000b6c <__aeabi_dmul+0x4b0>
 8000ac4:	1d11      	adds	r1, r2, #4
 8000ac6:	4291      	cmp	r1, r2
 8000ac8:	4192      	sbcs	r2, r2
 8000aca:	4252      	negs	r2, r2
 8000acc:	18a4      	adds	r4, r4, r2
 8000ace:	000a      	movs	r2, r1
 8000ad0:	0223      	lsls	r3, r4, #8
 8000ad2:	d54b      	bpl.n	8000b6c <__aeabi_dmul+0x4b0>
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2400      	movs	r4, #0
 8000ad8:	2500      	movs	r5, #0
 8000ada:	e650      	b.n	800077e <__aeabi_dmul+0xc2>
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	031b      	lsls	r3, r3, #12
 8000ae0:	421c      	tst	r4, r3
 8000ae2:	d009      	beq.n	8000af8 <__aeabi_dmul+0x43c>
 8000ae4:	421e      	tst	r6, r3
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_dmul+0x43c>
 8000ae8:	4333      	orrs	r3, r6
 8000aea:	031c      	lsls	r4, r3, #12
 8000aec:	4643      	mov	r3, r8
 8000aee:	0015      	movs	r5, r2
 8000af0:	0b24      	lsrs	r4, r4, #12
 8000af2:	4a25      	ldr	r2, [pc, #148]	; (8000b88 <__aeabi_dmul+0x4cc>)
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	e642      	b.n	800077e <__aeabi_dmul+0xc2>
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	0312      	lsls	r2, r2, #12
 8000afc:	4314      	orrs	r4, r2
 8000afe:	0324      	lsls	r4, r4, #12
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <__aeabi_dmul+0x4cc>)
 8000b02:	0b24      	lsrs	r4, r4, #12
 8000b04:	9701      	str	r7, [sp, #4]
 8000b06:	e63a      	b.n	800077e <__aeabi_dmul+0xc2>
 8000b08:	f000 fcb4 	bl	8001474 <__clzsi2>
 8000b0c:	0001      	movs	r1, r0
 8000b0e:	0002      	movs	r2, r0
 8000b10:	3115      	adds	r1, #21
 8000b12:	3220      	adds	r2, #32
 8000b14:	291c      	cmp	r1, #28
 8000b16:	dc00      	bgt.n	8000b1a <__aeabi_dmul+0x45e>
 8000b18:	e74b      	b.n	80009b2 <__aeabi_dmul+0x2f6>
 8000b1a:	0034      	movs	r4, r6
 8000b1c:	3808      	subs	r0, #8
 8000b1e:	2500      	movs	r5, #0
 8000b20:	4084      	lsls	r4, r0
 8000b22:	e750      	b.n	80009c6 <__aeabi_dmul+0x30a>
 8000b24:	f000 fca6 	bl	8001474 <__clzsi2>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	3215      	adds	r2, #21
 8000b2e:	3020      	adds	r0, #32
 8000b30:	2a1c      	cmp	r2, #28
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_dmul+0x47a>
 8000b34:	e71e      	b.n	8000974 <__aeabi_dmul+0x2b8>
 8000b36:	4656      	mov	r6, sl
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	409e      	lsls	r6, r3
 8000b3e:	e723      	b.n	8000988 <__aeabi_dmul+0x2cc>
 8000b40:	9b00      	ldr	r3, [sp, #0]
 8000b42:	469c      	mov	ip, r3
 8000b44:	e6e6      	b.n	8000914 <__aeabi_dmul+0x258>
 8000b46:	4912      	ldr	r1, [pc, #72]	; (8000b90 <__aeabi_dmul+0x4d4>)
 8000b48:	0022      	movs	r2, r4
 8000b4a:	4461      	add	r1, ip
 8000b4c:	002e      	movs	r6, r5
 8000b4e:	408d      	lsls	r5, r1
 8000b50:	408a      	lsls	r2, r1
 8000b52:	40c6      	lsrs	r6, r0
 8000b54:	1e69      	subs	r1, r5, #1
 8000b56:	418d      	sbcs	r5, r1
 8000b58:	4332      	orrs	r2, r6
 8000b5a:	432a      	orrs	r2, r5
 8000b5c:	40c4      	lsrs	r4, r0
 8000b5e:	0753      	lsls	r3, r2, #29
 8000b60:	d0b6      	beq.n	8000ad0 <__aeabi_dmul+0x414>
 8000b62:	210f      	movs	r1, #15
 8000b64:	4011      	ands	r1, r2
 8000b66:	2904      	cmp	r1, #4
 8000b68:	d1ac      	bne.n	8000ac4 <__aeabi_dmul+0x408>
 8000b6a:	e7b1      	b.n	8000ad0 <__aeabi_dmul+0x414>
 8000b6c:	0765      	lsls	r5, r4, #29
 8000b6e:	0264      	lsls	r4, r4, #9
 8000b70:	0b24      	lsrs	r4, r4, #12
 8000b72:	08d2      	lsrs	r2, r2, #3
 8000b74:	4315      	orrs	r5, r2
 8000b76:	2200      	movs	r2, #0
 8000b78:	e601      	b.n	800077e <__aeabi_dmul+0xc2>
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	0312      	lsls	r2, r2, #12
 8000b7e:	4314      	orrs	r4, r2
 8000b80:	0324      	lsls	r4, r4, #12
 8000b82:	4a01      	ldr	r2, [pc, #4]	; (8000b88 <__aeabi_dmul+0x4cc>)
 8000b84:	0b24      	lsrs	r4, r4, #12
 8000b86:	e5fa      	b.n	800077e <__aeabi_dmul+0xc2>
 8000b88:	000007ff 	.word	0x000007ff
 8000b8c:	0000043e 	.word	0x0000043e
 8000b90:	0000041e 	.word	0x0000041e

08000b94 <__aeabi_dsub>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	4657      	mov	r7, sl
 8000b98:	464e      	mov	r6, r9
 8000b9a:	4645      	mov	r5, r8
 8000b9c:	46de      	mov	lr, fp
 8000b9e:	b5e0      	push	{r5, r6, r7, lr}
 8000ba0:	001e      	movs	r6, r3
 8000ba2:	0017      	movs	r7, r2
 8000ba4:	004a      	lsls	r2, r1, #1
 8000ba6:	030b      	lsls	r3, r1, #12
 8000ba8:	0d52      	lsrs	r2, r2, #21
 8000baa:	0a5b      	lsrs	r3, r3, #9
 8000bac:	4690      	mov	r8, r2
 8000bae:	0f42      	lsrs	r2, r0, #29
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	0fcd      	lsrs	r5, r1, #31
 8000bb4:	4ccd      	ldr	r4, [pc, #820]	; (8000eec <__aeabi_dsub+0x358>)
 8000bb6:	0331      	lsls	r1, r6, #12
 8000bb8:	00c3      	lsls	r3, r0, #3
 8000bba:	4694      	mov	ip, r2
 8000bbc:	0070      	lsls	r0, r6, #1
 8000bbe:	0f7a      	lsrs	r2, r7, #29
 8000bc0:	0a49      	lsrs	r1, r1, #9
 8000bc2:	00ff      	lsls	r7, r7, #3
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	46b9      	mov	r9, r7
 8000bc8:	0d40      	lsrs	r0, r0, #21
 8000bca:	0ff6      	lsrs	r6, r6, #31
 8000bcc:	4311      	orrs	r1, r2
 8000bce:	42a0      	cmp	r0, r4
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dsub+0x40>
 8000bd2:	e0b1      	b.n	8000d38 <__aeabi_dsub+0x1a4>
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4056      	eors	r6, r2
 8000bd8:	46b3      	mov	fp, r6
 8000bda:	42b5      	cmp	r5, r6
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dsub+0x4c>
 8000bde:	e088      	b.n	8000cf2 <__aeabi_dsub+0x15e>
 8000be0:	4642      	mov	r2, r8
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	dc00      	bgt.n	8000bea <__aeabi_dsub+0x56>
 8000be8:	e0ae      	b.n	8000d48 <__aeabi_dsub+0x1b4>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dsub+0x5c>
 8000bee:	e0c1      	b.n	8000d74 <__aeabi_dsub+0x1e0>
 8000bf0:	48be      	ldr	r0, [pc, #760]	; (8000eec <__aeabi_dsub+0x358>)
 8000bf2:	4580      	cmp	r8, r0
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dsub+0x64>
 8000bf6:	e151      	b.n	8000e9c <__aeabi_dsub+0x308>
 8000bf8:	2080      	movs	r0, #128	; 0x80
 8000bfa:	0400      	lsls	r0, r0, #16
 8000bfc:	4301      	orrs	r1, r0
 8000bfe:	2a38      	cmp	r2, #56	; 0x38
 8000c00:	dd00      	ble.n	8000c04 <__aeabi_dsub+0x70>
 8000c02:	e17b      	b.n	8000efc <__aeabi_dsub+0x368>
 8000c04:	2a1f      	cmp	r2, #31
 8000c06:	dd00      	ble.n	8000c0a <__aeabi_dsub+0x76>
 8000c08:	e1ee      	b.n	8000fe8 <__aeabi_dsub+0x454>
 8000c0a:	2020      	movs	r0, #32
 8000c0c:	003e      	movs	r6, r7
 8000c0e:	1a80      	subs	r0, r0, r2
 8000c10:	000c      	movs	r4, r1
 8000c12:	40d6      	lsrs	r6, r2
 8000c14:	40d1      	lsrs	r1, r2
 8000c16:	4087      	lsls	r7, r0
 8000c18:	4662      	mov	r2, ip
 8000c1a:	4084      	lsls	r4, r0
 8000c1c:	1a52      	subs	r2, r2, r1
 8000c1e:	1e78      	subs	r0, r7, #1
 8000c20:	4187      	sbcs	r7, r0
 8000c22:	4694      	mov	ip, r2
 8000c24:	4334      	orrs	r4, r6
 8000c26:	4327      	orrs	r7, r4
 8000c28:	1bdc      	subs	r4, r3, r7
 8000c2a:	42a3      	cmp	r3, r4
 8000c2c:	419b      	sbcs	r3, r3
 8000c2e:	4662      	mov	r2, ip
 8000c30:	425b      	negs	r3, r3
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	4699      	mov	r9, r3
 8000c36:	464b      	mov	r3, r9
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	d400      	bmi.n	8000c3e <__aeabi_dsub+0xaa>
 8000c3c:	e118      	b.n	8000e70 <__aeabi_dsub+0x2dc>
 8000c3e:	464b      	mov	r3, r9
 8000c40:	0258      	lsls	r0, r3, #9
 8000c42:	0a43      	lsrs	r3, r0, #9
 8000c44:	4699      	mov	r9, r3
 8000c46:	464b      	mov	r3, r9
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dsub+0xba>
 8000c4c:	e137      	b.n	8000ebe <__aeabi_dsub+0x32a>
 8000c4e:	4648      	mov	r0, r9
 8000c50:	f000 fc10 	bl	8001474 <__clzsi2>
 8000c54:	0001      	movs	r1, r0
 8000c56:	3908      	subs	r1, #8
 8000c58:	2320      	movs	r3, #32
 8000c5a:	0022      	movs	r2, r4
 8000c5c:	4648      	mov	r0, r9
 8000c5e:	1a5b      	subs	r3, r3, r1
 8000c60:	40da      	lsrs	r2, r3
 8000c62:	4088      	lsls	r0, r1
 8000c64:	408c      	lsls	r4, r1
 8000c66:	4643      	mov	r3, r8
 8000c68:	4310      	orrs	r0, r2
 8000c6a:	4588      	cmp	r8, r1
 8000c6c:	dd00      	ble.n	8000c70 <__aeabi_dsub+0xdc>
 8000c6e:	e136      	b.n	8000ede <__aeabi_dsub+0x34a>
 8000c70:	1ac9      	subs	r1, r1, r3
 8000c72:	1c4b      	adds	r3, r1, #1
 8000c74:	2b1f      	cmp	r3, #31
 8000c76:	dd00      	ble.n	8000c7a <__aeabi_dsub+0xe6>
 8000c78:	e0ea      	b.n	8000e50 <__aeabi_dsub+0x2bc>
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	0026      	movs	r6, r4
 8000c7e:	1ad2      	subs	r2, r2, r3
 8000c80:	0001      	movs	r1, r0
 8000c82:	4094      	lsls	r4, r2
 8000c84:	40de      	lsrs	r6, r3
 8000c86:	40d8      	lsrs	r0, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	4091      	lsls	r1, r2
 8000c8c:	1e62      	subs	r2, r4, #1
 8000c8e:	4194      	sbcs	r4, r2
 8000c90:	4681      	mov	r9, r0
 8000c92:	4698      	mov	r8, r3
 8000c94:	4331      	orrs	r1, r6
 8000c96:	430c      	orrs	r4, r1
 8000c98:	0763      	lsls	r3, r4, #29
 8000c9a:	d009      	beq.n	8000cb0 <__aeabi_dsub+0x11c>
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	4023      	ands	r3, r4
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d005      	beq.n	8000cb0 <__aeabi_dsub+0x11c>
 8000ca4:	1d23      	adds	r3, r4, #4
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	41a4      	sbcs	r4, r4
 8000caa:	4264      	negs	r4, r4
 8000cac:	44a1      	add	r9, r4
 8000cae:	001c      	movs	r4, r3
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	d400      	bmi.n	8000cb8 <__aeabi_dsub+0x124>
 8000cb6:	e0de      	b.n	8000e76 <__aeabi_dsub+0x2e2>
 8000cb8:	4641      	mov	r1, r8
 8000cba:	4b8c      	ldr	r3, [pc, #560]	; (8000eec <__aeabi_dsub+0x358>)
 8000cbc:	3101      	adds	r1, #1
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dsub+0x130>
 8000cc2:	e0e7      	b.n	8000e94 <__aeabi_dsub+0x300>
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	488a      	ldr	r0, [pc, #552]	; (8000ef0 <__aeabi_dsub+0x35c>)
 8000cc8:	08e4      	lsrs	r4, r4, #3
 8000cca:	4003      	ands	r3, r0
 8000ccc:	0018      	movs	r0, r3
 8000cce:	0549      	lsls	r1, r1, #21
 8000cd0:	075b      	lsls	r3, r3, #29
 8000cd2:	0240      	lsls	r0, r0, #9
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	0d4a      	lsrs	r2, r1, #21
 8000cd8:	0b04      	lsrs	r4, r0, #12
 8000cda:	0512      	lsls	r2, r2, #20
 8000cdc:	07ed      	lsls	r5, r5, #31
 8000cde:	4322      	orrs	r2, r4
 8000ce0:	432a      	orrs	r2, r5
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ce8:	46bb      	mov	fp, r7
 8000cea:	46b2      	mov	sl, r6
 8000cec:	46a9      	mov	r9, r5
 8000cee:	46a0      	mov	r8, r4
 8000cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cf2:	4642      	mov	r2, r8
 8000cf4:	1a12      	subs	r2, r2, r0
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	dd52      	ble.n	8000da0 <__aeabi_dsub+0x20c>
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dsub+0x16c>
 8000cfe:	e09c      	b.n	8000e3a <__aeabi_dsub+0x2a6>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d100      	bne.n	8000d06 <__aeabi_dsub+0x172>
 8000d04:	e0ca      	b.n	8000e9c <__aeabi_dsub+0x308>
 8000d06:	2080      	movs	r0, #128	; 0x80
 8000d08:	0400      	lsls	r0, r0, #16
 8000d0a:	4301      	orrs	r1, r0
 8000d0c:	2a38      	cmp	r2, #56	; 0x38
 8000d0e:	dd00      	ble.n	8000d12 <__aeabi_dsub+0x17e>
 8000d10:	e149      	b.n	8000fa6 <__aeabi_dsub+0x412>
 8000d12:	2a1f      	cmp	r2, #31
 8000d14:	dc00      	bgt.n	8000d18 <__aeabi_dsub+0x184>
 8000d16:	e197      	b.n	8001048 <__aeabi_dsub+0x4b4>
 8000d18:	0010      	movs	r0, r2
 8000d1a:	000e      	movs	r6, r1
 8000d1c:	3820      	subs	r0, #32
 8000d1e:	40c6      	lsrs	r6, r0
 8000d20:	2a20      	cmp	r2, #32
 8000d22:	d004      	beq.n	8000d2e <__aeabi_dsub+0x19a>
 8000d24:	2040      	movs	r0, #64	; 0x40
 8000d26:	1a82      	subs	r2, r0, r2
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	430f      	orrs	r7, r1
 8000d2c:	46b9      	mov	r9, r7
 8000d2e:	464c      	mov	r4, r9
 8000d30:	1e62      	subs	r2, r4, #1
 8000d32:	4194      	sbcs	r4, r2
 8000d34:	4334      	orrs	r4, r6
 8000d36:	e13a      	b.n	8000fae <__aeabi_dsub+0x41a>
 8000d38:	000a      	movs	r2, r1
 8000d3a:	433a      	orrs	r2, r7
 8000d3c:	d028      	beq.n	8000d90 <__aeabi_dsub+0x1fc>
 8000d3e:	46b3      	mov	fp, r6
 8000d40:	42b5      	cmp	r5, r6
 8000d42:	d02b      	beq.n	8000d9c <__aeabi_dsub+0x208>
 8000d44:	4a6b      	ldr	r2, [pc, #428]	; (8000ef4 <__aeabi_dsub+0x360>)
 8000d46:	4442      	add	r2, r8
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d05d      	beq.n	8000e08 <__aeabi_dsub+0x274>
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	4644      	mov	r4, r8
 8000d50:	1a82      	subs	r2, r0, r2
 8000d52:	2c00      	cmp	r4, #0
 8000d54:	d000      	beq.n	8000d58 <__aeabi_dsub+0x1c4>
 8000d56:	e0f5      	b.n	8000f44 <__aeabi_dsub+0x3b0>
 8000d58:	4665      	mov	r5, ip
 8000d5a:	431d      	orrs	r5, r3
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dsub+0x1cc>
 8000d5e:	e19c      	b.n	800109a <__aeabi_dsub+0x506>
 8000d60:	1e55      	subs	r5, r2, #1
 8000d62:	2a01      	cmp	r2, #1
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dsub+0x1d4>
 8000d66:	e1fb      	b.n	8001160 <__aeabi_dsub+0x5cc>
 8000d68:	4c60      	ldr	r4, [pc, #384]	; (8000eec <__aeabi_dsub+0x358>)
 8000d6a:	42a2      	cmp	r2, r4
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dsub+0x1dc>
 8000d6e:	e1bd      	b.n	80010ec <__aeabi_dsub+0x558>
 8000d70:	002a      	movs	r2, r5
 8000d72:	e0f0      	b.n	8000f56 <__aeabi_dsub+0x3c2>
 8000d74:	0008      	movs	r0, r1
 8000d76:	4338      	orrs	r0, r7
 8000d78:	d100      	bne.n	8000d7c <__aeabi_dsub+0x1e8>
 8000d7a:	e0c3      	b.n	8000f04 <__aeabi_dsub+0x370>
 8000d7c:	1e50      	subs	r0, r2, #1
 8000d7e:	2a01      	cmp	r2, #1
 8000d80:	d100      	bne.n	8000d84 <__aeabi_dsub+0x1f0>
 8000d82:	e1a8      	b.n	80010d6 <__aeabi_dsub+0x542>
 8000d84:	4c59      	ldr	r4, [pc, #356]	; (8000eec <__aeabi_dsub+0x358>)
 8000d86:	42a2      	cmp	r2, r4
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dsub+0x1f8>
 8000d8a:	e087      	b.n	8000e9c <__aeabi_dsub+0x308>
 8000d8c:	0002      	movs	r2, r0
 8000d8e:	e736      	b.n	8000bfe <__aeabi_dsub+0x6a>
 8000d90:	2201      	movs	r2, #1
 8000d92:	4056      	eors	r6, r2
 8000d94:	46b3      	mov	fp, r6
 8000d96:	42b5      	cmp	r5, r6
 8000d98:	d000      	beq.n	8000d9c <__aeabi_dsub+0x208>
 8000d9a:	e721      	b.n	8000be0 <__aeabi_dsub+0x4c>
 8000d9c:	4a55      	ldr	r2, [pc, #340]	; (8000ef4 <__aeabi_dsub+0x360>)
 8000d9e:	4442      	add	r2, r8
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dsub+0x212>
 8000da4:	e0b5      	b.n	8000f12 <__aeabi_dsub+0x37e>
 8000da6:	4642      	mov	r2, r8
 8000da8:	4644      	mov	r4, r8
 8000daa:	1a82      	subs	r2, r0, r2
 8000dac:	2c00      	cmp	r4, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dsub+0x21e>
 8000db0:	e138      	b.n	8001024 <__aeabi_dsub+0x490>
 8000db2:	4e4e      	ldr	r6, [pc, #312]	; (8000eec <__aeabi_dsub+0x358>)
 8000db4:	42b0      	cmp	r0, r6
 8000db6:	d100      	bne.n	8000dba <__aeabi_dsub+0x226>
 8000db8:	e1de      	b.n	8001178 <__aeabi_dsub+0x5e4>
 8000dba:	2680      	movs	r6, #128	; 0x80
 8000dbc:	4664      	mov	r4, ip
 8000dbe:	0436      	lsls	r6, r6, #16
 8000dc0:	4334      	orrs	r4, r6
 8000dc2:	46a4      	mov	ip, r4
 8000dc4:	2a38      	cmp	r2, #56	; 0x38
 8000dc6:	dd00      	ble.n	8000dca <__aeabi_dsub+0x236>
 8000dc8:	e196      	b.n	80010f8 <__aeabi_dsub+0x564>
 8000dca:	2a1f      	cmp	r2, #31
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_dsub+0x23c>
 8000dce:	e224      	b.n	800121a <__aeabi_dsub+0x686>
 8000dd0:	2620      	movs	r6, #32
 8000dd2:	1ab4      	subs	r4, r6, r2
 8000dd4:	46a2      	mov	sl, r4
 8000dd6:	4664      	mov	r4, ip
 8000dd8:	4656      	mov	r6, sl
 8000dda:	40b4      	lsls	r4, r6
 8000ddc:	46a1      	mov	r9, r4
 8000dde:	001c      	movs	r4, r3
 8000de0:	464e      	mov	r6, r9
 8000de2:	40d4      	lsrs	r4, r2
 8000de4:	4326      	orrs	r6, r4
 8000de6:	0034      	movs	r4, r6
 8000de8:	4656      	mov	r6, sl
 8000dea:	40b3      	lsls	r3, r6
 8000dec:	1e5e      	subs	r6, r3, #1
 8000dee:	41b3      	sbcs	r3, r6
 8000df0:	431c      	orrs	r4, r3
 8000df2:	4663      	mov	r3, ip
 8000df4:	40d3      	lsrs	r3, r2
 8000df6:	18c9      	adds	r1, r1, r3
 8000df8:	19e4      	adds	r4, r4, r7
 8000dfa:	42bc      	cmp	r4, r7
 8000dfc:	41bf      	sbcs	r7, r7
 8000dfe:	427f      	negs	r7, r7
 8000e00:	46b9      	mov	r9, r7
 8000e02:	4680      	mov	r8, r0
 8000e04:	4489      	add	r9, r1
 8000e06:	e0d8      	b.n	8000fba <__aeabi_dsub+0x426>
 8000e08:	4640      	mov	r0, r8
 8000e0a:	4c3b      	ldr	r4, [pc, #236]	; (8000ef8 <__aeabi_dsub+0x364>)
 8000e0c:	3001      	adds	r0, #1
 8000e0e:	4220      	tst	r0, r4
 8000e10:	d000      	beq.n	8000e14 <__aeabi_dsub+0x280>
 8000e12:	e0b4      	b.n	8000f7e <__aeabi_dsub+0x3ea>
 8000e14:	4640      	mov	r0, r8
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d000      	beq.n	8000e1c <__aeabi_dsub+0x288>
 8000e1a:	e144      	b.n	80010a6 <__aeabi_dsub+0x512>
 8000e1c:	4660      	mov	r0, ip
 8000e1e:	4318      	orrs	r0, r3
 8000e20:	d100      	bne.n	8000e24 <__aeabi_dsub+0x290>
 8000e22:	e190      	b.n	8001146 <__aeabi_dsub+0x5b2>
 8000e24:	0008      	movs	r0, r1
 8000e26:	4338      	orrs	r0, r7
 8000e28:	d000      	beq.n	8000e2c <__aeabi_dsub+0x298>
 8000e2a:	e1aa      	b.n	8001182 <__aeabi_dsub+0x5ee>
 8000e2c:	4661      	mov	r1, ip
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	0749      	lsls	r1, r1, #29
 8000e32:	430b      	orrs	r3, r1
 8000e34:	4661      	mov	r1, ip
 8000e36:	08cc      	lsrs	r4, r1, #3
 8000e38:	e027      	b.n	8000e8a <__aeabi_dsub+0x2f6>
 8000e3a:	0008      	movs	r0, r1
 8000e3c:	4338      	orrs	r0, r7
 8000e3e:	d061      	beq.n	8000f04 <__aeabi_dsub+0x370>
 8000e40:	1e50      	subs	r0, r2, #1
 8000e42:	2a01      	cmp	r2, #1
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dsub+0x2b4>
 8000e46:	e139      	b.n	80010bc <__aeabi_dsub+0x528>
 8000e48:	42a2      	cmp	r2, r4
 8000e4a:	d027      	beq.n	8000e9c <__aeabi_dsub+0x308>
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	e75d      	b.n	8000d0c <__aeabi_dsub+0x178>
 8000e50:	0002      	movs	r2, r0
 8000e52:	391f      	subs	r1, #31
 8000e54:	40ca      	lsrs	r2, r1
 8000e56:	0011      	movs	r1, r2
 8000e58:	2b20      	cmp	r3, #32
 8000e5a:	d003      	beq.n	8000e64 <__aeabi_dsub+0x2d0>
 8000e5c:	2240      	movs	r2, #64	; 0x40
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	4098      	lsls	r0, r3
 8000e62:	4304      	orrs	r4, r0
 8000e64:	1e63      	subs	r3, r4, #1
 8000e66:	419c      	sbcs	r4, r3
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	4698      	mov	r8, r3
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	0763      	lsls	r3, r4, #29
 8000e72:	d000      	beq.n	8000e76 <__aeabi_dsub+0x2e2>
 8000e74:	e712      	b.n	8000c9c <__aeabi_dsub+0x108>
 8000e76:	464b      	mov	r3, r9
 8000e78:	464a      	mov	r2, r9
 8000e7a:	08e4      	lsrs	r4, r4, #3
 8000e7c:	075b      	lsls	r3, r3, #29
 8000e7e:	4323      	orrs	r3, r4
 8000e80:	08d4      	lsrs	r4, r2, #3
 8000e82:	4642      	mov	r2, r8
 8000e84:	4919      	ldr	r1, [pc, #100]	; (8000eec <__aeabi_dsub+0x358>)
 8000e86:	428a      	cmp	r2, r1
 8000e88:	d00e      	beq.n	8000ea8 <__aeabi_dsub+0x314>
 8000e8a:	0324      	lsls	r4, r4, #12
 8000e8c:	0552      	lsls	r2, r2, #21
 8000e8e:	0b24      	lsrs	r4, r4, #12
 8000e90:	0d52      	lsrs	r2, r2, #21
 8000e92:	e722      	b.n	8000cda <__aeabi_dsub+0x146>
 8000e94:	000a      	movs	r2, r1
 8000e96:	2400      	movs	r4, #0
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e71e      	b.n	8000cda <__aeabi_dsub+0x146>
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	4662      	mov	r2, ip
 8000ea0:	0752      	lsls	r2, r2, #29
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	4662      	mov	r2, ip
 8000ea6:	08d4      	lsrs	r4, r2, #3
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	4322      	orrs	r2, r4
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dsub+0x31c>
 8000eae:	e1fc      	b.n	80012aa <__aeabi_dsub+0x716>
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0312      	lsls	r2, r2, #12
 8000eb4:	4314      	orrs	r4, r2
 8000eb6:	0324      	lsls	r4, r4, #12
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <__aeabi_dsub+0x358>)
 8000eba:	0b24      	lsrs	r4, r4, #12
 8000ebc:	e70d      	b.n	8000cda <__aeabi_dsub+0x146>
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	f000 fad8 	bl	8001474 <__clzsi2>
 8000ec4:	0001      	movs	r1, r0
 8000ec6:	3118      	adds	r1, #24
 8000ec8:	291f      	cmp	r1, #31
 8000eca:	dc00      	bgt.n	8000ece <__aeabi_dsub+0x33a>
 8000ecc:	e6c4      	b.n	8000c58 <__aeabi_dsub+0xc4>
 8000ece:	3808      	subs	r0, #8
 8000ed0:	4084      	lsls	r4, r0
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	0020      	movs	r0, r4
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	4588      	cmp	r8, r1
 8000eda:	dc00      	bgt.n	8000ede <__aeabi_dsub+0x34a>
 8000edc:	e6c8      	b.n	8000c70 <__aeabi_dsub+0xdc>
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__aeabi_dsub+0x35c>)
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	4010      	ands	r0, r2
 8000ee4:	4698      	mov	r8, r3
 8000ee6:	4681      	mov	r9, r0
 8000ee8:	e6d6      	b.n	8000c98 <__aeabi_dsub+0x104>
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	ff7fffff 	.word	0xff7fffff
 8000ef4:	fffff801 	.word	0xfffff801
 8000ef8:	000007fe 	.word	0x000007fe
 8000efc:	430f      	orrs	r7, r1
 8000efe:	1e7a      	subs	r2, r7, #1
 8000f00:	4197      	sbcs	r7, r2
 8000f02:	e691      	b.n	8000c28 <__aeabi_dsub+0x94>
 8000f04:	4661      	mov	r1, ip
 8000f06:	08db      	lsrs	r3, r3, #3
 8000f08:	0749      	lsls	r1, r1, #29
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	08cc      	lsrs	r4, r1, #3
 8000f10:	e7b8      	b.n	8000e84 <__aeabi_dsub+0x2f0>
 8000f12:	4640      	mov	r0, r8
 8000f14:	4cd3      	ldr	r4, [pc, #844]	; (8001264 <__aeabi_dsub+0x6d0>)
 8000f16:	3001      	adds	r0, #1
 8000f18:	4220      	tst	r0, r4
 8000f1a:	d000      	beq.n	8000f1e <__aeabi_dsub+0x38a>
 8000f1c:	e0a2      	b.n	8001064 <__aeabi_dsub+0x4d0>
 8000f1e:	4640      	mov	r0, r8
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d000      	beq.n	8000f26 <__aeabi_dsub+0x392>
 8000f24:	e101      	b.n	800112a <__aeabi_dsub+0x596>
 8000f26:	4660      	mov	r0, ip
 8000f28:	4318      	orrs	r0, r3
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dsub+0x39a>
 8000f2c:	e15e      	b.n	80011ec <__aeabi_dsub+0x658>
 8000f2e:	0008      	movs	r0, r1
 8000f30:	4338      	orrs	r0, r7
 8000f32:	d000      	beq.n	8000f36 <__aeabi_dsub+0x3a2>
 8000f34:	e15f      	b.n	80011f6 <__aeabi_dsub+0x662>
 8000f36:	4661      	mov	r1, ip
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	0749      	lsls	r1, r1, #29
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	4661      	mov	r1, ip
 8000f40:	08cc      	lsrs	r4, r1, #3
 8000f42:	e7a2      	b.n	8000e8a <__aeabi_dsub+0x2f6>
 8000f44:	4dc8      	ldr	r5, [pc, #800]	; (8001268 <__aeabi_dsub+0x6d4>)
 8000f46:	42a8      	cmp	r0, r5
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dsub+0x3b8>
 8000f4a:	e0cf      	b.n	80010ec <__aeabi_dsub+0x558>
 8000f4c:	2580      	movs	r5, #128	; 0x80
 8000f4e:	4664      	mov	r4, ip
 8000f50:	042d      	lsls	r5, r5, #16
 8000f52:	432c      	orrs	r4, r5
 8000f54:	46a4      	mov	ip, r4
 8000f56:	2a38      	cmp	r2, #56	; 0x38
 8000f58:	dc56      	bgt.n	8001008 <__aeabi_dsub+0x474>
 8000f5a:	2a1f      	cmp	r2, #31
 8000f5c:	dd00      	ble.n	8000f60 <__aeabi_dsub+0x3cc>
 8000f5e:	e0d1      	b.n	8001104 <__aeabi_dsub+0x570>
 8000f60:	2520      	movs	r5, #32
 8000f62:	001e      	movs	r6, r3
 8000f64:	1aad      	subs	r5, r5, r2
 8000f66:	4664      	mov	r4, ip
 8000f68:	40ab      	lsls	r3, r5
 8000f6a:	40ac      	lsls	r4, r5
 8000f6c:	40d6      	lsrs	r6, r2
 8000f6e:	1e5d      	subs	r5, r3, #1
 8000f70:	41ab      	sbcs	r3, r5
 8000f72:	4334      	orrs	r4, r6
 8000f74:	4323      	orrs	r3, r4
 8000f76:	4664      	mov	r4, ip
 8000f78:	40d4      	lsrs	r4, r2
 8000f7a:	1b09      	subs	r1, r1, r4
 8000f7c:	e049      	b.n	8001012 <__aeabi_dsub+0x47e>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	1bdc      	subs	r4, r3, r7
 8000f82:	1a46      	subs	r6, r0, r1
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	4180      	sbcs	r0, r0
 8000f88:	4240      	negs	r0, r0
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	0030      	movs	r0, r6
 8000f8e:	464e      	mov	r6, r9
 8000f90:	1b80      	subs	r0, r0, r6
 8000f92:	4681      	mov	r9, r0
 8000f94:	0200      	lsls	r0, r0, #8
 8000f96:	d476      	bmi.n	8001086 <__aeabi_dsub+0x4f2>
 8000f98:	464b      	mov	r3, r9
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_dsub+0x40c>
 8000f9e:	e652      	b.n	8000c46 <__aeabi_dsub+0xb2>
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	e771      	b.n	8000e8a <__aeabi_dsub+0x2f6>
 8000fa6:	4339      	orrs	r1, r7
 8000fa8:	000c      	movs	r4, r1
 8000faa:	1e62      	subs	r2, r4, #1
 8000fac:	4194      	sbcs	r4, r2
 8000fae:	18e4      	adds	r4, r4, r3
 8000fb0:	429c      	cmp	r4, r3
 8000fb2:	419b      	sbcs	r3, r3
 8000fb4:	425b      	negs	r3, r3
 8000fb6:	4463      	add	r3, ip
 8000fb8:	4699      	mov	r9, r3
 8000fba:	464b      	mov	r3, r9
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	d400      	bmi.n	8000fc2 <__aeabi_dsub+0x42e>
 8000fc0:	e756      	b.n	8000e70 <__aeabi_dsub+0x2dc>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	469c      	mov	ip, r3
 8000fc6:	4ba8      	ldr	r3, [pc, #672]	; (8001268 <__aeabi_dsub+0x6d4>)
 8000fc8:	44e0      	add	r8, ip
 8000fca:	4598      	cmp	r8, r3
 8000fcc:	d038      	beq.n	8001040 <__aeabi_dsub+0x4ac>
 8000fce:	464b      	mov	r3, r9
 8000fd0:	48a6      	ldr	r0, [pc, #664]	; (800126c <__aeabi_dsub+0x6d8>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4003      	ands	r3, r0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	0863      	lsrs	r3, r4, #1
 8000fda:	4014      	ands	r4, r2
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	07c3      	lsls	r3, r0, #31
 8000fe0:	431c      	orrs	r4, r3
 8000fe2:	0843      	lsrs	r3, r0, #1
 8000fe4:	4699      	mov	r9, r3
 8000fe6:	e657      	b.n	8000c98 <__aeabi_dsub+0x104>
 8000fe8:	0010      	movs	r0, r2
 8000fea:	000e      	movs	r6, r1
 8000fec:	3820      	subs	r0, #32
 8000fee:	40c6      	lsrs	r6, r0
 8000ff0:	2a20      	cmp	r2, #32
 8000ff2:	d004      	beq.n	8000ffe <__aeabi_dsub+0x46a>
 8000ff4:	2040      	movs	r0, #64	; 0x40
 8000ff6:	1a82      	subs	r2, r0, r2
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	430f      	orrs	r7, r1
 8000ffc:	46b9      	mov	r9, r7
 8000ffe:	464f      	mov	r7, r9
 8001000:	1e7a      	subs	r2, r7, #1
 8001002:	4197      	sbcs	r7, r2
 8001004:	4337      	orrs	r7, r6
 8001006:	e60f      	b.n	8000c28 <__aeabi_dsub+0x94>
 8001008:	4662      	mov	r2, ip
 800100a:	431a      	orrs	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	1e5a      	subs	r2, r3, #1
 8001010:	4193      	sbcs	r3, r2
 8001012:	1afc      	subs	r4, r7, r3
 8001014:	42a7      	cmp	r7, r4
 8001016:	41bf      	sbcs	r7, r7
 8001018:	427f      	negs	r7, r7
 800101a:	1bcb      	subs	r3, r1, r7
 800101c:	4699      	mov	r9, r3
 800101e:	465d      	mov	r5, fp
 8001020:	4680      	mov	r8, r0
 8001022:	e608      	b.n	8000c36 <__aeabi_dsub+0xa2>
 8001024:	4666      	mov	r6, ip
 8001026:	431e      	orrs	r6, r3
 8001028:	d100      	bne.n	800102c <__aeabi_dsub+0x498>
 800102a:	e0be      	b.n	80011aa <__aeabi_dsub+0x616>
 800102c:	1e56      	subs	r6, r2, #1
 800102e:	2a01      	cmp	r2, #1
 8001030:	d100      	bne.n	8001034 <__aeabi_dsub+0x4a0>
 8001032:	e109      	b.n	8001248 <__aeabi_dsub+0x6b4>
 8001034:	4c8c      	ldr	r4, [pc, #560]	; (8001268 <__aeabi_dsub+0x6d4>)
 8001036:	42a2      	cmp	r2, r4
 8001038:	d100      	bne.n	800103c <__aeabi_dsub+0x4a8>
 800103a:	e119      	b.n	8001270 <__aeabi_dsub+0x6dc>
 800103c:	0032      	movs	r2, r6
 800103e:	e6c1      	b.n	8000dc4 <__aeabi_dsub+0x230>
 8001040:	4642      	mov	r2, r8
 8001042:	2400      	movs	r4, #0
 8001044:	2300      	movs	r3, #0
 8001046:	e648      	b.n	8000cda <__aeabi_dsub+0x146>
 8001048:	2020      	movs	r0, #32
 800104a:	000c      	movs	r4, r1
 800104c:	1a80      	subs	r0, r0, r2
 800104e:	003e      	movs	r6, r7
 8001050:	4087      	lsls	r7, r0
 8001052:	4084      	lsls	r4, r0
 8001054:	40d6      	lsrs	r6, r2
 8001056:	1e78      	subs	r0, r7, #1
 8001058:	4187      	sbcs	r7, r0
 800105a:	40d1      	lsrs	r1, r2
 800105c:	4334      	orrs	r4, r6
 800105e:	433c      	orrs	r4, r7
 8001060:	448c      	add	ip, r1
 8001062:	e7a4      	b.n	8000fae <__aeabi_dsub+0x41a>
 8001064:	4a80      	ldr	r2, [pc, #512]	; (8001268 <__aeabi_dsub+0x6d4>)
 8001066:	4290      	cmp	r0, r2
 8001068:	d100      	bne.n	800106c <__aeabi_dsub+0x4d8>
 800106a:	e0e9      	b.n	8001240 <__aeabi_dsub+0x6ac>
 800106c:	19df      	adds	r7, r3, r7
 800106e:	429f      	cmp	r7, r3
 8001070:	419b      	sbcs	r3, r3
 8001072:	4461      	add	r1, ip
 8001074:	425b      	negs	r3, r3
 8001076:	18c9      	adds	r1, r1, r3
 8001078:	07cc      	lsls	r4, r1, #31
 800107a:	087f      	lsrs	r7, r7, #1
 800107c:	084b      	lsrs	r3, r1, #1
 800107e:	4699      	mov	r9, r3
 8001080:	4680      	mov	r8, r0
 8001082:	433c      	orrs	r4, r7
 8001084:	e6f4      	b.n	8000e70 <__aeabi_dsub+0x2dc>
 8001086:	1afc      	subs	r4, r7, r3
 8001088:	42a7      	cmp	r7, r4
 800108a:	41bf      	sbcs	r7, r7
 800108c:	4663      	mov	r3, ip
 800108e:	427f      	negs	r7, r7
 8001090:	1ac9      	subs	r1, r1, r3
 8001092:	1bcb      	subs	r3, r1, r7
 8001094:	4699      	mov	r9, r3
 8001096:	465d      	mov	r5, fp
 8001098:	e5d5      	b.n	8000c46 <__aeabi_dsub+0xb2>
 800109a:	08ff      	lsrs	r7, r7, #3
 800109c:	074b      	lsls	r3, r1, #29
 800109e:	465d      	mov	r5, fp
 80010a0:	433b      	orrs	r3, r7
 80010a2:	08cc      	lsrs	r4, r1, #3
 80010a4:	e6ee      	b.n	8000e84 <__aeabi_dsub+0x2f0>
 80010a6:	4662      	mov	r2, ip
 80010a8:	431a      	orrs	r2, r3
 80010aa:	d000      	beq.n	80010ae <__aeabi_dsub+0x51a>
 80010ac:	e082      	b.n	80011b4 <__aeabi_dsub+0x620>
 80010ae:	000b      	movs	r3, r1
 80010b0:	433b      	orrs	r3, r7
 80010b2:	d11b      	bne.n	80010ec <__aeabi_dsub+0x558>
 80010b4:	2480      	movs	r4, #128	; 0x80
 80010b6:	2500      	movs	r5, #0
 80010b8:	0324      	lsls	r4, r4, #12
 80010ba:	e6f9      	b.n	8000eb0 <__aeabi_dsub+0x31c>
 80010bc:	19dc      	adds	r4, r3, r7
 80010be:	429c      	cmp	r4, r3
 80010c0:	419b      	sbcs	r3, r3
 80010c2:	4461      	add	r1, ip
 80010c4:	4689      	mov	r9, r1
 80010c6:	425b      	negs	r3, r3
 80010c8:	4499      	add	r9, r3
 80010ca:	464b      	mov	r3, r9
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	d444      	bmi.n	800115a <__aeabi_dsub+0x5c6>
 80010d0:	2301      	movs	r3, #1
 80010d2:	4698      	mov	r8, r3
 80010d4:	e6cc      	b.n	8000e70 <__aeabi_dsub+0x2dc>
 80010d6:	1bdc      	subs	r4, r3, r7
 80010d8:	4662      	mov	r2, ip
 80010da:	42a3      	cmp	r3, r4
 80010dc:	419b      	sbcs	r3, r3
 80010de:	1a51      	subs	r1, r2, r1
 80010e0:	425b      	negs	r3, r3
 80010e2:	1acb      	subs	r3, r1, r3
 80010e4:	4699      	mov	r9, r3
 80010e6:	2301      	movs	r3, #1
 80010e8:	4698      	mov	r8, r3
 80010ea:	e5a4      	b.n	8000c36 <__aeabi_dsub+0xa2>
 80010ec:	08ff      	lsrs	r7, r7, #3
 80010ee:	074b      	lsls	r3, r1, #29
 80010f0:	465d      	mov	r5, fp
 80010f2:	433b      	orrs	r3, r7
 80010f4:	08cc      	lsrs	r4, r1, #3
 80010f6:	e6d7      	b.n	8000ea8 <__aeabi_dsub+0x314>
 80010f8:	4662      	mov	r2, ip
 80010fa:	431a      	orrs	r2, r3
 80010fc:	0014      	movs	r4, r2
 80010fe:	1e63      	subs	r3, r4, #1
 8001100:	419c      	sbcs	r4, r3
 8001102:	e679      	b.n	8000df8 <__aeabi_dsub+0x264>
 8001104:	0015      	movs	r5, r2
 8001106:	4664      	mov	r4, ip
 8001108:	3d20      	subs	r5, #32
 800110a:	40ec      	lsrs	r4, r5
 800110c:	46a0      	mov	r8, r4
 800110e:	2a20      	cmp	r2, #32
 8001110:	d005      	beq.n	800111e <__aeabi_dsub+0x58a>
 8001112:	2540      	movs	r5, #64	; 0x40
 8001114:	4664      	mov	r4, ip
 8001116:	1aaa      	subs	r2, r5, r2
 8001118:	4094      	lsls	r4, r2
 800111a:	4323      	orrs	r3, r4
 800111c:	469a      	mov	sl, r3
 800111e:	4654      	mov	r4, sl
 8001120:	1e63      	subs	r3, r4, #1
 8001122:	419c      	sbcs	r4, r3
 8001124:	4643      	mov	r3, r8
 8001126:	4323      	orrs	r3, r4
 8001128:	e773      	b.n	8001012 <__aeabi_dsub+0x47e>
 800112a:	4662      	mov	r2, ip
 800112c:	431a      	orrs	r2, r3
 800112e:	d023      	beq.n	8001178 <__aeabi_dsub+0x5e4>
 8001130:	000a      	movs	r2, r1
 8001132:	433a      	orrs	r2, r7
 8001134:	d000      	beq.n	8001138 <__aeabi_dsub+0x5a4>
 8001136:	e0a0      	b.n	800127a <__aeabi_dsub+0x6e6>
 8001138:	4662      	mov	r2, ip
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	0752      	lsls	r2, r2, #29
 800113e:	4313      	orrs	r3, r2
 8001140:	4662      	mov	r2, ip
 8001142:	08d4      	lsrs	r4, r2, #3
 8001144:	e6b0      	b.n	8000ea8 <__aeabi_dsub+0x314>
 8001146:	000b      	movs	r3, r1
 8001148:	433b      	orrs	r3, r7
 800114a:	d100      	bne.n	800114e <__aeabi_dsub+0x5ba>
 800114c:	e728      	b.n	8000fa0 <__aeabi_dsub+0x40c>
 800114e:	08ff      	lsrs	r7, r7, #3
 8001150:	074b      	lsls	r3, r1, #29
 8001152:	465d      	mov	r5, fp
 8001154:	433b      	orrs	r3, r7
 8001156:	08cc      	lsrs	r4, r1, #3
 8001158:	e697      	b.n	8000e8a <__aeabi_dsub+0x2f6>
 800115a:	2302      	movs	r3, #2
 800115c:	4698      	mov	r8, r3
 800115e:	e736      	b.n	8000fce <__aeabi_dsub+0x43a>
 8001160:	1afc      	subs	r4, r7, r3
 8001162:	42a7      	cmp	r7, r4
 8001164:	41bf      	sbcs	r7, r7
 8001166:	4663      	mov	r3, ip
 8001168:	427f      	negs	r7, r7
 800116a:	1ac9      	subs	r1, r1, r3
 800116c:	1bcb      	subs	r3, r1, r7
 800116e:	4699      	mov	r9, r3
 8001170:	2301      	movs	r3, #1
 8001172:	465d      	mov	r5, fp
 8001174:	4698      	mov	r8, r3
 8001176:	e55e      	b.n	8000c36 <__aeabi_dsub+0xa2>
 8001178:	074b      	lsls	r3, r1, #29
 800117a:	08ff      	lsrs	r7, r7, #3
 800117c:	433b      	orrs	r3, r7
 800117e:	08cc      	lsrs	r4, r1, #3
 8001180:	e692      	b.n	8000ea8 <__aeabi_dsub+0x314>
 8001182:	1bdc      	subs	r4, r3, r7
 8001184:	4660      	mov	r0, ip
 8001186:	42a3      	cmp	r3, r4
 8001188:	41b6      	sbcs	r6, r6
 800118a:	1a40      	subs	r0, r0, r1
 800118c:	4276      	negs	r6, r6
 800118e:	1b80      	subs	r0, r0, r6
 8001190:	4681      	mov	r9, r0
 8001192:	0200      	lsls	r0, r0, #8
 8001194:	d560      	bpl.n	8001258 <__aeabi_dsub+0x6c4>
 8001196:	1afc      	subs	r4, r7, r3
 8001198:	42a7      	cmp	r7, r4
 800119a:	41bf      	sbcs	r7, r7
 800119c:	4663      	mov	r3, ip
 800119e:	427f      	negs	r7, r7
 80011a0:	1ac9      	subs	r1, r1, r3
 80011a2:	1bcb      	subs	r3, r1, r7
 80011a4:	4699      	mov	r9, r3
 80011a6:	465d      	mov	r5, fp
 80011a8:	e576      	b.n	8000c98 <__aeabi_dsub+0x104>
 80011aa:	08ff      	lsrs	r7, r7, #3
 80011ac:	074b      	lsls	r3, r1, #29
 80011ae:	433b      	orrs	r3, r7
 80011b0:	08cc      	lsrs	r4, r1, #3
 80011b2:	e667      	b.n	8000e84 <__aeabi_dsub+0x2f0>
 80011b4:	000a      	movs	r2, r1
 80011b6:	08db      	lsrs	r3, r3, #3
 80011b8:	433a      	orrs	r2, r7
 80011ba:	d100      	bne.n	80011be <__aeabi_dsub+0x62a>
 80011bc:	e66f      	b.n	8000e9e <__aeabi_dsub+0x30a>
 80011be:	4662      	mov	r2, ip
 80011c0:	0752      	lsls	r2, r2, #29
 80011c2:	4313      	orrs	r3, r2
 80011c4:	4662      	mov	r2, ip
 80011c6:	08d4      	lsrs	r4, r2, #3
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	0312      	lsls	r2, r2, #12
 80011cc:	4214      	tst	r4, r2
 80011ce:	d007      	beq.n	80011e0 <__aeabi_dsub+0x64c>
 80011d0:	08c8      	lsrs	r0, r1, #3
 80011d2:	4210      	tst	r0, r2
 80011d4:	d104      	bne.n	80011e0 <__aeabi_dsub+0x64c>
 80011d6:	465d      	mov	r5, fp
 80011d8:	0004      	movs	r4, r0
 80011da:	08fb      	lsrs	r3, r7, #3
 80011dc:	0749      	lsls	r1, r1, #29
 80011de:	430b      	orrs	r3, r1
 80011e0:	0f5a      	lsrs	r2, r3, #29
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	0752      	lsls	r2, r2, #29
 80011e8:	4313      	orrs	r3, r2
 80011ea:	e65d      	b.n	8000ea8 <__aeabi_dsub+0x314>
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ff      	lsrs	r7, r7, #3
 80011f0:	433b      	orrs	r3, r7
 80011f2:	08cc      	lsrs	r4, r1, #3
 80011f4:	e649      	b.n	8000e8a <__aeabi_dsub+0x2f6>
 80011f6:	19dc      	adds	r4, r3, r7
 80011f8:	429c      	cmp	r4, r3
 80011fa:	419b      	sbcs	r3, r3
 80011fc:	4461      	add	r1, ip
 80011fe:	4689      	mov	r9, r1
 8001200:	425b      	negs	r3, r3
 8001202:	4499      	add	r9, r3
 8001204:	464b      	mov	r3, r9
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	d400      	bmi.n	800120c <__aeabi_dsub+0x678>
 800120a:	e631      	b.n	8000e70 <__aeabi_dsub+0x2dc>
 800120c:	464a      	mov	r2, r9
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <__aeabi_dsub+0x6d8>)
 8001210:	401a      	ands	r2, r3
 8001212:	2301      	movs	r3, #1
 8001214:	4691      	mov	r9, r2
 8001216:	4698      	mov	r8, r3
 8001218:	e62a      	b.n	8000e70 <__aeabi_dsub+0x2dc>
 800121a:	0016      	movs	r6, r2
 800121c:	4664      	mov	r4, ip
 800121e:	3e20      	subs	r6, #32
 8001220:	40f4      	lsrs	r4, r6
 8001222:	46a0      	mov	r8, r4
 8001224:	2a20      	cmp	r2, #32
 8001226:	d005      	beq.n	8001234 <__aeabi_dsub+0x6a0>
 8001228:	2640      	movs	r6, #64	; 0x40
 800122a:	4664      	mov	r4, ip
 800122c:	1ab2      	subs	r2, r6, r2
 800122e:	4094      	lsls	r4, r2
 8001230:	4323      	orrs	r3, r4
 8001232:	469a      	mov	sl, r3
 8001234:	4654      	mov	r4, sl
 8001236:	1e63      	subs	r3, r4, #1
 8001238:	419c      	sbcs	r4, r3
 800123a:	4643      	mov	r3, r8
 800123c:	431c      	orrs	r4, r3
 800123e:	e5db      	b.n	8000df8 <__aeabi_dsub+0x264>
 8001240:	0002      	movs	r2, r0
 8001242:	2400      	movs	r4, #0
 8001244:	2300      	movs	r3, #0
 8001246:	e548      	b.n	8000cda <__aeabi_dsub+0x146>
 8001248:	19dc      	adds	r4, r3, r7
 800124a:	42bc      	cmp	r4, r7
 800124c:	41bf      	sbcs	r7, r7
 800124e:	4461      	add	r1, ip
 8001250:	4689      	mov	r9, r1
 8001252:	427f      	negs	r7, r7
 8001254:	44b9      	add	r9, r7
 8001256:	e738      	b.n	80010ca <__aeabi_dsub+0x536>
 8001258:	464b      	mov	r3, r9
 800125a:	4323      	orrs	r3, r4
 800125c:	d100      	bne.n	8001260 <__aeabi_dsub+0x6cc>
 800125e:	e69f      	b.n	8000fa0 <__aeabi_dsub+0x40c>
 8001260:	e606      	b.n	8000e70 <__aeabi_dsub+0x2dc>
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	000007fe 	.word	0x000007fe
 8001268:	000007ff 	.word	0x000007ff
 800126c:	ff7fffff 	.word	0xff7fffff
 8001270:	08ff      	lsrs	r7, r7, #3
 8001272:	074b      	lsls	r3, r1, #29
 8001274:	433b      	orrs	r3, r7
 8001276:	08cc      	lsrs	r4, r1, #3
 8001278:	e616      	b.n	8000ea8 <__aeabi_dsub+0x314>
 800127a:	4662      	mov	r2, ip
 800127c:	08db      	lsrs	r3, r3, #3
 800127e:	0752      	lsls	r2, r2, #29
 8001280:	4313      	orrs	r3, r2
 8001282:	4662      	mov	r2, ip
 8001284:	08d4      	lsrs	r4, r2, #3
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	0312      	lsls	r2, r2, #12
 800128a:	4214      	tst	r4, r2
 800128c:	d007      	beq.n	800129e <__aeabi_dsub+0x70a>
 800128e:	08c8      	lsrs	r0, r1, #3
 8001290:	4210      	tst	r0, r2
 8001292:	d104      	bne.n	800129e <__aeabi_dsub+0x70a>
 8001294:	465d      	mov	r5, fp
 8001296:	0004      	movs	r4, r0
 8001298:	08fb      	lsrs	r3, r7, #3
 800129a:	0749      	lsls	r1, r1, #29
 800129c:	430b      	orrs	r3, r1
 800129e:	0f5a      	lsrs	r2, r3, #29
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	0752      	lsls	r2, r2, #29
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	e5fe      	b.n	8000ea8 <__aeabi_dsub+0x314>
 80012aa:	2300      	movs	r3, #0
 80012ac:	4a01      	ldr	r2, [pc, #4]	; (80012b4 <__aeabi_dsub+0x720>)
 80012ae:	001c      	movs	r4, r3
 80012b0:	e513      	b.n	8000cda <__aeabi_dsub+0x146>
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	000007ff 	.word	0x000007ff

080012b8 <__aeabi_d2iz>:
 80012b8:	000a      	movs	r2, r1
 80012ba:	b530      	push	{r4, r5, lr}
 80012bc:	4c13      	ldr	r4, [pc, #76]	; (800130c <__aeabi_d2iz+0x54>)
 80012be:	0053      	lsls	r3, r2, #1
 80012c0:	0309      	lsls	r1, r1, #12
 80012c2:	0005      	movs	r5, r0
 80012c4:	0b09      	lsrs	r1, r1, #12
 80012c6:	2000      	movs	r0, #0
 80012c8:	0d5b      	lsrs	r3, r3, #21
 80012ca:	0fd2      	lsrs	r2, r2, #31
 80012cc:	42a3      	cmp	r3, r4
 80012ce:	dd04      	ble.n	80012da <__aeabi_d2iz+0x22>
 80012d0:	480f      	ldr	r0, [pc, #60]	; (8001310 <__aeabi_d2iz+0x58>)
 80012d2:	4283      	cmp	r3, r0
 80012d4:	dd02      	ble.n	80012dc <__aeabi_d2iz+0x24>
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <__aeabi_d2iz+0x5c>)
 80012d8:	18d0      	adds	r0, r2, r3
 80012da:	bd30      	pop	{r4, r5, pc}
 80012dc:	2080      	movs	r0, #128	; 0x80
 80012de:	0340      	lsls	r0, r0, #13
 80012e0:	4301      	orrs	r1, r0
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <__aeabi_d2iz+0x60>)
 80012e4:	1ac0      	subs	r0, r0, r3
 80012e6:	281f      	cmp	r0, #31
 80012e8:	dd08      	ble.n	80012fc <__aeabi_d2iz+0x44>
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <__aeabi_d2iz+0x64>)
 80012ec:	1ac3      	subs	r3, r0, r3
 80012ee:	40d9      	lsrs	r1, r3
 80012f0:	000b      	movs	r3, r1
 80012f2:	4258      	negs	r0, r3
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	d1f0      	bne.n	80012da <__aeabi_d2iz+0x22>
 80012f8:	0018      	movs	r0, r3
 80012fa:	e7ee      	b.n	80012da <__aeabi_d2iz+0x22>
 80012fc:	4c08      	ldr	r4, [pc, #32]	; (8001320 <__aeabi_d2iz+0x68>)
 80012fe:	40c5      	lsrs	r5, r0
 8001300:	46a4      	mov	ip, r4
 8001302:	4463      	add	r3, ip
 8001304:	4099      	lsls	r1, r3
 8001306:	000b      	movs	r3, r1
 8001308:	432b      	orrs	r3, r5
 800130a:	e7f2      	b.n	80012f2 <__aeabi_d2iz+0x3a>
 800130c:	000003fe 	.word	0x000003fe
 8001310:	0000041d 	.word	0x0000041d
 8001314:	7fffffff 	.word	0x7fffffff
 8001318:	00000433 	.word	0x00000433
 800131c:	00000413 	.word	0x00000413
 8001320:	fffffbed 	.word	0xfffffbed

08001324 <__aeabi_i2d>:
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	2800      	cmp	r0, #0
 8001328:	d016      	beq.n	8001358 <__aeabi_i2d+0x34>
 800132a:	17c3      	asrs	r3, r0, #31
 800132c:	18c5      	adds	r5, r0, r3
 800132e:	405d      	eors	r5, r3
 8001330:	0fc4      	lsrs	r4, r0, #31
 8001332:	0028      	movs	r0, r5
 8001334:	f000 f89e 	bl	8001474 <__clzsi2>
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <__aeabi_i2d+0x5c>)
 800133a:	1a12      	subs	r2, r2, r0
 800133c:	280a      	cmp	r0, #10
 800133e:	dc16      	bgt.n	800136e <__aeabi_i2d+0x4a>
 8001340:	0003      	movs	r3, r0
 8001342:	002e      	movs	r6, r5
 8001344:	3315      	adds	r3, #21
 8001346:	409e      	lsls	r6, r3
 8001348:	230b      	movs	r3, #11
 800134a:	1a18      	subs	r0, r3, r0
 800134c:	40c5      	lsrs	r5, r0
 800134e:	0552      	lsls	r2, r2, #21
 8001350:	032d      	lsls	r5, r5, #12
 8001352:	0b2d      	lsrs	r5, r5, #12
 8001354:	0d53      	lsrs	r3, r2, #21
 8001356:	e003      	b.n	8001360 <__aeabi_i2d+0x3c>
 8001358:	2400      	movs	r4, #0
 800135a:	2300      	movs	r3, #0
 800135c:	2500      	movs	r5, #0
 800135e:	2600      	movs	r6, #0
 8001360:	051b      	lsls	r3, r3, #20
 8001362:	432b      	orrs	r3, r5
 8001364:	07e4      	lsls	r4, r4, #31
 8001366:	4323      	orrs	r3, r4
 8001368:	0030      	movs	r0, r6
 800136a:	0019      	movs	r1, r3
 800136c:	bd70      	pop	{r4, r5, r6, pc}
 800136e:	380b      	subs	r0, #11
 8001370:	4085      	lsls	r5, r0
 8001372:	0552      	lsls	r2, r2, #21
 8001374:	032d      	lsls	r5, r5, #12
 8001376:	2600      	movs	r6, #0
 8001378:	0b2d      	lsrs	r5, r5, #12
 800137a:	0d53      	lsrs	r3, r2, #21
 800137c:	e7f0      	b.n	8001360 <__aeabi_i2d+0x3c>
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	0000041e 	.word	0x0000041e

08001384 <__aeabi_cdrcmple>:
 8001384:	4684      	mov	ip, r0
 8001386:	0010      	movs	r0, r2
 8001388:	4662      	mov	r2, ip
 800138a:	468c      	mov	ip, r1
 800138c:	0019      	movs	r1, r3
 800138e:	4663      	mov	r3, ip
 8001390:	e000      	b.n	8001394 <__aeabi_cdcmpeq>
 8001392:	46c0      	nop			; (mov r8, r8)

08001394 <__aeabi_cdcmpeq>:
 8001394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001396:	f000 f9e3 	bl	8001760 <__ledf2>
 800139a:	2800      	cmp	r0, #0
 800139c:	d401      	bmi.n	80013a2 <__aeabi_cdcmpeq+0xe>
 800139e:	2100      	movs	r1, #0
 80013a0:	42c8      	cmn	r0, r1
 80013a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080013a4 <__aeabi_dcmpeq>:
 80013a4:	b510      	push	{r4, lr}
 80013a6:	f000 f933 	bl	8001610 <__eqdf2>
 80013aa:	4240      	negs	r0, r0
 80013ac:	3001      	adds	r0, #1
 80013ae:	bd10      	pop	{r4, pc}

080013b0 <__aeabi_dcmplt>:
 80013b0:	b510      	push	{r4, lr}
 80013b2:	f000 f9d5 	bl	8001760 <__ledf2>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	db01      	blt.n	80013be <__aeabi_dcmplt+0xe>
 80013ba:	2000      	movs	r0, #0
 80013bc:	bd10      	pop	{r4, pc}
 80013be:	2001      	movs	r0, #1
 80013c0:	bd10      	pop	{r4, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)

080013c4 <__aeabi_dcmple>:
 80013c4:	b510      	push	{r4, lr}
 80013c6:	f000 f9cb 	bl	8001760 <__ledf2>
 80013ca:	2800      	cmp	r0, #0
 80013cc:	dd01      	ble.n	80013d2 <__aeabi_dcmple+0xe>
 80013ce:	2000      	movs	r0, #0
 80013d0:	bd10      	pop	{r4, pc}
 80013d2:	2001      	movs	r0, #1
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)

080013d8 <__aeabi_dcmpgt>:
 80013d8:	b510      	push	{r4, lr}
 80013da:	f000 f95b 	bl	8001694 <__gedf2>
 80013de:	2800      	cmp	r0, #0
 80013e0:	dc01      	bgt.n	80013e6 <__aeabi_dcmpgt+0xe>
 80013e2:	2000      	movs	r0, #0
 80013e4:	bd10      	pop	{r4, pc}
 80013e6:	2001      	movs	r0, #1
 80013e8:	bd10      	pop	{r4, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)

080013ec <__aeabi_dcmpge>:
 80013ec:	b510      	push	{r4, lr}
 80013ee:	f000 f951 	bl	8001694 <__gedf2>
 80013f2:	2800      	cmp	r0, #0
 80013f4:	da01      	bge.n	80013fa <__aeabi_dcmpge+0xe>
 80013f6:	2000      	movs	r0, #0
 80013f8:	bd10      	pop	{r4, pc}
 80013fa:	2001      	movs	r0, #1
 80013fc:	bd10      	pop	{r4, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)

08001400 <__aeabi_cfrcmple>:
 8001400:	4684      	mov	ip, r0
 8001402:	0008      	movs	r0, r1
 8001404:	4661      	mov	r1, ip
 8001406:	e7ff      	b.n	8001408 <__aeabi_cfcmpeq>

08001408 <__aeabi_cfcmpeq>:
 8001408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800140a:	f000 f8bd 	bl	8001588 <__lesf2>
 800140e:	2800      	cmp	r0, #0
 8001410:	d401      	bmi.n	8001416 <__aeabi_cfcmpeq+0xe>
 8001412:	2100      	movs	r1, #0
 8001414:	42c8      	cmn	r0, r1
 8001416:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001418 <__aeabi_fcmpeq>:
 8001418:	b510      	push	{r4, lr}
 800141a:	f000 f849 	bl	80014b0 <__eqsf2>
 800141e:	4240      	negs	r0, r0
 8001420:	3001      	adds	r0, #1
 8001422:	bd10      	pop	{r4, pc}

08001424 <__aeabi_fcmplt>:
 8001424:	b510      	push	{r4, lr}
 8001426:	f000 f8af 	bl	8001588 <__lesf2>
 800142a:	2800      	cmp	r0, #0
 800142c:	db01      	blt.n	8001432 <__aeabi_fcmplt+0xe>
 800142e:	2000      	movs	r0, #0
 8001430:	bd10      	pop	{r4, pc}
 8001432:	2001      	movs	r0, #1
 8001434:	bd10      	pop	{r4, pc}
 8001436:	46c0      	nop			; (mov r8, r8)

08001438 <__aeabi_fcmple>:
 8001438:	b510      	push	{r4, lr}
 800143a:	f000 f8a5 	bl	8001588 <__lesf2>
 800143e:	2800      	cmp	r0, #0
 8001440:	dd01      	ble.n	8001446 <__aeabi_fcmple+0xe>
 8001442:	2000      	movs	r0, #0
 8001444:	bd10      	pop	{r4, pc}
 8001446:	2001      	movs	r0, #1
 8001448:	bd10      	pop	{r4, pc}
 800144a:	46c0      	nop			; (mov r8, r8)

0800144c <__aeabi_fcmpgt>:
 800144c:	b510      	push	{r4, lr}
 800144e:	f000 f855 	bl	80014fc <__gesf2>
 8001452:	2800      	cmp	r0, #0
 8001454:	dc01      	bgt.n	800145a <__aeabi_fcmpgt+0xe>
 8001456:	2000      	movs	r0, #0
 8001458:	bd10      	pop	{r4, pc}
 800145a:	2001      	movs	r0, #1
 800145c:	bd10      	pop	{r4, pc}
 800145e:	46c0      	nop			; (mov r8, r8)

08001460 <__aeabi_fcmpge>:
 8001460:	b510      	push	{r4, lr}
 8001462:	f000 f84b 	bl	80014fc <__gesf2>
 8001466:	2800      	cmp	r0, #0
 8001468:	da01      	bge.n	800146e <__aeabi_fcmpge+0xe>
 800146a:	2000      	movs	r0, #0
 800146c:	bd10      	pop	{r4, pc}
 800146e:	2001      	movs	r0, #1
 8001470:	bd10      	pop	{r4, pc}
 8001472:	46c0      	nop			; (mov r8, r8)

08001474 <__clzsi2>:
 8001474:	211c      	movs	r1, #28
 8001476:	2301      	movs	r3, #1
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	4298      	cmp	r0, r3
 800147c:	d301      	bcc.n	8001482 <__clzsi2+0xe>
 800147e:	0c00      	lsrs	r0, r0, #16
 8001480:	3910      	subs	r1, #16
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	4298      	cmp	r0, r3
 8001486:	d301      	bcc.n	800148c <__clzsi2+0x18>
 8001488:	0a00      	lsrs	r0, r0, #8
 800148a:	3908      	subs	r1, #8
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	4298      	cmp	r0, r3
 8001490:	d301      	bcc.n	8001496 <__clzsi2+0x22>
 8001492:	0900      	lsrs	r0, r0, #4
 8001494:	3904      	subs	r1, #4
 8001496:	a202      	add	r2, pc, #8	; (adr r2, 80014a0 <__clzsi2+0x2c>)
 8001498:	5c10      	ldrb	r0, [r2, r0]
 800149a:	1840      	adds	r0, r0, r1
 800149c:	4770      	bx	lr
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	02020304 	.word	0x02020304
 80014a4:	01010101 	.word	0x01010101
	...

080014b0 <__eqsf2>:
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	0042      	lsls	r2, r0, #1
 80014b4:	0245      	lsls	r5, r0, #9
 80014b6:	024e      	lsls	r6, r1, #9
 80014b8:	004c      	lsls	r4, r1, #1
 80014ba:	0fc3      	lsrs	r3, r0, #31
 80014bc:	0a6d      	lsrs	r5, r5, #9
 80014be:	2001      	movs	r0, #1
 80014c0:	0e12      	lsrs	r2, r2, #24
 80014c2:	0a76      	lsrs	r6, r6, #9
 80014c4:	0e24      	lsrs	r4, r4, #24
 80014c6:	0fc9      	lsrs	r1, r1, #31
 80014c8:	2aff      	cmp	r2, #255	; 0xff
 80014ca:	d006      	beq.n	80014da <__eqsf2+0x2a>
 80014cc:	2cff      	cmp	r4, #255	; 0xff
 80014ce:	d003      	beq.n	80014d8 <__eqsf2+0x28>
 80014d0:	42a2      	cmp	r2, r4
 80014d2:	d101      	bne.n	80014d8 <__eqsf2+0x28>
 80014d4:	42b5      	cmp	r5, r6
 80014d6:	d006      	beq.n	80014e6 <__eqsf2+0x36>
 80014d8:	bd70      	pop	{r4, r5, r6, pc}
 80014da:	2d00      	cmp	r5, #0
 80014dc:	d1fc      	bne.n	80014d8 <__eqsf2+0x28>
 80014de:	2cff      	cmp	r4, #255	; 0xff
 80014e0:	d1fa      	bne.n	80014d8 <__eqsf2+0x28>
 80014e2:	2e00      	cmp	r6, #0
 80014e4:	d1f8      	bne.n	80014d8 <__eqsf2+0x28>
 80014e6:	428b      	cmp	r3, r1
 80014e8:	d006      	beq.n	80014f8 <__eqsf2+0x48>
 80014ea:	2001      	movs	r0, #1
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d1f3      	bne.n	80014d8 <__eqsf2+0x28>
 80014f0:	0028      	movs	r0, r5
 80014f2:	1e43      	subs	r3, r0, #1
 80014f4:	4198      	sbcs	r0, r3
 80014f6:	e7ef      	b.n	80014d8 <__eqsf2+0x28>
 80014f8:	2000      	movs	r0, #0
 80014fa:	e7ed      	b.n	80014d8 <__eqsf2+0x28>

080014fc <__gesf2>:
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	0042      	lsls	r2, r0, #1
 8001500:	0245      	lsls	r5, r0, #9
 8001502:	024e      	lsls	r6, r1, #9
 8001504:	004c      	lsls	r4, r1, #1
 8001506:	0fc3      	lsrs	r3, r0, #31
 8001508:	0a6d      	lsrs	r5, r5, #9
 800150a:	0e12      	lsrs	r2, r2, #24
 800150c:	0a76      	lsrs	r6, r6, #9
 800150e:	0e24      	lsrs	r4, r4, #24
 8001510:	0fc8      	lsrs	r0, r1, #31
 8001512:	2aff      	cmp	r2, #255	; 0xff
 8001514:	d01b      	beq.n	800154e <__gesf2+0x52>
 8001516:	2cff      	cmp	r4, #255	; 0xff
 8001518:	d00e      	beq.n	8001538 <__gesf2+0x3c>
 800151a:	2a00      	cmp	r2, #0
 800151c:	d11b      	bne.n	8001556 <__gesf2+0x5a>
 800151e:	2c00      	cmp	r4, #0
 8001520:	d101      	bne.n	8001526 <__gesf2+0x2a>
 8001522:	2e00      	cmp	r6, #0
 8001524:	d01c      	beq.n	8001560 <__gesf2+0x64>
 8001526:	2d00      	cmp	r5, #0
 8001528:	d00c      	beq.n	8001544 <__gesf2+0x48>
 800152a:	4283      	cmp	r3, r0
 800152c:	d01c      	beq.n	8001568 <__gesf2+0x6c>
 800152e:	2102      	movs	r1, #2
 8001530:	1e58      	subs	r0, r3, #1
 8001532:	4008      	ands	r0, r1
 8001534:	3801      	subs	r0, #1
 8001536:	bd70      	pop	{r4, r5, r6, pc}
 8001538:	2e00      	cmp	r6, #0
 800153a:	d122      	bne.n	8001582 <__gesf2+0x86>
 800153c:	2a00      	cmp	r2, #0
 800153e:	d1f4      	bne.n	800152a <__gesf2+0x2e>
 8001540:	2d00      	cmp	r5, #0
 8001542:	d1f2      	bne.n	800152a <__gesf2+0x2e>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f6      	bne.n	8001536 <__gesf2+0x3a>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7f3      	b.n	8001536 <__gesf2+0x3a>
 800154e:	2d00      	cmp	r5, #0
 8001550:	d117      	bne.n	8001582 <__gesf2+0x86>
 8001552:	2cff      	cmp	r4, #255	; 0xff
 8001554:	d0f0      	beq.n	8001538 <__gesf2+0x3c>
 8001556:	2c00      	cmp	r4, #0
 8001558:	d1e7      	bne.n	800152a <__gesf2+0x2e>
 800155a:	2e00      	cmp	r6, #0
 800155c:	d1e5      	bne.n	800152a <__gesf2+0x2e>
 800155e:	e7e6      	b.n	800152e <__gesf2+0x32>
 8001560:	2000      	movs	r0, #0
 8001562:	2d00      	cmp	r5, #0
 8001564:	d0e7      	beq.n	8001536 <__gesf2+0x3a>
 8001566:	e7e2      	b.n	800152e <__gesf2+0x32>
 8001568:	42a2      	cmp	r2, r4
 800156a:	dc05      	bgt.n	8001578 <__gesf2+0x7c>
 800156c:	dbea      	blt.n	8001544 <__gesf2+0x48>
 800156e:	42b5      	cmp	r5, r6
 8001570:	d802      	bhi.n	8001578 <__gesf2+0x7c>
 8001572:	d3e7      	bcc.n	8001544 <__gesf2+0x48>
 8001574:	2000      	movs	r0, #0
 8001576:	e7de      	b.n	8001536 <__gesf2+0x3a>
 8001578:	4243      	negs	r3, r0
 800157a:	4158      	adcs	r0, r3
 800157c:	0040      	lsls	r0, r0, #1
 800157e:	3801      	subs	r0, #1
 8001580:	e7d9      	b.n	8001536 <__gesf2+0x3a>
 8001582:	2002      	movs	r0, #2
 8001584:	4240      	negs	r0, r0
 8001586:	e7d6      	b.n	8001536 <__gesf2+0x3a>

08001588 <__lesf2>:
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	0042      	lsls	r2, r0, #1
 800158c:	0245      	lsls	r5, r0, #9
 800158e:	024e      	lsls	r6, r1, #9
 8001590:	004c      	lsls	r4, r1, #1
 8001592:	0fc3      	lsrs	r3, r0, #31
 8001594:	0a6d      	lsrs	r5, r5, #9
 8001596:	0e12      	lsrs	r2, r2, #24
 8001598:	0a76      	lsrs	r6, r6, #9
 800159a:	0e24      	lsrs	r4, r4, #24
 800159c:	0fc8      	lsrs	r0, r1, #31
 800159e:	2aff      	cmp	r2, #255	; 0xff
 80015a0:	d00b      	beq.n	80015ba <__lesf2+0x32>
 80015a2:	2cff      	cmp	r4, #255	; 0xff
 80015a4:	d00d      	beq.n	80015c2 <__lesf2+0x3a>
 80015a6:	2a00      	cmp	r2, #0
 80015a8:	d11f      	bne.n	80015ea <__lesf2+0x62>
 80015aa:	2c00      	cmp	r4, #0
 80015ac:	d116      	bne.n	80015dc <__lesf2+0x54>
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	d114      	bne.n	80015dc <__lesf2+0x54>
 80015b2:	2000      	movs	r0, #0
 80015b4:	2d00      	cmp	r5, #0
 80015b6:	d010      	beq.n	80015da <__lesf2+0x52>
 80015b8:	e009      	b.n	80015ce <__lesf2+0x46>
 80015ba:	2d00      	cmp	r5, #0
 80015bc:	d10c      	bne.n	80015d8 <__lesf2+0x50>
 80015be:	2cff      	cmp	r4, #255	; 0xff
 80015c0:	d113      	bne.n	80015ea <__lesf2+0x62>
 80015c2:	2e00      	cmp	r6, #0
 80015c4:	d108      	bne.n	80015d8 <__lesf2+0x50>
 80015c6:	2a00      	cmp	r2, #0
 80015c8:	d008      	beq.n	80015dc <__lesf2+0x54>
 80015ca:	4283      	cmp	r3, r0
 80015cc:	d012      	beq.n	80015f4 <__lesf2+0x6c>
 80015ce:	2102      	movs	r1, #2
 80015d0:	1e58      	subs	r0, r3, #1
 80015d2:	4008      	ands	r0, r1
 80015d4:	3801      	subs	r0, #1
 80015d6:	e000      	b.n	80015da <__lesf2+0x52>
 80015d8:	2002      	movs	r0, #2
 80015da:	bd70      	pop	{r4, r5, r6, pc}
 80015dc:	2d00      	cmp	r5, #0
 80015de:	d1f4      	bne.n	80015ca <__lesf2+0x42>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d1fa      	bne.n	80015da <__lesf2+0x52>
 80015e4:	2001      	movs	r0, #1
 80015e6:	4240      	negs	r0, r0
 80015e8:	e7f7      	b.n	80015da <__lesf2+0x52>
 80015ea:	2c00      	cmp	r4, #0
 80015ec:	d1ed      	bne.n	80015ca <__lesf2+0x42>
 80015ee:	2e00      	cmp	r6, #0
 80015f0:	d1eb      	bne.n	80015ca <__lesf2+0x42>
 80015f2:	e7ec      	b.n	80015ce <__lesf2+0x46>
 80015f4:	42a2      	cmp	r2, r4
 80015f6:	dc05      	bgt.n	8001604 <__lesf2+0x7c>
 80015f8:	dbf2      	blt.n	80015e0 <__lesf2+0x58>
 80015fa:	42b5      	cmp	r5, r6
 80015fc:	d802      	bhi.n	8001604 <__lesf2+0x7c>
 80015fe:	d3ef      	bcc.n	80015e0 <__lesf2+0x58>
 8001600:	2000      	movs	r0, #0
 8001602:	e7ea      	b.n	80015da <__lesf2+0x52>
 8001604:	4243      	negs	r3, r0
 8001606:	4158      	adcs	r0, r3
 8001608:	0040      	lsls	r0, r0, #1
 800160a:	3801      	subs	r0, #1
 800160c:	e7e5      	b.n	80015da <__lesf2+0x52>
 800160e:	46c0      	nop			; (mov r8, r8)

08001610 <__eqdf2>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	464e      	mov	r6, r9
 8001614:	4645      	mov	r5, r8
 8001616:	46de      	mov	lr, fp
 8001618:	4657      	mov	r7, sl
 800161a:	4690      	mov	r8, r2
 800161c:	b5e0      	push	{r5, r6, r7, lr}
 800161e:	0017      	movs	r7, r2
 8001620:	031a      	lsls	r2, r3, #12
 8001622:	0b12      	lsrs	r2, r2, #12
 8001624:	0005      	movs	r5, r0
 8001626:	4684      	mov	ip, r0
 8001628:	4819      	ldr	r0, [pc, #100]	; (8001690 <__eqdf2+0x80>)
 800162a:	030e      	lsls	r6, r1, #12
 800162c:	004c      	lsls	r4, r1, #1
 800162e:	4691      	mov	r9, r2
 8001630:	005a      	lsls	r2, r3, #1
 8001632:	0fdb      	lsrs	r3, r3, #31
 8001634:	469b      	mov	fp, r3
 8001636:	0b36      	lsrs	r6, r6, #12
 8001638:	0d64      	lsrs	r4, r4, #21
 800163a:	0fc9      	lsrs	r1, r1, #31
 800163c:	0d52      	lsrs	r2, r2, #21
 800163e:	4284      	cmp	r4, r0
 8001640:	d019      	beq.n	8001676 <__eqdf2+0x66>
 8001642:	4282      	cmp	r2, r0
 8001644:	d010      	beq.n	8001668 <__eqdf2+0x58>
 8001646:	2001      	movs	r0, #1
 8001648:	4294      	cmp	r4, r2
 800164a:	d10e      	bne.n	800166a <__eqdf2+0x5a>
 800164c:	454e      	cmp	r6, r9
 800164e:	d10c      	bne.n	800166a <__eqdf2+0x5a>
 8001650:	2001      	movs	r0, #1
 8001652:	45c4      	cmp	ip, r8
 8001654:	d109      	bne.n	800166a <__eqdf2+0x5a>
 8001656:	4559      	cmp	r1, fp
 8001658:	d017      	beq.n	800168a <__eqdf2+0x7a>
 800165a:	2c00      	cmp	r4, #0
 800165c:	d105      	bne.n	800166a <__eqdf2+0x5a>
 800165e:	0030      	movs	r0, r6
 8001660:	4328      	orrs	r0, r5
 8001662:	1e43      	subs	r3, r0, #1
 8001664:	4198      	sbcs	r0, r3
 8001666:	e000      	b.n	800166a <__eqdf2+0x5a>
 8001668:	2001      	movs	r0, #1
 800166a:	bcf0      	pop	{r4, r5, r6, r7}
 800166c:	46bb      	mov	fp, r7
 800166e:	46b2      	mov	sl, r6
 8001670:	46a9      	mov	r9, r5
 8001672:	46a0      	mov	r8, r4
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	0033      	movs	r3, r6
 8001678:	2001      	movs	r0, #1
 800167a:	432b      	orrs	r3, r5
 800167c:	d1f5      	bne.n	800166a <__eqdf2+0x5a>
 800167e:	42a2      	cmp	r2, r4
 8001680:	d1f3      	bne.n	800166a <__eqdf2+0x5a>
 8001682:	464b      	mov	r3, r9
 8001684:	433b      	orrs	r3, r7
 8001686:	d1f0      	bne.n	800166a <__eqdf2+0x5a>
 8001688:	e7e2      	b.n	8001650 <__eqdf2+0x40>
 800168a:	2000      	movs	r0, #0
 800168c:	e7ed      	b.n	800166a <__eqdf2+0x5a>
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	000007ff 	.word	0x000007ff

08001694 <__gedf2>:
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	4647      	mov	r7, r8
 8001698:	46ce      	mov	lr, r9
 800169a:	0004      	movs	r4, r0
 800169c:	0018      	movs	r0, r3
 800169e:	0016      	movs	r6, r2
 80016a0:	031b      	lsls	r3, r3, #12
 80016a2:	0b1b      	lsrs	r3, r3, #12
 80016a4:	4d2d      	ldr	r5, [pc, #180]	; (800175c <__gedf2+0xc8>)
 80016a6:	004a      	lsls	r2, r1, #1
 80016a8:	4699      	mov	r9, r3
 80016aa:	b580      	push	{r7, lr}
 80016ac:	0043      	lsls	r3, r0, #1
 80016ae:	030f      	lsls	r7, r1, #12
 80016b0:	46a4      	mov	ip, r4
 80016b2:	46b0      	mov	r8, r6
 80016b4:	0b3f      	lsrs	r7, r7, #12
 80016b6:	0d52      	lsrs	r2, r2, #21
 80016b8:	0fc9      	lsrs	r1, r1, #31
 80016ba:	0d5b      	lsrs	r3, r3, #21
 80016bc:	0fc0      	lsrs	r0, r0, #31
 80016be:	42aa      	cmp	r2, r5
 80016c0:	d021      	beq.n	8001706 <__gedf2+0x72>
 80016c2:	42ab      	cmp	r3, r5
 80016c4:	d013      	beq.n	80016ee <__gedf2+0x5a>
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d122      	bne.n	8001710 <__gedf2+0x7c>
 80016ca:	433c      	orrs	r4, r7
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <__gedf2+0x42>
 80016d0:	464d      	mov	r5, r9
 80016d2:	432e      	orrs	r6, r5
 80016d4:	d022      	beq.n	800171c <__gedf2+0x88>
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d010      	beq.n	80016fc <__gedf2+0x68>
 80016da:	4281      	cmp	r1, r0
 80016dc:	d022      	beq.n	8001724 <__gedf2+0x90>
 80016de:	2002      	movs	r0, #2
 80016e0:	3901      	subs	r1, #1
 80016e2:	4008      	ands	r0, r1
 80016e4:	3801      	subs	r0, #1
 80016e6:	bcc0      	pop	{r6, r7}
 80016e8:	46b9      	mov	r9, r7
 80016ea:	46b0      	mov	r8, r6
 80016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ee:	464d      	mov	r5, r9
 80016f0:	432e      	orrs	r6, r5
 80016f2:	d129      	bne.n	8001748 <__gedf2+0xb4>
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d1f0      	bne.n	80016da <__gedf2+0x46>
 80016f8:	433c      	orrs	r4, r7
 80016fa:	d1ee      	bne.n	80016da <__gedf2+0x46>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d1f2      	bne.n	80016e6 <__gedf2+0x52>
 8001700:	2001      	movs	r0, #1
 8001702:	4240      	negs	r0, r0
 8001704:	e7ef      	b.n	80016e6 <__gedf2+0x52>
 8001706:	003d      	movs	r5, r7
 8001708:	4325      	orrs	r5, r4
 800170a:	d11d      	bne.n	8001748 <__gedf2+0xb4>
 800170c:	4293      	cmp	r3, r2
 800170e:	d0ee      	beq.n	80016ee <__gedf2+0x5a>
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e2      	bne.n	80016da <__gedf2+0x46>
 8001714:	464c      	mov	r4, r9
 8001716:	4326      	orrs	r6, r4
 8001718:	d1df      	bne.n	80016da <__gedf2+0x46>
 800171a:	e7e0      	b.n	80016de <__gedf2+0x4a>
 800171c:	2000      	movs	r0, #0
 800171e:	2c00      	cmp	r4, #0
 8001720:	d0e1      	beq.n	80016e6 <__gedf2+0x52>
 8001722:	e7dc      	b.n	80016de <__gedf2+0x4a>
 8001724:	429a      	cmp	r2, r3
 8001726:	dc0a      	bgt.n	800173e <__gedf2+0xaa>
 8001728:	dbe8      	blt.n	80016fc <__gedf2+0x68>
 800172a:	454f      	cmp	r7, r9
 800172c:	d8d7      	bhi.n	80016de <__gedf2+0x4a>
 800172e:	d00e      	beq.n	800174e <__gedf2+0xba>
 8001730:	2000      	movs	r0, #0
 8001732:	454f      	cmp	r7, r9
 8001734:	d2d7      	bcs.n	80016e6 <__gedf2+0x52>
 8001736:	2900      	cmp	r1, #0
 8001738:	d0e2      	beq.n	8001700 <__gedf2+0x6c>
 800173a:	0008      	movs	r0, r1
 800173c:	e7d3      	b.n	80016e6 <__gedf2+0x52>
 800173e:	4243      	negs	r3, r0
 8001740:	4158      	adcs	r0, r3
 8001742:	0040      	lsls	r0, r0, #1
 8001744:	3801      	subs	r0, #1
 8001746:	e7ce      	b.n	80016e6 <__gedf2+0x52>
 8001748:	2002      	movs	r0, #2
 800174a:	4240      	negs	r0, r0
 800174c:	e7cb      	b.n	80016e6 <__gedf2+0x52>
 800174e:	45c4      	cmp	ip, r8
 8001750:	d8c5      	bhi.n	80016de <__gedf2+0x4a>
 8001752:	2000      	movs	r0, #0
 8001754:	45c4      	cmp	ip, r8
 8001756:	d2c6      	bcs.n	80016e6 <__gedf2+0x52>
 8001758:	e7ed      	b.n	8001736 <__gedf2+0xa2>
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	000007ff 	.word	0x000007ff

08001760 <__ledf2>:
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	4647      	mov	r7, r8
 8001764:	46ce      	mov	lr, r9
 8001766:	0004      	movs	r4, r0
 8001768:	0018      	movs	r0, r3
 800176a:	0016      	movs	r6, r2
 800176c:	031b      	lsls	r3, r3, #12
 800176e:	0b1b      	lsrs	r3, r3, #12
 8001770:	4d2c      	ldr	r5, [pc, #176]	; (8001824 <__ledf2+0xc4>)
 8001772:	004a      	lsls	r2, r1, #1
 8001774:	4699      	mov	r9, r3
 8001776:	b580      	push	{r7, lr}
 8001778:	0043      	lsls	r3, r0, #1
 800177a:	030f      	lsls	r7, r1, #12
 800177c:	46a4      	mov	ip, r4
 800177e:	46b0      	mov	r8, r6
 8001780:	0b3f      	lsrs	r7, r7, #12
 8001782:	0d52      	lsrs	r2, r2, #21
 8001784:	0fc9      	lsrs	r1, r1, #31
 8001786:	0d5b      	lsrs	r3, r3, #21
 8001788:	0fc0      	lsrs	r0, r0, #31
 800178a:	42aa      	cmp	r2, r5
 800178c:	d00d      	beq.n	80017aa <__ledf2+0x4a>
 800178e:	42ab      	cmp	r3, r5
 8001790:	d010      	beq.n	80017b4 <__ledf2+0x54>
 8001792:	2a00      	cmp	r2, #0
 8001794:	d127      	bne.n	80017e6 <__ledf2+0x86>
 8001796:	433c      	orrs	r4, r7
 8001798:	2b00      	cmp	r3, #0
 800179a:	d111      	bne.n	80017c0 <__ledf2+0x60>
 800179c:	464d      	mov	r5, r9
 800179e:	432e      	orrs	r6, r5
 80017a0:	d10e      	bne.n	80017c0 <__ledf2+0x60>
 80017a2:	2000      	movs	r0, #0
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d015      	beq.n	80017d4 <__ledf2+0x74>
 80017a8:	e00e      	b.n	80017c8 <__ledf2+0x68>
 80017aa:	003d      	movs	r5, r7
 80017ac:	4325      	orrs	r5, r4
 80017ae:	d110      	bne.n	80017d2 <__ledf2+0x72>
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d118      	bne.n	80017e6 <__ledf2+0x86>
 80017b4:	464d      	mov	r5, r9
 80017b6:	432e      	orrs	r6, r5
 80017b8:	d10b      	bne.n	80017d2 <__ledf2+0x72>
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	d102      	bne.n	80017c4 <__ledf2+0x64>
 80017be:	433c      	orrs	r4, r7
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	d00b      	beq.n	80017dc <__ledf2+0x7c>
 80017c4:	4281      	cmp	r1, r0
 80017c6:	d014      	beq.n	80017f2 <__ledf2+0x92>
 80017c8:	2002      	movs	r0, #2
 80017ca:	3901      	subs	r1, #1
 80017cc:	4008      	ands	r0, r1
 80017ce:	3801      	subs	r0, #1
 80017d0:	e000      	b.n	80017d4 <__ledf2+0x74>
 80017d2:	2002      	movs	r0, #2
 80017d4:	bcc0      	pop	{r6, r7}
 80017d6:	46b9      	mov	r9, r7
 80017d8:	46b0      	mov	r8, r6
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017dc:	2800      	cmp	r0, #0
 80017de:	d1f9      	bne.n	80017d4 <__ledf2+0x74>
 80017e0:	2001      	movs	r0, #1
 80017e2:	4240      	negs	r0, r0
 80017e4:	e7f6      	b.n	80017d4 <__ledf2+0x74>
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ec      	bne.n	80017c4 <__ledf2+0x64>
 80017ea:	464c      	mov	r4, r9
 80017ec:	4326      	orrs	r6, r4
 80017ee:	d1e9      	bne.n	80017c4 <__ledf2+0x64>
 80017f0:	e7ea      	b.n	80017c8 <__ledf2+0x68>
 80017f2:	429a      	cmp	r2, r3
 80017f4:	dd04      	ble.n	8001800 <__ledf2+0xa0>
 80017f6:	4243      	negs	r3, r0
 80017f8:	4158      	adcs	r0, r3
 80017fa:	0040      	lsls	r0, r0, #1
 80017fc:	3801      	subs	r0, #1
 80017fe:	e7e9      	b.n	80017d4 <__ledf2+0x74>
 8001800:	429a      	cmp	r2, r3
 8001802:	dbeb      	blt.n	80017dc <__ledf2+0x7c>
 8001804:	454f      	cmp	r7, r9
 8001806:	d8df      	bhi.n	80017c8 <__ledf2+0x68>
 8001808:	d006      	beq.n	8001818 <__ledf2+0xb8>
 800180a:	2000      	movs	r0, #0
 800180c:	454f      	cmp	r7, r9
 800180e:	d2e1      	bcs.n	80017d4 <__ledf2+0x74>
 8001810:	2900      	cmp	r1, #0
 8001812:	d0e5      	beq.n	80017e0 <__ledf2+0x80>
 8001814:	0008      	movs	r0, r1
 8001816:	e7dd      	b.n	80017d4 <__ledf2+0x74>
 8001818:	45c4      	cmp	ip, r8
 800181a:	d8d5      	bhi.n	80017c8 <__ledf2+0x68>
 800181c:	2000      	movs	r0, #0
 800181e:	45c4      	cmp	ip, r8
 8001820:	d2d8      	bcs.n	80017d4 <__ledf2+0x74>
 8001822:	e7f5      	b.n	8001810 <__ledf2+0xb0>
 8001824:	000007ff 	.word	0x000007ff

08001828 <HAL_ADC_ConvCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	/* Read & update The ADC Conversion Result*/
		ADC_RES = HAL_ADC_GetValue(&hadc1);
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_ADC_ConvCpltCallback+0x20>)
 8001832:	0018      	movs	r0, r3
 8001834:	f001 f854 	bl	80028e0 <HAL_ADC_GetValue>
 8001838:	0003      	movs	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_ADC_ConvCpltCallback+0x24>)
 800183e:	801a      	strh	r2, [r3, #0]
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2000008c 	.word	0x2000008c
 800184c:	2000013c 	.word	0x2000013c

08001850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001854:	f000 fbde 	bl	8002014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001858:	f000 f87e 	bl	8001958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185c:	f000 fa0e 	bl	8001c7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001860:	f000 f8d8 	bl	8001a14 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001864:	f000 f93e 	bl	8001ae4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	/*Start PWM for CH1 Timer1*/
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001868:	4b30      	ldr	r3, [pc, #192]	; (800192c <main+0xdc>)
 800186a:	2100      	movs	r1, #0
 800186c:	0018      	movs	r0, r3
 800186e:	f003 f823 	bl	80048b8 <HAL_TIM_PWM_Start>
	/*Start calibration for ADC*/
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001872:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <main+0xe0>)
 8001874:	0018      	movs	r0, r3
 8001876:	f001 fca3 	bl	80031c0 <HAL_ADCEx_Calibration_Start>
	/*Init LCD*/
	lcd_init();
 800187a:	f004 f80d 	bl	8005898 <lcd_init>
	/*Welcome screen lcd */
	lcd_puts(0, 2, "ADC Interrupt");
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <main+0xe4>)
 8001880:	001a      	movs	r2, r3
 8001882:	2102      	movs	r1, #2
 8001884:	2000      	movs	r0, #0
 8001886:	f004 f92f 	bl	8005ae8 <lcd_puts>
	HAL_Delay(2000);
 800188a:	23fa      	movs	r3, #250	; 0xfa
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	0018      	movs	r0, r3
 8001890:	f000 fc46 	bl	8002120 <HAL_Delay>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/* Start ADC1 Conversion in interrupt mode*/
		HAL_ADC_Start_IT(&hadc1);
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <main+0xe0>)
 8001896:	0018      	movs	r0, r3
 8001898:	f000 ffaa 	bl	80027f0 <HAL_ADC_Start_IT>
		/*Method1 mapping : using left shift operation */
		TIM1->CCR1 = (ADC_RES << 4);
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <main+0xe8>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	011a      	lsls	r2, r3, #4
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <main+0xec>)
 80018a4:	635a      	str	r2, [r3, #52]	; 0x34
		/*Method2 mapping:
		 *TIMx-> CCRx = (Max CCR register[65535] / Max ADC_value[4096]) * ADC_Result */
//		          TIM1->CCR1 = (uint16_t)(15.999 * ADC_RES);
		/* Voltage[mVolt] = ADC_Resulte * (V_reference[3300]/ 2 ^ (ADC_resolution[12]) [4096])*/
		mVoltage = (uint16_t) (ADC_RES * (0.80566));
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <main+0xe8>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff fd3a 	bl	8001324 <__aeabi_i2d>
 80018b0:	4a23      	ldr	r2, [pc, #140]	; (8001940 <main+0xf0>)
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <main+0xf4>)
 80018b4:	f7fe ff02 	bl	80006bc <__aeabi_dmul>
 80018b8:	0002      	movs	r2, r0
 80018ba:	000b      	movs	r3, r1
 80018bc:	0010      	movs	r0, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	f7fe fcce 	bl	8000260 <__aeabi_d2uiz>
 80018c4:	0003      	movs	r3, r0
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7fe feb5 	bl	8000638 <__aeabi_ui2f>
 80018ce:	1c02      	adds	r2, r0, #0
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <main+0xf8>)
 80018d2:	601a      	str	r2, [r3, #0]
		/*Clear LCD and print a new value*/
		lcd_clear();
 80018d4:	f004 f956 	bl	8005b84 <lcd_clear>
		sprintf(buff, "ADCRes=%04d", ADC_RES);
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <main+0xe8>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	001a      	movs	r2, r3
 80018de:	491b      	ldr	r1, [pc, #108]	; (800194c <main+0xfc>)
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <main+0x100>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f004 f98a 	bl	8005bfc <siprintf>
		lcd_puts(1, 1, buff);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <main+0x100>)
 80018ea:	001a      	movs	r2, r3
 80018ec:	2101      	movs	r1, #1
 80018ee:	2001      	movs	r0, #1
 80018f0:	f004 f8fa 	bl	8005ae8 <lcd_puts>
		HAL_Delay(10);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f000 fc13 	bl	8002120 <HAL_Delay>
		sprintf(buff, "mVolt=%04d", (uint16_t) mVoltage);
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <main+0xf8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1c18      	adds	r0, r3, #0
 8001900:	f7fe fc96 	bl	8000230 <__aeabi_f2uiz>
 8001904:	0003      	movs	r3, r0
 8001906:	b29b      	uxth	r3, r3
 8001908:	001a      	movs	r2, r3
 800190a:	4912      	ldr	r1, [pc, #72]	; (8001954 <main+0x104>)
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <main+0x100>)
 800190e:	0018      	movs	r0, r3
 8001910:	f004 f974 	bl	8005bfc <siprintf>
		lcd_puts(0, 1, buff);
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <main+0x100>)
 8001916:	001a      	movs	r2, r3
 8001918:	2101      	movs	r1, #1
 800191a:	2000      	movs	r0, #0
 800191c:	f004 f8e4 	bl	8005ae8 <lcd_puts>
		HAL_Delay(500);
 8001920:	23fa      	movs	r3, #250	; 0xfa
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	0018      	movs	r0, r3
 8001926:	f000 fbfb 	bl	8002120 <HAL_Delay>
		HAL_ADC_Start_IT(&hadc1);
 800192a:	e7b3      	b.n	8001894 <main+0x44>
 800192c:	200000f0 	.word	0x200000f0
 8001930:	2000008c 	.word	0x2000008c
 8001934:	080064e8 	.word	0x080064e8
 8001938:	2000013c 	.word	0x2000013c
 800193c:	40012c00 	.word	0x40012c00
 8001940:	7af64064 	.word	0x7af64064
 8001944:	3fe9c7f7 	.word	0x3fe9c7f7
 8001948:	20000140 	.word	0x20000140
 800194c:	080064f8 	.word	0x080064f8
 8001950:	20000144 	.word	0x20000144
 8001954:	08006504 	.word	0x08006504

08001958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b095      	sub	sp, #84	; 0x54
 800195c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195e:	2414      	movs	r4, #20
 8001960:	193b      	adds	r3, r7, r4
 8001962:	0018      	movs	r0, r3
 8001964:	233c      	movs	r3, #60	; 0x3c
 8001966:	001a      	movs	r2, r3
 8001968:	2100      	movs	r1, #0
 800196a:	f004 f93f 	bl	8005bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	0018      	movs	r0, r3
 8001972:	2310      	movs	r3, #16
 8001974:	001a      	movs	r2, r3
 8001976:	2100      	movs	r1, #0
 8001978:	f004 f938 	bl	8005bec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	0018      	movs	r0, r3
 8001982:	f001 ff7b 	bl	800387c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001986:	193b      	adds	r3, r7, r4
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198c:	193b      	adds	r3, r7, r4
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	0052      	lsls	r2, r2, #1
 8001992:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001994:	0021      	movs	r1, r4
 8001996:	187b      	adds	r3, r7, r1
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800199c:	187b      	adds	r3, r7, r1
 800199e:	2240      	movs	r2, #64	; 0x40
 80019a0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2202      	movs	r2, #2
 80019a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2202      	movs	r2, #2
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	2200      	movs	r2, #0
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2209      	movs	r2, #9
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	0292      	lsls	r2, r2, #10
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	0492      	lsls	r2, r2, #18
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	05d2      	lsls	r2, r2, #23
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	0018      	movs	r0, r3
 80019d6:	f001 ff91 	bl	80038fc <HAL_RCC_OscConfig>
 80019da:	1e03      	subs	r3, r0, #0
 80019dc:	d001      	beq.n	80019e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80019de:	f000 f983 	bl	8001ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2202      	movs	r2, #2
 80019ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2101      	movs	r1, #1
 80019fe:	0018      	movs	r0, r3
 8001a00:	f002 fadc 	bl	8003fbc <HAL_RCC_ClockConfig>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a08:	f000 f96e 	bl	8001ce8 <Error_Handler>
  }
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b015      	add	sp, #84	; 0x54
 8001a12:	bd90      	pop	{r4, r7, pc}

08001a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	230c      	movs	r3, #12
 8001a20:	001a      	movs	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	f004 f8e2 	bl	8005bec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a2a:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <MX_ADC1_Init+0xc8>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	05d2      	lsls	r2, r2, #23
 8001a34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a74:	222c      	movs	r2, #44	; 0x2c
 8001a76:	2100      	movs	r1, #0
 8001a78:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a8e:	223c      	movs	r2, #60	; 0x3c
 8001a90:	2100      	movs	r1, #0
 8001a92:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fcff 	bl	80024a0 <HAL_ADC_Init>
 8001aa2:	1e03      	subs	r3, r0, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001aa6:	f000 f91f 	bl	8001ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <MX_ADC1_Init+0xcc>)
 8001aae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abc:	1d3a      	adds	r2, r7, #4
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f001 f840 	bl	8002b48 <HAL_ADC_ConfigChannel>
 8001ac8:	1e03      	subs	r3, r0, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001acc:	f000 f90c 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2000008c 	.word	0x2000008c
 8001adc:	40012400 	.word	0x40012400
 8001ae0:	18000040 	.word	0x18000040

08001ae4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09c      	sub	sp, #112	; 0x70
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	2360      	movs	r3, #96	; 0x60
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	0018      	movs	r0, r3
 8001af0:	2310      	movs	r3, #16
 8001af2:	001a      	movs	r2, r3
 8001af4:	2100      	movs	r1, #0
 8001af6:	f004 f879 	bl	8005bec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	2354      	movs	r3, #84	; 0x54
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	0018      	movs	r0, r3
 8001b00:	230c      	movs	r3, #12
 8001b02:	001a      	movs	r2, r3
 8001b04:	2100      	movs	r1, #0
 8001b06:	f004 f871 	bl	8005bec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0a:	2338      	movs	r3, #56	; 0x38
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	0018      	movs	r0, r3
 8001b10:	231c      	movs	r3, #28
 8001b12:	001a      	movs	r2, r3
 8001b14:	2100      	movs	r1, #0
 8001b16:	f004 f869 	bl	8005bec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	2334      	movs	r3, #52	; 0x34
 8001b20:	001a      	movs	r2, r3
 8001b22:	2100      	movs	r1, #0
 8001b24:	f004 f862 	bl	8005bec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b28:	4b51      	ldr	r3, [pc, #324]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b2a:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <MX_TIM1_Init+0x190>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001b2e:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b30:	2263      	movs	r2, #99	; 0x63
 8001b32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b4e      	ldr	r3, [pc, #312]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 8001b3a:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	; (8001c78 <MX_TIM1_Init+0x194>)
 8001b3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b52:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b54:	0018      	movs	r0, r3
 8001b56:	f002 fdf7 	bl	8004748 <HAL_TIM_Base_Init>
 8001b5a:	1e03      	subs	r3, r0, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001b5e:	f000 f8c3 	bl	8001ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b62:	2160      	movs	r1, #96	; 0x60
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	0152      	lsls	r2, r2, #5
 8001b6a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b6c:	187a      	adds	r2, r7, r1
 8001b6e:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b70:	0011      	movs	r1, r2
 8001b72:	0018      	movs	r0, r3
 8001b74:	f003 f890 	bl	8004c98 <HAL_TIM_ConfigClockSource>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001b7c:	f000 f8b4 	bl	8001ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f002 fe38 	bl	80047f8 <HAL_TIM_PWM_Init>
 8001b88:	1e03      	subs	r3, r0, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001b8c:	f000 f8ac 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2154      	movs	r1, #84	; 0x54
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba4:	187a      	adds	r2, r7, r1
 8001ba6:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001ba8:	0011      	movs	r1, r2
 8001baa:	0018      	movs	r0, r3
 8001bac:	f003 fd58 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	1e03      	subs	r3, r0, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001bb4:	f000 f898 	bl	8001ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb8:	2138      	movs	r1, #56	; 0x38
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2260      	movs	r2, #96	; 0x60
 8001bbe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be4:	1879      	adds	r1, r7, r1
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	0018      	movs	r0, r3
 8001bec:	f002 ff54 	bl	8004a98 <HAL_TIM_PWM_ConfigChannel>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001bf4:	f000 f878 	bl	8001ce8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	0192      	lsls	r2, r2, #6
 8001c1c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	0492      	lsls	r2, r2, #18
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2200      	movs	r2, #0
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2200      	movs	r2, #0
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c4a:	1d3a      	adds	r2, r7, #4
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001c4e:	0011      	movs	r1, r2
 8001c50:	0018      	movs	r0, r3
 8001c52:	f003 fd7b 	bl	800574c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c56:	1e03      	subs	r3, r0, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001c5a:	f000 f845 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <MX_TIM1_Init+0x18c>)
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 f90f 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b01c      	add	sp, #112	; 0x70
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	200000f0 	.word	0x200000f0
 8001c74:	40012c00 	.word	0x40012c00
 8001c78:	00001f3f 	.word	0x00001f3f

08001c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	0018      	movs	r0, r3
 8001c86:	2314      	movs	r3, #20
 8001c88:	001a      	movs	r2, r3
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	f003 ffae 	bl	8005bec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_GPIO_Init+0x68>)
 8001c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_GPIO_Init+0x68>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_GPIO_Init+0x68>)
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ca8:	23a0      	movs	r3, #160	; 0xa0
 8001caa:	05db      	lsls	r3, r3, #23
 8001cac:	2200      	movs	r2, #0
 8001cae:	213f      	movs	r1, #63	; 0x3f
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f001 fdc5 	bl	8003840 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	223f      	movs	r2, #63	; 0x3f
 8001cba:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	1d3a      	adds	r2, r7, #4
 8001cd0:	23a0      	movs	r3, #160	; 0xa0
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 fc46 	bl	8003568 <HAL_GPIO_Init>

}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b006      	add	sp, #24
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cec:	b672      	cpsid	i
}
 8001cee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cf0:	e7fe      	b.n	8001cf0 <Error_Handler+0x8>
	...

08001cf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_MspInit+0x58>)
 8001cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_MspInit+0x58>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	430a      	orrs	r2, r1
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_MspInit+0x58>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_MspInit+0x58>)
 8001d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_MspInit+0x58>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	0549      	lsls	r1, r1, #21
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_MspInit+0x58>)
 8001d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	055b      	lsls	r3, r3, #21
 8001d28:	4013      	ands	r3, r2
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001d2e:	f000 fa2f 	bl	8002190 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001d32:	2002      	movs	r0, #2
 8001d34:	f000 fa18 	bl	8002168 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001d38:	23c0      	movs	r3, #192	; 0xc0
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 fa35 	bl	80021ac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b002      	add	sp, #8
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b09d      	sub	sp, #116	; 0x74
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	235c      	movs	r3, #92	; 0x5c
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	2314      	movs	r3, #20
 8001d60:	001a      	movs	r2, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	f003 ff42 	bl	8005bec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	2410      	movs	r4, #16
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	234c      	movs	r3, #76	; 0x4c
 8001d70:	001a      	movs	r2, r3
 8001d72:	2100      	movs	r1, #0
 8001d74:	f003 ff3a 	bl	8005bec <memset>
  if(hadc->Instance==ADC1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <HAL_ADC_MspInit+0xc0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d141      	bne.n	8001e06 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	01d2      	lsls	r2, r2, #7
 8001d88:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001d8a:	193b      	adds	r3, r7, r4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d90:	193b      	adds	r3, r7, r4
 8001d92:	0018      	movs	r0, r3
 8001d94:	f002 fa9c 	bl	80042d0 <HAL_RCCEx_PeriphCLKConfig>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d9c:	f7ff ffa4 	bl	8001ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <HAL_ADC_MspInit+0xc4>)
 8001da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_ADC_MspInit+0xc4>)
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	0349      	lsls	r1, r1, #13
 8001daa:	430a      	orrs	r2, r1
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_ADC_MspInit+0xc4>)
 8001db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	035b      	lsls	r3, r3, #13
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_ADC_MspInit+0xc4>)
 8001dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <HAL_ADC_MspInit+0xc4>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_ADC_MspInit+0xc4>)
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dd4:	215c      	movs	r1, #92	; 0x5c
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	2240      	movs	r2, #64	; 0x40
 8001dda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	2203      	movs	r2, #3
 8001de0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	187a      	adds	r2, r7, r1
 8001dea:	23a0      	movs	r3, #160	; 0xa0
 8001dec:	05db      	lsls	r3, r3, #23
 8001dee:	0011      	movs	r1, r2
 8001df0:	0018      	movs	r0, r3
 8001df2:	f001 fbb9 	bl	8003568 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	200c      	movs	r0, #12
 8001dfc:	f001 fb82 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001e00:	200c      	movs	r0, #12
 8001e02:	f001 fb94 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b01d      	add	sp, #116	; 0x74
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	40012400 	.word	0x40012400
 8001e14:	40021000 	.word	0x40021000

08001e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b097      	sub	sp, #92	; 0x5c
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e20:	240c      	movs	r4, #12
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	0018      	movs	r0, r3
 8001e26:	234c      	movs	r3, #76	; 0x4c
 8001e28:	001a      	movs	r2, r3
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	f003 fede 	bl	8005bec <memset>
  if(htim_base->Instance==TIM1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_TIM_Base_MspInit+0x64>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d11c      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	0392      	lsls	r2, r2, #14
 8001e40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001e42:	193b      	adds	r3, r7, r4
 8001e44:	2200      	movs	r2, #0
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f002 fa40 	bl	80042d0 <HAL_RCCEx_PeriphCLKConfig>
 8001e50:	1e03      	subs	r3, r0, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001e54:	f7ff ff48 	bl	8001ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_TIM_Base_MspInit+0x68>)
 8001e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_TIM_Base_MspInit+0x68>)
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	0109      	lsls	r1, r1, #4
 8001e62:	430a      	orrs	r2, r1
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_TIM_Base_MspInit+0x68>)
 8001e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	4013      	ands	r3, r2
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b017      	add	sp, #92	; 0x5c
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	240c      	movs	r4, #12
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	0018      	movs	r0, r3
 8001e92:	2314      	movs	r3, #20
 8001e94:	001a      	movs	r2, r3
 8001e96:	2100      	movs	r1, #0
 8001e98:	f003 fea8 	bl	8005bec <memset>
  if(htim->Instance==TIM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <HAL_TIM_MspPostInit+0x74>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d123      	bne.n	8001eee <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_TIM_MspPostInit+0x78>)
 8001ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_TIM_MspPostInit+0x78>)
 8001eac:	2101      	movs	r1, #1
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_TIM_MspPostInit+0x78>)
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ebe:	193b      	adds	r3, r7, r4
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	0052      	lsls	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	0021      	movs	r1, r4
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2202      	movs	r2, #2
 8001ecc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	2202      	movs	r2, #2
 8001ede:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	187a      	adds	r2, r7, r1
 8001ee2:	23a0      	movs	r3, #160	; 0xa0
 8001ee4:	05db      	lsls	r3, r3, #23
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f001 fb3d 	bl	8003568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b009      	add	sp, #36	; 0x24
 8001ef4:	bd90      	pop	{r4, r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40021000 	.word	0x40021000

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <NMI_Handler+0x4>

08001f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f24:	f000 f8e0 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <ADC1_COMP_IRQHandler+0x14>)
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 fcde 	bl	80028f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	2000008c 	.word	0x2000008c

08001f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <_sbrk+0x5c>)
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <_sbrk+0x60>)
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <_sbrk+0x64>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <_sbrk+0x68>)
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	18d3      	adds	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d207      	bcs.n	8001f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f78:	f003 fe0e 	bl	8005b98 <__errno>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	220c      	movs	r2, #12
 8001f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	425b      	negs	r3, r3
 8001f86:	e009      	b.n	8001f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	18d2      	adds	r2, r2, r3
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <_sbrk+0x64>)
 8001f98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b006      	add	sp, #24
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20024000 	.word	0x20024000
 8001fa8:	00000400 	.word	0x00000400
 8001fac:	20000154 	.word	0x20000154
 8001fb0:	20000170 	.word	0x20000170

08001fb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fc4:	f7ff fff6 	bl	8001fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8001fca:	490d      	ldr	r1, [pc, #52]	; (8002000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <LoopForever+0xe>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe0:	4c0a      	ldr	r4, [pc, #40]	; (800200c <LoopForever+0x16>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fee:	f003 fdd9 	bl	8005ba4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ff2:	f7ff fc2d 	bl	8001850 <main>

08001ff6 <LoopForever>:

LoopForever:
  b LoopForever
 8001ff6:	e7fe      	b.n	8001ff6 <LoopForever>
  ldr   r0, =_estack
 8001ff8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002004:	08006620 	.word	0x08006620
  ldr r2, =_sbss
 8002008:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800200c:	2000016c 	.word	0x2000016c

08002010 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <CEC_IRQHandler>
	...

08002014 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_Init+0x3c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_Init+0x3c>)
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	0049      	lsls	r1, r1, #1
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800202e:	2003      	movs	r0, #3
 8002030:	f000 f810 	bl	8002054 <HAL_InitTick>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d003      	beq.n	8002040 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002038:	1dfb      	adds	r3, r7, #7
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
 800203e:	e001      	b.n	8002044 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fe58 	bl	8001cf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	781b      	ldrb	r3, [r3, #0]
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40022000 	.word	0x40022000

08002054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800205c:	230f      	movs	r3, #15
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_InitTick+0x88>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d02b      	beq.n	80020c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_InitTick+0x8c>)
 800206e:	681c      	ldr	r4, [r3, #0]
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_InitTick+0x88>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	0019      	movs	r1, r3
 8002076:	23fa      	movs	r3, #250	; 0xfa
 8002078:	0098      	lsls	r0, r3, #2
 800207a:	f7fe f84d 	bl	8000118 <__udivsi3>
 800207e:	0003      	movs	r3, r0
 8002080:	0019      	movs	r1, r3
 8002082:	0020      	movs	r0, r4
 8002084:	f7fe f848 	bl	8000118 <__udivsi3>
 8002088:	0003      	movs	r3, r0
 800208a:	0018      	movs	r0, r3
 800208c:	f001 fa5f 	bl	800354e <HAL_SYSTICK_Config>
 8002090:	1e03      	subs	r3, r0, #0
 8002092:	d112      	bne.n	80020ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d80a      	bhi.n	80020b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	2301      	movs	r3, #1
 800209e:	425b      	negs	r3, r3
 80020a0:	2200      	movs	r2, #0
 80020a2:	0018      	movs	r0, r3
 80020a4:	f001 fa2e 	bl	8003504 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_InitTick+0x90>)
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e00d      	b.n	80020cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80020b0:	230f      	movs	r3, #15
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e008      	b.n	80020cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020ba:	230f      	movs	r3, #15
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e003      	b.n	80020cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020c4:	230f      	movs	r3, #15
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020cc:	230f      	movs	r3, #15
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	781b      	ldrb	r3, [r3, #0]
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b005      	add	sp, #20
 80020d8:	bd90      	pop	{r4, r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	20000008 	.word	0x20000008
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_IncTick+0x1c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_IncTick+0x20>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	18d2      	adds	r2, r2, r3
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_IncTick+0x20>)
 80020fa:	601a      	str	r2, [r3, #0]
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	20000008 	.word	0x20000008
 8002108:	20000158 	.word	0x20000158

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <HAL_GetTick+0x10>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	20000158 	.word	0x20000158

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff fff0 	bl	800210c <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3301      	adds	r3, #1
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	001a      	movs	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	189b      	adds	r3, r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	f7ff ffe0 	bl	800210c <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b004      	add	sp, #16
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	20000008 	.word	0x20000008

08002168 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2202      	movs	r2, #2
 8002176:	4393      	bics	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40010030 	.word	0x40010030

08002190 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 800219a:	2101      	movs	r1, #1
 800219c:	438a      	bics	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	40010030 	.word	0x40010030

080021ac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40010000 	.word	0x40010000
 80021d4:	fffff9ff 	.word	0xfffff9ff

080021d8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80021e8:	401a      	ands	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b002      	add	sp, #8
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	fe3fffff 	.word	0xfe3fffff

08002200 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	23e0      	movs	r3, #224	; 0xe0
 800220e:	045b      	lsls	r3, r3, #17
 8002210:	4013      	ands	r3, r2
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bd80      	pop	{r7, pc}

0800221a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	2104      	movs	r1, #4
 800222e:	400a      	ands	r2, r1
 8002230:	2107      	movs	r1, #7
 8002232:	4091      	lsls	r1, r2
 8002234:	000a      	movs	r2, r1
 8002236:	43d2      	mvns	r2, r2
 8002238:	401a      	ands	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2104      	movs	r1, #4
 800223e:	400b      	ands	r3, r1
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4099      	lsls	r1, r3
 8002244:	000b      	movs	r3, r1
 8002246:	431a      	orrs	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b004      	add	sp, #16
 8002252:	bd80      	pop	{r7, pc}

08002254 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	2104      	movs	r1, #4
 8002266:	400a      	ands	r2, r1
 8002268:	2107      	movs	r1, #7
 800226a:	4091      	lsls	r1, r2
 800226c:	000a      	movs	r2, r1
 800226e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2104      	movs	r1, #4
 8002274:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002276:	40da      	lsrs	r2, r3
 8002278:	0013      	movs	r3, r2
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}

08002282 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	23c0      	movs	r3, #192	; 0xc0
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	4013      	ands	r3, r2
 8002294:	d101      	bne.n	800229a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800229a:	2300      	movs	r3, #0
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	211f      	movs	r1, #31
 80022b8:	400a      	ands	r2, r1
 80022ba:	210f      	movs	r1, #15
 80022bc:	4091      	lsls	r1, r2
 80022be:	000a      	movs	r2, r1
 80022c0:	43d2      	mvns	r2, r2
 80022c2:	401a      	ands	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	210f      	movs	r1, #15
 80022ca:	4019      	ands	r1, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	201f      	movs	r0, #31
 80022d0:	4003      	ands	r3, r0
 80022d2:	4099      	lsls	r1, r3
 80022d4:	000b      	movs	r3, r1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b004      	add	sp, #16
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	035b      	lsls	r3, r3, #13
 80022f6:	0b5b      	lsrs	r3, r3, #13
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}

08002306 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	0352      	lsls	r2, r2, #13
 8002318:	0b52      	lsrs	r2, r2, #13
 800231a:	43d2      	mvns	r2, r2
 800231c:	401a      	ands	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	b002      	add	sp, #8
 8002328:	bd80      	pop	{r7, pc}

0800232a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2203      	movs	r2, #3
 8002338:	4013      	ands	r3, r2
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	0212      	lsls	r2, r2, #8
 8002358:	43d2      	mvns	r2, r2
 800235a:	401a      	ands	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	400b      	ands	r3, r1
 8002364:	4904      	ldr	r1, [pc, #16]	; (8002378 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002366:	400b      	ands	r3, r1
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	07ffff00 	.word	0x07ffff00

0800237c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800238a:	4013      	ands	r3, r2
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	0552      	lsls	r2, r2, #21
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b002      	add	sp, #8
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	6fffffe8 	.word	0x6fffffe8

080023a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	055b      	lsls	r3, r3, #21
 80023b4:	401a      	ands	r2, r3
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	055b      	lsls	r3, r3, #21
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d101      	bne.n	80023c2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <LL_ADC_Enable+0x20>)
 80023da:	4013      	ands	r3, r2
 80023dc:	2201      	movs	r2, #1
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	7fffffe8 	.word	0x7fffffe8

080023f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <LL_ADC_Disable+0x20>)
 80023fe:	4013      	ands	r3, r2
 8002400:	2202      	movs	r2, #2
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}
 8002410:	7fffffe8 	.word	0x7fffffe8

08002414 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <LL_ADC_IsEnabled+0x18>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <LL_ADC_IsEnabled+0x1a>
 800242c:	2300      	movs	r3, #0
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}

08002436 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d101      	bne.n	800244e <LL_ADC_IsDisableOngoing+0x18>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <LL_ADC_IsDisableOngoing+0x1a>
 800244e:	2300      	movs	r3, #0
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}

08002458 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <LL_ADC_REG_StartConversion+0x20>)
 8002466:	4013      	ands	r3, r2
 8002468:	2204      	movs	r2, #4
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}
 8002478:	7fffffe8 	.word	0x7fffffe8

0800247c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2204      	movs	r2, #4
 800248a:	4013      	ands	r3, r2
 800248c:	2b04      	cmp	r3, #4
 800248e:	d101      	bne.n	8002494 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002494:	2300      	movs	r3, #0
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b002      	add	sp, #8
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e17f      	b.n	80027c6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7ff fc3d 	bl	8001d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2254      	movs	r2, #84	; 0x54
 80024e0:	2100      	movs	r1, #0
 80024e2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff ff5b 	bl	80023a4 <LL_ADC_IsInternalRegulatorEnabled>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d115      	bne.n	800251e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7ff ff40 	bl	800237c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fc:	4bb4      	ldr	r3, [pc, #720]	; (80027d0 <HAL_ADC_Init+0x330>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	49b4      	ldr	r1, [pc, #720]	; (80027d4 <HAL_ADC_Init+0x334>)
 8002502:	0018      	movs	r0, r3
 8002504:	f7fd fe08 	bl	8000118 <__udivsi3>
 8002508:	0003      	movs	r3, r0
 800250a:	3301      	adds	r3, #1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002510:	e002      	b.n	8002518 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3b01      	subs	r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f9      	bne.n	8002512 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	0018      	movs	r0, r3
 8002524:	f7ff ff3e 	bl	80023a4 <LL_ADC_IsInternalRegulatorEnabled>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d10f      	bne.n	800254c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	2210      	movs	r2, #16
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	2201      	movs	r2, #1
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff ff93 	bl	800247c <LL_ADC_REG_IsConversionOngoing>
 8002556:	0003      	movs	r3, r0
 8002558:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	2210      	movs	r2, #16
 8002560:	4013      	ands	r3, r2
 8002562:	d000      	beq.n	8002566 <HAL_ADC_Init+0xc6>
 8002564:	e122      	b.n	80027ac <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d000      	beq.n	800256e <HAL_ADC_Init+0xce>
 800256c:	e11e      	b.n	80027ac <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	4a99      	ldr	r2, [pc, #612]	; (80027d8 <HAL_ADC_Init+0x338>)
 8002574:	4013      	ands	r3, r2
 8002576:	2202      	movs	r2, #2
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	0018      	movs	r0, r3
 8002584:	f7ff ff46 	bl	8002414 <LL_ADC_IsEnabled>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d000      	beq.n	800258e <HAL_ADC_Init+0xee>
 800258c:	e0ad      	b.n	80026ea <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7e1b      	ldrb	r3, [r3, #24]
 8002596:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002598:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7e5b      	ldrb	r3, [r3, #25]
 800259e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025a0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7e9b      	ldrb	r3, [r3, #26]
 80025a6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025a8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_ADC_Init+0x118>
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	015b      	lsls	r3, r3, #5
 80025b6:	e000      	b.n	80025ba <HAL_ADC_Init+0x11a>
 80025b8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025ba:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025c0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	da04      	bge.n	80025d4 <HAL_ADC_Init+0x134>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	e001      	b.n	80025d8 <HAL_ADC_Init+0x138>
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80025d8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	5c5b      	ldrb	r3, [r3, r1]
 80025e0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80025e2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	5c9b      	ldrb	r3, [r3, r2]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d115      	bne.n	8002620 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e9b      	ldrb	r3, [r3, #26]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	0252      	lsls	r2, r2, #9
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	e00b      	b.n	8002620 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	2220      	movs	r2, #32
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	2201      	movs	r2, #1
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800262c:	23e0      	movs	r3, #224	; 0xe0
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002636:	4313      	orrs	r3, r2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a65      	ldr	r2, [pc, #404]	; (80027dc <HAL_ADC_Init+0x33c>)
 8002646:	4013      	ands	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	430a      	orrs	r2, r1
 8002652:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	0f9b      	lsrs	r3, r3, #30
 800265a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002660:	4313      	orrs	r3, r2
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	223c      	movs	r2, #60	; 0x3c
 800266c:	5c9b      	ldrb	r3, [r3, r2]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d111      	bne.n	8002696 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	0f9b      	lsrs	r3, r3, #30
 8002678:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800267e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002684:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800268a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	2201      	movs	r2, #1
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	4a50      	ldr	r2, [pc, #320]	; (80027e0 <HAL_ADC_Init+0x340>)
 800269e:	4013      	ands	r3, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	23c0      	movs	r3, #192	; 0xc0
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d018      	beq.n	80026ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	05db      	lsls	r3, r3, #23
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d012      	beq.n	80026ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	061b      	lsls	r3, r3, #24
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d00c      	beq.n	80026ea <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80026d0:	4b44      	ldr	r3, [pc, #272]	; (80027e4 <HAL_ADC_Init+0x344>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a44      	ldr	r2, [pc, #272]	; (80027e8 <HAL_ADC_Init+0x348>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	0019      	movs	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	23f0      	movs	r3, #240	; 0xf0
 80026e0:	039b      	lsls	r3, r3, #14
 80026e2:	401a      	ands	r2, r3
 80026e4:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <HAL_ADC_Init+0x344>)
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	001a      	movs	r2, r3
 80026f4:	2100      	movs	r1, #0
 80026f6:	f7ff fd90 	bl	800221a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	493a      	ldr	r1, [pc, #232]	; (80027ec <HAL_ADC_Init+0x34c>)
 8002704:	001a      	movs	r2, r3
 8002706:	f7ff fd88 	bl	800221a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2110      	movs	r1, #16
 800271e:	4249      	negs	r1, r1
 8002720:	430a      	orrs	r2, r1
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
 8002724:	e018      	b.n	8002758 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	039b      	lsls	r3, r3, #14
 800272e:	429a      	cmp	r2, r3
 8002730:	d112      	bne.n	8002758 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	3b01      	subs	r3, #1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	221c      	movs	r2, #28
 8002742:	4013      	ands	r3, r2
 8002744:	2210      	movs	r2, #16
 8002746:	4252      	negs	r2, r2
 8002748:	409a      	lsls	r2, r3
 800274a:	0011      	movs	r1, r2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2100      	movs	r1, #0
 800275e:	0018      	movs	r0, r3
 8002760:	f7ff fd78 	bl	8002254 <LL_ADC_GetSamplingTimeCommonChannels>
 8002764:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800276a:	429a      	cmp	r2, r3
 800276c:	d10b      	bne.n	8002786 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	2203      	movs	r2, #3
 800277a:	4393      	bics	r3, r2
 800277c:	2201      	movs	r2, #1
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002784:	e01c      	b.n	80027c0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	2212      	movs	r2, #18
 800278c:	4393      	bics	r3, r2
 800278e:	2210      	movs	r2, #16
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	2201      	movs	r2, #1
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80027a2:	231f      	movs	r3, #31
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027aa:	e009      	b.n	80027c0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	2210      	movs	r2, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027b8:	231f      	movs	r3, #31
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80027c0:	231f      	movs	r3, #31
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	781b      	ldrb	r3, [r3, #0]
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b008      	add	sp, #32
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	20000000 	.word	0x20000000
 80027d4:	00030d40 	.word	0x00030d40
 80027d8:	fffffefd 	.word	0xfffffefd
 80027dc:	fffe0201 	.word	0xfffe0201
 80027e0:	1ffffc02 	.word	0x1ffffc02
 80027e4:	40012708 	.word	0x40012708
 80027e8:	ffc3ffff 	.word	0xffc3ffff
 80027ec:	07ffff04 	.word	0x07ffff04

080027f0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80027f0:	b5b0      	push	{r4, r5, r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff fe3d 	bl	800247c <LL_ADC_REG_IsConversionOngoing>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d15f      	bne.n	80028c6 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2254      	movs	r2, #84	; 0x54
 800280a:	5c9b      	ldrb	r3, [r3, r2]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_ADC_Start_IT+0x24>
 8002810:	2302      	movs	r3, #2
 8002812:	e05f      	b.n	80028d4 <HAL_ADC_Start_IT+0xe4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2254      	movs	r2, #84	; 0x54
 8002818:	2101      	movs	r1, #1
 800281a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800281c:	250f      	movs	r5, #15
 800281e:	197c      	adds	r4, r7, r5
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	0018      	movs	r0, r3
 8002824:	f000 fb68 	bl	8002ef8 <ADC_Enable>
 8002828:	0003      	movs	r3, r0
 800282a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800282c:	197b      	adds	r3, r7, r5
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d143      	bne.n	80028bc <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	4a28      	ldr	r2, [pc, #160]	; (80028dc <HAL_ADC_Start_IT+0xec>)
 800283a:	4013      	ands	r3, r2
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	0052      	lsls	r2, r2, #1
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	221c      	movs	r2, #28
 8002852:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2254      	movs	r2, #84	; 0x54
 8002858:	2100      	movs	r1, #0
 800285a:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	211c      	movs	r1, #28
 8002868:	438a      	bics	r2, r1
 800286a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d108      	bne.n	8002886 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2108      	movs	r1, #8
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
          break;
 8002884:	e008      	b.n	8002898 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2104      	movs	r1, #4
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
          break;
 8002896:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d107      	bne.n	80028b0 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2110      	movs	r1, #16
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff fdcf 	bl	8002458 <LL_ADC_REG_StartConversion>
 80028ba:	e008      	b.n	80028ce <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2254      	movs	r2, #84	; 0x54
 80028c0:	2100      	movs	r1, #0
 80028c2:	5499      	strb	r1, [r3, r2]
 80028c4:	e003      	b.n	80028ce <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028c6:	230f      	movs	r3, #15
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2202      	movs	r2, #2
 80028cc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80028ce:	230f      	movs	r3, #15
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	781b      	ldrb	r3, [r3, #0]
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b004      	add	sp, #16
 80028da:	bdb0      	pop	{r4, r5, r7, pc}
 80028dc:	fffff0fe 	.word	0xfffff0fe

080028e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b002      	add	sp, #8
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d017      	beq.n	800294c <HAL_ADC_IRQHandler+0x54>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2202      	movs	r2, #2
 8002920:	4013      	ands	r3, r2
 8002922:	d013      	beq.n	800294c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	2210      	movs	r2, #16
 800292a:	4013      	ands	r3, r2
 800292c:	d106      	bne.n	800293c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	0018      	movs	r0, r3
 8002940:	f000 fd24 	bl	800338c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2202      	movs	r2, #2
 800294a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d003      	beq.n	800295c <HAL_ADC_IRQHandler+0x64>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2204      	movs	r2, #4
 8002958:	4013      	ands	r3, r2
 800295a:	d107      	bne.n	800296c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2208      	movs	r2, #8
 8002960:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002962:	d04d      	beq.n	8002a00 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2208      	movs	r2, #8
 8002968:	4013      	ands	r3, r2
 800296a:	d049      	beq.n	8002a00 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	2210      	movs	r2, #16
 8002972:	4013      	ands	r3, r2
 8002974:	d106      	bne.n	8002984 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff fc7a 	bl	8002282 <LL_ADC_REG_IsTriggerSourceSWStart>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d02e      	beq.n	80029f0 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7e9b      	ldrb	r3, [r3, #26]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d12a      	bne.n	80029f0 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2208      	movs	r2, #8
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d123      	bne.n	80029f0 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7ff fd65 	bl	800247c <LL_ADC_REG_IsConversionOngoing>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d110      	bne.n	80029d8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	210c      	movs	r1, #12
 80029c2:	438a      	bics	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	4a56      	ldr	r2, [pc, #344]	; (8002b24 <HAL_ADC_IRQHandler+0x22c>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	2201      	movs	r2, #1
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	659a      	str	r2, [r3, #88]	; 0x58
 80029d6:	e00b      	b.n	80029f0 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	2220      	movs	r2, #32
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	2201      	movs	r2, #1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7fe ff18 	bl	8001828 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	220c      	movs	r2, #12
 80029fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	4013      	ands	r3, r2
 8002a06:	d012      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x136>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	2280      	movs	r2, #128	; 0x80
 8002a16:	0252      	lsls	r2, r2, #9
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f881 	bl	8002b28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2280      	movs	r2, #128	; 0x80
 8002a2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	d014      	beq.n	8002a62 <HAL_ADC_IRQHandler+0x16a>
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d00f      	beq.n	8002a62 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	0292      	lsls	r2, r2, #10
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 fc8a 	bl	800336c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2280      	movs	r2, #128	; 0x80
 8002a5e:	0052      	lsls	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d014      	beq.n	8002a96 <HAL_ADC_IRQHandler+0x19e>
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4013      	ands	r3, r2
 8002a74:	d00f      	beq.n	8002a96 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	02d2      	lsls	r2, r2, #11
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 fc78 	bl	800337c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d02b      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x1fe>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d027      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e008      	b.n	8002ac6 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff fc36 	bl	800232a <LL_ADC_REG_GetDMATransfer>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d110      	bne.n	8002aee <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	00d2      	lsls	r2, r2, #3
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	2202      	movs	r2, #2
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 f825 	bl	8002b38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2210      	movs	r2, #16
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	019b      	lsls	r3, r3, #6
 8002afc:	4013      	ands	r3, r2
 8002afe:	d00d      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x224>
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	4013      	ands	r3, r2
 8002b08:	d008      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fc45 	bl	800339c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	0192      	lsls	r2, r2, #6
 8002b1a:	601a      	str	r2, [r3, #0]
  }
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b006      	add	sp, #24
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	fffffefe 	.word	0xfffffefe

08002b28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b52:	2317      	movs	r3, #23
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2254      	movs	r2, #84	; 0x54
 8002b62:	5c9b      	ldrb	r3, [r3, r2]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x24>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e1c0      	b.n	8002eee <HAL_ADC_ConfigChannel+0x3a6>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2254      	movs	r2, #84	; 0x54
 8002b70:	2101      	movs	r1, #1
 8002b72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff fc7f 	bl	800247c <LL_ADC_REG_IsConversionOngoing>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d000      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x3c>
 8002b82:	e1a3      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d100      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x46>
 8002b8c:	e143      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d004      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b9e:	4ac1      	ldr	r2, [pc, #772]	; (8002ea4 <HAL_ADC_ConfigChannel+0x35c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d108      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0019      	movs	r1, r3
 8002bae:	0010      	movs	r0, r2
 8002bb0:	f7ff fb98 	bl	80022e4 <LL_ADC_REG_SetSequencerChAdd>
 8002bb4:	e0c9      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	211f      	movs	r1, #31
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	4099      	lsls	r1, r3
 8002bc6:	000b      	movs	r3, r1
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	035b      	lsls	r3, r3, #13
 8002bd4:	0b5b      	lsrs	r3, r3, #13
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x9c>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	221f      	movs	r2, #31
 8002be0:	4013      	ands	r3, r2
 8002be2:	e098      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	d000      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0xa8>
 8002bee:	e091      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x1cc>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d000      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0xb4>
 8002bfa:	e089      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x1c8>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d000      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0xc0>
 8002c06:	e081      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x1c4>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d000      	beq.n	8002c14 <HAL_ADC_ConfigChannel+0xcc>
 8002c12:	e079      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x1c0>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d000      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0xd8>
 8002c1e:	e071      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x1bc>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2220      	movs	r2, #32
 8002c26:	4013      	ands	r3, r2
 8002c28:	d000      	beq.n	8002c2c <HAL_ADC_ConfigChannel+0xe4>
 8002c2a:	e069      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x1b8>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2240      	movs	r2, #64	; 0x40
 8002c32:	4013      	ands	r3, r2
 8002c34:	d000      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0xf0>
 8002c36:	e061      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x1b4>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d000      	beq.n	8002c44 <HAL_ADC_ConfigChannel+0xfc>
 8002c42:	e059      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x1b0>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d151      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1ac>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d149      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1a8>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4013      	ands	r3, r2
 8002c66:	d141      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x1a4>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4013      	ands	r3, r2
 8002c72:	d139      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x1a0>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	015b      	lsls	r3, r3, #5
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d131      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x19c>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	019b      	lsls	r3, r3, #6
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d129      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x198>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	01db      	lsls	r3, r3, #7
 8002c94:	4013      	ands	r3, r2
 8002c96:	d121      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x194>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d119      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x190>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	4013      	ands	r3, r2
 8002cae:	d111      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x18c>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	029b      	lsls	r3, r3, #10
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d109      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x188>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	02db      	lsls	r3, r3, #11
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d001      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x184>
 8002cc8:	2312      	movs	r3, #18
 8002cca:	e024      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e022      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cd0:	2311      	movs	r3, #17
 8002cd2:	e020      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	e01e      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cd8:	230f      	movs	r3, #15
 8002cda:	e01c      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cdc:	230e      	movs	r3, #14
 8002cde:	e01a      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ce0:	230d      	movs	r3, #13
 8002ce2:	e018      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ce4:	230c      	movs	r3, #12
 8002ce6:	e016      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ce8:	230b      	movs	r3, #11
 8002cea:	e014      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cec:	230a      	movs	r3, #10
 8002cee:	e012      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cf0:	2309      	movs	r3, #9
 8002cf2:	e010      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	e00e      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	e00c      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cfc:	2306      	movs	r3, #6
 8002cfe:	e00a      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d00:	2305      	movs	r3, #5
 8002d02:	e008      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e006      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e004      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e002      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d14:	2300      	movs	r3, #0
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	6852      	ldr	r2, [r2, #4]
 8002d1a:	201f      	movs	r0, #31
 8002d1c:	4002      	ands	r2, r0
 8002d1e:	4093      	lsls	r3, r2
 8002d20:	000a      	movs	r2, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d808      	bhi.n	8002d4a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	001a      	movs	r2, r3
 8002d46:	f7ff faad 	bl	80022a4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	001a      	movs	r2, r3
 8002d58:	f7ff faf4 	bl	8002344 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db00      	blt.n	8002d66 <HAL_ADC_ConfigChannel+0x21e>
 8002d64:	e0bc      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d66:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff fa49 	bl	8002200 <LL_ADC_GetCommonPathInternalCh>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4d      	ldr	r2, [pc, #308]	; (8002eac <HAL_ADC_ConfigChannel+0x364>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d122      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d84:	d11d      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	0412      	lsls	r2, r2, #16
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	4a46      	ldr	r2, [pc, #280]	; (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002d90:	0019      	movs	r1, r3
 8002d92:	0010      	movs	r0, r2
 8002d94:	f7ff fa20 	bl	80021d8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d98:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <HAL_ADC_ConfigChannel+0x368>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4945      	ldr	r1, [pc, #276]	; (8002eb4 <HAL_ADC_ConfigChannel+0x36c>)
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7fd f9ba 	bl	8000118 <__udivsi3>
 8002da4:	0003      	movs	r3, r0
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	0013      	movs	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002db2:	e002      	b.n	8002dba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dc0:	e08e      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3c      	ldr	r2, [pc, #240]	; (8002eb8 <HAL_ADC_ConfigChannel+0x370>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10e      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x2a2>
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	045b      	lsls	r3, r3, #17
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d109      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	0452      	lsls	r2, r2, #17
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002de0:	0019      	movs	r1, r3
 8002de2:	0010      	movs	r0, r2
 8002de4:	f7ff f9f8 	bl	80021d8 <LL_ADC_SetCommonPathInternalCh>
 8002de8:	e07a      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a33      	ldr	r2, [pc, #204]	; (8002ebc <HAL_ADC_ConfigChannel+0x374>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d000      	beq.n	8002df6 <HAL_ADC_ConfigChannel+0x2ae>
 8002df4:	e074      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	03db      	lsls	r3, r3, #15
 8002dfc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dfe:	d000      	beq.n	8002e02 <HAL_ADC_ConfigChannel+0x2ba>
 8002e00:	e06e      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2280      	movs	r2, #128	; 0x80
 8002e06:	03d2      	lsls	r2, r2, #15
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	0010      	movs	r0, r2
 8002e10:	f7ff f9e2 	bl	80021d8 <LL_ADC_SetCommonPathInternalCh>
 8002e14:	e064      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_ADC_ConfigChannel+0x35c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d107      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0019      	movs	r1, r3
 8002e36:	0010      	movs	r0, r2
 8002e38:	f7ff fa65 	bl	8002306 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	da4d      	bge.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7ff f9da 	bl	8002200 <LL_ADC_GetCommonPathInternalCh>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a15      	ldr	r2, [pc, #84]	; (8002eac <HAL_ADC_ConfigChannel+0x364>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d108      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_ADC_ConfigChannel+0x378>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e62:	0019      	movs	r1, r3
 8002e64:	0010      	movs	r0, r2
 8002e66:	f7ff f9b7 	bl	80021d8 <LL_ADC_SetCommonPathInternalCh>
 8002e6a:	e039      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <HAL_ADC_ConfigChannel+0x370>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d108      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <HAL_ADC_ConfigChannel+0x37c>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e7e:	0019      	movs	r1, r3
 8002e80:	0010      	movs	r0, r2
 8002e82:	f7ff f9a9 	bl	80021d8 <LL_ADC_SetCommonPathInternalCh>
 8002e86:	e02b      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <HAL_ADC_ConfigChannel+0x374>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d126      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <HAL_ADC_ConfigChannel+0x380>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	0010      	movs	r0, r2
 8002e9e:	f7ff f99b 	bl	80021d8 <LL_ADC_SetCommonPathInternalCh>
 8002ea2:	e01d      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
 8002ea4:	80000004 	.word	0x80000004
 8002ea8:	40012708 	.word	0x40012708
 8002eac:	b0001000 	.word	0xb0001000
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	00030d40 	.word	0x00030d40
 8002eb8:	b8004000 	.word	0xb8004000
 8002ebc:	b4002000 	.word	0xb4002000
 8002ec0:	ff7fffff 	.word	0xff7fffff
 8002ec4:	feffffff 	.word	0xfeffffff
 8002ec8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ed8:	2317      	movs	r3, #23
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2254      	movs	r2, #84	; 0x54
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002ee8:	2317      	movs	r3, #23
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b006      	add	sp, #24
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)

08002ef8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff fa83 	bl	8002414 <LL_ADC_IsEnabled>
 8002f0e:	1e03      	subs	r3, r0, #0
 8002f10:	d000      	beq.n	8002f14 <ADC_Enable+0x1c>
 8002f12:	e069      	b.n	8002fe8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a36      	ldr	r2, [pc, #216]	; (8002ff4 <ADC_Enable+0xfc>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d00d      	beq.n	8002f3c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	2210      	movs	r2, #16
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	2201      	movs	r2, #1
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e056      	b.n	8002fea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff fa43 	bl	80023cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f46:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <ADC_Enable+0x100>)
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff f959 	bl	8002200 <LL_ADC_GetCommonPathInternalCh>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	4013      	ands	r3, r2
 8002f56:	d00f      	beq.n	8002f78 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <ADC_Enable+0x104>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4928      	ldr	r1, [pc, #160]	; (8003000 <ADC_Enable+0x108>)
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7fd f8da 	bl	8000118 <__udivsi3>
 8002f64:	0003      	movs	r3, r0
 8002f66:	3301      	adds	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f6a:	e002      	b.n	8002f72 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f9      	bne.n	8002f6c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7e5b      	ldrb	r3, [r3, #25]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d033      	beq.n	8002fe8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002f80:	f7ff f8c4 	bl	800210c <HAL_GetTick>
 8002f84:	0003      	movs	r3, r0
 8002f86:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f88:	e027      	b.n	8002fda <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff fa40 	bl	8002414 <LL_ADC_IsEnabled>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d104      	bne.n	8002fa2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff fa15 	bl	80023cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fa2:	f7ff f8b3 	bl	800210c <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d914      	bls.n	8002fda <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d00d      	beq.n	8002fda <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	2201      	movs	r2, #1
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e007      	b.n	8002fea <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d1d0      	bne.n	8002f8a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b004      	add	sp, #16
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	80000017 	.word	0x80000017
 8002ff8:	40012708 	.word	0x40012708
 8002ffc:	20000000 	.word	0x20000000
 8003000:	00030d40 	.word	0x00030d40

08003004 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff fa10 	bl	8002436 <LL_ADC_IsDisableOngoing>
 8003016:	0003      	movs	r3, r0
 8003018:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff f9f8 	bl	8002414 <LL_ADC_IsEnabled>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d046      	beq.n	80030b6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d143      	bne.n	80030b6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2205      	movs	r2, #5
 8003036:	4013      	ands	r3, r2
 8003038:	2b01      	cmp	r3, #1
 800303a:	d10d      	bne.n	8003058 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff f9d5 	bl	80023f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2203      	movs	r2, #3
 800304c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800304e:	f7ff f85d 	bl	800210c <HAL_GetTick>
 8003052:	0003      	movs	r3, r0
 8003054:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003056:	e028      	b.n	80030aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	2210      	movs	r2, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	2201      	movs	r2, #1
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e021      	b.n	80030b8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003074:	f7ff f84a 	bl	800210c <HAL_GetTick>
 8003078:	0002      	movs	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d913      	bls.n	80030aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2201      	movs	r2, #1
 800308a:	4013      	ands	r3, r2
 800308c:	d00d      	beq.n	80030aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	2210      	movs	r2, #16
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	2201      	movs	r2, #1
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e006      	b.n	80030b8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2201      	movs	r2, #1
 80030b2:	4013      	ands	r3, r2
 80030b4:	d1de      	bne.n	8003074 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}

080030c0 <LL_ADC_SetCalibrationFactor>:
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	22b4      	movs	r2, #180	; 0xb4
 80030ce:	589b      	ldr	r3, [r3, r2]
 80030d0:	227f      	movs	r2, #127	; 0x7f
 80030d2:	4393      	bics	r3, r2
 80030d4:	001a      	movs	r2, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	21b4      	movs	r1, #180	; 0xb4
 80030de:	505a      	str	r2, [r3, r1]
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <LL_ADC_GetCalibrationFactor>:
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	22b4      	movs	r2, #180	; 0xb4
 80030f4:	589b      	ldr	r3, [r3, r2]
 80030f6:	227f      	movs	r2, #127	; 0x7f
 80030f8:	4013      	ands	r3, r2
}
 80030fa:	0018      	movs	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b002      	add	sp, #8
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <LL_ADC_Enable>:
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <LL_ADC_Enable+0x20>)
 8003112:	4013      	ands	r3, r2
 8003114:	2201      	movs	r2, #1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}
 8003124:	7fffffe8 	.word	0x7fffffe8

08003128 <LL_ADC_Disable>:
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <LL_ADC_Disable+0x20>)
 8003136:	4013      	ands	r3, r2
 8003138:	2202      	movs	r2, #2
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	609a      	str	r2, [r3, #8]
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b002      	add	sp, #8
 8003146:	bd80      	pop	{r7, pc}
 8003148:	7fffffe8 	.word	0x7fffffe8

0800314c <LL_ADC_IsEnabled>:
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2201      	movs	r2, #1
 800315a:	4013      	ands	r3, r2
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <LL_ADC_IsEnabled+0x18>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <LL_ADC_IsEnabled+0x1a>
 8003164:	2300      	movs	r3, #0
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b002      	add	sp, #8
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <LL_ADC_StartCalibration>:
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a05      	ldr	r2, [pc, #20]	; (8003194 <LL_ADC_StartCalibration+0x24>)
 800317e:	4013      	ands	r3, r2
 8003180:	2280      	movs	r2, #128	; 0x80
 8003182:	0612      	lsls	r2, r2, #24
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	609a      	str	r2, [r3, #8]
}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b002      	add	sp, #8
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	7fffffe8 	.word	0x7fffffe8

08003198 <LL_ADC_IsCalibrationOnGoing>:
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	0fdb      	lsrs	r3, r3, #31
 80031a6:	07da      	lsls	r2, r3, #31
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	061b      	lsls	r3, r3, #24
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d101      	bne.n	80031b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b002      	add	sp, #8
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2254      	movs	r2, #84	; 0x54
 80031d4:	5c9b      	ldrb	r3, [r3, r2]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_ADCEx_Calibration_Start+0x1e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e0ba      	b.n	8003354 <HAL_ADCEx_Calibration_Start+0x194>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2254      	movs	r2, #84	; 0x54
 80031e2:	2101      	movs	r1, #1
 80031e4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031e6:	2317      	movs	r3, #23
 80031e8:	18fc      	adds	r4, r7, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff ff09 	bl	8003004 <ADC_Disable>
 80031f2:	0003      	movs	r3, r0
 80031f4:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7ff ffa6 	bl	800314c <LL_ADC_IsEnabled>
 8003200:	1e03      	subs	r3, r0, #0
 8003202:	d000      	beq.n	8003206 <HAL_ADCEx_Calibration_Start+0x46>
 8003204:	e099      	b.n	800333a <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	4a54      	ldr	r2, [pc, #336]	; (800335c <HAL_ADCEx_Calibration_Start+0x19c>)
 800320c:	4013      	ands	r3, r2
 800320e:	2202      	movs	r2, #2
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a50      	ldr	r2, [pc, #320]	; (8003360 <HAL_ADCEx_Calibration_Start+0x1a0>)
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	494d      	ldr	r1, [pc, #308]	; (8003364 <HAL_ADCEx_Calibration_Start+0x1a4>)
 800322e:	400a      	ands	r2, r1
 8003230:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e02d      	b.n	8003294 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0018      	movs	r0, r3
 800323e:	f7ff ff97 	bl	8003170 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003242:	e014      	b.n	800326e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	3301      	adds	r3, #1
 8003248:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4a46      	ldr	r2, [pc, #280]	; (8003368 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d90d      	bls.n	800326e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	2212      	movs	r2, #18
 8003258:	4393      	bics	r3, r2
 800325a:	2210      	movs	r2, #16
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2254      	movs	r2, #84	; 0x54
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e072      	b.n	8003354 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff ff90 	bl	8003198 <LL_ADC_IsCalibrationOnGoing>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d1e3      	bne.n	8003244 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff ff31 	bl	80030e8 <LL_ADC_GetCalibrationFactor>
 8003286:	0002      	movs	r2, r0
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	189b      	adds	r3, r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3301      	adds	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b07      	cmp	r3, #7
 8003298:	d9ce      	bls.n	8003238 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800329a:	69f9      	ldr	r1, [r7, #28]
 800329c:	69b8      	ldr	r0, [r7, #24]
 800329e:	f7fc ff3b 	bl	8000118 <__udivsi3>
 80032a2:	0003      	movs	r3, r0
 80032a4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7ff ff2a 	bl	8003104 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	0011      	movs	r1, r2
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff ff01 	bl	80030c0 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff ff30 	bl	8003128 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032c8:	f7fe ff20 	bl	800210c <HAL_GetTick>
 80032cc:	0003      	movs	r3, r0
 80032ce:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032d0:	e01b      	b.n	800330a <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032d2:	f7fe ff1b 	bl	800210c <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d914      	bls.n	800330a <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7ff ff31 	bl	800314c <LL_ADC_IsEnabled>
 80032ea:	1e03      	subs	r3, r0, #0
 80032ec:	d00d      	beq.n	800330a <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	2210      	movs	r2, #16
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2201      	movs	r2, #1
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e024      	b.n	8003354 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0018      	movs	r0, r3
 8003310:	f7ff ff1c 	bl	800314c <LL_ADC_IsEnabled>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d1dc      	bne.n	80032d2 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68d9      	ldr	r1, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	430a      	orrs	r2, r1
 8003326:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	2203      	movs	r2, #3
 800332e:	4393      	bics	r3, r2
 8003330:	2201      	movs	r2, #1
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	659a      	str	r2, [r3, #88]	; 0x58
 8003338:	e005      	b.n	8003346 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	2210      	movs	r2, #16
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2254      	movs	r2, #84	; 0x54
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800334e:	2317      	movs	r3, #23
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	781b      	ldrb	r3, [r3, #0]
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b009      	add	sp, #36	; 0x24
 800335a:	bd90      	pop	{r4, r7, pc}
 800335c:	fffffefd 	.word	0xfffffefd
 8003360:	00008003 	.word	0x00008003
 8003364:	ffff7ffc 	.word	0xffff7ffc
 8003368:	0002f1ff 	.word	0x0002f1ff

0800336c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b002      	add	sp, #8
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}

080033ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	0002      	movs	r2, r0
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033b8:	1dfb      	adds	r3, r7, #7
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b7f      	cmp	r3, #127	; 0x7f
 80033be:	d809      	bhi.n	80033d4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	001a      	movs	r2, r3
 80033c6:	231f      	movs	r3, #31
 80033c8:	401a      	ands	r2, r3
 80033ca:	4b04      	ldr	r3, [pc, #16]	; (80033dc <__NVIC_EnableIRQ+0x30>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	4091      	lsls	r1, r2
 80033d0:	000a      	movs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	0002      	movs	r2, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b7f      	cmp	r3, #127	; 0x7f
 80033f4:	d828      	bhi.n	8003448 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f6:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <__NVIC_SetPriority+0xd4>)
 80033f8:	1dfb      	adds	r3, r7, #7
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	089b      	lsrs	r3, r3, #2
 8003400:	33c0      	adds	r3, #192	; 0xc0
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	589b      	ldr	r3, [r3, r2]
 8003406:	1dfa      	adds	r2, r7, #7
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	0011      	movs	r1, r2
 800340c:	2203      	movs	r2, #3
 800340e:	400a      	ands	r2, r1
 8003410:	00d2      	lsls	r2, r2, #3
 8003412:	21ff      	movs	r1, #255	; 0xff
 8003414:	4091      	lsls	r1, r2
 8003416:	000a      	movs	r2, r1
 8003418:	43d2      	mvns	r2, r2
 800341a:	401a      	ands	r2, r3
 800341c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	019b      	lsls	r3, r3, #6
 8003422:	22ff      	movs	r2, #255	; 0xff
 8003424:	401a      	ands	r2, r3
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	0018      	movs	r0, r3
 800342c:	2303      	movs	r3, #3
 800342e:	4003      	ands	r3, r0
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003434:	481f      	ldr	r0, [pc, #124]	; (80034b4 <__NVIC_SetPriority+0xd4>)
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	b25b      	sxtb	r3, r3
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	430a      	orrs	r2, r1
 8003440:	33c0      	adds	r3, #192	; 0xc0
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003446:	e031      	b.n	80034ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003448:	4a1b      	ldr	r2, [pc, #108]	; (80034b8 <__NVIC_SetPriority+0xd8>)
 800344a:	1dfb      	adds	r3, r7, #7
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	0019      	movs	r1, r3
 8003450:	230f      	movs	r3, #15
 8003452:	400b      	ands	r3, r1
 8003454:	3b08      	subs	r3, #8
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3306      	adds	r3, #6
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	18d3      	adds	r3, r2, r3
 800345e:	3304      	adds	r3, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1dfa      	adds	r2, r7, #7
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	0011      	movs	r1, r2
 8003468:	2203      	movs	r2, #3
 800346a:	400a      	ands	r2, r1
 800346c:	00d2      	lsls	r2, r2, #3
 800346e:	21ff      	movs	r1, #255	; 0xff
 8003470:	4091      	lsls	r1, r2
 8003472:	000a      	movs	r2, r1
 8003474:	43d2      	mvns	r2, r2
 8003476:	401a      	ands	r2, r3
 8003478:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	019b      	lsls	r3, r3, #6
 800347e:	22ff      	movs	r2, #255	; 0xff
 8003480:	401a      	ands	r2, r3
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	0018      	movs	r0, r3
 8003488:	2303      	movs	r3, #3
 800348a:	4003      	ands	r3, r0
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003490:	4809      	ldr	r0, [pc, #36]	; (80034b8 <__NVIC_SetPriority+0xd8>)
 8003492:	1dfb      	adds	r3, r7, #7
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	001c      	movs	r4, r3
 8003498:	230f      	movs	r3, #15
 800349a:	4023      	ands	r3, r4
 800349c:	3b08      	subs	r3, #8
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	430a      	orrs	r2, r1
 80034a2:	3306      	adds	r3, #6
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	18c3      	adds	r3, r0, r3
 80034a8:	3304      	adds	r3, #4
 80034aa:	601a      	str	r2, [r3, #0]
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b003      	add	sp, #12
 80034b2:	bd90      	pop	{r4, r7, pc}
 80034b4:	e000e100 	.word	0xe000e100
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1e5a      	subs	r2, r3, #1
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	045b      	lsls	r3, r3, #17
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d301      	bcc.n	80034d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d0:	2301      	movs	r3, #1
 80034d2:	e010      	b.n	80034f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <SysTick_Config+0x44>)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	3a01      	subs	r2, #1
 80034da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034dc:	2301      	movs	r3, #1
 80034de:	425b      	negs	r3, r3
 80034e0:	2103      	movs	r1, #3
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff ff7c 	bl	80033e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <SysTick_Config+0x44>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ee:	4b04      	ldr	r3, [pc, #16]	; (8003500 <SysTick_Config+0x44>)
 80034f0:	2207      	movs	r2, #7
 80034f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b002      	add	sp, #8
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	e000e010 	.word	0xe000e010

08003504 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	210f      	movs	r1, #15
 8003510:	187b      	adds	r3, r7, r1
 8003512:	1c02      	adds	r2, r0, #0
 8003514:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	187b      	adds	r3, r7, r1
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	b25b      	sxtb	r3, r3
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff ff5d 	bl	80033e0 <__NVIC_SetPriority>
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b004      	add	sp, #16
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	0002      	movs	r2, r0
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	b25b      	sxtb	r3, r3
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff ff33 	bl	80033ac <__NVIC_EnableIRQ>
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b002      	add	sp, #8
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f7ff ffaf 	bl	80034bc <SysTick_Config>
 800355e:	0003      	movs	r3, r0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003576:	e14d      	b.n	8003814 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2101      	movs	r1, #1
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4091      	lsls	r1, r2
 8003582:	000a      	movs	r2, r1
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d100      	bne.n	8003590 <HAL_GPIO_Init+0x28>
 800358e:	e13e      	b.n	800380e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2203      	movs	r2, #3
 8003596:	4013      	ands	r3, r2
 8003598:	2b01      	cmp	r3, #1
 800359a:	d005      	beq.n	80035a8 <HAL_GPIO_Init+0x40>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2203      	movs	r2, #3
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d130      	bne.n	800360a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2203      	movs	r2, #3
 80035b4:	409a      	lsls	r2, r3
 80035b6:	0013      	movs	r3, r2
 80035b8:	43da      	mvns	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	409a      	lsls	r2, r3
 80035ca:	0013      	movs	r3, r2
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035de:	2201      	movs	r2, #1
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	43da      	mvns	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	2201      	movs	r2, #1
 80035f6:	401a      	ands	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2203      	movs	r2, #3
 8003610:	4013      	ands	r3, r2
 8003612:	2b03      	cmp	r3, #3
 8003614:	d017      	beq.n	8003646 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	409a      	lsls	r2, r3
 8003624:	0013      	movs	r3, r2
 8003626:	43da      	mvns	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2203      	movs	r2, #3
 800364c:	4013      	ands	r3, r2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d123      	bne.n	800369a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	08da      	lsrs	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3208      	adds	r2, #8
 800365a:	0092      	lsls	r2, r2, #2
 800365c:	58d3      	ldr	r3, [r2, r3]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2207      	movs	r2, #7
 8003664:	4013      	ands	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	43da      	mvns	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2107      	movs	r1, #7
 800367e:	400b      	ands	r3, r1
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	409a      	lsls	r2, r3
 8003684:	0013      	movs	r3, r2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	08da      	lsrs	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3208      	adds	r2, #8
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	6939      	ldr	r1, [r7, #16]
 8003698:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	409a      	lsls	r2, r3
 80036a8:	0013      	movs	r3, r2
 80036aa:	43da      	mvns	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2203      	movs	r2, #3
 80036b8:	401a      	ands	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	409a      	lsls	r2, r3
 80036c0:	0013      	movs	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	23c0      	movs	r3, #192	; 0xc0
 80036d4:	029b      	lsls	r3, r3, #10
 80036d6:	4013      	ands	r3, r2
 80036d8:	d100      	bne.n	80036dc <HAL_GPIO_Init+0x174>
 80036da:	e098      	b.n	800380e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80036dc:	4a53      	ldr	r2, [pc, #332]	; (800382c <HAL_GPIO_Init+0x2c4>)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	3318      	adds	r3, #24
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	589b      	ldr	r3, [r3, r2]
 80036e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2203      	movs	r2, #3
 80036ee:	4013      	ands	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	220f      	movs	r2, #15
 80036f4:	409a      	lsls	r2, r3
 80036f6:	0013      	movs	r3, r2
 80036f8:	43da      	mvns	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	23a0      	movs	r3, #160	; 0xa0
 8003704:	05db      	lsls	r3, r3, #23
 8003706:	429a      	cmp	r2, r3
 8003708:	d019      	beq.n	800373e <HAL_GPIO_Init+0x1d6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a48      	ldr	r2, [pc, #288]	; (8003830 <HAL_GPIO_Init+0x2c8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_GPIO_Init+0x1d2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a47      	ldr	r2, [pc, #284]	; (8003834 <HAL_GPIO_Init+0x2cc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00d      	beq.n	8003736 <HAL_GPIO_Init+0x1ce>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a46      	ldr	r2, [pc, #280]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <HAL_GPIO_Init+0x1ca>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a45      	ldr	r2, [pc, #276]	; (800383c <HAL_GPIO_Init+0x2d4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d101      	bne.n	800372e <HAL_GPIO_Init+0x1c6>
 800372a:	2304      	movs	r3, #4
 800372c:	e008      	b.n	8003740 <HAL_GPIO_Init+0x1d8>
 800372e:	2305      	movs	r3, #5
 8003730:	e006      	b.n	8003740 <HAL_GPIO_Init+0x1d8>
 8003732:	2303      	movs	r3, #3
 8003734:	e004      	b.n	8003740 <HAL_GPIO_Init+0x1d8>
 8003736:	2302      	movs	r3, #2
 8003738:	e002      	b.n	8003740 <HAL_GPIO_Init+0x1d8>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x1d8>
 800373e:	2300      	movs	r3, #0
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	2103      	movs	r1, #3
 8003744:	400a      	ands	r2, r1
 8003746:	00d2      	lsls	r2, r2, #3
 8003748:	4093      	lsls	r3, r2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003750:	4936      	ldr	r1, [pc, #216]	; (800382c <HAL_GPIO_Init+0x2c4>)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3318      	adds	r3, #24
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800375e:	4b33      	ldr	r3, [pc, #204]	; (800382c <HAL_GPIO_Init+0x2c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43da      	mvns	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	035b      	lsls	r3, r3, #13
 8003776:	4013      	ands	r3, r2
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_GPIO_Init+0x2c4>)
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003788:	4b28      	ldr	r3, [pc, #160]	; (800382c <HAL_GPIO_Init+0x2c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43da      	mvns	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	039b      	lsls	r3, r3, #14
 80037a0:	4013      	ands	r3, r2
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <HAL_GPIO_Init+0x2c4>)
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_GPIO_Init+0x2c4>)
 80037b4:	2384      	movs	r3, #132	; 0x84
 80037b6:	58d3      	ldr	r3, [r2, r3]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43da      	mvns	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	029b      	lsls	r3, r3, #10
 80037cc:	4013      	ands	r3, r2
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037d8:	4914      	ldr	r1, [pc, #80]	; (800382c <HAL_GPIO_Init+0x2c4>)
 80037da:	2284      	movs	r2, #132	; 0x84
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80037e0:	4a12      	ldr	r2, [pc, #72]	; (800382c <HAL_GPIO_Init+0x2c4>)
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	58d3      	ldr	r3, [r2, r3]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	025b      	lsls	r3, r3, #9
 80037fa:	4013      	ands	r3, r2
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003806:	4909      	ldr	r1, [pc, #36]	; (800382c <HAL_GPIO_Init+0x2c4>)
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	3301      	adds	r3, #1
 8003812:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	40da      	lsrs	r2, r3
 800381c:	1e13      	subs	r3, r2, #0
 800381e:	d000      	beq.n	8003822 <HAL_GPIO_Init+0x2ba>
 8003820:	e6aa      	b.n	8003578 <HAL_GPIO_Init+0x10>
  }
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b006      	add	sp, #24
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021800 	.word	0x40021800
 8003830:	50000400 	.word	0x50000400
 8003834:	50000800 	.word	0x50000800
 8003838:	50000c00 	.word	0x50000c00
 800383c:	50001000 	.word	0x50001000

08003840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	0008      	movs	r0, r1
 800384a:	0011      	movs	r1, r2
 800384c:	1cbb      	adds	r3, r7, #2
 800384e:	1c02      	adds	r2, r0, #0
 8003850:	801a      	strh	r2, [r3, #0]
 8003852:	1c7b      	adds	r3, r7, #1
 8003854:	1c0a      	adds	r2, r1, #0
 8003856:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003858:	1c7b      	adds	r3, r7, #1
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003860:	1cbb      	adds	r3, r7, #2
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003868:	e003      	b.n	8003872 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800386a:	1cbb      	adds	r3, r7, #2
 800386c:	881a      	ldrh	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800388a:	4013      	ands	r3, r2
 800388c:	0019      	movs	r1, r3
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	430a      	orrs	r2, r1
 8003894:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	429a      	cmp	r2, r3
 800389e:	d11f      	bne.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	0013      	movs	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	189b      	adds	r3, r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4912      	ldr	r1, [pc, #72]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7fc fc32 	bl	8000118 <__udivsi3>
 80038b4:	0003      	movs	r3, r0
 80038b6:	3301      	adds	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ba:	e008      	b.n	80038ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e001      	b.n	80038ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e009      	b.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	401a      	ands	r2, r3
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	429a      	cmp	r2, r3
 80038de:	d0ed      	beq.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b004      	add	sp, #16
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	40007000 	.word	0x40007000
 80038f0:	fffff9ff 	.word	0xfffff9ff
 80038f4:	20000000 	.word	0x20000000
 80038f8:	000f4240 	.word	0x000f4240

080038fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f000 fb50 	bl	8003fb0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2201      	movs	r2, #1
 8003916:	4013      	ands	r3, r2
 8003918:	d100      	bne.n	800391c <HAL_RCC_OscConfig+0x20>
 800391a:	e07c      	b.n	8003a16 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391c:	4bc3      	ldr	r3, [pc, #780]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2238      	movs	r2, #56	; 0x38
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003926:	4bc1      	ldr	r3, [pc, #772]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2203      	movs	r2, #3
 800392c:	4013      	ands	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b10      	cmp	r3, #16
 8003934:	d102      	bne.n	800393c <HAL_RCC_OscConfig+0x40>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d002      	beq.n	8003942 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b08      	cmp	r3, #8
 8003940:	d10b      	bne.n	800395a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003942:	4bba      	ldr	r3, [pc, #744]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	4013      	ands	r3, r2
 800394c:	d062      	beq.n	8003a14 <HAL_RCC_OscConfig+0x118>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d15e      	bne.n	8003a14 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e32a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	025b      	lsls	r3, r3, #9
 8003962:	429a      	cmp	r2, r3
 8003964:	d107      	bne.n	8003976 <HAL_RCC_OscConfig+0x7a>
 8003966:	4bb1      	ldr	r3, [pc, #708]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4bb0      	ldr	r3, [pc, #704]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	0249      	lsls	r1, r1, #9
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e020      	b.n	80039b8 <HAL_RCC_OscConfig+0xbc>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	23a0      	movs	r3, #160	; 0xa0
 800397c:	02db      	lsls	r3, r3, #11
 800397e:	429a      	cmp	r2, r3
 8003980:	d10e      	bne.n	80039a0 <HAL_RCC_OscConfig+0xa4>
 8003982:	4baa      	ldr	r3, [pc, #680]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4ba9      	ldr	r3, [pc, #676]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003988:	2180      	movs	r1, #128	; 0x80
 800398a:	02c9      	lsls	r1, r1, #11
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	4ba6      	ldr	r3, [pc, #664]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4ba5      	ldr	r3, [pc, #660]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003996:	2180      	movs	r1, #128	; 0x80
 8003998:	0249      	lsls	r1, r1, #9
 800399a:	430a      	orrs	r2, r1
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xbc>
 80039a0:	4ba2      	ldr	r3, [pc, #648]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4ba1      	ldr	r3, [pc, #644]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 80039a6:	49a2      	ldr	r1, [pc, #648]	; (8003c30 <HAL_RCC_OscConfig+0x334>)
 80039a8:	400a      	ands	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	4b9f      	ldr	r3, [pc, #636]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b9e      	ldr	r3, [pc, #632]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 80039b2:	49a0      	ldr	r1, [pc, #640]	; (8003c34 <HAL_RCC_OscConfig+0x338>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d014      	beq.n	80039ea <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fe fba4 	bl	800210c <HAL_GetTick>
 80039c4:	0003      	movs	r3, r0
 80039c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ca:	f7fe fb9f 	bl	800210c <HAL_GetTick>
 80039ce:	0002      	movs	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e2e9      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039dc:	4b93      	ldr	r3, [pc, #588]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	029b      	lsls	r3, r3, #10
 80039e4:	4013      	ands	r3, r2
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0xce>
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fe fb8f 	bl	800210c <HAL_GetTick>
 80039ee:	0003      	movs	r3, r0
 80039f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fe fb8a 	bl	800210c <HAL_GetTick>
 80039f8:	0002      	movs	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e2d4      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a06:	4b89      	ldr	r3, [pc, #548]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	029b      	lsls	r3, r3, #10
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0xf8>
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <HAL_RCC_OscConfig+0x126>
 8003a20:	e099      	b.n	8003b56 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a22:	4b82      	ldr	r3, [pc, #520]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2238      	movs	r2, #56	; 0x38
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a2c:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2203      	movs	r2, #3
 8003a32:	4013      	ands	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d102      	bne.n	8003a42 <HAL_RCC_OscConfig+0x146>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d002      	beq.n	8003a48 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d135      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a48:	4b78      	ldr	r3, [pc, #480]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4013      	ands	r3, r2
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_OscConfig+0x164>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e2a7      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b72      	ldr	r3, [pc, #456]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a74      	ldr	r2, [pc, #464]	; (8003c38 <HAL_RCC_OscConfig+0x33c>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	0019      	movs	r1, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	021a      	lsls	r2, r3, #8
 8003a70:	4b6e      	ldr	r3, [pc, #440]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d112      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a7c:	4b6b      	ldr	r3, [pc, #428]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6e      	ldr	r2, [pc, #440]	; (8003c3c <HAL_RCC_OscConfig+0x340>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	0019      	movs	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a90:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0adb      	lsrs	r3, r3, #11
 8003a96:	2207      	movs	r2, #7
 8003a98:	4013      	ands	r3, r2
 8003a9a:	4a69      	ldr	r2, [pc, #420]	; (8003c40 <HAL_RCC_OscConfig+0x344>)
 8003a9c:	40da      	lsrs	r2, r3
 8003a9e:	4b69      	ldr	r3, [pc, #420]	; (8003c44 <HAL_RCC_OscConfig+0x348>)
 8003aa0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003aa2:	4b69      	ldr	r3, [pc, #420]	; (8003c48 <HAL_RCC_OscConfig+0x34c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7fe fad4 	bl	8002054 <HAL_InitTick>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d051      	beq.n	8003b54 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e27d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d030      	beq.n	8003b1e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003abc:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5e      	ldr	r2, [pc, #376]	; (8003c3c <HAL_RCC_OscConfig+0x340>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b56      	ldr	r3, [pc, #344]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	0049      	lsls	r1, r1, #1
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe fb15 	bl	800210c <HAL_GetTick>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fb10 	bl	800210c <HAL_GetTick>
 8003aec:	0002      	movs	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e25a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003afa:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4013      	ands	r3, r2
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b49      	ldr	r3, [pc, #292]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4a4b      	ldr	r2, [pc, #300]	; (8003c38 <HAL_RCC_OscConfig+0x33c>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	0019      	movs	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	021a      	lsls	r2, r3, #8
 8003b16:	4b45      	ldr	r3, [pc, #276]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	e01b      	b.n	8003b56 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b1e:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003b24:	4949      	ldr	r1, [pc, #292]	; (8003c4c <HAL_RCC_OscConfig+0x350>)
 8003b26:	400a      	ands	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe faef 	bl	800210c <HAL_GetTick>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fe faea 	bl	800210c <HAL_GetTick>
 8003b38:	0002      	movs	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e234      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b46:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x238>
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b54:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d047      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b60:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2238      	movs	r2, #56	; 0x38
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b18      	cmp	r3, #24
 8003b6a:	d10a      	bne.n	8003b82 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003b6c:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	2202      	movs	r2, #2
 8003b72:	4013      	ands	r3, r2
 8003b74:	d03c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x2f4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d138      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e216      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b8a:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003b8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b8e:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003b90:	2101      	movs	r1, #1
 8003b92:	430a      	orrs	r2, r1
 8003b94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fe fab9 	bl	800210c <HAL_GetTick>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fe fab4 	bl	800210c <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e1fe      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d0f1      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2a4>
 8003bbc:	e018      	b.n	8003bf0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003bc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	438a      	bics	r2, r1
 8003bc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fe fa9f 	bl	800210c <HAL_GetTick>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fe fa9a 	bl	800210c <HAL_GetTick>
 8003bd8:	0002      	movs	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e1e4      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	2202      	movs	r2, #2
 8003bec:	4013      	ands	r3, r2
 8003bee:	d1f1      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d100      	bne.n	8003bfc <HAL_RCC_OscConfig+0x300>
 8003bfa:	e0c7      	b.n	8003d8c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfc:	231f      	movs	r3, #31
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2238      	movs	r2, #56	; 0x38
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d11f      	bne.n	8003c50 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCC_OscConfig+0x330>)
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	2202      	movs	r2, #2
 8003c16:	4013      	ands	r3, r2
 8003c18:	d100      	bne.n	8003c1c <HAL_RCC_OscConfig+0x320>
 8003c1a:	e0b7      	b.n	8003d8c <HAL_RCC_OscConfig+0x490>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d000      	beq.n	8003c26 <HAL_RCC_OscConfig+0x32a>
 8003c24:	e0b2      	b.n	8003d8c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e1c2      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	fffeffff 	.word	0xfffeffff
 8003c34:	fffbffff 	.word	0xfffbffff
 8003c38:	ffff80ff 	.word	0xffff80ff
 8003c3c:	ffffc7ff 	.word	0xffffc7ff
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	20000000 	.word	0x20000000
 8003c48:	20000004 	.word	0x20000004
 8003c4c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c50:	4bb5      	ldr	r3, [pc, #724]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	055b      	lsls	r3, r3, #21
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_OscConfig+0x364>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x366>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d011      	beq.n	8003c8a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c66:	4bb0      	ldr	r3, [pc, #704]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c6a:	4baf      	ldr	r3, [pc, #700]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	0549      	lsls	r1, r1, #21
 8003c70:	430a      	orrs	r2, r1
 8003c72:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c74:	4bac      	ldr	r3, [pc, #688]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	055b      	lsls	r3, r3, #21
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003c82:	231f      	movs	r3, #31
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8a:	4ba8      	ldr	r3, [pc, #672]	; (8003f2c <HAL_RCC_OscConfig+0x630>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4013      	ands	r3, r2
 8003c94:	d11a      	bne.n	8003ccc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c96:	4ba5      	ldr	r3, [pc, #660]	; (8003f2c <HAL_RCC_OscConfig+0x630>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4ba4      	ldr	r3, [pc, #656]	; (8003f2c <HAL_RCC_OscConfig+0x630>)
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	0049      	lsls	r1, r1, #1
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fa32 	bl	800210c <HAL_GetTick>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cae:	f7fe fa2d 	bl	800210c <HAL_GetTick>
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e177      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc0:	4b9a      	ldr	r3, [pc, #616]	; (8003f2c <HAL_RCC_OscConfig+0x630>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x3e6>
 8003cd4:	4b94      	ldr	r3, [pc, #592]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cd8:	4b93      	ldr	r3, [pc, #588]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ce0:	e01c      	b.n	8003d1c <HAL_RCC_OscConfig+0x420>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x408>
 8003cea:	4b8f      	ldr	r3, [pc, #572]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003cec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cee:	4b8e      	ldr	r3, [pc, #568]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cf6:	4b8c      	ldr	r3, [pc, #560]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003cf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cfa:	4b8b      	ldr	r3, [pc, #556]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d02:	e00b      	b.n	8003d1c <HAL_RCC_OscConfig+0x420>
 8003d04:	4b88      	ldr	r3, [pc, #544]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003d06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d08:	4b87      	ldr	r3, [pc, #540]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	438a      	bics	r2, r1
 8003d0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d10:	4b85      	ldr	r3, [pc, #532]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003d12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d14:	4b84      	ldr	r3, [pc, #528]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003d16:	2104      	movs	r1, #4
 8003d18:	438a      	bics	r2, r1
 8003d1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d014      	beq.n	8003d4e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe f9f2 	bl	800210c <HAL_GetTick>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2c:	e009      	b.n	8003d42 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fe f9ed 	bl	800210c <HAL_GetTick>
 8003d32:	0002      	movs	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	4a7d      	ldr	r2, [pc, #500]	; (8003f30 <HAL_RCC_OscConfig+0x634>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e136      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d42:	4b79      	ldr	r3, [pc, #484]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	2202      	movs	r2, #2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x432>
 8003d4c:	e013      	b.n	8003d76 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fe f9dd 	bl	800210c <HAL_GetTick>
 8003d52:	0003      	movs	r3, r0
 8003d54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d56:	e009      	b.n	8003d6c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fe f9d8 	bl	800210c <HAL_GetTick>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	4a73      	ldr	r2, [pc, #460]	; (8003f30 <HAL_RCC_OscConfig+0x634>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e121      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d6c:	4b6e      	ldr	r3, [pc, #440]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	2202      	movs	r2, #2
 8003d72:	4013      	ands	r3, r2
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003d76:	231f      	movs	r3, #31
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003d80:	4b69      	ldr	r3, [pc, #420]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d84:	4b68      	ldr	r3, [pc, #416]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003d86:	496b      	ldr	r1, [pc, #428]	; (8003f34 <HAL_RCC_OscConfig+0x638>)
 8003d88:	400a      	ands	r2, r1
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2220      	movs	r2, #32
 8003d92:	4013      	ands	r3, r2
 8003d94:	d039      	beq.n	8003e0a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d01b      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d9e:	4b62      	ldr	r3, [pc, #392]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b61      	ldr	r3, [pc, #388]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	03c9      	lsls	r1, r1, #15
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fe f9ae 	bl	800210c <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003db6:	f7fe f9a9 	bl	800210c <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e0f3      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003dc8:	4b57      	ldr	r3, [pc, #348]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x4ba>
 8003dd4:	e019      	b.n	8003e0a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dd6:	4b54      	ldr	r3, [pc, #336]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4b53      	ldr	r3, [pc, #332]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003ddc:	4956      	ldr	r1, [pc, #344]	; (8003f38 <HAL_RCC_OscConfig+0x63c>)
 8003dde:	400a      	ands	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fe f993 	bl	800210c <HAL_GetTick>
 8003de6:	0003      	movs	r3, r0
 8003de8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dec:	f7fe f98e 	bl	800210c <HAL_GetTick>
 8003df0:	0002      	movs	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0d8      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	4013      	ands	r3, r2
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d100      	bne.n	8003e14 <HAL_RCC_OscConfig+0x518>
 8003e12:	e0cc      	b.n	8003fae <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e14:	4b44      	ldr	r3, [pc, #272]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2238      	movs	r2, #56	; 0x38
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d100      	bne.n	8003e22 <HAL_RCC_OscConfig+0x526>
 8003e20:	e07b      	b.n	8003f1a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d156      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2a:	4b3f      	ldr	r3, [pc, #252]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b3e      	ldr	r3, [pc, #248]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003e30:	4942      	ldr	r1, [pc, #264]	; (8003f3c <HAL_RCC_OscConfig+0x640>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fe f969 	bl	800210c <HAL_GetTick>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fe f964 	bl	800210c <HAL_GetTick>
 8003e44:	0002      	movs	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e0ae      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e52:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	049b      	lsls	r3, r3, #18
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e5e:	4b32      	ldr	r3, [pc, #200]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4a37      	ldr	r2, [pc, #220]	; (8003f40 <HAL_RCC_OscConfig+0x644>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	0449      	lsls	r1, r1, #17
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003ea0:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	0549      	lsls	r1, r1, #21
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fe f92d 	bl	800210c <HAL_GetTick>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fe f928 	bl	800210c <HAL_GetTick>
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e072      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	049b      	lsls	r3, r3, #18
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x5bc>
 8003ed6:	e06a      	b.n	8003fae <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003ede:	4917      	ldr	r1, [pc, #92]	; (8003f3c <HAL_RCC_OscConfig+0x640>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe f912 	bl	800210c <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fe f90d 	bl	800210c <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e057      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	049b      	lsls	r3, r3, #18
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003f12:	490c      	ldr	r1, [pc, #48]	; (8003f44 <HAL_RCC_OscConfig+0x648>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	e049      	b.n	8003fae <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d112      	bne.n	8003f48 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e044      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	00001388 	.word	0x00001388
 8003f34:	efffffff 	.word	0xefffffff
 8003f38:	ffbfffff 	.word	0xffbfffff
 8003f3c:	feffffff 	.word	0xfeffffff
 8003f40:	11c1808c 	.word	0x11c1808c
 8003f44:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_RCC_OscConfig+0x6bc>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2203      	movs	r2, #3
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d126      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2270      	movs	r2, #112	; 0x70
 8003f60:	401a      	ands	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d11f      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	23fe      	movs	r3, #254	; 0xfe
 8003f6e:	01db      	lsls	r3, r3, #7
 8003f70:	401a      	ands	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d116      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	23f8      	movs	r3, #248	; 0xf8
 8003f80:	039b      	lsls	r3, r3, #14
 8003f82:	401a      	ands	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d10e      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	23e0      	movs	r3, #224	; 0xe0
 8003f90:	051b      	lsls	r3, r3, #20
 8003f92:	401a      	ands	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	0f5b      	lsrs	r3, r3, #29
 8003fa0:	075a      	lsls	r2, r3, #29
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b008      	add	sp, #32
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021000 	.word	0x40021000

08003fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0e9      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCC_ClockConfig+0x1f0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d91e      	bls.n	800401c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b73      	ldr	r3, [pc, #460]	; (80041ac <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2207      	movs	r2, #7
 8003fe4:	4393      	bics	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	4b70      	ldr	r3, [pc, #448]	; (80041ac <HAL_RCC_ClockConfig+0x1f0>)
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ff0:	f7fe f88c 	bl	800210c <HAL_GetTick>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ff8:	e009      	b.n	800400e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffa:	f7fe f887 	bl	800210c <HAL_GetTick>
 8003ffe:	0002      	movs	r2, r0
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	4a6a      	ldr	r2, [pc, #424]	; (80041b0 <HAL_RCC_ClockConfig+0x1f4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0ca      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800400e:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2207      	movs	r2, #7
 8004014:	4013      	ands	r3, r2
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d1ee      	bne.n	8003ffa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2202      	movs	r2, #2
 8004022:	4013      	ands	r3, r2
 8004024:	d015      	beq.n	8004052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2204      	movs	r2, #4
 800402c:	4013      	ands	r3, r2
 800402e:	d006      	beq.n	800403e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004030:	4b60      	ldr	r3, [pc, #384]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	4b5f      	ldr	r3, [pc, #380]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004036:	21e0      	movs	r1, #224	; 0xe0
 8004038:	01c9      	lsls	r1, r1, #7
 800403a:	430a      	orrs	r2, r1
 800403c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4a5d      	ldr	r2, [pc, #372]	; (80041b8 <HAL_RCC_ClockConfig+0x1fc>)
 8004044:	4013      	ands	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	4b59      	ldr	r3, [pc, #356]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2201      	movs	r2, #1
 8004058:	4013      	ands	r3, r2
 800405a:	d057      	beq.n	800410c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004064:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	029b      	lsls	r3, r3, #10
 800406c:	4013      	ands	r3, r2
 800406e:	d12b      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e097      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d107      	bne.n	800408c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407c:	4b4d      	ldr	r3, [pc, #308]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	049b      	lsls	r3, r3, #18
 8004084:	4013      	ands	r3, r2
 8004086:	d11f      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e08b      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004094:	4b47      	ldr	r3, [pc, #284]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4013      	ands	r3, r2
 800409e:	d113      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e07f      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ac:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 80040ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b0:	2202      	movs	r2, #2
 80040b2:	4013      	ands	r3, r2
 80040b4:	d108      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e074      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ba:	4b3e      	ldr	r3, [pc, #248]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	2202      	movs	r2, #2
 80040c0:	4013      	ands	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e06d      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040c8:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2207      	movs	r2, #7
 80040ce:	4393      	bics	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040dc:	f7fe f816 	bl	800210c <HAL_GetTick>
 80040e0:	0003      	movs	r3, r0
 80040e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e4:	e009      	b.n	80040fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e6:	f7fe f811 	bl	800210c <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <HAL_RCC_ClockConfig+0x1f4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e054      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2238      	movs	r2, #56	; 0x38
 8004100:	401a      	ands	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	429a      	cmp	r2, r3
 800410a:	d1ec      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_RCC_ClockConfig+0x1f0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2207      	movs	r2, #7
 8004112:	4013      	ands	r3, r2
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d21e      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_ClockConfig+0x1f0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2207      	movs	r2, #7
 8004120:	4393      	bics	r3, r2
 8004122:	0019      	movs	r1, r3
 8004124:	4b21      	ldr	r3, [pc, #132]	; (80041ac <HAL_RCC_ClockConfig+0x1f0>)
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800412c:	f7fd ffee 	bl	800210c <HAL_GetTick>
 8004130:	0003      	movs	r3, r0
 8004132:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004134:	e009      	b.n	800414a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004136:	f7fd ffe9 	bl	800210c <HAL_GetTick>
 800413a:	0002      	movs	r2, r0
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <HAL_RCC_ClockConfig+0x1f4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e02c      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2207      	movs	r2, #7
 8004150:	4013      	ands	r3, r2
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2204      	movs	r2, #4
 800415e:	4013      	ands	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004162:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4a15      	ldr	r2, [pc, #84]	; (80041bc <HAL_RCC_ClockConfig+0x200>)
 8004168:	4013      	ands	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004176:	f000 f829 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800417a:	0001      	movs	r1, r0
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <HAL_RCC_ClockConfig+0x1f8>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	220f      	movs	r2, #15
 8004184:	401a      	ands	r2, r3
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <HAL_RCC_ClockConfig+0x204>)
 8004188:	0092      	lsls	r2, r2, #2
 800418a:	58d3      	ldr	r3, [r2, r3]
 800418c:	221f      	movs	r2, #31
 800418e:	4013      	ands	r3, r2
 8004190:	000a      	movs	r2, r1
 8004192:	40da      	lsrs	r2, r3
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_ClockConfig+0x208>)
 8004196:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_ClockConfig+0x20c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0018      	movs	r0, r3
 800419e:	f7fd ff59 	bl	8002054 <HAL_InitTick>
 80041a2:	0003      	movs	r3, r0
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40022000 	.word	0x40022000
 80041b0:	00001388 	.word	0x00001388
 80041b4:	40021000 	.word	0x40021000
 80041b8:	fffff0ff 	.word	0xfffff0ff
 80041bc:	ffff8fff 	.word	0xffff8fff
 80041c0:	08006550 	.word	0x08006550
 80041c4:	20000000 	.word	0x20000000
 80041c8:	20000004 	.word	0x20000004

080041cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041d2:	4b3c      	ldr	r3, [pc, #240]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2238      	movs	r2, #56	; 0x38
 80041d8:	4013      	ands	r3, r2
 80041da:	d10f      	bne.n	80041fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041dc:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0adb      	lsrs	r3, r3, #11
 80041e2:	2207      	movs	r2, #7
 80041e4:	4013      	ands	r3, r2
 80041e6:	2201      	movs	r2, #1
 80041e8:	409a      	lsls	r2, r3
 80041ea:	0013      	movs	r3, r2
 80041ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041ee:	6839      	ldr	r1, [r7, #0]
 80041f0:	4835      	ldr	r0, [pc, #212]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041f2:	f7fb ff91 	bl	8000118 <__udivsi3>
 80041f6:	0003      	movs	r3, r0
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	e05d      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041fc:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2238      	movs	r2, #56	; 0x38
 8004202:	4013      	ands	r3, r2
 8004204:	2b08      	cmp	r3, #8
 8004206:	d102      	bne.n	800420e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004208:	4b30      	ldr	r3, [pc, #192]	; (80042cc <HAL_RCC_GetSysClockFreq+0x100>)
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	e054      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800420e:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2238      	movs	r2, #56	; 0x38
 8004214:	4013      	ands	r3, r2
 8004216:	2b10      	cmp	r3, #16
 8004218:	d138      	bne.n	800428c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800421a:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2203      	movs	r2, #3
 8004220:	4013      	ands	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004224:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	091b      	lsrs	r3, r3, #4
 800422a:	2207      	movs	r2, #7
 800422c:	4013      	ands	r3, r2
 800422e:	3301      	adds	r3, #1
 8004230:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d10d      	bne.n	8004254 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	4824      	ldr	r0, [pc, #144]	; (80042cc <HAL_RCC_GetSysClockFreq+0x100>)
 800423c:	f7fb ff6c 	bl	8000118 <__udivsi3>
 8004240:	0003      	movs	r3, r0
 8004242:	0019      	movs	r1, r3
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	227f      	movs	r2, #127	; 0x7f
 800424c:	4013      	ands	r3, r2
 800424e:	434b      	muls	r3, r1
 8004250:	617b      	str	r3, [r7, #20]
        break;
 8004252:	e00d      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	481c      	ldr	r0, [pc, #112]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004258:	f7fb ff5e 	bl	8000118 <__udivsi3>
 800425c:	0003      	movs	r3, r0
 800425e:	0019      	movs	r1, r3
 8004260:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	227f      	movs	r2, #127	; 0x7f
 8004268:	4013      	ands	r3, r2
 800426a:	434b      	muls	r3, r1
 800426c:	617b      	str	r3, [r7, #20]
        break;
 800426e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	0f5b      	lsrs	r3, r3, #29
 8004276:	2207      	movs	r2, #7
 8004278:	4013      	ands	r3, r2
 800427a:	3301      	adds	r3, #1
 800427c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	6978      	ldr	r0, [r7, #20]
 8004282:	f7fb ff49 	bl	8000118 <__udivsi3>
 8004286:	0003      	movs	r3, r0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	e015      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800428c:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2238      	movs	r2, #56	; 0x38
 8004292:	4013      	ands	r3, r2
 8004294:	2b20      	cmp	r3, #32
 8004296:	d103      	bne.n	80042a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2238      	movs	r2, #56	; 0x38
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b18      	cmp	r3, #24
 80042aa:	d103      	bne.n	80042b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80042ac:	23fa      	movs	r3, #250	; 0xfa
 80042ae:	01db      	lsls	r3, r3, #7
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	e001      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042b8:	693b      	ldr	r3, [r7, #16]
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b006      	add	sp, #24
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	40021000 	.word	0x40021000
 80042c8:	00f42400 	.word	0x00f42400
 80042cc:	007a1200 	.word	0x007a1200

080042d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80042d8:	2313      	movs	r3, #19
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042e0:	2312      	movs	r3, #18
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	029b      	lsls	r3, r3, #10
 80042f0:	4013      	ands	r3, r2
 80042f2:	d100      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80042f4:	e0ad      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2011      	movs	r0, #17
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fe:	4b47      	ldr	r3, [pc, #284]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	055b      	lsls	r3, r3, #21
 8004306:	4013      	ands	r3, r2
 8004308:	d110      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	4b44      	ldr	r3, [pc, #272]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800430c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800430e:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	0549      	lsls	r1, r1, #21
 8004314:	430a      	orrs	r2, r1
 8004316:	63da      	str	r2, [r3, #60]	; 0x3c
 8004318:	4b40      	ldr	r3, [pc, #256]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800431a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	055b      	lsls	r3, r3, #21
 8004320:	4013      	ands	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004326:	183b      	adds	r3, r7, r0
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800432c:	4b3c      	ldr	r3, [pc, #240]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004332:	2180      	movs	r1, #128	; 0x80
 8004334:	0049      	lsls	r1, r1, #1
 8004336:	430a      	orrs	r2, r1
 8004338:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800433a:	f7fd fee7 	bl	800210c <HAL_GetTick>
 800433e:	0003      	movs	r3, r0
 8004340:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004342:	e00b      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004344:	f7fd fee2 	bl	800210c <HAL_GetTick>
 8004348:	0002      	movs	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d904      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004352:	2313      	movs	r3, #19
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	2203      	movs	r2, #3
 8004358:	701a      	strb	r2, [r3, #0]
        break;
 800435a:	e005      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435c:	4b30      	ldr	r3, [pc, #192]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	4013      	ands	r3, r2
 8004366:	d0ed      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004368:	2313      	movs	r3, #19
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d15e      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004374:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004376:	23c0      	movs	r3, #192	; 0xc0
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4013      	ands	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d019      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	429a      	cmp	r2, r3
 800438c:	d014      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	4a24      	ldr	r2, [pc, #144]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004394:	4013      	ands	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004398:	4b20      	ldr	r3, [pc, #128]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800439a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800439c:	4b1f      	ldr	r3, [pc, #124]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	0249      	lsls	r1, r1, #9
 80043a2:	430a      	orrs	r2, r1
 80043a4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043aa:	4b1c      	ldr	r3, [pc, #112]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043ac:	491e      	ldr	r1, [pc, #120]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80043ae:	400a      	ands	r2, r1
 80043b0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043b2:	4b1a      	ldr	r3, [pc, #104]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2201      	movs	r2, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	d016      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd fea4 	bl	800210c <HAL_GetTick>
 80043c4:	0003      	movs	r3, r0
 80043c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c8:	e00c      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fd fe9f 	bl	800210c <HAL_GetTick>
 80043ce:	0002      	movs	r2, r0
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	4a15      	ldr	r2, [pc, #84]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d904      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80043da:	2313      	movs	r3, #19
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	2203      	movs	r2, #3
 80043e0:	701a      	strb	r2, [r3, #0]
            break;
 80043e2:	e004      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	2202      	movs	r2, #2
 80043ea:	4013      	ands	r3, r2
 80043ec:	d0ed      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80043ee:	2313      	movs	r3, #19
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f8:	4b08      	ldr	r3, [pc, #32]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	4a09      	ldr	r2, [pc, #36]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80043fe:	4013      	ands	r3, r2
 8004400:	0019      	movs	r1, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004408:	430a      	orrs	r2, r1
 800440a:	65da      	str	r2, [r3, #92]	; 0x5c
 800440c:	e016      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800440e:	2312      	movs	r3, #18
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	2213      	movs	r2, #19
 8004414:	18ba      	adds	r2, r7, r2
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	e00f      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
 8004424:	fffffcff 	.word	0xfffffcff
 8004428:	fffeffff 	.word	0xfffeffff
 800442c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004430:	2312      	movs	r3, #18
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	2213      	movs	r2, #19
 8004436:	18ba      	adds	r2, r7, r2
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800443c:	2311      	movs	r3, #17
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d105      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004446:	4bb6      	ldr	r3, [pc, #728]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444a:	4bb5      	ldr	r3, [pc, #724]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800444c:	49b5      	ldr	r1, [pc, #724]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800444e:	400a      	ands	r2, r1
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	4013      	ands	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800445c:	4bb0      	ldr	r3, [pc, #704]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	2203      	movs	r2, #3
 8004462:	4393      	bics	r3, r2
 8004464:	0019      	movs	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	4bad      	ldr	r3, [pc, #692]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800446c:	430a      	orrs	r2, r1
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2202      	movs	r2, #2
 8004476:	4013      	ands	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800447a:	4ba9      	ldr	r3, [pc, #676]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	220c      	movs	r2, #12
 8004480:	4393      	bics	r3, r2
 8004482:	0019      	movs	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	4ba5      	ldr	r3, [pc, #660]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800448a:	430a      	orrs	r2, r1
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2204      	movs	r2, #4
 8004494:	4013      	ands	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004498:	4ba1      	ldr	r3, [pc, #644]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	2230      	movs	r2, #48	; 0x30
 800449e:	4393      	bics	r3, r2
 80044a0:	0019      	movs	r1, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	4b9e      	ldr	r3, [pc, #632]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044a8:	430a      	orrs	r2, r1
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2210      	movs	r2, #16
 80044b2:	4013      	ands	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044b6:	4b9a      	ldr	r3, [pc, #616]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	4a9b      	ldr	r2, [pc, #620]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80044bc:	4013      	ands	r3, r2
 80044be:	0019      	movs	r1, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	4b96      	ldr	r3, [pc, #600]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044c6:	430a      	orrs	r2, r1
 80044c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	015b      	lsls	r3, r3, #5
 80044d2:	4013      	ands	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80044d6:	4b92      	ldr	r3, [pc, #584]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	4a94      	ldr	r2, [pc, #592]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044dc:	4013      	ands	r3, r2
 80044de:	0019      	movs	r1, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	4b8e      	ldr	r3, [pc, #568]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044e6:	430a      	orrs	r2, r1
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4013      	ands	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f6:	4b8a      	ldr	r3, [pc, #552]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	4a8d      	ldr	r2, [pc, #564]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	0019      	movs	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004504:	4b86      	ldr	r3, [pc, #536]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004506:	430a      	orrs	r2, r1
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4013      	ands	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004516:	4b82      	ldr	r3, [pc, #520]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	4a86      	ldr	r2, [pc, #536]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800451c:	4013      	ands	r3, r2
 800451e:	0019      	movs	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	4b7e      	ldr	r3, [pc, #504]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004526:	430a      	orrs	r2, r1
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2220      	movs	r2, #32
 8004530:	4013      	ands	r3, r2
 8004532:	d009      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004534:	4b7a      	ldr	r3, [pc, #488]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	4a7f      	ldr	r2, [pc, #508]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	4b77      	ldr	r3, [pc, #476]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004544:	430a      	orrs	r2, r1
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	4013      	ands	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004552:	4b73      	ldr	r3, [pc, #460]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	4a79      	ldr	r2, [pc, #484]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	4b6f      	ldr	r3, [pc, #444]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004562:	430a      	orrs	r2, r1
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	01db      	lsls	r3, r3, #7
 800456e:	4013      	ands	r3, r2
 8004570:	d015      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004572:	4b6b      	ldr	r3, [pc, #428]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	0899      	lsrs	r1, r3, #2
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457e:	4b68      	ldr	r3, [pc, #416]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004580:	430a      	orrs	r2, r1
 8004582:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	05db      	lsls	r3, r3, #23
 800458c:	429a      	cmp	r2, r3
 800458e:	d106      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004590:	4b63      	ldr	r3, [pc, #396]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	4b62      	ldr	r3, [pc, #392]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004596:	2180      	movs	r1, #128	; 0x80
 8004598:	0249      	lsls	r1, r1, #9
 800459a:	430a      	orrs	r2, r1
 800459c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	031b      	lsls	r3, r3, #12
 80045a6:	4013      	ands	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045aa:	4b5d      	ldr	r3, [pc, #372]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	2240      	movs	r2, #64	; 0x40
 80045b0:	4393      	bics	r3, r2
 80045b2:	0019      	movs	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b8:	4b59      	ldr	r3, [pc, #356]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045ba:	430a      	orrs	r2, r1
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	039b      	lsls	r3, r3, #14
 80045c6:	4013      	ands	r3, r2
 80045c8:	d016      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045ca:	4b55      	ldr	r3, [pc, #340]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	4a5c      	ldr	r2, [pc, #368]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	0019      	movs	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d8:	4b51      	ldr	r3, [pc, #324]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045da:	430a      	orrs	r2, r1
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	03db      	lsls	r3, r3, #15
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d106      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80045ea:	4b4d      	ldr	r3, [pc, #308]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	4b4c      	ldr	r3, [pc, #304]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045f0:	2180      	movs	r1, #128	; 0x80
 80045f2:	0449      	lsls	r1, r1, #17
 80045f4:	430a      	orrs	r2, r1
 80045f6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	03db      	lsls	r3, r3, #15
 8004600:	4013      	ands	r3, r2
 8004602:	d016      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004604:	4b46      	ldr	r3, [pc, #280]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	4a4e      	ldr	r2, [pc, #312]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800460a:	4013      	ands	r3, r2
 800460c:	0019      	movs	r1, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004612:	4b43      	ldr	r3, [pc, #268]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004614:	430a      	orrs	r2, r1
 8004616:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	045b      	lsls	r3, r3, #17
 8004620:	429a      	cmp	r2, r3
 8004622:	d106      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004624:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	4b3d      	ldr	r3, [pc, #244]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800462a:	2180      	movs	r1, #128	; 0x80
 800462c:	0449      	lsls	r1, r1, #17
 800462e:	430a      	orrs	r2, r1
 8004630:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	4013      	ands	r3, r2
 800463c:	d014      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800463e:	4b38      	ldr	r3, [pc, #224]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	2203      	movs	r2, #3
 8004644:	4393      	bics	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1a      	ldr	r2, [r3, #32]
 800464c:	4b34      	ldr	r3, [pc, #208]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800464e:	430a      	orrs	r2, r1
 8004650:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d106      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800465a:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	4b30      	ldr	r3, [pc, #192]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004660:	2180      	movs	r1, #128	; 0x80
 8004662:	0249      	lsls	r1, r1, #9
 8004664:	430a      	orrs	r2, r1
 8004666:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	019b      	lsls	r3, r3, #6
 8004670:	4013      	ands	r3, r2
 8004672:	d014      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004674:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	220c      	movs	r2, #12
 800467a:	4393      	bics	r3, r2
 800467c:	0019      	movs	r1, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004682:	4b27      	ldr	r3, [pc, #156]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004684:	430a      	orrs	r2, r1
 8004686:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	2b04      	cmp	r3, #4
 800468e:	d106      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004690:	4b23      	ldr	r3, [pc, #140]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	0249      	lsls	r1, r1, #9
 800469a:	430a      	orrs	r2, r1
 800469c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	045b      	lsls	r3, r3, #17
 80046a6:	4013      	ands	r3, r2
 80046a8:	d016      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046aa:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ae:	4a22      	ldr	r2, [pc, #136]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046ba:	430a      	orrs	r2, r1
 80046bc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d106      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046d0:	2180      	movs	r1, #128	; 0x80
 80046d2:	0449      	lsls	r1, r1, #17
 80046d4:	430a      	orrs	r2, r1
 80046d6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	049b      	lsls	r3, r3, #18
 80046e0:	4013      	ands	r3, r2
 80046e2:	d016      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	4a10      	ldr	r2, [pc, #64]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	0019      	movs	r1, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046f4:	430a      	orrs	r2, r1
 80046f6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	429a      	cmp	r2, r3
 8004702:	d106      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800470a:	2180      	movs	r1, #128	; 0x80
 800470c:	0449      	lsls	r1, r1, #17
 800470e:	430a      	orrs	r2, r1
 8004710:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004712:	2312      	movs	r3, #18
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	781b      	ldrb	r3, [r3, #0]
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b006      	add	sp, #24
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	efffffff 	.word	0xefffffff
 8004728:	fffff3ff 	.word	0xfffff3ff
 800472c:	fffffcff 	.word	0xfffffcff
 8004730:	fff3ffff 	.word	0xfff3ffff
 8004734:	ffcfffff 	.word	0xffcfffff
 8004738:	ffffcfff 	.word	0xffffcfff
 800473c:	ffff3fff 	.word	0xffff3fff
 8004740:	ffbfffff 	.word	0xffbfffff
 8004744:	feffffff 	.word	0xfeffffff

08004748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e04a      	b.n	80047f0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	223d      	movs	r2, #61	; 0x3d
 800475e:	5c9b      	ldrb	r3, [r3, r2]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	223c      	movs	r2, #60	; 0x3c
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f7fd fb51 	bl	8001e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	223d      	movs	r2, #61	; 0x3d
 800477a:	2102      	movs	r1, #2
 800477c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	0019      	movs	r1, r3
 8004788:	0010      	movs	r0, r2
 800478a:	f000 fb5b 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2248      	movs	r2, #72	; 0x48
 8004792:	2101      	movs	r1, #1
 8004794:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	223e      	movs	r2, #62	; 0x3e
 800479a:	2101      	movs	r1, #1
 800479c:	5499      	strb	r1, [r3, r2]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	223f      	movs	r2, #63	; 0x3f
 80047a2:	2101      	movs	r1, #1
 80047a4:	5499      	strb	r1, [r3, r2]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2240      	movs	r2, #64	; 0x40
 80047aa:	2101      	movs	r1, #1
 80047ac:	5499      	strb	r1, [r3, r2]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2241      	movs	r2, #65	; 0x41
 80047b2:	2101      	movs	r1, #1
 80047b4:	5499      	strb	r1, [r3, r2]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2242      	movs	r2, #66	; 0x42
 80047ba:	2101      	movs	r1, #1
 80047bc:	5499      	strb	r1, [r3, r2]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2243      	movs	r2, #67	; 0x43
 80047c2:	2101      	movs	r1, #1
 80047c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2244      	movs	r2, #68	; 0x44
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2245      	movs	r2, #69	; 0x45
 80047d2:	2101      	movs	r1, #1
 80047d4:	5499      	strb	r1, [r3, r2]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2246      	movs	r2, #70	; 0x46
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2247      	movs	r2, #71	; 0x47
 80047e2:	2101      	movs	r1, #1
 80047e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	223d      	movs	r2, #61	; 0x3d
 80047ea:	2101      	movs	r1, #1
 80047ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b002      	add	sp, #8
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e04a      	b.n	80048a0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	223d      	movs	r2, #61	; 0x3d
 800480e:	5c9b      	ldrb	r3, [r3, r2]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d107      	bne.n	8004826 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	223c      	movs	r2, #60	; 0x3c
 800481a:	2100      	movs	r1, #0
 800481c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f000 f841 	bl	80048a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	223d      	movs	r2, #61	; 0x3d
 800482a:	2102      	movs	r1, #2
 800482c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	0019      	movs	r1, r3
 8004838:	0010      	movs	r0, r2
 800483a:	f000 fb03 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2248      	movs	r2, #72	; 0x48
 8004842:	2101      	movs	r1, #1
 8004844:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	223e      	movs	r2, #62	; 0x3e
 800484a:	2101      	movs	r1, #1
 800484c:	5499      	strb	r1, [r3, r2]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	223f      	movs	r2, #63	; 0x3f
 8004852:	2101      	movs	r1, #1
 8004854:	5499      	strb	r1, [r3, r2]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2240      	movs	r2, #64	; 0x40
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2241      	movs	r2, #65	; 0x41
 8004862:	2101      	movs	r1, #1
 8004864:	5499      	strb	r1, [r3, r2]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2242      	movs	r2, #66	; 0x42
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2243      	movs	r2, #67	; 0x43
 8004872:	2101      	movs	r1, #1
 8004874:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2244      	movs	r2, #68	; 0x44
 800487a:	2101      	movs	r1, #1
 800487c:	5499      	strb	r1, [r3, r2]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2245      	movs	r2, #69	; 0x45
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2246      	movs	r2, #70	; 0x46
 800488a:	2101      	movs	r1, #1
 800488c:	5499      	strb	r1, [r3, r2]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2247      	movs	r2, #71	; 0x47
 8004892:	2101      	movs	r1, #1
 8004894:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	223d      	movs	r2, #61	; 0x3d
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	0018      	movs	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048b0:	46c0      	nop			; (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b002      	add	sp, #8
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d108      	bne.n	80048da <HAL_TIM_PWM_Start+0x22>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	223e      	movs	r2, #62	; 0x3e
 80048cc:	5c9b      	ldrb	r3, [r3, r2]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	1e5a      	subs	r2, r3, #1
 80048d4:	4193      	sbcs	r3, r2
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	e037      	b.n	800494a <HAL_TIM_PWM_Start+0x92>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d108      	bne.n	80048f2 <HAL_TIM_PWM_Start+0x3a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	223f      	movs	r2, #63	; 0x3f
 80048e4:	5c9b      	ldrb	r3, [r3, r2]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	1e5a      	subs	r2, r3, #1
 80048ec:	4193      	sbcs	r3, r2
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e02b      	b.n	800494a <HAL_TIM_PWM_Start+0x92>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d108      	bne.n	800490a <HAL_TIM_PWM_Start+0x52>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2240      	movs	r2, #64	; 0x40
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	1e5a      	subs	r2, r3, #1
 8004904:	4193      	sbcs	r3, r2
 8004906:	b2db      	uxtb	r3, r3
 8004908:	e01f      	b.n	800494a <HAL_TIM_PWM_Start+0x92>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d108      	bne.n	8004922 <HAL_TIM_PWM_Start+0x6a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2241      	movs	r2, #65	; 0x41
 8004914:	5c9b      	ldrb	r3, [r3, r2]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	4193      	sbcs	r3, r2
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e013      	b.n	800494a <HAL_TIM_PWM_Start+0x92>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b10      	cmp	r3, #16
 8004926:	d108      	bne.n	800493a <HAL_TIM_PWM_Start+0x82>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2242      	movs	r2, #66	; 0x42
 800492c:	5c9b      	ldrb	r3, [r3, r2]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	1e5a      	subs	r2, r3, #1
 8004934:	4193      	sbcs	r3, r2
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e007      	b.n	800494a <HAL_TIM_PWM_Start+0x92>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2243      	movs	r2, #67	; 0x43
 800493e:	5c9b      	ldrb	r3, [r3, r2]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	1e5a      	subs	r2, r3, #1
 8004946:	4193      	sbcs	r3, r2
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e090      	b.n	8004a74 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <HAL_TIM_PWM_Start+0xaa>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	223e      	movs	r2, #62	; 0x3e
 800495c:	2102      	movs	r1, #2
 800495e:	5499      	strb	r1, [r3, r2]
 8004960:	e023      	b.n	80049aa <HAL_TIM_PWM_Start+0xf2>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b04      	cmp	r3, #4
 8004966:	d104      	bne.n	8004972 <HAL_TIM_PWM_Start+0xba>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	223f      	movs	r2, #63	; 0x3f
 800496c:	2102      	movs	r1, #2
 800496e:	5499      	strb	r1, [r3, r2]
 8004970:	e01b      	b.n	80049aa <HAL_TIM_PWM_Start+0xf2>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d104      	bne.n	8004982 <HAL_TIM_PWM_Start+0xca>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	2102      	movs	r1, #2
 800497e:	5499      	strb	r1, [r3, r2]
 8004980:	e013      	b.n	80049aa <HAL_TIM_PWM_Start+0xf2>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b0c      	cmp	r3, #12
 8004986:	d104      	bne.n	8004992 <HAL_TIM_PWM_Start+0xda>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2241      	movs	r2, #65	; 0x41
 800498c:	2102      	movs	r1, #2
 800498e:	5499      	strb	r1, [r3, r2]
 8004990:	e00b      	b.n	80049aa <HAL_TIM_PWM_Start+0xf2>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b10      	cmp	r3, #16
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Start+0xea>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2242      	movs	r2, #66	; 0x42
 800499c:	2102      	movs	r1, #2
 800499e:	5499      	strb	r1, [r3, r2]
 80049a0:	e003      	b.n	80049aa <HAL_TIM_PWM_Start+0xf2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2243      	movs	r2, #67	; 0x43
 80049a6:	2102      	movs	r1, #2
 80049a8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6839      	ldr	r1, [r7, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 fe30 	bl	8005618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <HAL_TIM_PWM_Start+0x1c4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00e      	beq.n	80049e0 <HAL_TIM_PWM_Start+0x128>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2e      	ldr	r2, [pc, #184]	; (8004a80 <HAL_TIM_PWM_Start+0x1c8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d009      	beq.n	80049e0 <HAL_TIM_PWM_Start+0x128>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a2c      	ldr	r2, [pc, #176]	; (8004a84 <HAL_TIM_PWM_Start+0x1cc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d004      	beq.n	80049e0 <HAL_TIM_PWM_Start+0x128>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a2b      	ldr	r2, [pc, #172]	; (8004a88 <HAL_TIM_PWM_Start+0x1d0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <HAL_TIM_PWM_Start+0x12c>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_TIM_PWM_Start+0x12e>
 80049e4:	2300      	movs	r3, #0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	0209      	lsls	r1, r1, #8
 80049f8:	430a      	orrs	r2, r1
 80049fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <HAL_TIM_PWM_Start+0x1c4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d014      	beq.n	8004a30 <HAL_TIM_PWM_Start+0x178>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	2380      	movs	r3, #128	; 0x80
 8004a0c:	05db      	lsls	r3, r3, #23
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d00e      	beq.n	8004a30 <HAL_TIM_PWM_Start+0x178>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <HAL_TIM_PWM_Start+0x1d4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_TIM_PWM_Start+0x178>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <HAL_TIM_PWM_Start+0x1d8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_TIM_PWM_Start+0x178>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <HAL_TIM_PWM_Start+0x1c8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d116      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <HAL_TIM_PWM_Start+0x1dc>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d016      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x1b8>
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d011      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2101      	movs	r1, #1
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5c:	e008      	b.n	8004a70 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2101      	movs	r1, #1
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e000      	b.n	8004a72 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a70:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b004      	add	sp, #16
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40012c00 	.word	0x40012c00
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	00010007 	.word	0x00010007

08004a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2317      	movs	r3, #23
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	223c      	movs	r2, #60	; 0x3c
 8004ab0:	5c9b      	ldrb	r3, [r3, r2]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x22>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0e5      	b.n	8004c86 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	223c      	movs	r2, #60	; 0x3c
 8004abe:	2101      	movs	r1, #1
 8004ac0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b14      	cmp	r3, #20
 8004ac6:	d900      	bls.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x32>
 8004ac8:	e0d1      	b.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	009a      	lsls	r2, r3, #2
 8004ace:	4b70      	ldr	r3, [pc, #448]	; (8004c90 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004ad0:	18d3      	adds	r3, r2, r3
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0011      	movs	r1, r2
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f000 fa3a 	bl	8004f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2108      	movs	r1, #8
 8004af0:	430a      	orrs	r2, r1
 8004af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2104      	movs	r1, #4
 8004b00:	438a      	bics	r2, r1
 8004b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	619a      	str	r2, [r3, #24]
      break;
 8004b16:	e0af      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	0011      	movs	r1, r2
 8004b20:	0018      	movs	r0, r3
 8004b22:	f000 faa3 	bl	800506c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	0109      	lsls	r1, r1, #4
 8004b34:	430a      	orrs	r2, r1
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4954      	ldr	r1, [pc, #336]	; (8004c94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004b44:	400a      	ands	r2, r1
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	021a      	lsls	r2, r3, #8
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	619a      	str	r2, [r3, #24]
      break;
 8004b5c:	e08c      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 fb04 	bl	8005174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2108      	movs	r1, #8
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2104      	movs	r1, #4
 8004b88:	438a      	bics	r2, r1
 8004b8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69d9      	ldr	r1, [r3, #28]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	61da      	str	r2, [r3, #28]
      break;
 8004b9e:	e06b      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 fb6b 	bl	8005284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2180      	movs	r1, #128	; 0x80
 8004bba:	0109      	lsls	r1, r1, #4
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4932      	ldr	r1, [pc, #200]	; (8004c94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69d9      	ldr	r1, [r3, #28]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	61da      	str	r2, [r3, #28]
      break;
 8004be4:	e048      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	0011      	movs	r1, r2
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f000 fbb2 	bl	8005358 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2108      	movs	r1, #8
 8004c00:	430a      	orrs	r2, r1
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2104      	movs	r1, #4
 8004c10:	438a      	bics	r2, r1
 8004c12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c26:	e027      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	0011      	movs	r1, r2
 8004c30:	0018      	movs	r0, r3
 8004c32:	f000 fbf1 	bl	8005418 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2180      	movs	r1, #128	; 0x80
 8004c42:	0109      	lsls	r1, r1, #4
 8004c44:	430a      	orrs	r2, r1
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4910      	ldr	r1, [pc, #64]	; (8004c94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004c54:	400a      	ands	r2, r1
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c6c:	e004      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004c6e:	2317      	movs	r3, #23
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	2201      	movs	r2, #1
 8004c74:	701a      	strb	r2, [r3, #0]
      break;
 8004c76:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	223c      	movs	r2, #60	; 0x3c
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	5499      	strb	r1, [r3, r2]

  return status;
 8004c80:	2317      	movs	r3, #23
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	781b      	ldrb	r3, [r3, #0]
}
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b006      	add	sp, #24
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	08006590 	.word	0x08006590
 8004c94:	fffffbff 	.word	0xfffffbff

08004c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	230f      	movs	r3, #15
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	223c      	movs	r2, #60	; 0x3c
 8004cae:	5c9b      	ldrb	r3, [r3, r2]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIM_ConfigClockSource+0x20>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0bc      	b.n	8004e32 <HAL_TIM_ConfigClockSource+0x19a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	223c      	movs	r2, #60	; 0x3c
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	223d      	movs	r2, #61	; 0x3d
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4a5a      	ldr	r2, [pc, #360]	; (8004e3c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4a59      	ldr	r2, [pc, #356]	; (8004e40 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2280      	movs	r2, #128	; 0x80
 8004cee:	0192      	lsls	r2, r2, #6
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d040      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0xde>
 8004cf4:	2280      	movs	r2, #128	; 0x80
 8004cf6:	0192      	lsls	r2, r2, #6
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d900      	bls.n	8004cfe <HAL_TIM_ConfigClockSource+0x66>
 8004cfc:	e088      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x178>
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	0152      	lsls	r2, r2, #5
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d100      	bne.n	8004d08 <HAL_TIM_ConfigClockSource+0x70>
 8004d06:	e088      	b.n	8004e1a <HAL_TIM_ConfigClockSource+0x182>
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	0152      	lsls	r2, r2, #5
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d900      	bls.n	8004d12 <HAL_TIM_ConfigClockSource+0x7a>
 8004d10:	e07e      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x178>
 8004d12:	2b70      	cmp	r3, #112	; 0x70
 8004d14:	d018      	beq.n	8004d48 <HAL_TIM_ConfigClockSource+0xb0>
 8004d16:	d900      	bls.n	8004d1a <HAL_TIM_ConfigClockSource+0x82>
 8004d18:	e07a      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x178>
 8004d1a:	2b60      	cmp	r3, #96	; 0x60
 8004d1c:	d04f      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x126>
 8004d1e:	d900      	bls.n	8004d22 <HAL_TIM_ConfigClockSource+0x8a>
 8004d20:	e076      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x178>
 8004d22:	2b50      	cmp	r3, #80	; 0x50
 8004d24:	d03b      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x106>
 8004d26:	d900      	bls.n	8004d2a <HAL_TIM_ConfigClockSource+0x92>
 8004d28:	e072      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x178>
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d057      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x146>
 8004d2e:	d900      	bls.n	8004d32 <HAL_TIM_ConfigClockSource+0x9a>
 8004d30:	e06e      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x178>
 8004d32:	2b30      	cmp	r3, #48	; 0x30
 8004d34:	d063      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x166>
 8004d36:	d86b      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x178>
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d060      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x166>
 8004d3c:	d868      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x178>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d05d      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x166>
 8004d42:	2b10      	cmp	r3, #16
 8004d44:	d05b      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x166>
 8004d46:	e063      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	6899      	ldr	r1, [r3, #8]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f000 fc3e 	bl	80055d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2277      	movs	r2, #119	; 0x77
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]
      break;
 8004d74:	e052      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6899      	ldr	r1, [r3, #8]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f000 fc27 	bl	80055d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2180      	movs	r1, #128	; 0x80
 8004d96:	01c9      	lsls	r1, r1, #7
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]
      break;
 8004d9c:	e03e      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	001a      	movs	r2, r3
 8004dac:	f000 fb98 	bl	80054e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2150      	movs	r1, #80	; 0x50
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 fbf2 	bl	80055a0 <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e02e      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	001a      	movs	r2, r3
 8004dcc:	f000 fbb6 	bl	800553c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2160      	movs	r1, #96	; 0x60
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f000 fbe2 	bl	80055a0 <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e01e      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	001a      	movs	r2, r3
 8004dec:	f000 fb78 	bl	80054e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2140      	movs	r1, #64	; 0x40
 8004df6:	0018      	movs	r0, r3
 8004df8:	f000 fbd2 	bl	80055a0 <TIM_ITRx_SetConfig>
      break;
 8004dfc:	e00e      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	0019      	movs	r1, r3
 8004e08:	0010      	movs	r0, r2
 8004e0a:	f000 fbc9 	bl	80055a0 <TIM_ITRx_SetConfig>
      break;
 8004e0e:	e005      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004e10:	230f      	movs	r3, #15
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
      break;
 8004e18:	e000      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004e1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	223d      	movs	r2, #61	; 0x3d
 8004e20:	2101      	movs	r1, #1
 8004e22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	223c      	movs	r2, #60	; 0x3c
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]

  return status;
 8004e2c:	230f      	movs	r3, #15
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	781b      	ldrb	r3, [r3, #0]
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b004      	add	sp, #16
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	ffceff88 	.word	0xffceff88
 8004e40:	ffff00ff 	.word	0xffff00ff

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a38      	ldr	r2, [pc, #224]	; (8004f38 <TIM_Base_SetConfig+0xf4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00c      	beq.n	8004e76 <TIM_Base_SetConfig+0x32>
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	05db      	lsls	r3, r3, #23
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d007      	beq.n	8004e76 <TIM_Base_SetConfig+0x32>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a34      	ldr	r2, [pc, #208]	; (8004f3c <TIM_Base_SetConfig+0xf8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_Base_SetConfig+0x32>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a33      	ldr	r2, [pc, #204]	; (8004f40 <TIM_Base_SetConfig+0xfc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d108      	bne.n	8004e88 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2270      	movs	r2, #112	; 0x70
 8004e7a:	4393      	bics	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a2b      	ldr	r2, [pc, #172]	; (8004f38 <TIM_Base_SetConfig+0xf4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01c      	beq.n	8004eca <TIM_Base_SetConfig+0x86>
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	05db      	lsls	r3, r3, #23
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0x86>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a27      	ldr	r2, [pc, #156]	; (8004f3c <TIM_Base_SetConfig+0xf8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0x86>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a26      	ldr	r2, [pc, #152]	; (8004f40 <TIM_Base_SetConfig+0xfc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0x86>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a25      	ldr	r2, [pc, #148]	; (8004f44 <TIM_Base_SetConfig+0x100>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0x86>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a24      	ldr	r2, [pc, #144]	; (8004f48 <TIM_Base_SetConfig+0x104>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0x86>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a23      	ldr	r2, [pc, #140]	; (8004f4c <TIM_Base_SetConfig+0x108>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0x86>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <TIM_Base_SetConfig+0x10c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a21      	ldr	r2, [pc, #132]	; (8004f54 <TIM_Base_SetConfig+0x110>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	4393      	bics	r3, r2
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <TIM_Base_SetConfig+0xf4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <TIM_Base_SetConfig+0xde>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <TIM_Base_SetConfig+0x104>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d007      	beq.n	8004f22 <TIM_Base_SetConfig+0xde>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <TIM_Base_SetConfig+0x108>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d003      	beq.n	8004f22 <TIM_Base_SetConfig+0xde>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a0c      	ldr	r2, [pc, #48]	; (8004f50 <TIM_Base_SetConfig+0x10c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d103      	bne.n	8004f2a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	615a      	str	r2, [r3, #20]
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b004      	add	sp, #16
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40002000 	.word	0x40002000
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800
 8004f54:	fffffcff 	.word	0xfffffcff

08004f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	2201      	movs	r2, #1
 8004f68:	4393      	bics	r3, r2
 8004f6a:	001a      	movs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4a32      	ldr	r2, [pc, #200]	; (8005050 <TIM_OC1_SetConfig+0xf8>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	4393      	bics	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4393      	bics	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a28      	ldr	r2, [pc, #160]	; (8005054 <TIM_OC1_SetConfig+0xfc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <TIM_OC1_SetConfig+0x76>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a27      	ldr	r2, [pc, #156]	; (8005058 <TIM_OC1_SetConfig+0x100>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <TIM_OC1_SetConfig+0x76>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a26      	ldr	r2, [pc, #152]	; (800505c <TIM_OC1_SetConfig+0x104>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_OC1_SetConfig+0x76>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a25      	ldr	r2, [pc, #148]	; (8005060 <TIM_OC1_SetConfig+0x108>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d10c      	bne.n	8004fe8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	4393      	bics	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	4393      	bics	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <TIM_OC1_SetConfig+0xfc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00b      	beq.n	8005008 <TIM_OC1_SetConfig+0xb0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a19      	ldr	r2, [pc, #100]	; (8005058 <TIM_OC1_SetConfig+0x100>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d007      	beq.n	8005008 <TIM_OC1_SetConfig+0xb0>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a18      	ldr	r2, [pc, #96]	; (800505c <TIM_OC1_SetConfig+0x104>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_OC1_SetConfig+0xb0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a17      	ldr	r2, [pc, #92]	; (8005060 <TIM_OC1_SetConfig+0x108>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d111      	bne.n	800502c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4a16      	ldr	r2, [pc, #88]	; (8005064 <TIM_OC1_SetConfig+0x10c>)
 800500c:	4013      	ands	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <TIM_OC1_SetConfig+0x110>)
 8005014:	4013      	ands	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	b006      	add	sp, #24
 800504c:	bd80      	pop	{r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	fffeff8f 	.word	0xfffeff8f
 8005054:	40012c00 	.word	0x40012c00
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800
 8005064:	fffffeff 	.word	0xfffffeff
 8005068:	fffffdff 	.word	0xfffffdff

0800506c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	2210      	movs	r2, #16
 800507c:	4393      	bics	r3, r2
 800507e:	001a      	movs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a2e      	ldr	r2, [pc, #184]	; (8005154 <TIM_OC2_SetConfig+0xe8>)
 800509a:	4013      	ands	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a2d      	ldr	r2, [pc, #180]	; (8005158 <TIM_OC2_SetConfig+0xec>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2220      	movs	r2, #32
 80050b6:	4393      	bics	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a24      	ldr	r2, [pc, #144]	; (800515c <TIM_OC2_SetConfig+0xf0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10d      	bne.n	80050ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2280      	movs	r2, #128	; 0x80
 80050d2:	4393      	bics	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2240      	movs	r2, #64	; 0x40
 80050e6:	4393      	bics	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1b      	ldr	r2, [pc, #108]	; (800515c <TIM_OC2_SetConfig+0xf0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_OC2_SetConfig+0x9e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1a      	ldr	r2, [pc, #104]	; (8005160 <TIM_OC2_SetConfig+0xf4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_OC2_SetConfig+0x9e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a19      	ldr	r2, [pc, #100]	; (8005164 <TIM_OC2_SetConfig+0xf8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC2_SetConfig+0x9e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a18      	ldr	r2, [pc, #96]	; (8005168 <TIM_OC2_SetConfig+0xfc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d113      	bne.n	8005132 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4a17      	ldr	r2, [pc, #92]	; (800516c <TIM_OC2_SetConfig+0x100>)
 800510e:	4013      	ands	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <TIM_OC2_SetConfig+0x104>)
 8005116:	4013      	ands	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b006      	add	sp, #24
 8005152:	bd80      	pop	{r7, pc}
 8005154:	feff8fff 	.word	0xfeff8fff
 8005158:	fffffcff 	.word	0xfffffcff
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800
 800516c:	fffffbff 	.word	0xfffffbff
 8005170:	fffff7ff 	.word	0xfffff7ff

08005174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	4a35      	ldr	r2, [pc, #212]	; (8005258 <TIM_OC3_SetConfig+0xe4>)
 8005184:	401a      	ands	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a2f      	ldr	r2, [pc, #188]	; (800525c <TIM_OC3_SetConfig+0xe8>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2203      	movs	r2, #3
 80051a8:	4393      	bics	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	4a29      	ldr	r2, [pc, #164]	; (8005260 <TIM_OC3_SetConfig+0xec>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a25      	ldr	r2, [pc, #148]	; (8005264 <TIM_OC3_SetConfig+0xf0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d10d      	bne.n	80051ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	4a24      	ldr	r2, [pc, #144]	; (8005268 <TIM_OC3_SetConfig+0xf4>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4a20      	ldr	r2, [pc, #128]	; (800526c <TIM_OC3_SetConfig+0xf8>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <TIM_OC3_SetConfig+0xf0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00b      	beq.n	800520e <TIM_OC3_SetConfig+0x9a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1d      	ldr	r2, [pc, #116]	; (8005270 <TIM_OC3_SetConfig+0xfc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <TIM_OC3_SetConfig+0x9a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <TIM_OC3_SetConfig+0x100>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_OC3_SetConfig+0x9a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1b      	ldr	r2, [pc, #108]	; (8005278 <TIM_OC3_SetConfig+0x104>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d113      	bne.n	8005236 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4a1a      	ldr	r2, [pc, #104]	; (800527c <TIM_OC3_SetConfig+0x108>)
 8005212:	4013      	ands	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <TIM_OC3_SetConfig+0x10c>)
 800521a:	4013      	ands	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	621a      	str	r2, [r3, #32]
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	b006      	add	sp, #24
 8005256:	bd80      	pop	{r7, pc}
 8005258:	fffffeff 	.word	0xfffffeff
 800525c:	fffeff8f 	.word	0xfffeff8f
 8005260:	fffffdff 	.word	0xfffffdff
 8005264:	40012c00 	.word	0x40012c00
 8005268:	fffff7ff 	.word	0xfffff7ff
 800526c:	fffffbff 	.word	0xfffffbff
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800
 800527c:	ffffefff 	.word	0xffffefff
 8005280:	ffffdfff 	.word	0xffffdfff

08005284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	4a28      	ldr	r2, [pc, #160]	; (8005334 <TIM_OC4_SetConfig+0xb0>)
 8005294:	401a      	ands	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4a22      	ldr	r2, [pc, #136]	; (8005338 <TIM_OC4_SetConfig+0xb4>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a21      	ldr	r2, [pc, #132]	; (800533c <TIM_OC4_SetConfig+0xb8>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <TIM_OC4_SetConfig+0xbc>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	031b      	lsls	r3, r3, #12
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a19      	ldr	r2, [pc, #100]	; (8005344 <TIM_OC4_SetConfig+0xc0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_OC4_SetConfig+0x78>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <TIM_OC4_SetConfig+0xc4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_OC4_SetConfig+0x78>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a17      	ldr	r2, [pc, #92]	; (800534c <TIM_OC4_SetConfig+0xc8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC4_SetConfig+0x78>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a16      	ldr	r2, [pc, #88]	; (8005350 <TIM_OC4_SetConfig+0xcc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d109      	bne.n	8005310 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4a15      	ldr	r2, [pc, #84]	; (8005354 <TIM_OC4_SetConfig+0xd0>)
 8005300:	4013      	ands	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	019b      	lsls	r3, r3, #6
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	46bd      	mov	sp, r7
 800532e:	b006      	add	sp, #24
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	ffffefff 	.word	0xffffefff
 8005338:	feff8fff 	.word	0xfeff8fff
 800533c:	fffffcff 	.word	0xfffffcff
 8005340:	ffffdfff 	.word	0xffffdfff
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400
 8005350:	40014800 	.word	0x40014800
 8005354:	ffffbfff 	.word	0xffffbfff

08005358 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	4a25      	ldr	r2, [pc, #148]	; (80053fc <TIM_OC5_SetConfig+0xa4>)
 8005368:	401a      	ands	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <TIM_OC5_SetConfig+0xa8>)
 8005384:	4013      	ands	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4a1b      	ldr	r2, [pc, #108]	; (8005404 <TIM_OC5_SetConfig+0xac>)
 8005396:	4013      	ands	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a17      	ldr	r2, [pc, #92]	; (8005408 <TIM_OC5_SetConfig+0xb0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_OC5_SetConfig+0x6e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a16      	ldr	r2, [pc, #88]	; (800540c <TIM_OC5_SetConfig+0xb4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_OC5_SetConfig+0x6e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a15      	ldr	r2, [pc, #84]	; (8005410 <TIM_OC5_SetConfig+0xb8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_OC5_SetConfig+0x6e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a14      	ldr	r2, [pc, #80]	; (8005414 <TIM_OC5_SetConfig+0xbc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d109      	bne.n	80053da <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <TIM_OC5_SetConfig+0xa4>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b006      	add	sp, #24
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	fffeffff 	.word	0xfffeffff
 8005400:	fffeff8f 	.word	0xfffeff8f
 8005404:	fffdffff 	.word	0xfffdffff
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4a26      	ldr	r2, [pc, #152]	; (80054c0 <TIM_OC6_SetConfig+0xa8>)
 8005428:	401a      	ands	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a20      	ldr	r2, [pc, #128]	; (80054c4 <TIM_OC6_SetConfig+0xac>)
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4a1c      	ldr	r2, [pc, #112]	; (80054c8 <TIM_OC6_SetConfig+0xb0>)
 8005458:	4013      	ands	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	051b      	lsls	r3, r3, #20
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a18      	ldr	r2, [pc, #96]	; (80054cc <TIM_OC6_SetConfig+0xb4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00b      	beq.n	8005488 <TIM_OC6_SetConfig+0x70>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <TIM_OC6_SetConfig+0xb8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <TIM_OC6_SetConfig+0x70>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <TIM_OC6_SetConfig+0xbc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_OC6_SetConfig+0x70>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <TIM_OC6_SetConfig+0xc0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d109      	bne.n	800549c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	4a14      	ldr	r2, [pc, #80]	; (80054dc <TIM_OC6_SetConfig+0xc4>)
 800548c:	4013      	ands	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	029b      	lsls	r3, r3, #10
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b006      	add	sp, #24
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	ffefffff 	.word	0xffefffff
 80054c4:	feff8fff 	.word	0xfeff8fff
 80054c8:	ffdfffff 	.word	0xffdfffff
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40014400 	.word	0x40014400
 80054d8:	40014800 	.word	0x40014800
 80054dc:	fffbffff 	.word	0xfffbffff

080054e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	2201      	movs	r2, #1
 80054f8:	4393      	bics	r3, r2
 80054fa:	001a      	movs	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	22f0      	movs	r2, #240	; 0xf0
 800550a:	4393      	bics	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	220a      	movs	r2, #10
 800551c:	4393      	bics	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	46c0      	nop			; (mov r8, r8)
 8005536:	46bd      	mov	sp, r7
 8005538:	b006      	add	sp, #24
 800553a:	bd80      	pop	{r7, pc}

0800553c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	2210      	movs	r2, #16
 800554e:	4393      	bics	r3, r2
 8005550:	001a      	movs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	4a0d      	ldr	r2, [pc, #52]	; (800559c <TIM_TI2_ConfigInputStage+0x60>)
 8005566:	4013      	ands	r3, r2
 8005568:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	031b      	lsls	r3, r3, #12
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	22a0      	movs	r2, #160	; 0xa0
 8005578:	4393      	bics	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	46bd      	mov	sp, r7
 8005596:	b006      	add	sp, #24
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	ffff0fff 	.word	0xffff0fff

080055a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <TIM_ITRx_SetConfig+0x34>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	2207      	movs	r2, #7
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	609a      	str	r2, [r3, #8]
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b004      	add	sp, #16
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	ffcfff8f 	.word	0xffcfff8f

080055d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <TIM_ETR_SetConfig+0x3c>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	609a      	str	r2, [r3, #8]
}
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b006      	add	sp, #24
 8005612:	bd80      	pop	{r7, pc}
 8005614:	ffff00ff 	.word	0xffff00ff

08005618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	221f      	movs	r2, #31
 8005628:	4013      	ands	r3, r2
 800562a:	2201      	movs	r2, #1
 800562c:	409a      	lsls	r2, r3
 800562e:	0013      	movs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	43d2      	mvns	r2, r2
 800563a:	401a      	ands	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1a      	ldr	r2, [r3, #32]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	211f      	movs	r1, #31
 8005648:	400b      	ands	r3, r1
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4099      	lsls	r1, r3
 800564e:	000b      	movs	r3, r1
 8005650:	431a      	orrs	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	46bd      	mov	sp, r7
 800565a:	b006      	add	sp, #24
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	223c      	movs	r2, #60	; 0x3c
 800566e:	5c9b      	ldrb	r3, [r3, r2]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005674:	2302      	movs	r3, #2
 8005676:	e05a      	b.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	223c      	movs	r2, #60	; 0x3c
 800567c:	2101      	movs	r1, #1
 800567e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	223d      	movs	r2, #61	; 0x3d
 8005684:	2102      	movs	r1, #2
 8005686:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a26      	ldr	r2, [pc, #152]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d108      	bne.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a25      	ldr	r2, [pc, #148]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2270      	movs	r2, #112	; 0x70
 80056b8:	4393      	bics	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a19      	ldr	r2, [pc, #100]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d014      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	05db      	lsls	r3, r3, #23
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d00e      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a15      	ldr	r2, [pc, #84]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a14      	ldr	r2, [pc, #80]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a12      	ldr	r2, [pc, #72]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d10c      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2280      	movs	r2, #128	; 0x80
 8005706:	4393      	bics	r3, r2
 8005708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4313      	orrs	r3, r2
 8005712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	223d      	movs	r2, #61	; 0x3d
 8005720:	2101      	movs	r1, #1
 8005722:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	223c      	movs	r2, #60	; 0x3c
 8005728:	2100      	movs	r1, #0
 800572a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	0018      	movs	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	b004      	add	sp, #16
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	40012c00 	.word	0x40012c00
 800573c:	ff0fffff 	.word	0xff0fffff
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40014000 	.word	0x40014000

0800574c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	223c      	movs	r2, #60	; 0x3c
 800575e:	5c9b      	ldrb	r3, [r3, r2]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005764:	2302      	movs	r3, #2
 8005766:	e079      	b.n	800585c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	223c      	movs	r2, #60	; 0x3c
 800576c:	2101      	movs	r1, #1
 800576e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	22ff      	movs	r2, #255	; 0xff
 8005774:	4393      	bics	r3, r2
 8005776:	001a      	movs	r2, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a38      	ldr	r2, [pc, #224]	; (8005864 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005784:	401a      	ands	r2, r3
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a35      	ldr	r2, [pc, #212]	; (8005868 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005792:	401a      	ands	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4a33      	ldr	r2, [pc, #204]	; (800586c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80057a0:	401a      	ands	r2, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4a30      	ldr	r2, [pc, #192]	; (8005870 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80057ae:	401a      	ands	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a2e      	ldr	r2, [pc, #184]	; (8005874 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80057bc:	401a      	ands	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a2b      	ldr	r2, [pc, #172]	; (8005878 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80057ca:	401a      	ands	r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4a29      	ldr	r2, [pc, #164]	; (800587c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80057d8:	401a      	ands	r2, r3
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a25      	ldr	r2, [pc, #148]	; (8005880 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d106      	bne.n	80057fc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4a24      	ldr	r2, [pc, #144]	; (8005884 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80057f2:	401a      	ands	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d121      	bne.n	800584a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800580a:	401a      	ands	r2, r3
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	051b      	lsls	r3, r3, #20
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a1c      	ldr	r2, [pc, #112]	; (800588c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800581a:	401a      	ands	r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a1a      	ldr	r2, [pc, #104]	; (8005890 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005828:	401a      	ands	r2, r3
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a12      	ldr	r2, [pc, #72]	; (8005880 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d106      	bne.n	800584a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a15      	ldr	r2, [pc, #84]	; (8005894 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005840:	401a      	ands	r2, r3
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	223c      	movs	r2, #60	; 0x3c
 8005856:	2100      	movs	r1, #0
 8005858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b004      	add	sp, #16
 8005862:	bd80      	pop	{r7, pc}
 8005864:	fffffcff 	.word	0xfffffcff
 8005868:	fffffbff 	.word	0xfffffbff
 800586c:	fffff7ff 	.word	0xfffff7ff
 8005870:	ffffefff 	.word	0xffffefff
 8005874:	ffffdfff 	.word	0xffffdfff
 8005878:	ffffbfff 	.word	0xffffbfff
 800587c:	fff0ffff 	.word	0xfff0ffff
 8005880:	40012c00 	.word	0x40012c00
 8005884:	efffffff 	.word	0xefffffff
 8005888:	ff0fffff 	.word	0xff0fffff
 800588c:	feffffff 	.word	0xfeffffff
 8005890:	fdffffff 	.word	0xfdffffff
 8005894:	dfffffff 	.word	0xdfffffff

08005898 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 800589c:	201e      	movs	r0, #30
 800589e:	f7fc fc3f 	bl	8002120 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 80058a2:	23a0      	movs	r3, #160	; 0xa0
 80058a4:	05db      	lsls	r3, r3, #23
 80058a6:	2200      	movs	r2, #0
 80058a8:	2104      	movs	r1, #4
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fd ffc8 	bl	8003840 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 80058b0:	23a0      	movs	r3, #160	; 0xa0
 80058b2:	05db      	lsls	r3, r3, #23
 80058b4:	2201      	movs	r2, #1
 80058b6:	2108      	movs	r1, #8
 80058b8:	0018      	movs	r0, r3
 80058ba:	f7fd ffc1 	bl	8003840 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 80058be:	23a0      	movs	r3, #160	; 0xa0
 80058c0:	05db      	lsls	r3, r3, #23
 80058c2:	2200      	movs	r2, #0
 80058c4:	2110      	movs	r1, #16
 80058c6:	0018      	movs	r0, r3
 80058c8:	f7fd ffba 	bl	8003840 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 80058cc:	23a0      	movs	r3, #160	; 0xa0
 80058ce:	05db      	lsls	r3, r3, #23
 80058d0:	2200      	movs	r2, #0
 80058d2:	2120      	movs	r1, #32
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7fd ffb3 	bl	8003840 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 80058da:	23a0      	movs	r3, #160	; 0xa0
 80058dc:	05db      	lsls	r3, r3, #23
 80058de:	2200      	movs	r2, #0
 80058e0:	2101      	movs	r1, #1
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7fd ffac 	bl	8003840 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 80058e8:	23a0      	movs	r3, #160	; 0xa0
 80058ea:	05db      	lsls	r3, r3, #23
 80058ec:	2201      	movs	r2, #1
 80058ee:	2102      	movs	r1, #2
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7fd ffa5 	bl	8003840 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80058f6:	23a0      	movs	r3, #160	; 0xa0
 80058f8:	05db      	lsls	r3, r3, #23
 80058fa:	2200      	movs	r2, #0
 80058fc:	2102      	movs	r1, #2
 80058fe:	0018      	movs	r0, r3
 8005900:	f7fd ff9e 	bl	8003840 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8005904:	2128      	movs	r1, #40	; 0x28
 8005906:	2000      	movs	r0, #0
 8005908:	f000 f80f 	bl	800592a <lcd_write>
	lcd_write(0,0x0c);
 800590c:	210c      	movs	r1, #12
 800590e:	2000      	movs	r0, #0
 8005910:	f000 f80b 	bl	800592a <lcd_write>
	lcd_write(0,0x06);
 8005914:	2106      	movs	r1, #6
 8005916:	2000      	movs	r0, #0
 8005918:	f000 f807 	bl	800592a <lcd_write>
	lcd_write(0,0x01);
 800591c:	2101      	movs	r1, #1
 800591e:	2000      	movs	r0, #0
 8005920:	f000 f803 	bl	800592a <lcd_write>
}
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	0002      	movs	r2, r0
 8005932:	1dfb      	adds	r3, r7, #7
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	1dbb      	adds	r3, r7, #6
 8005938:	1c0a      	adds	r2, r1, #0
 800593a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 800593c:	2002      	movs	r0, #2
 800593e:	f7fc fbef 	bl	8002120 <HAL_Delay>
	if(type)
 8005942:	1dfb      	adds	r3, r7, #7
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 800594a:	23a0      	movs	r3, #160	; 0xa0
 800594c:	05db      	lsls	r3, r3, #23
 800594e:	2201      	movs	r2, #1
 8005950:	2101      	movs	r1, #1
 8005952:	0018      	movs	r0, r3
 8005954:	f7fd ff74 	bl	8003840 <HAL_GPIO_WritePin>
 8005958:	e006      	b.n	8005968 <lcd_write+0x3e>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 800595a:	23a0      	movs	r3, #160	; 0xa0
 800595c:	05db      	lsls	r3, r3, #23
 800595e:	2200      	movs	r2, #0
 8005960:	2101      	movs	r1, #1
 8005962:	0018      	movs	r0, r3
 8005964:	f7fd ff6c 	bl	8003840 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8005968:	1dbb      	adds	r3, r7, #6
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	b25b      	sxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	da07      	bge.n	8005982 <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8005972:	23a0      	movs	r3, #160	; 0xa0
 8005974:	05db      	lsls	r3, r3, #23
 8005976:	2201      	movs	r2, #1
 8005978:	2120      	movs	r1, #32
 800597a:	0018      	movs	r0, r3
 800597c:	f7fd ff60 	bl	8003840 <HAL_GPIO_WritePin>
 8005980:	e006      	b.n	8005990 <lcd_write+0x66>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8005982:	23a0      	movs	r3, #160	; 0xa0
 8005984:	05db      	lsls	r3, r3, #23
 8005986:	2200      	movs	r2, #0
 8005988:	2120      	movs	r1, #32
 800598a:	0018      	movs	r0, r3
 800598c:	f7fd ff58 	bl	8003840 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8005990:	1dbb      	adds	r3, r7, #6
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2240      	movs	r2, #64	; 0x40
 8005996:	4013      	ands	r3, r2
 8005998:	d007      	beq.n	80059aa <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 800599a:	23a0      	movs	r3, #160	; 0xa0
 800599c:	05db      	lsls	r3, r3, #23
 800599e:	2201      	movs	r2, #1
 80059a0:	2110      	movs	r1, #16
 80059a2:	0018      	movs	r0, r3
 80059a4:	f7fd ff4c 	bl	8003840 <HAL_GPIO_WritePin>
 80059a8:	e006      	b.n	80059b8 <lcd_write+0x8e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80059aa:	23a0      	movs	r3, #160	; 0xa0
 80059ac:	05db      	lsls	r3, r3, #23
 80059ae:	2200      	movs	r2, #0
 80059b0:	2110      	movs	r1, #16
 80059b2:	0018      	movs	r0, r3
 80059b4:	f7fd ff44 	bl	8003840 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 80059b8:	1dbb      	adds	r3, r7, #6
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2220      	movs	r2, #32
 80059be:	4013      	ands	r3, r2
 80059c0:	d007      	beq.n	80059d2 <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80059c2:	23a0      	movs	r3, #160	; 0xa0
 80059c4:	05db      	lsls	r3, r3, #23
 80059c6:	2201      	movs	r2, #1
 80059c8:	2108      	movs	r1, #8
 80059ca:	0018      	movs	r0, r3
 80059cc:	f7fd ff38 	bl	8003840 <HAL_GPIO_WritePin>
 80059d0:	e006      	b.n	80059e0 <lcd_write+0xb6>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80059d2:	23a0      	movs	r3, #160	; 0xa0
 80059d4:	05db      	lsls	r3, r3, #23
 80059d6:	2200      	movs	r2, #0
 80059d8:	2108      	movs	r1, #8
 80059da:	0018      	movs	r0, r3
 80059dc:	f7fd ff30 	bl	8003840 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 80059e0:	1dbb      	adds	r3, r7, #6
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2210      	movs	r2, #16
 80059e6:	4013      	ands	r3, r2
 80059e8:	d007      	beq.n	80059fa <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 80059ea:	23a0      	movs	r3, #160	; 0xa0
 80059ec:	05db      	lsls	r3, r3, #23
 80059ee:	2201      	movs	r2, #1
 80059f0:	2104      	movs	r1, #4
 80059f2:	0018      	movs	r0, r3
 80059f4:	f7fd ff24 	bl	8003840 <HAL_GPIO_WritePin>
 80059f8:	e006      	b.n	8005a08 <lcd_write+0xde>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80059fa:	23a0      	movs	r3, #160	; 0xa0
 80059fc:	05db      	lsls	r3, r3, #23
 80059fe:	2200      	movs	r2, #0
 8005a00:	2104      	movs	r1, #4
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7fd ff1c 	bl	8003840 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8005a08:	23a0      	movs	r3, #160	; 0xa0
 8005a0a:	05db      	lsls	r3, r3, #23
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	2102      	movs	r1, #2
 8005a10:	0018      	movs	r0, r3
 8005a12:	f7fd ff15 	bl	8003840 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8005a16:	23a0      	movs	r3, #160	; 0xa0
 8005a18:	05db      	lsls	r3, r3, #23
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f7fd ff0e 	bl	8003840 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 8005a24:	1dbb      	adds	r3, r7, #6
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8005a2e:	23a0      	movs	r3, #160	; 0xa0
 8005a30:	05db      	lsls	r3, r3, #23
 8005a32:	2201      	movs	r2, #1
 8005a34:	2120      	movs	r1, #32
 8005a36:	0018      	movs	r0, r3
 8005a38:	f7fd ff02 	bl	8003840 <HAL_GPIO_WritePin>
 8005a3c:	e006      	b.n	8005a4c <lcd_write+0x122>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8005a3e:	23a0      	movs	r3, #160	; 0xa0
 8005a40:	05db      	lsls	r3, r3, #23
 8005a42:	2200      	movs	r2, #0
 8005a44:	2120      	movs	r1, #32
 8005a46:	0018      	movs	r0, r3
 8005a48:	f7fd fefa 	bl	8003840 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 8005a4c:	1dbb      	adds	r3, r7, #6
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2204      	movs	r2, #4
 8005a52:	4013      	ands	r3, r2
 8005a54:	d007      	beq.n	8005a66 <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8005a56:	23a0      	movs	r3, #160	; 0xa0
 8005a58:	05db      	lsls	r3, r3, #23
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2110      	movs	r1, #16
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f7fd feee 	bl	8003840 <HAL_GPIO_WritePin>
 8005a64:	e006      	b.n	8005a74 <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8005a66:	23a0      	movs	r3, #160	; 0xa0
 8005a68:	05db      	lsls	r3, r3, #23
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2110      	movs	r1, #16
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f7fd fee6 	bl	8003840 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8005a74:	1dbb      	adds	r3, r7, #6
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8005a7e:	23a0      	movs	r3, #160	; 0xa0
 8005a80:	05db      	lsls	r3, r3, #23
 8005a82:	2201      	movs	r2, #1
 8005a84:	2108      	movs	r1, #8
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7fd feda 	bl	8003840 <HAL_GPIO_WritePin>
 8005a8c:	e006      	b.n	8005a9c <lcd_write+0x172>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8005a8e:	23a0      	movs	r3, #160	; 0xa0
 8005a90:	05db      	lsls	r3, r3, #23
 8005a92:	2200      	movs	r2, #0
 8005a94:	2108      	movs	r1, #8
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7fd fed2 	bl	8003840 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8005a9c:	1dbb      	adds	r3, r7, #6
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8005aa6:	23a0      	movs	r3, #160	; 0xa0
 8005aa8:	05db      	lsls	r3, r3, #23
 8005aaa:	2201      	movs	r2, #1
 8005aac:	2104      	movs	r1, #4
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7fd fec6 	bl	8003840 <HAL_GPIO_WritePin>
 8005ab4:	e006      	b.n	8005ac4 <lcd_write+0x19a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8005ab6:	23a0      	movs	r3, #160	; 0xa0
 8005ab8:	05db      	lsls	r3, r3, #23
 8005aba:	2200      	movs	r2, #0
 8005abc:	2104      	movs	r1, #4
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f7fd febe 	bl	8003840 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8005ac4:	23a0      	movs	r3, #160	; 0xa0
 8005ac6:	05db      	lsls	r3, r3, #23
 8005ac8:	2201      	movs	r2, #1
 8005aca:	2102      	movs	r1, #2
 8005acc:	0018      	movs	r0, r3
 8005ace:	f7fd feb7 	bl	8003840 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8005ad2:	23a0      	movs	r3, #160	; 0xa0
 8005ad4:	05db      	lsls	r3, r3, #23
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2102      	movs	r1, #2
 8005ada:	0018      	movs	r0, r3
 8005adc:	f7fd feb0 	bl	8003840 <HAL_GPIO_WritePin>
}
 8005ae0:	46c0      	nop			; (mov r8, r8)
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, char *string)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	603a      	str	r2, [r7, #0]
 8005af0:	1dfb      	adds	r3, r7, #7
 8005af2:	1c02      	adds	r2, r0, #0
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	1dbb      	adds	r3, r7, #6
 8005af8:	1c0a      	adds	r2, r1, #0
 8005afa:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8005afc:	1dfb      	adds	r3, r7, #7
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d023      	beq.n	8005b4c <lcd_puts+0x64>
 8005b04:	dc35      	bgt.n	8005b72 <lcd_puts+0x8a>
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d017      	beq.n	8005b3a <lcd_puts+0x52>
 8005b0a:	dc32      	bgt.n	8005b72 <lcd_puts+0x8a>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <lcd_puts+0x2e>
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d009      	beq.n	8005b28 <lcd_puts+0x40>
 8005b14:	e023      	b.n	8005b5e <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8005b16:	1dbb      	adds	r3, r7, #6
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	3b80      	subs	r3, #128	; 0x80
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	0019      	movs	r1, r3
 8005b20:	2000      	movs	r0, #0
 8005b22:	f7ff ff02 	bl	800592a <lcd_write>
			break;
 8005b26:	e01a      	b.n	8005b5e <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8005b28:	1dbb      	adds	r3, r7, #6
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	3b40      	subs	r3, #64	; 0x40
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	0019      	movs	r1, r3
 8005b32:	2000      	movs	r0, #0
 8005b34:	f7ff fef9 	bl	800592a <lcd_write>
			break;
 8005b38:	e011      	b.n	8005b5e <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8005b3a:	1dbb      	adds	r3, r7, #6
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	3b70      	subs	r3, #112	; 0x70
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	0019      	movs	r1, r3
 8005b44:	2000      	movs	r0, #0
 8005b46:	f7ff fef0 	bl	800592a <lcd_write>
			break;
 8005b4a:	e008      	b.n	8005b5e <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8005b4c:	1dbb      	adds	r3, r7, #6
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	3b30      	subs	r3, #48	; 0x30
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	0019      	movs	r1, r3
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7ff fee7 	bl	800592a <lcd_write>
			break;
 8005b5c:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8005b5e:	e008      	b.n	8005b72 <lcd_puts+0x8a>
	{
		lcd_write(1,*string);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	0019      	movs	r1, r3
 8005b66:	2001      	movs	r0, #1
 8005b68:	f7ff fedf 	bl	800592a <lcd_write>
		string++;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	603b      	str	r3, [r7, #0]
	while(*string)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f2      	bne.n	8005b60 <lcd_puts+0x78>
	}
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <lcd_clear>:
void lcd_clear(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8005b88:	2101      	movs	r1, #1
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f7ff fecd 	bl	800592a <lcd_write>
}
 8005b90:	46c0      	nop			; (mov r8, r8)
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <__errno>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	; (8005ba0 <__errno+0x8>)
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	2000000c 	.word	0x2000000c

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	4d0c      	ldr	r5, [pc, #48]	; (8005bdc <__libc_init_array+0x38>)
 8005baa:	4c0d      	ldr	r4, [pc, #52]	; (8005be0 <__libc_init_array+0x3c>)
 8005bac:	1b64      	subs	r4, r4, r5
 8005bae:	10a4      	asrs	r4, r4, #2
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	2600      	movs	r6, #0
 8005bb6:	f000 fc8b 	bl	80064d0 <_init>
 8005bba:	4d0a      	ldr	r5, [pc, #40]	; (8005be4 <__libc_init_array+0x40>)
 8005bbc:	4c0a      	ldr	r4, [pc, #40]	; (8005be8 <__libc_init_array+0x44>)
 8005bbe:	1b64      	subs	r4, r4, r5
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	42a6      	cmp	r6, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	00b3      	lsls	r3, r6, #2
 8005bca:	58eb      	ldr	r3, [r5, r3]
 8005bcc:	4798      	blx	r3
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	00b3      	lsls	r3, r6, #2
 8005bd4:	58eb      	ldr	r3, [r5, r3]
 8005bd6:	4798      	blx	r3
 8005bd8:	3601      	adds	r6, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	08006618 	.word	0x08006618
 8005be0:	08006618 	.word	0x08006618
 8005be4:	08006618 	.word	0x08006618
 8005be8:	0800661c 	.word	0x0800661c

08005bec <memset>:
 8005bec:	0003      	movs	r3, r0
 8005bee:	1882      	adds	r2, r0, r2
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d100      	bne.n	8005bf6 <memset+0xa>
 8005bf4:	4770      	bx	lr
 8005bf6:	7019      	strb	r1, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	e7f9      	b.n	8005bf0 <memset+0x4>

08005bfc <siprintf>:
 8005bfc:	b40e      	push	{r1, r2, r3}
 8005bfe:	b500      	push	{lr}
 8005c00:	490b      	ldr	r1, [pc, #44]	; (8005c30 <siprintf+0x34>)
 8005c02:	b09c      	sub	sp, #112	; 0x70
 8005c04:	ab1d      	add	r3, sp, #116	; 0x74
 8005c06:	9002      	str	r0, [sp, #8]
 8005c08:	9006      	str	r0, [sp, #24]
 8005c0a:	9107      	str	r1, [sp, #28]
 8005c0c:	9104      	str	r1, [sp, #16]
 8005c0e:	4809      	ldr	r0, [pc, #36]	; (8005c34 <siprintf+0x38>)
 8005c10:	4909      	ldr	r1, [pc, #36]	; (8005c38 <siprintf+0x3c>)
 8005c12:	cb04      	ldmia	r3!, {r2}
 8005c14:	9105      	str	r1, [sp, #20]
 8005c16:	6800      	ldr	r0, [r0, #0]
 8005c18:	a902      	add	r1, sp, #8
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	f000 f870 	bl	8005d00 <_svfiprintf_r>
 8005c20:	2300      	movs	r3, #0
 8005c22:	9a02      	ldr	r2, [sp, #8]
 8005c24:	7013      	strb	r3, [r2, #0]
 8005c26:	b01c      	add	sp, #112	; 0x70
 8005c28:	bc08      	pop	{r3}
 8005c2a:	b003      	add	sp, #12
 8005c2c:	4718      	bx	r3
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	7fffffff 	.word	0x7fffffff
 8005c34:	2000000c 	.word	0x2000000c
 8005c38:	ffff0208 	.word	0xffff0208

08005c3c <__ssputs_r>:
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	688e      	ldr	r6, [r1, #8]
 8005c40:	b085      	sub	sp, #20
 8005c42:	0007      	movs	r7, r0
 8005c44:	000c      	movs	r4, r1
 8005c46:	9203      	str	r2, [sp, #12]
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	429e      	cmp	r6, r3
 8005c4c:	d83c      	bhi.n	8005cc8 <__ssputs_r+0x8c>
 8005c4e:	2390      	movs	r3, #144	; 0x90
 8005c50:	898a      	ldrh	r2, [r1, #12]
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	421a      	tst	r2, r3
 8005c56:	d034      	beq.n	8005cc2 <__ssputs_r+0x86>
 8005c58:	6909      	ldr	r1, [r1, #16]
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	6960      	ldr	r0, [r4, #20]
 8005c5e:	1a5b      	subs	r3, r3, r1
 8005c60:	9302      	str	r3, [sp, #8]
 8005c62:	2303      	movs	r3, #3
 8005c64:	4343      	muls	r3, r0
 8005c66:	0fdd      	lsrs	r5, r3, #31
 8005c68:	18ed      	adds	r5, r5, r3
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	9802      	ldr	r0, [sp, #8]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	181b      	adds	r3, r3, r0
 8005c72:	106d      	asrs	r5, r5, #1
 8005c74:	42ab      	cmp	r3, r5
 8005c76:	d900      	bls.n	8005c7a <__ssputs_r+0x3e>
 8005c78:	001d      	movs	r5, r3
 8005c7a:	0553      	lsls	r3, r2, #21
 8005c7c:	d532      	bpl.n	8005ce4 <__ssputs_r+0xa8>
 8005c7e:	0029      	movs	r1, r5
 8005c80:	0038      	movs	r0, r7
 8005c82:	f000 fb53 	bl	800632c <_malloc_r>
 8005c86:	1e06      	subs	r6, r0, #0
 8005c88:	d109      	bne.n	8005c9e <__ssputs_r+0x62>
 8005c8a:	230c      	movs	r3, #12
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	2340      	movs	r3, #64	; 0x40
 8005c90:	2001      	movs	r0, #1
 8005c92:	89a2      	ldrh	r2, [r4, #12]
 8005c94:	4240      	negs	r0, r0
 8005c96:	4313      	orrs	r3, r2
 8005c98:	81a3      	strh	r3, [r4, #12]
 8005c9a:	b005      	add	sp, #20
 8005c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9e:	9a02      	ldr	r2, [sp, #8]
 8005ca0:	6921      	ldr	r1, [r4, #16]
 8005ca2:	f000 faba 	bl	800621a <memcpy>
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	4a14      	ldr	r2, [pc, #80]	; (8005cfc <__ssputs_r+0xc0>)
 8005caa:	401a      	ands	r2, r3
 8005cac:	2380      	movs	r3, #128	; 0x80
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	81a3      	strh	r3, [r4, #12]
 8005cb2:	9b02      	ldr	r3, [sp, #8]
 8005cb4:	6126      	str	r6, [r4, #16]
 8005cb6:	18f6      	adds	r6, r6, r3
 8005cb8:	6026      	str	r6, [r4, #0]
 8005cba:	6165      	str	r5, [r4, #20]
 8005cbc:	9e01      	ldr	r6, [sp, #4]
 8005cbe:	1aed      	subs	r5, r5, r3
 8005cc0:	60a5      	str	r5, [r4, #8]
 8005cc2:	9b01      	ldr	r3, [sp, #4]
 8005cc4:	429e      	cmp	r6, r3
 8005cc6:	d900      	bls.n	8005cca <__ssputs_r+0x8e>
 8005cc8:	9e01      	ldr	r6, [sp, #4]
 8005cca:	0032      	movs	r2, r6
 8005ccc:	9903      	ldr	r1, [sp, #12]
 8005cce:	6820      	ldr	r0, [r4, #0]
 8005cd0:	f000 faac 	bl	800622c <memmove>
 8005cd4:	68a3      	ldr	r3, [r4, #8]
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	1b9b      	subs	r3, r3, r6
 8005cda:	60a3      	str	r3, [r4, #8]
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	199e      	adds	r6, r3, r6
 8005ce0:	6026      	str	r6, [r4, #0]
 8005ce2:	e7da      	b.n	8005c9a <__ssputs_r+0x5e>
 8005ce4:	002a      	movs	r2, r5
 8005ce6:	0038      	movs	r0, r7
 8005ce8:	f000 fb96 	bl	8006418 <_realloc_r>
 8005cec:	1e06      	subs	r6, r0, #0
 8005cee:	d1e0      	bne.n	8005cb2 <__ssputs_r+0x76>
 8005cf0:	0038      	movs	r0, r7
 8005cf2:	6921      	ldr	r1, [r4, #16]
 8005cf4:	f000 faae 	bl	8006254 <_free_r>
 8005cf8:	e7c7      	b.n	8005c8a <__ssputs_r+0x4e>
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	fffffb7f 	.word	0xfffffb7f

08005d00 <_svfiprintf_r>:
 8005d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d02:	b0a1      	sub	sp, #132	; 0x84
 8005d04:	9003      	str	r0, [sp, #12]
 8005d06:	001d      	movs	r5, r3
 8005d08:	898b      	ldrh	r3, [r1, #12]
 8005d0a:	000f      	movs	r7, r1
 8005d0c:	0016      	movs	r6, r2
 8005d0e:	061b      	lsls	r3, r3, #24
 8005d10:	d511      	bpl.n	8005d36 <_svfiprintf_r+0x36>
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10e      	bne.n	8005d36 <_svfiprintf_r+0x36>
 8005d18:	2140      	movs	r1, #64	; 0x40
 8005d1a:	f000 fb07 	bl	800632c <_malloc_r>
 8005d1e:	6038      	str	r0, [r7, #0]
 8005d20:	6138      	str	r0, [r7, #16]
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d105      	bne.n	8005d32 <_svfiprintf_r+0x32>
 8005d26:	230c      	movs	r3, #12
 8005d28:	9a03      	ldr	r2, [sp, #12]
 8005d2a:	3801      	subs	r0, #1
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	b021      	add	sp, #132	; 0x84
 8005d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	2300      	movs	r3, #0
 8005d38:	ac08      	add	r4, sp, #32
 8005d3a:	6163      	str	r3, [r4, #20]
 8005d3c:	3320      	adds	r3, #32
 8005d3e:	7663      	strb	r3, [r4, #25]
 8005d40:	3310      	adds	r3, #16
 8005d42:	76a3      	strb	r3, [r4, #26]
 8005d44:	9507      	str	r5, [sp, #28]
 8005d46:	0035      	movs	r5, r6
 8005d48:	782b      	ldrb	r3, [r5, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <_svfiprintf_r+0x52>
 8005d4e:	2b25      	cmp	r3, #37	; 0x25
 8005d50:	d147      	bne.n	8005de2 <_svfiprintf_r+0xe2>
 8005d52:	1bab      	subs	r3, r5, r6
 8005d54:	9305      	str	r3, [sp, #20]
 8005d56:	42b5      	cmp	r5, r6
 8005d58:	d00c      	beq.n	8005d74 <_svfiprintf_r+0x74>
 8005d5a:	0032      	movs	r2, r6
 8005d5c:	0039      	movs	r1, r7
 8005d5e:	9803      	ldr	r0, [sp, #12]
 8005d60:	f7ff ff6c 	bl	8005c3c <__ssputs_r>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d100      	bne.n	8005d6a <_svfiprintf_r+0x6a>
 8005d68:	e0ae      	b.n	8005ec8 <_svfiprintf_r+0x1c8>
 8005d6a:	6962      	ldr	r2, [r4, #20]
 8005d6c:	9b05      	ldr	r3, [sp, #20]
 8005d6e:	4694      	mov	ip, r2
 8005d70:	4463      	add	r3, ip
 8005d72:	6163      	str	r3, [r4, #20]
 8005d74:	782b      	ldrb	r3, [r5, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d100      	bne.n	8005d7c <_svfiprintf_r+0x7c>
 8005d7a:	e0a5      	b.n	8005ec8 <_svfiprintf_r+0x1c8>
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4252      	negs	r2, r2
 8005d82:	6062      	str	r2, [r4, #4]
 8005d84:	a904      	add	r1, sp, #16
 8005d86:	3254      	adds	r2, #84	; 0x54
 8005d88:	1852      	adds	r2, r2, r1
 8005d8a:	1c6e      	adds	r6, r5, #1
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	60e3      	str	r3, [r4, #12]
 8005d90:	60a3      	str	r3, [r4, #8]
 8005d92:	7013      	strb	r3, [r2, #0]
 8005d94:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d96:	2205      	movs	r2, #5
 8005d98:	7831      	ldrb	r1, [r6, #0]
 8005d9a:	4854      	ldr	r0, [pc, #336]	; (8005eec <_svfiprintf_r+0x1ec>)
 8005d9c:	f000 fa32 	bl	8006204 <memchr>
 8005da0:	1c75      	adds	r5, r6, #1
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d11f      	bne.n	8005de6 <_svfiprintf_r+0xe6>
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	06d3      	lsls	r3, r2, #27
 8005daa:	d504      	bpl.n	8005db6 <_svfiprintf_r+0xb6>
 8005dac:	2353      	movs	r3, #83	; 0x53
 8005dae:	a904      	add	r1, sp, #16
 8005db0:	185b      	adds	r3, r3, r1
 8005db2:	2120      	movs	r1, #32
 8005db4:	7019      	strb	r1, [r3, #0]
 8005db6:	0713      	lsls	r3, r2, #28
 8005db8:	d504      	bpl.n	8005dc4 <_svfiprintf_r+0xc4>
 8005dba:	2353      	movs	r3, #83	; 0x53
 8005dbc:	a904      	add	r1, sp, #16
 8005dbe:	185b      	adds	r3, r3, r1
 8005dc0:	212b      	movs	r1, #43	; 0x2b
 8005dc2:	7019      	strb	r1, [r3, #0]
 8005dc4:	7833      	ldrb	r3, [r6, #0]
 8005dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc8:	d016      	beq.n	8005df8 <_svfiprintf_r+0xf8>
 8005dca:	0035      	movs	r5, r6
 8005dcc:	2100      	movs	r1, #0
 8005dce:	200a      	movs	r0, #10
 8005dd0:	68e3      	ldr	r3, [r4, #12]
 8005dd2:	782a      	ldrb	r2, [r5, #0]
 8005dd4:	1c6e      	adds	r6, r5, #1
 8005dd6:	3a30      	subs	r2, #48	; 0x30
 8005dd8:	2a09      	cmp	r2, #9
 8005dda:	d94e      	bls.n	8005e7a <_svfiprintf_r+0x17a>
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	d111      	bne.n	8005e04 <_svfiprintf_r+0x104>
 8005de0:	e017      	b.n	8005e12 <_svfiprintf_r+0x112>
 8005de2:	3501      	adds	r5, #1
 8005de4:	e7b0      	b.n	8005d48 <_svfiprintf_r+0x48>
 8005de6:	4b41      	ldr	r3, [pc, #260]	; (8005eec <_svfiprintf_r+0x1ec>)
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	1ac0      	subs	r0, r0, r3
 8005dec:	2301      	movs	r3, #1
 8005dee:	4083      	lsls	r3, r0
 8005df0:	4313      	orrs	r3, r2
 8005df2:	002e      	movs	r6, r5
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	e7ce      	b.n	8005d96 <_svfiprintf_r+0x96>
 8005df8:	9b07      	ldr	r3, [sp, #28]
 8005dfa:	1d19      	adds	r1, r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	9107      	str	r1, [sp, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	db01      	blt.n	8005e08 <_svfiprintf_r+0x108>
 8005e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e06:	e004      	b.n	8005e12 <_svfiprintf_r+0x112>
 8005e08:	425b      	negs	r3, r3
 8005e0a:	60e3      	str	r3, [r4, #12]
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	782b      	ldrb	r3, [r5, #0]
 8005e14:	2b2e      	cmp	r3, #46	; 0x2e
 8005e16:	d10a      	bne.n	8005e2e <_svfiprintf_r+0x12e>
 8005e18:	786b      	ldrb	r3, [r5, #1]
 8005e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1c:	d135      	bne.n	8005e8a <_svfiprintf_r+0x18a>
 8005e1e:	9b07      	ldr	r3, [sp, #28]
 8005e20:	3502      	adds	r5, #2
 8005e22:	1d1a      	adds	r2, r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	9207      	str	r2, [sp, #28]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	db2b      	blt.n	8005e84 <_svfiprintf_r+0x184>
 8005e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2e:	4e30      	ldr	r6, [pc, #192]	; (8005ef0 <_svfiprintf_r+0x1f0>)
 8005e30:	2203      	movs	r2, #3
 8005e32:	0030      	movs	r0, r6
 8005e34:	7829      	ldrb	r1, [r5, #0]
 8005e36:	f000 f9e5 	bl	8006204 <memchr>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d006      	beq.n	8005e4c <_svfiprintf_r+0x14c>
 8005e3e:	2340      	movs	r3, #64	; 0x40
 8005e40:	1b80      	subs	r0, r0, r6
 8005e42:	4083      	lsls	r3, r0
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	3501      	adds	r5, #1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	7829      	ldrb	r1, [r5, #0]
 8005e4e:	2206      	movs	r2, #6
 8005e50:	4828      	ldr	r0, [pc, #160]	; (8005ef4 <_svfiprintf_r+0x1f4>)
 8005e52:	1c6e      	adds	r6, r5, #1
 8005e54:	7621      	strb	r1, [r4, #24]
 8005e56:	f000 f9d5 	bl	8006204 <memchr>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d03c      	beq.n	8005ed8 <_svfiprintf_r+0x1d8>
 8005e5e:	4b26      	ldr	r3, [pc, #152]	; (8005ef8 <_svfiprintf_r+0x1f8>)
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d125      	bne.n	8005eb0 <_svfiprintf_r+0x1b0>
 8005e64:	2207      	movs	r2, #7
 8005e66:	9b07      	ldr	r3, [sp, #28]
 8005e68:	3307      	adds	r3, #7
 8005e6a:	4393      	bics	r3, r2
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	6963      	ldr	r3, [r4, #20]
 8005e72:	9a04      	ldr	r2, [sp, #16]
 8005e74:	189b      	adds	r3, r3, r2
 8005e76:	6163      	str	r3, [r4, #20]
 8005e78:	e765      	b.n	8005d46 <_svfiprintf_r+0x46>
 8005e7a:	4343      	muls	r3, r0
 8005e7c:	0035      	movs	r5, r6
 8005e7e:	2101      	movs	r1, #1
 8005e80:	189b      	adds	r3, r3, r2
 8005e82:	e7a6      	b.n	8005dd2 <_svfiprintf_r+0xd2>
 8005e84:	2301      	movs	r3, #1
 8005e86:	425b      	negs	r3, r3
 8005e88:	e7d0      	b.n	8005e2c <_svfiprintf_r+0x12c>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	200a      	movs	r0, #10
 8005e8e:	001a      	movs	r2, r3
 8005e90:	3501      	adds	r5, #1
 8005e92:	6063      	str	r3, [r4, #4]
 8005e94:	7829      	ldrb	r1, [r5, #0]
 8005e96:	1c6e      	adds	r6, r5, #1
 8005e98:	3930      	subs	r1, #48	; 0x30
 8005e9a:	2909      	cmp	r1, #9
 8005e9c:	d903      	bls.n	8005ea6 <_svfiprintf_r+0x1a6>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0c5      	beq.n	8005e2e <_svfiprintf_r+0x12e>
 8005ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea4:	e7c3      	b.n	8005e2e <_svfiprintf_r+0x12e>
 8005ea6:	4342      	muls	r2, r0
 8005ea8:	0035      	movs	r5, r6
 8005eaa:	2301      	movs	r3, #1
 8005eac:	1852      	adds	r2, r2, r1
 8005eae:	e7f1      	b.n	8005e94 <_svfiprintf_r+0x194>
 8005eb0:	ab07      	add	r3, sp, #28
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	003a      	movs	r2, r7
 8005eb6:	0021      	movs	r1, r4
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <_svfiprintf_r+0x1fc>)
 8005eba:	9803      	ldr	r0, [sp, #12]
 8005ebc:	e000      	b.n	8005ec0 <_svfiprintf_r+0x1c0>
 8005ebe:	bf00      	nop
 8005ec0:	9004      	str	r0, [sp, #16]
 8005ec2:	9b04      	ldr	r3, [sp, #16]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	d1d3      	bne.n	8005e70 <_svfiprintf_r+0x170>
 8005ec8:	89bb      	ldrh	r3, [r7, #12]
 8005eca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ecc:	065b      	lsls	r3, r3, #25
 8005ece:	d400      	bmi.n	8005ed2 <_svfiprintf_r+0x1d2>
 8005ed0:	e72d      	b.n	8005d2e <_svfiprintf_r+0x2e>
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	4240      	negs	r0, r0
 8005ed6:	e72a      	b.n	8005d2e <_svfiprintf_r+0x2e>
 8005ed8:	ab07      	add	r3, sp, #28
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	003a      	movs	r2, r7
 8005ede:	0021      	movs	r1, r4
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <_svfiprintf_r+0x1fc>)
 8005ee2:	9803      	ldr	r0, [sp, #12]
 8005ee4:	f000 f87c 	bl	8005fe0 <_printf_i>
 8005ee8:	e7ea      	b.n	8005ec0 <_svfiprintf_r+0x1c0>
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	080065e4 	.word	0x080065e4
 8005ef0:	080065ea 	.word	0x080065ea
 8005ef4:	080065ee 	.word	0x080065ee
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	08005c3d 	.word	0x08005c3d

08005f00 <_printf_common>:
 8005f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f02:	0015      	movs	r5, r2
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	688a      	ldr	r2, [r1, #8]
 8005f08:	690b      	ldr	r3, [r1, #16]
 8005f0a:	000c      	movs	r4, r1
 8005f0c:	9000      	str	r0, [sp, #0]
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	da00      	bge.n	8005f14 <_printf_common+0x14>
 8005f12:	0013      	movs	r3, r2
 8005f14:	0022      	movs	r2, r4
 8005f16:	602b      	str	r3, [r5, #0]
 8005f18:	3243      	adds	r2, #67	; 0x43
 8005f1a:	7812      	ldrb	r2, [r2, #0]
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	d001      	beq.n	8005f24 <_printf_common+0x24>
 8005f20:	3301      	adds	r3, #1
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	069b      	lsls	r3, r3, #26
 8005f28:	d502      	bpl.n	8005f30 <_printf_common+0x30>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	602b      	str	r3, [r5, #0]
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	2306      	movs	r3, #6
 8005f34:	0017      	movs	r7, r2
 8005f36:	401f      	ands	r7, r3
 8005f38:	421a      	tst	r2, r3
 8005f3a:	d027      	beq.n	8005f8c <_printf_common+0x8c>
 8005f3c:	0023      	movs	r3, r4
 8005f3e:	3343      	adds	r3, #67	; 0x43
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	1e5a      	subs	r2, r3, #1
 8005f44:	4193      	sbcs	r3, r2
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	0692      	lsls	r2, r2, #26
 8005f4a:	d430      	bmi.n	8005fae <_printf_common+0xae>
 8005f4c:	0022      	movs	r2, r4
 8005f4e:	9901      	ldr	r1, [sp, #4]
 8005f50:	9800      	ldr	r0, [sp, #0]
 8005f52:	9e08      	ldr	r6, [sp, #32]
 8005f54:	3243      	adds	r2, #67	; 0x43
 8005f56:	47b0      	blx	r6
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d025      	beq.n	8005fa8 <_printf_common+0xa8>
 8005f5c:	2306      	movs	r3, #6
 8005f5e:	6820      	ldr	r0, [r4, #0]
 8005f60:	682a      	ldr	r2, [r5, #0]
 8005f62:	68e1      	ldr	r1, [r4, #12]
 8005f64:	2500      	movs	r5, #0
 8005f66:	4003      	ands	r3, r0
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d103      	bne.n	8005f74 <_printf_common+0x74>
 8005f6c:	1a8d      	subs	r5, r1, r2
 8005f6e:	43eb      	mvns	r3, r5
 8005f70:	17db      	asrs	r3, r3, #31
 8005f72:	401d      	ands	r5, r3
 8005f74:	68a3      	ldr	r3, [r4, #8]
 8005f76:	6922      	ldr	r2, [r4, #16]
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	dd01      	ble.n	8005f80 <_printf_common+0x80>
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	18ed      	adds	r5, r5, r3
 8005f80:	2700      	movs	r7, #0
 8005f82:	42bd      	cmp	r5, r7
 8005f84:	d120      	bne.n	8005fc8 <_printf_common+0xc8>
 8005f86:	2000      	movs	r0, #0
 8005f88:	e010      	b.n	8005fac <_printf_common+0xac>
 8005f8a:	3701      	adds	r7, #1
 8005f8c:	68e3      	ldr	r3, [r4, #12]
 8005f8e:	682a      	ldr	r2, [r5, #0]
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	42bb      	cmp	r3, r7
 8005f94:	ddd2      	ble.n	8005f3c <_printf_common+0x3c>
 8005f96:	0022      	movs	r2, r4
 8005f98:	2301      	movs	r3, #1
 8005f9a:	9901      	ldr	r1, [sp, #4]
 8005f9c:	9800      	ldr	r0, [sp, #0]
 8005f9e:	9e08      	ldr	r6, [sp, #32]
 8005fa0:	3219      	adds	r2, #25
 8005fa2:	47b0      	blx	r6
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d1f0      	bne.n	8005f8a <_printf_common+0x8a>
 8005fa8:	2001      	movs	r0, #1
 8005faa:	4240      	negs	r0, r0
 8005fac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fae:	2030      	movs	r0, #48	; 0x30
 8005fb0:	18e1      	adds	r1, r4, r3
 8005fb2:	3143      	adds	r1, #67	; 0x43
 8005fb4:	7008      	strb	r0, [r1, #0]
 8005fb6:	0021      	movs	r1, r4
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	3145      	adds	r1, #69	; 0x45
 8005fbc:	7809      	ldrb	r1, [r1, #0]
 8005fbe:	18a2      	adds	r2, r4, r2
 8005fc0:	3243      	adds	r2, #67	; 0x43
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	7011      	strb	r1, [r2, #0]
 8005fc6:	e7c1      	b.n	8005f4c <_printf_common+0x4c>
 8005fc8:	0022      	movs	r2, r4
 8005fca:	2301      	movs	r3, #1
 8005fcc:	9901      	ldr	r1, [sp, #4]
 8005fce:	9800      	ldr	r0, [sp, #0]
 8005fd0:	9e08      	ldr	r6, [sp, #32]
 8005fd2:	321a      	adds	r2, #26
 8005fd4:	47b0      	blx	r6
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa8>
 8005fda:	3701      	adds	r7, #1
 8005fdc:	e7d1      	b.n	8005f82 <_printf_common+0x82>
	...

08005fe0 <_printf_i>:
 8005fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe2:	b08b      	sub	sp, #44	; 0x2c
 8005fe4:	9206      	str	r2, [sp, #24]
 8005fe6:	000a      	movs	r2, r1
 8005fe8:	3243      	adds	r2, #67	; 0x43
 8005fea:	9307      	str	r3, [sp, #28]
 8005fec:	9005      	str	r0, [sp, #20]
 8005fee:	9204      	str	r2, [sp, #16]
 8005ff0:	7e0a      	ldrb	r2, [r1, #24]
 8005ff2:	000c      	movs	r4, r1
 8005ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ff6:	2a78      	cmp	r2, #120	; 0x78
 8005ff8:	d807      	bhi.n	800600a <_printf_i+0x2a>
 8005ffa:	2a62      	cmp	r2, #98	; 0x62
 8005ffc:	d809      	bhi.n	8006012 <_printf_i+0x32>
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	d100      	bne.n	8006004 <_printf_i+0x24>
 8006002:	e0c1      	b.n	8006188 <_printf_i+0x1a8>
 8006004:	2a58      	cmp	r2, #88	; 0x58
 8006006:	d100      	bne.n	800600a <_printf_i+0x2a>
 8006008:	e08c      	b.n	8006124 <_printf_i+0x144>
 800600a:	0026      	movs	r6, r4
 800600c:	3642      	adds	r6, #66	; 0x42
 800600e:	7032      	strb	r2, [r6, #0]
 8006010:	e022      	b.n	8006058 <_printf_i+0x78>
 8006012:	0010      	movs	r0, r2
 8006014:	3863      	subs	r0, #99	; 0x63
 8006016:	2815      	cmp	r0, #21
 8006018:	d8f7      	bhi.n	800600a <_printf_i+0x2a>
 800601a:	f7fa f873 	bl	8000104 <__gnu_thumb1_case_shi>
 800601e:	0016      	.short	0x0016
 8006020:	fff6001f 	.word	0xfff6001f
 8006024:	fff6fff6 	.word	0xfff6fff6
 8006028:	001ffff6 	.word	0x001ffff6
 800602c:	fff6fff6 	.word	0xfff6fff6
 8006030:	fff6fff6 	.word	0xfff6fff6
 8006034:	003600a8 	.word	0x003600a8
 8006038:	fff6009a 	.word	0xfff6009a
 800603c:	00b9fff6 	.word	0x00b9fff6
 8006040:	0036fff6 	.word	0x0036fff6
 8006044:	fff6fff6 	.word	0xfff6fff6
 8006048:	009e      	.short	0x009e
 800604a:	0026      	movs	r6, r4
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	3642      	adds	r6, #66	; 0x42
 8006050:	1d11      	adds	r1, r2, #4
 8006052:	6019      	str	r1, [r3, #0]
 8006054:	6813      	ldr	r3, [r2, #0]
 8006056:	7033      	strb	r3, [r6, #0]
 8006058:	2301      	movs	r3, #1
 800605a:	e0a7      	b.n	80061ac <_printf_i+0x1cc>
 800605c:	6808      	ldr	r0, [r1, #0]
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	1d0a      	adds	r2, r1, #4
 8006062:	0605      	lsls	r5, r0, #24
 8006064:	d50b      	bpl.n	800607e <_printf_i+0x9e>
 8006066:	680d      	ldr	r5, [r1, #0]
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	2d00      	cmp	r5, #0
 800606c:	da03      	bge.n	8006076 <_printf_i+0x96>
 800606e:	232d      	movs	r3, #45	; 0x2d
 8006070:	9a04      	ldr	r2, [sp, #16]
 8006072:	426d      	negs	r5, r5
 8006074:	7013      	strb	r3, [r2, #0]
 8006076:	4b61      	ldr	r3, [pc, #388]	; (80061fc <_printf_i+0x21c>)
 8006078:	270a      	movs	r7, #10
 800607a:	9303      	str	r3, [sp, #12]
 800607c:	e01b      	b.n	80060b6 <_printf_i+0xd6>
 800607e:	680d      	ldr	r5, [r1, #0]
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	0641      	lsls	r1, r0, #25
 8006084:	d5f1      	bpl.n	800606a <_printf_i+0x8a>
 8006086:	b22d      	sxth	r5, r5
 8006088:	e7ef      	b.n	800606a <_printf_i+0x8a>
 800608a:	680d      	ldr	r5, [r1, #0]
 800608c:	6819      	ldr	r1, [r3, #0]
 800608e:	1d08      	adds	r0, r1, #4
 8006090:	6018      	str	r0, [r3, #0]
 8006092:	062e      	lsls	r6, r5, #24
 8006094:	d501      	bpl.n	800609a <_printf_i+0xba>
 8006096:	680d      	ldr	r5, [r1, #0]
 8006098:	e003      	b.n	80060a2 <_printf_i+0xc2>
 800609a:	066d      	lsls	r5, r5, #25
 800609c:	d5fb      	bpl.n	8006096 <_printf_i+0xb6>
 800609e:	680d      	ldr	r5, [r1, #0]
 80060a0:	b2ad      	uxth	r5, r5
 80060a2:	4b56      	ldr	r3, [pc, #344]	; (80061fc <_printf_i+0x21c>)
 80060a4:	2708      	movs	r7, #8
 80060a6:	9303      	str	r3, [sp, #12]
 80060a8:	2a6f      	cmp	r2, #111	; 0x6f
 80060aa:	d000      	beq.n	80060ae <_printf_i+0xce>
 80060ac:	3702      	adds	r7, #2
 80060ae:	0023      	movs	r3, r4
 80060b0:	2200      	movs	r2, #0
 80060b2:	3343      	adds	r3, #67	; 0x43
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	60a3      	str	r3, [r4, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	db03      	blt.n	80060c6 <_printf_i+0xe6>
 80060be:	2204      	movs	r2, #4
 80060c0:	6821      	ldr	r1, [r4, #0]
 80060c2:	4391      	bics	r1, r2
 80060c4:	6021      	str	r1, [r4, #0]
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	d102      	bne.n	80060d0 <_printf_i+0xf0>
 80060ca:	9e04      	ldr	r6, [sp, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00c      	beq.n	80060ea <_printf_i+0x10a>
 80060d0:	9e04      	ldr	r6, [sp, #16]
 80060d2:	0028      	movs	r0, r5
 80060d4:	0039      	movs	r1, r7
 80060d6:	f7fa f8a5 	bl	8000224 <__aeabi_uidivmod>
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	3e01      	subs	r6, #1
 80060de:	5c5b      	ldrb	r3, [r3, r1]
 80060e0:	7033      	strb	r3, [r6, #0]
 80060e2:	002b      	movs	r3, r5
 80060e4:	0005      	movs	r5, r0
 80060e6:	429f      	cmp	r7, r3
 80060e8:	d9f3      	bls.n	80060d2 <_printf_i+0xf2>
 80060ea:	2f08      	cmp	r7, #8
 80060ec:	d109      	bne.n	8006102 <_printf_i+0x122>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	07db      	lsls	r3, r3, #31
 80060f2:	d506      	bpl.n	8006102 <_printf_i+0x122>
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	6922      	ldr	r2, [r4, #16]
 80060f8:	4293      	cmp	r3, r2
 80060fa:	dc02      	bgt.n	8006102 <_printf_i+0x122>
 80060fc:	2330      	movs	r3, #48	; 0x30
 80060fe:	3e01      	subs	r6, #1
 8006100:	7033      	strb	r3, [r6, #0]
 8006102:	9b04      	ldr	r3, [sp, #16]
 8006104:	1b9b      	subs	r3, r3, r6
 8006106:	6123      	str	r3, [r4, #16]
 8006108:	9b07      	ldr	r3, [sp, #28]
 800610a:	0021      	movs	r1, r4
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	9805      	ldr	r0, [sp, #20]
 8006110:	9b06      	ldr	r3, [sp, #24]
 8006112:	aa09      	add	r2, sp, #36	; 0x24
 8006114:	f7ff fef4 	bl	8005f00 <_printf_common>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d14c      	bne.n	80061b6 <_printf_i+0x1d6>
 800611c:	2001      	movs	r0, #1
 800611e:	4240      	negs	r0, r0
 8006120:	b00b      	add	sp, #44	; 0x2c
 8006122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006124:	3145      	adds	r1, #69	; 0x45
 8006126:	700a      	strb	r2, [r1, #0]
 8006128:	4a34      	ldr	r2, [pc, #208]	; (80061fc <_printf_i+0x21c>)
 800612a:	9203      	str	r2, [sp, #12]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	6821      	ldr	r1, [r4, #0]
 8006130:	ca20      	ldmia	r2!, {r5}
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	0608      	lsls	r0, r1, #24
 8006136:	d516      	bpl.n	8006166 <_printf_i+0x186>
 8006138:	07cb      	lsls	r3, r1, #31
 800613a:	d502      	bpl.n	8006142 <_printf_i+0x162>
 800613c:	2320      	movs	r3, #32
 800613e:	4319      	orrs	r1, r3
 8006140:	6021      	str	r1, [r4, #0]
 8006142:	2710      	movs	r7, #16
 8006144:	2d00      	cmp	r5, #0
 8006146:	d1b2      	bne.n	80060ae <_printf_i+0xce>
 8006148:	2320      	movs	r3, #32
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	439a      	bics	r2, r3
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	e7ad      	b.n	80060ae <_printf_i+0xce>
 8006152:	2220      	movs	r2, #32
 8006154:	6809      	ldr	r1, [r1, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	6022      	str	r2, [r4, #0]
 800615a:	0022      	movs	r2, r4
 800615c:	2178      	movs	r1, #120	; 0x78
 800615e:	3245      	adds	r2, #69	; 0x45
 8006160:	7011      	strb	r1, [r2, #0]
 8006162:	4a27      	ldr	r2, [pc, #156]	; (8006200 <_printf_i+0x220>)
 8006164:	e7e1      	b.n	800612a <_printf_i+0x14a>
 8006166:	0648      	lsls	r0, r1, #25
 8006168:	d5e6      	bpl.n	8006138 <_printf_i+0x158>
 800616a:	b2ad      	uxth	r5, r5
 800616c:	e7e4      	b.n	8006138 <_printf_i+0x158>
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	680d      	ldr	r5, [r1, #0]
 8006172:	1d10      	adds	r0, r2, #4
 8006174:	6949      	ldr	r1, [r1, #20]
 8006176:	6018      	str	r0, [r3, #0]
 8006178:	6813      	ldr	r3, [r2, #0]
 800617a:	062e      	lsls	r6, r5, #24
 800617c:	d501      	bpl.n	8006182 <_printf_i+0x1a2>
 800617e:	6019      	str	r1, [r3, #0]
 8006180:	e002      	b.n	8006188 <_printf_i+0x1a8>
 8006182:	066d      	lsls	r5, r5, #25
 8006184:	d5fb      	bpl.n	800617e <_printf_i+0x19e>
 8006186:	8019      	strh	r1, [r3, #0]
 8006188:	2300      	movs	r3, #0
 800618a:	9e04      	ldr	r6, [sp, #16]
 800618c:	6123      	str	r3, [r4, #16]
 800618e:	e7bb      	b.n	8006108 <_printf_i+0x128>
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	1d11      	adds	r1, r2, #4
 8006194:	6019      	str	r1, [r3, #0]
 8006196:	6816      	ldr	r6, [r2, #0]
 8006198:	2100      	movs	r1, #0
 800619a:	0030      	movs	r0, r6
 800619c:	6862      	ldr	r2, [r4, #4]
 800619e:	f000 f831 	bl	8006204 <memchr>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d001      	beq.n	80061aa <_printf_i+0x1ca>
 80061a6:	1b80      	subs	r0, r0, r6
 80061a8:	6060      	str	r0, [r4, #4]
 80061aa:	6863      	ldr	r3, [r4, #4]
 80061ac:	6123      	str	r3, [r4, #16]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9a04      	ldr	r2, [sp, #16]
 80061b2:	7013      	strb	r3, [r2, #0]
 80061b4:	e7a8      	b.n	8006108 <_printf_i+0x128>
 80061b6:	6923      	ldr	r3, [r4, #16]
 80061b8:	0032      	movs	r2, r6
 80061ba:	9906      	ldr	r1, [sp, #24]
 80061bc:	9805      	ldr	r0, [sp, #20]
 80061be:	9d07      	ldr	r5, [sp, #28]
 80061c0:	47a8      	blx	r5
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	d0aa      	beq.n	800611c <_printf_i+0x13c>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	079b      	lsls	r3, r3, #30
 80061ca:	d415      	bmi.n	80061f8 <_printf_i+0x218>
 80061cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ce:	68e0      	ldr	r0, [r4, #12]
 80061d0:	4298      	cmp	r0, r3
 80061d2:	daa5      	bge.n	8006120 <_printf_i+0x140>
 80061d4:	0018      	movs	r0, r3
 80061d6:	e7a3      	b.n	8006120 <_printf_i+0x140>
 80061d8:	0022      	movs	r2, r4
 80061da:	2301      	movs	r3, #1
 80061dc:	9906      	ldr	r1, [sp, #24]
 80061de:	9805      	ldr	r0, [sp, #20]
 80061e0:	9e07      	ldr	r6, [sp, #28]
 80061e2:	3219      	adds	r2, #25
 80061e4:	47b0      	blx	r6
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	d098      	beq.n	800611c <_printf_i+0x13c>
 80061ea:	3501      	adds	r5, #1
 80061ec:	68e3      	ldr	r3, [r4, #12]
 80061ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	42ab      	cmp	r3, r5
 80061f4:	dcf0      	bgt.n	80061d8 <_printf_i+0x1f8>
 80061f6:	e7e9      	b.n	80061cc <_printf_i+0x1ec>
 80061f8:	2500      	movs	r5, #0
 80061fa:	e7f7      	b.n	80061ec <_printf_i+0x20c>
 80061fc:	080065f5 	.word	0x080065f5
 8006200:	08006606 	.word	0x08006606

08006204 <memchr>:
 8006204:	b2c9      	uxtb	r1, r1
 8006206:	1882      	adds	r2, r0, r2
 8006208:	4290      	cmp	r0, r2
 800620a:	d101      	bne.n	8006210 <memchr+0xc>
 800620c:	2000      	movs	r0, #0
 800620e:	4770      	bx	lr
 8006210:	7803      	ldrb	r3, [r0, #0]
 8006212:	428b      	cmp	r3, r1
 8006214:	d0fb      	beq.n	800620e <memchr+0xa>
 8006216:	3001      	adds	r0, #1
 8006218:	e7f6      	b.n	8006208 <memchr+0x4>

0800621a <memcpy>:
 800621a:	2300      	movs	r3, #0
 800621c:	b510      	push	{r4, lr}
 800621e:	429a      	cmp	r2, r3
 8006220:	d100      	bne.n	8006224 <memcpy+0xa>
 8006222:	bd10      	pop	{r4, pc}
 8006224:	5ccc      	ldrb	r4, [r1, r3]
 8006226:	54c4      	strb	r4, [r0, r3]
 8006228:	3301      	adds	r3, #1
 800622a:	e7f8      	b.n	800621e <memcpy+0x4>

0800622c <memmove>:
 800622c:	b510      	push	{r4, lr}
 800622e:	4288      	cmp	r0, r1
 8006230:	d902      	bls.n	8006238 <memmove+0xc>
 8006232:	188b      	adds	r3, r1, r2
 8006234:	4298      	cmp	r0, r3
 8006236:	d303      	bcc.n	8006240 <memmove+0x14>
 8006238:	2300      	movs	r3, #0
 800623a:	e007      	b.n	800624c <memmove+0x20>
 800623c:	5c8b      	ldrb	r3, [r1, r2]
 800623e:	5483      	strb	r3, [r0, r2]
 8006240:	3a01      	subs	r2, #1
 8006242:	d2fb      	bcs.n	800623c <memmove+0x10>
 8006244:	bd10      	pop	{r4, pc}
 8006246:	5ccc      	ldrb	r4, [r1, r3]
 8006248:	54c4      	strb	r4, [r0, r3]
 800624a:	3301      	adds	r3, #1
 800624c:	429a      	cmp	r2, r3
 800624e:	d1fa      	bne.n	8006246 <memmove+0x1a>
 8006250:	e7f8      	b.n	8006244 <memmove+0x18>
	...

08006254 <_free_r>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	0005      	movs	r5, r0
 8006258:	2900      	cmp	r1, #0
 800625a:	d010      	beq.n	800627e <_free_r+0x2a>
 800625c:	1f0c      	subs	r4, r1, #4
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	da00      	bge.n	8006266 <_free_r+0x12>
 8006264:	18e4      	adds	r4, r4, r3
 8006266:	0028      	movs	r0, r5
 8006268:	f000 f918 	bl	800649c <__malloc_lock>
 800626c:	4a1d      	ldr	r2, [pc, #116]	; (80062e4 <_free_r+0x90>)
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <_free_r+0x2c>
 8006274:	6063      	str	r3, [r4, #4]
 8006276:	6014      	str	r4, [r2, #0]
 8006278:	0028      	movs	r0, r5
 800627a:	f000 f917 	bl	80064ac <__malloc_unlock>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	42a3      	cmp	r3, r4
 8006282:	d908      	bls.n	8006296 <_free_r+0x42>
 8006284:	6821      	ldr	r1, [r4, #0]
 8006286:	1860      	adds	r0, r4, r1
 8006288:	4283      	cmp	r3, r0
 800628a:	d1f3      	bne.n	8006274 <_free_r+0x20>
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	1841      	adds	r1, r0, r1
 8006292:	6021      	str	r1, [r4, #0]
 8006294:	e7ee      	b.n	8006274 <_free_r+0x20>
 8006296:	001a      	movs	r2, r3
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <_free_r+0x4e>
 800629e:	42a3      	cmp	r3, r4
 80062a0:	d9f9      	bls.n	8006296 <_free_r+0x42>
 80062a2:	6811      	ldr	r1, [r2, #0]
 80062a4:	1850      	adds	r0, r2, r1
 80062a6:	42a0      	cmp	r0, r4
 80062a8:	d10b      	bne.n	80062c2 <_free_r+0x6e>
 80062aa:	6820      	ldr	r0, [r4, #0]
 80062ac:	1809      	adds	r1, r1, r0
 80062ae:	1850      	adds	r0, r2, r1
 80062b0:	6011      	str	r1, [r2, #0]
 80062b2:	4283      	cmp	r3, r0
 80062b4:	d1e0      	bne.n	8006278 <_free_r+0x24>
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	1841      	adds	r1, r0, r1
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	6053      	str	r3, [r2, #4]
 80062c0:	e7da      	b.n	8006278 <_free_r+0x24>
 80062c2:	42a0      	cmp	r0, r4
 80062c4:	d902      	bls.n	80062cc <_free_r+0x78>
 80062c6:	230c      	movs	r3, #12
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	e7d5      	b.n	8006278 <_free_r+0x24>
 80062cc:	6821      	ldr	r1, [r4, #0]
 80062ce:	1860      	adds	r0, r4, r1
 80062d0:	4283      	cmp	r3, r0
 80062d2:	d103      	bne.n	80062dc <_free_r+0x88>
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	1841      	adds	r1, r0, r1
 80062da:	6021      	str	r1, [r4, #0]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	6054      	str	r4, [r2, #4]
 80062e0:	e7ca      	b.n	8006278 <_free_r+0x24>
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	2000015c 	.word	0x2000015c

080062e8 <sbrk_aligned>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	4e0f      	ldr	r6, [pc, #60]	; (8006328 <sbrk_aligned+0x40>)
 80062ec:	000d      	movs	r5, r1
 80062ee:	6831      	ldr	r1, [r6, #0]
 80062f0:	0004      	movs	r4, r0
 80062f2:	2900      	cmp	r1, #0
 80062f4:	d102      	bne.n	80062fc <sbrk_aligned+0x14>
 80062f6:	f000 f8bf 	bl	8006478 <_sbrk_r>
 80062fa:	6030      	str	r0, [r6, #0]
 80062fc:	0029      	movs	r1, r5
 80062fe:	0020      	movs	r0, r4
 8006300:	f000 f8ba 	bl	8006478 <_sbrk_r>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d00a      	beq.n	800631e <sbrk_aligned+0x36>
 8006308:	2303      	movs	r3, #3
 800630a:	1cc5      	adds	r5, r0, #3
 800630c:	439d      	bics	r5, r3
 800630e:	42a8      	cmp	r0, r5
 8006310:	d007      	beq.n	8006322 <sbrk_aligned+0x3a>
 8006312:	1a29      	subs	r1, r5, r0
 8006314:	0020      	movs	r0, r4
 8006316:	f000 f8af 	bl	8006478 <_sbrk_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d101      	bne.n	8006322 <sbrk_aligned+0x3a>
 800631e:	2501      	movs	r5, #1
 8006320:	426d      	negs	r5, r5
 8006322:	0028      	movs	r0, r5
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	20000160 	.word	0x20000160

0800632c <_malloc_r>:
 800632c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800632e:	2203      	movs	r2, #3
 8006330:	1ccb      	adds	r3, r1, #3
 8006332:	4393      	bics	r3, r2
 8006334:	3308      	adds	r3, #8
 8006336:	0006      	movs	r6, r0
 8006338:	001f      	movs	r7, r3
 800633a:	2b0c      	cmp	r3, #12
 800633c:	d232      	bcs.n	80063a4 <_malloc_r+0x78>
 800633e:	270c      	movs	r7, #12
 8006340:	42b9      	cmp	r1, r7
 8006342:	d831      	bhi.n	80063a8 <_malloc_r+0x7c>
 8006344:	0030      	movs	r0, r6
 8006346:	f000 f8a9 	bl	800649c <__malloc_lock>
 800634a:	4d32      	ldr	r5, [pc, #200]	; (8006414 <_malloc_r+0xe8>)
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	001c      	movs	r4, r3
 8006350:	2c00      	cmp	r4, #0
 8006352:	d12e      	bne.n	80063b2 <_malloc_r+0x86>
 8006354:	0039      	movs	r1, r7
 8006356:	0030      	movs	r0, r6
 8006358:	f7ff ffc6 	bl	80062e8 <sbrk_aligned>
 800635c:	0004      	movs	r4, r0
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	d11e      	bne.n	80063a0 <_malloc_r+0x74>
 8006362:	682c      	ldr	r4, [r5, #0]
 8006364:	0025      	movs	r5, r4
 8006366:	2d00      	cmp	r5, #0
 8006368:	d14a      	bne.n	8006400 <_malloc_r+0xd4>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	0029      	movs	r1, r5
 800636e:	18e3      	adds	r3, r4, r3
 8006370:	0030      	movs	r0, r6
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	f000 f880 	bl	8006478 <_sbrk_r>
 8006378:	9b01      	ldr	r3, [sp, #4]
 800637a:	4283      	cmp	r3, r0
 800637c:	d143      	bne.n	8006406 <_malloc_r+0xda>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	3703      	adds	r7, #3
 8006382:	1aff      	subs	r7, r7, r3
 8006384:	2303      	movs	r3, #3
 8006386:	439f      	bics	r7, r3
 8006388:	3708      	adds	r7, #8
 800638a:	2f0c      	cmp	r7, #12
 800638c:	d200      	bcs.n	8006390 <_malloc_r+0x64>
 800638e:	270c      	movs	r7, #12
 8006390:	0039      	movs	r1, r7
 8006392:	0030      	movs	r0, r6
 8006394:	f7ff ffa8 	bl	80062e8 <sbrk_aligned>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	d034      	beq.n	8006406 <_malloc_r+0xda>
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	19df      	adds	r7, r3, r7
 80063a0:	6027      	str	r7, [r4, #0]
 80063a2:	e013      	b.n	80063cc <_malloc_r+0xa0>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dacb      	bge.n	8006340 <_malloc_r+0x14>
 80063a8:	230c      	movs	r3, #12
 80063aa:	2500      	movs	r5, #0
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	0028      	movs	r0, r5
 80063b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	1bd1      	subs	r1, r2, r7
 80063b6:	d420      	bmi.n	80063fa <_malloc_r+0xce>
 80063b8:	290b      	cmp	r1, #11
 80063ba:	d917      	bls.n	80063ec <_malloc_r+0xc0>
 80063bc:	19e2      	adds	r2, r4, r7
 80063be:	6027      	str	r7, [r4, #0]
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d111      	bne.n	80063e8 <_malloc_r+0xbc>
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	6863      	ldr	r3, [r4, #4]
 80063c8:	6011      	str	r1, [r2, #0]
 80063ca:	6053      	str	r3, [r2, #4]
 80063cc:	0030      	movs	r0, r6
 80063ce:	0025      	movs	r5, r4
 80063d0:	f000 f86c 	bl	80064ac <__malloc_unlock>
 80063d4:	2207      	movs	r2, #7
 80063d6:	350b      	adds	r5, #11
 80063d8:	1d23      	adds	r3, r4, #4
 80063da:	4395      	bics	r5, r2
 80063dc:	1aea      	subs	r2, r5, r3
 80063de:	429d      	cmp	r5, r3
 80063e0:	d0e5      	beq.n	80063ae <_malloc_r+0x82>
 80063e2:	1b5b      	subs	r3, r3, r5
 80063e4:	50a3      	str	r3, [r4, r2]
 80063e6:	e7e2      	b.n	80063ae <_malloc_r+0x82>
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	e7ec      	b.n	80063c6 <_malloc_r+0x9a>
 80063ec:	6862      	ldr	r2, [r4, #4]
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	d101      	bne.n	80063f6 <_malloc_r+0xca>
 80063f2:	602a      	str	r2, [r5, #0]
 80063f4:	e7ea      	b.n	80063cc <_malloc_r+0xa0>
 80063f6:	605a      	str	r2, [r3, #4]
 80063f8:	e7e8      	b.n	80063cc <_malloc_r+0xa0>
 80063fa:	0023      	movs	r3, r4
 80063fc:	6864      	ldr	r4, [r4, #4]
 80063fe:	e7a7      	b.n	8006350 <_malloc_r+0x24>
 8006400:	002c      	movs	r4, r5
 8006402:	686d      	ldr	r5, [r5, #4]
 8006404:	e7af      	b.n	8006366 <_malloc_r+0x3a>
 8006406:	230c      	movs	r3, #12
 8006408:	0030      	movs	r0, r6
 800640a:	6033      	str	r3, [r6, #0]
 800640c:	f000 f84e 	bl	80064ac <__malloc_unlock>
 8006410:	e7cd      	b.n	80063ae <_malloc_r+0x82>
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	2000015c 	.word	0x2000015c

08006418 <_realloc_r>:
 8006418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800641a:	0007      	movs	r7, r0
 800641c:	000e      	movs	r6, r1
 800641e:	0014      	movs	r4, r2
 8006420:	2900      	cmp	r1, #0
 8006422:	d105      	bne.n	8006430 <_realloc_r+0x18>
 8006424:	0011      	movs	r1, r2
 8006426:	f7ff ff81 	bl	800632c <_malloc_r>
 800642a:	0005      	movs	r5, r0
 800642c:	0028      	movs	r0, r5
 800642e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006430:	2a00      	cmp	r2, #0
 8006432:	d103      	bne.n	800643c <_realloc_r+0x24>
 8006434:	f7ff ff0e 	bl	8006254 <_free_r>
 8006438:	0025      	movs	r5, r4
 800643a:	e7f7      	b.n	800642c <_realloc_r+0x14>
 800643c:	f000 f83e 	bl	80064bc <_malloc_usable_size_r>
 8006440:	9001      	str	r0, [sp, #4]
 8006442:	4284      	cmp	r4, r0
 8006444:	d803      	bhi.n	800644e <_realloc_r+0x36>
 8006446:	0035      	movs	r5, r6
 8006448:	0843      	lsrs	r3, r0, #1
 800644a:	42a3      	cmp	r3, r4
 800644c:	d3ee      	bcc.n	800642c <_realloc_r+0x14>
 800644e:	0021      	movs	r1, r4
 8006450:	0038      	movs	r0, r7
 8006452:	f7ff ff6b 	bl	800632c <_malloc_r>
 8006456:	1e05      	subs	r5, r0, #0
 8006458:	d0e8      	beq.n	800642c <_realloc_r+0x14>
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	0022      	movs	r2, r4
 800645e:	429c      	cmp	r4, r3
 8006460:	d900      	bls.n	8006464 <_realloc_r+0x4c>
 8006462:	001a      	movs	r2, r3
 8006464:	0031      	movs	r1, r6
 8006466:	0028      	movs	r0, r5
 8006468:	f7ff fed7 	bl	800621a <memcpy>
 800646c:	0031      	movs	r1, r6
 800646e:	0038      	movs	r0, r7
 8006470:	f7ff fef0 	bl	8006254 <_free_r>
 8006474:	e7da      	b.n	800642c <_realloc_r+0x14>
	...

08006478 <_sbrk_r>:
 8006478:	2300      	movs	r3, #0
 800647a:	b570      	push	{r4, r5, r6, lr}
 800647c:	4d06      	ldr	r5, [pc, #24]	; (8006498 <_sbrk_r+0x20>)
 800647e:	0004      	movs	r4, r0
 8006480:	0008      	movs	r0, r1
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	f7fb fd60 	bl	8001f48 <_sbrk>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d103      	bne.n	8006494 <_sbrk_r+0x1c>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d000      	beq.n	8006494 <_sbrk_r+0x1c>
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	bd70      	pop	{r4, r5, r6, pc}
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	20000164 	.word	0x20000164

0800649c <__malloc_lock>:
 800649c:	b510      	push	{r4, lr}
 800649e:	4802      	ldr	r0, [pc, #8]	; (80064a8 <__malloc_lock+0xc>)
 80064a0:	f000 f814 	bl	80064cc <__retarget_lock_acquire_recursive>
 80064a4:	bd10      	pop	{r4, pc}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	20000168 	.word	0x20000168

080064ac <__malloc_unlock>:
 80064ac:	b510      	push	{r4, lr}
 80064ae:	4802      	ldr	r0, [pc, #8]	; (80064b8 <__malloc_unlock+0xc>)
 80064b0:	f000 f80d 	bl	80064ce <__retarget_lock_release_recursive>
 80064b4:	bd10      	pop	{r4, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	20000168 	.word	0x20000168

080064bc <_malloc_usable_size_r>:
 80064bc:	1f0b      	subs	r3, r1, #4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1f18      	subs	r0, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	da01      	bge.n	80064ca <_malloc_usable_size_r+0xe>
 80064c6:	580b      	ldr	r3, [r1, r0]
 80064c8:	18c0      	adds	r0, r0, r3
 80064ca:	4770      	bx	lr

080064cc <__retarget_lock_acquire_recursive>:
 80064cc:	4770      	bx	lr

080064ce <__retarget_lock_release_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <_init>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d6:	bc08      	pop	{r3}
 80064d8:	469e      	mov	lr, r3
 80064da:	4770      	bx	lr

080064dc <_fini>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e2:	bc08      	pop	{r3}
 80064e4:	469e      	mov	lr, r3
 80064e6:	4770      	bx	lr
