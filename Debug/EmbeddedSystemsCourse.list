
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004408  08004408  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004410  08004410  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000020  08004438  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08004438  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8a0  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd9  00000000  00000000  0002c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b474  00000000  00000000  0002f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be42  00000000  00000000  0004ac44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b05bf  00000000  00000000  00056a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107045  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000206c  00000000  00000000  00107098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000020 	.word	0x20000020
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004368 	.word	0x08004368

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000024 	.word	0x20000024
 8000100:	08004368 	.word	0x08004368

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_RxCpltCallback>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
/*Receiving data interrupt callback
 * Once all the bytes have been received, an interrupt will trigger and the RX complete callback will be called.*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_UART_RxCpltCallback+0x30>)
 8000628:	429a      	cmp	r2, r3
 800062a:	d10b      	bne.n	8000644 <HAL_UART_RxCpltCallback+0x28>
		/* The DMA is disabled after have been received full bytes because the buffer of DMA in [NORMAL] mode, so we need to call the Receive_DMA function again at the end of the callback.*/
		HAL_UART_Receive_DMA(&huart2, rxData,RX_DATA_BUFFER);
 800062c:	4908      	ldr	r1, [pc, #32]	; (8000650 <HAL_UART_RxCpltCallback+0x34>)
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_UART_RxCpltCallback+0x30>)
 8000630:	2214      	movs	r2, #20
 8000632:	0018      	movs	r0, r3
 8000634:	f002 f9ea 	bl	8002a0c <HAL_UART_Receive_DMA>
		/*Transmitting OK message after receiving 20 bytes */
		HAL_UART_Transmit(&huart2, txData, sizeof(txData), 200);
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <HAL_UART_RxCpltCallback+0x38>)
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <HAL_UART_RxCpltCallback+0x30>)
 800063c:	23c8      	movs	r3, #200	; 0xc8
 800063e:	2214      	movs	r2, #20
 8000640:	f002 f938 	bl	80028b4 <HAL_UART_Transmit>
	}
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000003c 	.word	0x2000003c
 8000650:	2000018c 	.word	0x2000018c
 8000654:	20000000 	.word	0x20000000

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fa98 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f820 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f8f0 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000668:	f000 f8c8 	bl	80007fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800066c:	f000 f878 	bl	8000760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	/*Received data via UART2 in DMA [NORMAL buffer] mode*/
	HAL_UART_Receive_DMA(&huart2, rxData,RX_DATA_BUFFER);
 8000670:	4909      	ldr	r1, [pc, #36]	; (8000698 <main+0x40>)
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <main+0x44>)
 8000674:	2214      	movs	r2, #20
 8000676:	0018      	movs	r0, r3
 8000678:	f002 f9c8 	bl	8002a0c <HAL_UART_Receive_DMA>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/*Toggle PC13 LED on board*/
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	019b      	lsls	r3, r3, #6
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <main+0x48>)
 8000682:	0019      	movs	r1, r3
 8000684:	0010      	movs	r0, r2
 8000686:	f001 f912 	bl	80018ae <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800068a:	23fa      	movs	r3, #250	; 0xfa
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fb04 	bl	8000c9c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000694:	e7f2      	b.n	800067c <main+0x24>
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	2000018c 	.word	0x2000018c
 800069c:	2000003c 	.word	0x2000003c
 80006a0:	50000800 	.word	0x50000800

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b095      	sub	sp, #84	; 0x54
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	2414      	movs	r4, #20
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	233c      	movs	r3, #60	; 0x3c
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f003 fe4f 	bl	8004358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	2310      	movs	r3, #16
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f003 fe48 	bl	8004358 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f909 	bl	80018e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2202      	movs	r2, #2
 80006d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	0052      	lsls	r2, r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e0:	0021      	movs	r1, r4
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2240      	movs	r2, #64	; 0x40
 80006ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2202      	movs	r2, #2
 80006f2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2209      	movs	r2, #9
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	0292      	lsls	r2, r2, #10
 800070c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0492      	lsls	r2, r2, #18
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	05d2      	lsls	r2, r2, #23
 800071c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	187b      	adds	r3, r7, r1
 8000720:	0018      	movs	r0, r3
 8000722:	f001 f92b 	bl	800197c <HAL_RCC_OscConfig>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800072a:	f000 f8d3 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2207      	movs	r2, #7
 8000732:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2202      	movs	r2, #2
 8000738:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2101      	movs	r1, #1
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fc76 	bl	800203c <HAL_RCC_ClockConfig>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000754:	f000 f8be 	bl	80008d4 <Error_Handler>
  }
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b015      	add	sp, #84	; 0x54
 800075e:	bd90      	pop	{r4, r7, pc}

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000766:	4a24      	ldr	r2, [pc, #144]	; (80007f8 <MX_USART2_UART_Init+0x98>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800076c:	22e1      	movs	r2, #225	; 0xe1
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 f82c 	bl	8002808 <HAL_UART_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007b4:	f000 f88e 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	0018      	movs	r0, r3
 80007be:	f003 fcc7 	bl	8004150 <HAL_UARTEx_SetTxFifoThreshold>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007c6:	f000 f885 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f003 fcfe 	bl	80041d0 <HAL_UARTEx_SetRxFifoThreshold>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007d8:	f000 f87c 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f003 fc7c 	bl	80040dc <HAL_UARTEx_DisableFifoMode>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007e8:	f000 f874 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	2000003c 	.word	0x2000003c
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_DMA_Init+0x48>)
 8000804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_DMA_Init+0x48>)
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	639a      	str	r2, [r3, #56]	; 0x38
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_DMA_Init+0x48>)
 8000810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2009      	movs	r0, #9
 8000820:	f000 fb22 	bl	8000e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000824:	2009      	movs	r0, #9
 8000826:	f000 fb34 	bl	8000e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	200a      	movs	r0, #10
 8000830:	f000 fb1a 	bl	8000e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000834:	200a      	movs	r0, #10
 8000836:	f000 fb2c 	bl	8000e92 <HAL_NVIC_EnableIRQ>

}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40021000 	.word	0x40021000

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	240c      	movs	r4, #12
 8000850:	193b      	adds	r3, r7, r4
 8000852:	0018      	movs	r0, r3
 8000854:	2314      	movs	r3, #20
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f003 fd7d 	bl	8004358 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_GPIO_Init+0x84>)
 8000860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_GPIO_Init+0x84>)
 8000864:	2104      	movs	r1, #4
 8000866:	430a      	orrs	r2, r1
 8000868:	635a      	str	r2, [r3, #52]	; 0x34
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_GPIO_Init+0x84>)
 800086c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086e:	2204      	movs	r2, #4
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_GPIO_Init+0x84>)
 8000878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_GPIO_Init+0x84>)
 800087c:	2101      	movs	r1, #1
 800087e:	430a      	orrs	r2, r1
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_GPIO_Init+0x84>)
 8000884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000886:	2201      	movs	r2, #1
 8000888:	4013      	ands	r3, r2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_GPIO_Init+0x88>)
 8000894:	2200      	movs	r2, #0
 8000896:	0019      	movs	r1, r3
 8000898:	f000 ffec 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	0192      	lsls	r2, r2, #6
 80008a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2201      	movs	r2, #1
 80008a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <MX_GPIO_Init+0x88>)
 80008ba:	0019      	movs	r1, r3
 80008bc:	0010      	movs	r0, r2
 80008be:	f000 fe6d 	bl	800159c <HAL_GPIO_Init>

}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b009      	add	sp, #36	; 0x24
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000
 80008d0:	50000800 	.word	0x50000800

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_MspInit+0x4c>)
 80008e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	2101      	movs	r1, #1
 80008ee:	430a      	orrs	r2, r1
 80008f0:	641a      	str	r2, [r3, #64]	; 0x40
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	2201      	movs	r2, #1
 80008f8:	4013      	ands	r3, r2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_MspInit+0x4c>)
 8000900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_MspInit+0x4c>)
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	0549      	lsls	r1, r1, #21
 8000908:	430a      	orrs	r2, r1
 800090a:	63da      	str	r2, [r3, #60]	; 0x3c
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_MspInit+0x4c>)
 800090e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	055b      	lsls	r3, r3, #21
 8000914:	4013      	ands	r3, r2
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800091a:	23c0      	movs	r3, #192	; 0xc0
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f9e0 	bl	8000ce4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b09d      	sub	sp, #116	; 0x74
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	235c      	movs	r3, #92	; 0x5c
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	0018      	movs	r0, r3
 800093e:	2314      	movs	r3, #20
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f003 fd08 	bl	8004358 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	2410      	movs	r4, #16
 800094a:	193b      	adds	r3, r7, r4
 800094c:	0018      	movs	r0, r3
 800094e:	234c      	movs	r3, #76	; 0x4c
 8000950:	001a      	movs	r2, r3
 8000952:	2100      	movs	r1, #0
 8000954:	f003 fd00 	bl	8004358 <memset>
  if(huart->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a50      	ldr	r2, [pc, #320]	; (8000aa0 <HAL_UART_MspInit+0x170>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d000      	beq.n	8000964 <HAL_UART_MspInit+0x34>
 8000962:	e098      	b.n	8000a96 <HAL_UART_MspInit+0x166>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2202      	movs	r2, #2
 8000968:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000970:	193b      	adds	r3, r7, r4
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fd0c 	bl	8002390 <HAL_RCCEx_PeriphCLKConfig>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800097c:	f7ff ffaa 	bl	80008d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000980:	4b48      	ldr	r3, [pc, #288]	; (8000aa4 <HAL_UART_MspInit+0x174>)
 8000982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000984:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <HAL_UART_MspInit+0x174>)
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	0289      	lsls	r1, r1, #10
 800098a:	430a      	orrs	r2, r1
 800098c:	63da      	str	r2, [r3, #60]	; 0x3c
 800098e:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <HAL_UART_MspInit+0x174>)
 8000990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	029b      	lsls	r3, r3, #10
 8000996:	4013      	ands	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <HAL_UART_MspInit+0x174>)
 800099e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a0:	4b40      	ldr	r3, [pc, #256]	; (8000aa4 <HAL_UART_MspInit+0x174>)
 80009a2:	2101      	movs	r1, #1
 80009a4:	430a      	orrs	r2, r1
 80009a6:	635a      	str	r2, [r3, #52]	; 0x34
 80009a8:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <HAL_UART_MspInit+0x174>)
 80009aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ac:	2201      	movs	r2, #1
 80009ae:	4013      	ands	r3, r2
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009b4:	215c      	movs	r1, #92	; 0x5c
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	220c      	movs	r2, #12
 80009ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2202      	movs	r2, #2
 80009c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2201      	movs	r2, #1
 80009d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	187a      	adds	r2, r7, r1
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fddd 	bl	800159c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 80009e4:	4a31      	ldr	r2, [pc, #196]	; (8000aac <HAL_UART_MspInit+0x17c>)
 80009e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 80009ea:	2235      	movs	r2, #53	; 0x35
 80009ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 80009f0:	2210      	movs	r2, #16
 80009f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 8000a0e:	2220      	movs	r2, #32
 8000a10:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fa56 	bl	8000ecc <HAL_DMA_Init>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000a24:	f7ff ff56 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 8000a2c:	679a      	str	r2, [r3, #120]	; 0x78
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <HAL_UART_MspInit+0x178>)
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <HAL_UART_MspInit+0x184>)
 8000a38:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a3c:	2234      	movs	r2, #52	; 0x34
 8000a3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 fa2d 	bl	8000ecc <HAL_DMA_Init>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_UART_MspInit+0x14a>
    {
      Error_Handler();
 8000a76:	f7ff ff2d 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a7e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_UART_MspInit+0x180>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	201c      	movs	r0, #28
 8000a8c:	f000 f9ec 	bl	8000e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000a90:	201c      	movs	r0, #28
 8000a92:	f000 f9fe 	bl	8000e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b01d      	add	sp, #116	; 0x74
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	200000cc 	.word	0x200000cc
 8000aac:	40020008 	.word	0x40020008
 8000ab0:	2000012c 	.word	0x2000012c
 8000ab4:	4002001c 	.word	0x4002001c

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f8c2 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <DMA1_Channel1_IRQHandler+0x14>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fbe6 	bl	80012c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	200000cc 	.word	0x200000cc

08000b00 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fbda 	bl	80012c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	2000012c 	.word	0x2000012c

08000b18 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <USART2_LPUART2_IRQHandler+0x14>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 ffe4 	bl	8002aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	2000003c 	.word	0x2000003c

08000b30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b40:	f7ff fff6 	bl	8000b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b6a:	f003 fbd1 	bl	8004310 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b6e:	f7ff fd73 	bl	8000658 <main>

08000b72 <LoopForever>:

LoopForever:
  b LoopForever
 8000b72:	e7fe      	b.n	8000b72 <LoopForever>
  ldr   r0, =_estack
 8000b74:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b80:	08004418 	.word	0x08004418
  ldr r2, =_sbss
 8000b84:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b88:	200001a4 	.word	0x200001a4

08000b8c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_COMP_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_Init+0x3c>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Init+0x3c>)
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	0049      	lsls	r1, r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000baa:	2003      	movs	r0, #3
 8000bac:	f000 f810 	bl	8000bd0 <HAL_InitTick>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e001      	b.n	8000bc0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fe90 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	230f      	movs	r3, #15
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_InitTick+0x88>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d02b      	beq.n	8000c40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_InitTick+0x8c>)
 8000bea:	681c      	ldr	r4, [r3, #0]
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_InitTick+0x88>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	23fa      	movs	r3, #250	; 0xfa
 8000bf4:	0098      	lsls	r0, r3, #2
 8000bf6:	f7ff fa85 	bl	8000104 <__udivsi3>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f7ff fa80 	bl	8000104 <__udivsi3>
 8000c04:	0003      	movs	r3, r0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f953 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d112      	bne.n	8000c36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d80a      	bhi.n	8000c2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 f922 	bl	8000e68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_InitTick+0x90>)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e00d      	b.n	8000c48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e008      	b.n	8000c48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c36:	230f      	movs	r3, #15
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	e003      	b.n	8000c48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b005      	add	sp, #20
 8000c54:	bd90      	pop	{r4, r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	2000001c 	.word	0x2000001c
 8000c5c:	20000014 	.word	0x20000014
 8000c60:	20000018 	.word	0x20000018

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	18d2      	adds	r2, r2, r3
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_IncTick+0x20>)
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	2000001c 	.word	0x2000001c
 8000c84:	200001a0 	.word	0x200001a0

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	200001a0 	.word	0x200001a0

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff0 	bl	8000c88 <HAL_GetTick>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	001a      	movs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	189b      	adds	r3, r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	f7ff ffe0 	bl	8000c88 <HAL_GetTick>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	2000001c 	.word	0x2000001c

08000ce4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	fffff9ff 	.word	0xfffff9ff

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	0002      	movs	r2, r0
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b7f      	cmp	r3, #127	; 0x7f
 8000d22:	d809      	bhi.n	8000d38 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	231f      	movs	r3, #31
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_EnableIRQ+0x30>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	4091      	lsls	r1, r2
 8000d34:	000a      	movs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	0002      	movs	r2, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b7f      	cmp	r3, #127	; 0x7f
 8000d58:	d828      	bhi.n	8000dac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5a:	4a2f      	ldr	r2, [pc, #188]	; (8000e18 <__NVIC_SetPriority+0xd4>)
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	33c0      	adds	r3, #192	; 0xc0
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	589b      	ldr	r3, [r3, r2]
 8000d6a:	1dfa      	adds	r2, r7, #7
 8000d6c:	7812      	ldrb	r2, [r2, #0]
 8000d6e:	0011      	movs	r1, r2
 8000d70:	2203      	movs	r2, #3
 8000d72:	400a      	ands	r2, r1
 8000d74:	00d2      	lsls	r2, r2, #3
 8000d76:	21ff      	movs	r1, #255	; 0xff
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	43d2      	mvns	r2, r2
 8000d7e:	401a      	ands	r2, r3
 8000d80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	019b      	lsls	r3, r3, #6
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	401a      	ands	r2, r3
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2303      	movs	r3, #3
 8000d92:	4003      	ands	r3, r0
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	481f      	ldr	r0, [pc, #124]	; (8000e18 <__NVIC_SetPriority+0xd4>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	430a      	orrs	r2, r1
 8000da4:	33c0      	adds	r3, #192	; 0xc0
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000daa:	e031      	b.n	8000e10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <__NVIC_SetPriority+0xd8>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	0019      	movs	r1, r3
 8000db4:	230f      	movs	r3, #15
 8000db6:	400b      	ands	r3, r1
 8000db8:	3b08      	subs	r3, #8
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3306      	adds	r3, #6
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	18d3      	adds	r3, r2, r3
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1dfa      	adds	r2, r7, #7
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	0011      	movs	r1, r2
 8000dcc:	2203      	movs	r2, #3
 8000dce:	400a      	ands	r2, r1
 8000dd0:	00d2      	lsls	r2, r2, #3
 8000dd2:	21ff      	movs	r1, #255	; 0xff
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	43d2      	mvns	r2, r2
 8000dda:	401a      	ands	r2, r3
 8000ddc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	401a      	ands	r2, r3
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	0018      	movs	r0, r3
 8000dec:	2303      	movs	r3, #3
 8000dee:	4003      	ands	r3, r0
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <__NVIC_SetPriority+0xd8>)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	001c      	movs	r4, r3
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	4023      	ands	r3, r4
 8000e00:	3b08      	subs	r3, #8
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	430a      	orrs	r2, r1
 8000e06:	3306      	adds	r3, #6
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	18c3      	adds	r3, r0, r3
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b003      	add	sp, #12
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	1e5a      	subs	r2, r3, #1
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	045b      	lsls	r3, r3, #17
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d301      	bcc.n	8000e38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e34:	2301      	movs	r3, #1
 8000e36:	e010      	b.n	8000e5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <SysTick_Config+0x44>)
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	3a01      	subs	r2, #1
 8000e3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e40:	2301      	movs	r3, #1
 8000e42:	425b      	negs	r3, r3
 8000e44:	2103      	movs	r1, #3
 8000e46:	0018      	movs	r0, r3
 8000e48:	f7ff ff7c 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x44>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x44>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	210f      	movs	r1, #15
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	1c02      	adds	r2, r0, #0
 8000e78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b004      	add	sp, #16
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	0002      	movs	r2, r0
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ff33 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff ffaf 	bl	8000e20 <SysTick_Config>
 8000ec2:	0003      	movs	r3, r0
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e091      	b.n	8001002 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	4b49      	ldr	r3, [pc, #292]	; (800100c <HAL_DMA_Init+0x140>)
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d810      	bhi.n	8000f0c <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a48      	ldr	r2, [pc, #288]	; (8001010 <HAL_DMA_Init+0x144>)
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	2114      	movs	r1, #20
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff f904 	bl	8000104 <__udivsi3>
 8000efc:	0003      	movs	r3, r0
 8000efe:	009a      	lsls	r2, r3, #2
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a43      	ldr	r2, [pc, #268]	; (8001014 <HAL_DMA_Init+0x148>)
 8000f08:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0a:	e00f      	b.n	8000f2c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a41      	ldr	r2, [pc, #260]	; (8001018 <HAL_DMA_Init+0x14c>)
 8000f12:	4694      	mov	ip, r2
 8000f14:	4463      	add	r3, ip
 8000f16:	2114      	movs	r1, #20
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff f8f3 	bl	8000104 <__udivsi3>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	009a      	lsls	r2, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a3c      	ldr	r2, [pc, #240]	; (800101c <HAL_DMA_Init+0x150>)
 8000f2a:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2225      	movs	r2, #37	; 0x25
 8000f30:	2102      	movs	r1, #2
 8000f32:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4938      	ldr	r1, [pc, #224]	; (8001020 <HAL_DMA_Init+0x154>)
 8000f40:	400a      	ands	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6819      	ldr	r1, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 fa9f 	bl	80014c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	01db      	lsls	r3, r3, #7
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d102      	bne.n	8000f94 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9c:	217f      	movs	r1, #127	; 0x7f
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000faa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d011      	beq.n	8000fd8 <HAL_DMA_Init+0x10c>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d80d      	bhi.n	8000fd8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 fac8 	bl	8001554 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	e008      	b.n	8000fea <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2225      	movs	r2, #37	; 0x25
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2224      	movs	r2, #36	; 0x24
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40020407 	.word	0x40020407
 8001010:	bffdfff8 	.word	0xbffdfff8
 8001014:	40020000 	.word	0x40020000
 8001018:	bffdfbf8 	.word	0xbffdfbf8
 800101c:	40020400 	.word	0x40020400
 8001020:	ffff800f 	.word	0xffff800f

08001024 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001032:	2317      	movs	r3, #23
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2224      	movs	r2, #36	; 0x24
 800103e:	5c9b      	ldrb	r3, [r3, r2]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_DMA_Start_IT+0x24>
 8001044:	2302      	movs	r3, #2
 8001046:	e06f      	b.n	8001128 <HAL_DMA_Start_IT+0x104>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	2101      	movs	r1, #1
 800104e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2225      	movs	r2, #37	; 0x25
 8001054:	5c9b      	ldrb	r3, [r3, r2]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d157      	bne.n	800110c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2225      	movs	r2, #37	; 0x25
 8001060:	2102      	movs	r1, #2
 8001062:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2101      	movs	r1, #1
 8001076:	438a      	bics	r2, r1
 8001078:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 f9e1 	bl	8001448 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	2b00      	cmp	r3, #0
 800108c:	d008      	beq.n	80010a0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	210e      	movs	r1, #14
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e00f      	b.n	80010c0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2104      	movs	r1, #4
 80010ac:	438a      	bics	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	210a      	movs	r1, #10
 80010bc:	430a      	orrs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	025b      	lsls	r3, r3, #9
 80010ca:	4013      	ands	r3, r2
 80010cc:	d008      	beq.n	80010e0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	0049      	lsls	r1, r1, #1
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	0049      	lsls	r1, r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e00a      	b.n	8001122 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2224      	movs	r2, #36	; 0x24
 8001116:	2100      	movs	r1, #0
 8001118:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800111a:	2317      	movs	r3, #23
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001122:	2317      	movs	r3, #23
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b006      	add	sp, #24
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e04f      	b.n	80011e2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2225      	movs	r2, #37	; 0x25
 8001146:	5c9b      	ldrb	r3, [r3, r2]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d008      	beq.n	8001160 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2204      	movs	r2, #4
 8001152:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2224      	movs	r2, #36	; 0x24
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e040      	b.n	80011e2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	210e      	movs	r1, #14
 800116c:	438a      	bics	r2, r1
 800116e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117a:	491c      	ldr	r1, [pc, #112]	; (80011ec <HAL_DMA_Abort+0xbc>)
 800117c:	400a      	ands	r2, r1
 800117e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2101      	movs	r1, #1
 800118c:	438a      	bics	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	221c      	movs	r2, #28
 8001196:	401a      	ands	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	2101      	movs	r1, #1
 800119e:	4091      	lsls	r1, r2
 80011a0:	000a      	movs	r2, r1
 80011a2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00c      	beq.n	80011d0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	490a      	ldr	r1, [pc, #40]	; (80011ec <HAL_DMA_Abort+0xbc>)
 80011c2:	400a      	ands	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2225      	movs	r2, #37	; 0x25
 80011d4:	2101      	movs	r1, #1
 80011d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2224      	movs	r2, #36	; 0x24
 80011dc:	2100      	movs	r1, #0
 80011de:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	0018      	movs	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	fffffeff 	.word	0xfffffeff

080011f0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f8:	210f      	movs	r1, #15
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2225      	movs	r2, #37	; 0x25
 8001204:	5c9b      	ldrb	r3, [r3, r2]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d006      	beq.n	800121a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2204      	movs	r2, #4
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	e048      	b.n	80012ac <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	210e      	movs	r1, #14
 8001226:	438a      	bics	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2101      	movs	r1, #1
 8001236:	438a      	bics	r2, r1
 8001238:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001244:	491d      	ldr	r1, [pc, #116]	; (80012bc <HAL_DMA_Abort_IT+0xcc>)
 8001246:	400a      	ands	r2, r1
 8001248:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	221c      	movs	r2, #28
 8001250:	401a      	ands	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	2101      	movs	r1, #1
 8001258:	4091      	lsls	r1, r2
 800125a:	000a      	movs	r2, r1
 800125c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001266:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00c      	beq.n	800128a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127a:	4910      	ldr	r1, [pc, #64]	; (80012bc <HAL_DMA_Abort_IT+0xcc>)
 800127c:	400a      	ands	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001288:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2225      	movs	r2, #37	; 0x25
 800128e:	2101      	movs	r1, #1
 8001290:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2224      	movs	r2, #36	; 0x24
 8001296:	2100      	movs	r1, #0
 8001298:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	0010      	movs	r0, r2
 80012aa:	4798      	blx	r3
    }
  }
  return status;
 80012ac:	230f      	movs	r3, #15
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	781b      	ldrb	r3, [r3, #0]
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	fffffeff 	.word	0xfffffeff

080012c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	221c      	movs	r2, #28
 80012de:	4013      	ands	r3, r2
 80012e0:	2204      	movs	r2, #4
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4013      	ands	r3, r2
 80012ea:	d026      	beq.n	800133a <HAL_DMA_IRQHandler+0x7a>
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2204      	movs	r2, #4
 80012f0:	4013      	ands	r3, r2
 80012f2:	d022      	beq.n	800133a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2220      	movs	r2, #32
 80012fc:	4013      	ands	r3, r2
 80012fe:	d107      	bne.n	8001310 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2104      	movs	r1, #4
 800130c:	438a      	bics	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	221c      	movs	r2, #28
 8001316:	401a      	ands	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	2104      	movs	r1, #4
 800131e:	4091      	lsls	r1, r2
 8001320:	000a      	movs	r2, r1
 8001322:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	2b00      	cmp	r3, #0
 800132a:	d100      	bne.n	800132e <HAL_DMA_IRQHandler+0x6e>
 800132c:	e080      	b.n	8001430 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	0010      	movs	r0, r2
 8001336:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001338:	e07a      	b.n	8001430 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	221c      	movs	r2, #28
 8001340:	4013      	ands	r3, r2
 8001342:	2202      	movs	r2, #2
 8001344:	409a      	lsls	r2, r3
 8001346:	0013      	movs	r3, r2
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4013      	ands	r3, r2
 800134c:	d03c      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x108>
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2202      	movs	r2, #2
 8001352:	4013      	ands	r3, r2
 8001354:	d038      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2220      	movs	r2, #32
 800135e:	4013      	ands	r3, r2
 8001360:	d10b      	bne.n	800137a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	210a      	movs	r1, #10
 800136e:	438a      	bics	r2, r1
 8001370:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2225      	movs	r2, #37	; 0x25
 8001376:	2101      	movs	r1, #1
 8001378:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	001a      	movs	r2, r3
 8001380:	4b2e      	ldr	r3, [pc, #184]	; (800143c <HAL_DMA_IRQHandler+0x17c>)
 8001382:	429a      	cmp	r2, r3
 8001384:	d909      	bls.n	800139a <HAL_DMA_IRQHandler+0xda>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	221c      	movs	r2, #28
 800138c:	401a      	ands	r2, r3
 800138e:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <HAL_DMA_IRQHandler+0x180>)
 8001390:	2102      	movs	r1, #2
 8001392:	4091      	lsls	r1, r2
 8001394:	000a      	movs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	e008      	b.n	80013ac <HAL_DMA_IRQHandler+0xec>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	221c      	movs	r2, #28
 80013a0:	401a      	ands	r2, r3
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <HAL_DMA_IRQHandler+0x184>)
 80013a4:	2102      	movs	r1, #2
 80013a6:	4091      	lsls	r1, r2
 80013a8:	000a      	movs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2224      	movs	r2, #36	; 0x24
 80013b0:	2100      	movs	r1, #0
 80013b2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d039      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	0010      	movs	r0, r2
 80013c4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80013c6:	e033      	b.n	8001430 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	221c      	movs	r2, #28
 80013ce:	4013      	ands	r3, r2
 80013d0:	2208      	movs	r2, #8
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	d02a      	beq.n	8001432 <HAL_DMA_IRQHandler+0x172>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2208      	movs	r2, #8
 80013e0:	4013      	ands	r3, r2
 80013e2:	d026      	beq.n	8001432 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	210e      	movs	r1, #14
 80013f0:	438a      	bics	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	221c      	movs	r2, #28
 80013fa:	401a      	ands	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	2101      	movs	r1, #1
 8001402:	4091      	lsls	r1, r2
 8001404:	000a      	movs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2225      	movs	r2, #37	; 0x25
 8001412:	2101      	movs	r1, #1
 8001414:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2224      	movs	r2, #36	; 0x24
 800141a:	2100      	movs	r1, #0
 800141c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	0010      	movs	r0, r2
 800142e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46c0      	nop			; (mov r8, r8)
}
 8001434:	46bd      	mov	sp, r7
 8001436:	b004      	add	sp, #16
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	40020080 	.word	0x40020080
 8001440:	40020400 	.word	0x40020400
 8001444:	40020000 	.word	0x40020000

08001448 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800145e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001470:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	221c      	movs	r2, #28
 8001478:	401a      	ands	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	2101      	movs	r1, #1
 8001480:	4091      	lsls	r1, r2
 8001482:	000a      	movs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b10      	cmp	r3, #16
 8001494:	d108      	bne.n	80014a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014a6:	e007      	b.n	80014b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b004      	add	sp, #16
 80014be:	bd80      	pop	{r7, pc}

080014c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	001a      	movs	r2, r3
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d814      	bhi.n	80014fe <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80014de:	189a      	adds	r2, r3, r2
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	001a      	movs	r2, r3
 80014ea:	23ff      	movs	r3, #255	; 0xff
 80014ec:	4013      	ands	r3, r2
 80014ee:	3b08      	subs	r3, #8
 80014f0:	2114      	movs	r1, #20
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7fe fe06 	bl	8000104 <__udivsi3>
 80014f8:	0003      	movs	r3, r0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e014      	b.n	8001528 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4a11      	ldr	r2, [pc, #68]	; (800154c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001508:	189a      	adds	r2, r3, r2
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	001a      	movs	r2, r3
 8001514:	23ff      	movs	r3, #255	; 0xff
 8001516:	4013      	ands	r3, r2
 8001518:	3b08      	subs	r3, #8
 800151a:	2114      	movs	r1, #20
 800151c:	0018      	movs	r0, r3
 800151e:	f7fe fdf1 	bl	8000104 <__udivsi3>
 8001522:	0003      	movs	r3, r0
 8001524:	3307      	adds	r3, #7
 8001526:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800152c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	221f      	movs	r2, #31
 8001532:	4013      	ands	r3, r2
 8001534:	2201      	movs	r2, #1
 8001536:	409a      	lsls	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b004      	add	sp, #16
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40020407 	.word	0x40020407
 8001548:	40020800 	.word	0x40020800
 800154c:	4002081c 	.word	0x4002081c
 8001550:	40020880 	.word	0x40020880

08001554 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	227f      	movs	r2, #127	; 0x7f
 8001562:	4013      	ands	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800156a:	4694      	mov	ip, r2
 800156c:	4463      	add	r3, ip
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	001a      	movs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800157a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3b01      	subs	r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	4013      	ands	r3, r2
 8001584:	2201      	movs	r2, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b004      	add	sp, #16
 8001592:	bd80      	pop	{r7, pc}
 8001594:	1000823f 	.word	0x1000823f
 8001598:	40020940 	.word	0x40020940

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e14d      	b.n	8001848 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4091      	lsls	r1, r2
 80015b6:	000a      	movs	r2, r1
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d100      	bne.n	80015c4 <HAL_GPIO_Init+0x28>
 80015c2:	e13e      	b.n	8001842 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2203      	movs	r2, #3
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d005      	beq.n	80015dc <HAL_GPIO_Init+0x40>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2203      	movs	r2, #3
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d130      	bne.n	800163e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	409a      	lsls	r2, r3
 80015ea:	0013      	movs	r3, r2
 80015ec:	43da      	mvns	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	409a      	lsls	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001612:	2201      	movs	r2, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	2201      	movs	r2, #1
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	4013      	ands	r3, r2
 8001646:	2b03      	cmp	r3, #3
 8001648:	d017      	beq.n	800167a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2203      	movs	r2, #3
 8001680:	4013      	ands	r3, r2
 8001682:	2b02      	cmp	r3, #2
 8001684:	d123      	bne.n	80016ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	58d3      	ldr	r3, [r2, r3]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2207      	movs	r2, #7
 8001698:	4013      	ands	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	43da      	mvns	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2107      	movs	r1, #7
 80016b2:	400b      	ands	r3, r1
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	409a      	lsls	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	6939      	ldr	r1, [r7, #16]
 80016cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	409a      	lsls	r2, r3
 80016dc:	0013      	movs	r3, r2
 80016de:	43da      	mvns	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2203      	movs	r2, #3
 80016ec:	401a      	ands	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	409a      	lsls	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	23c0      	movs	r3, #192	; 0xc0
 8001708:	029b      	lsls	r3, r3, #10
 800170a:	4013      	ands	r3, r2
 800170c:	d100      	bne.n	8001710 <HAL_GPIO_Init+0x174>
 800170e:	e098      	b.n	8001842 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001710:	4a53      	ldr	r2, [pc, #332]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3318      	adds	r3, #24
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	589b      	ldr	r3, [r3, r2]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2203      	movs	r2, #3
 8001722:	4013      	ands	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	220f      	movs	r2, #15
 8001728:	409a      	lsls	r2, r3
 800172a:	0013      	movs	r3, r2
 800172c:	43da      	mvns	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	23a0      	movs	r3, #160	; 0xa0
 8001738:	05db      	lsls	r3, r3, #23
 800173a:	429a      	cmp	r2, r3
 800173c:	d019      	beq.n	8001772 <HAL_GPIO_Init+0x1d6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a48      	ldr	r2, [pc, #288]	; (8001864 <HAL_GPIO_Init+0x2c8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x1d2>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a47      	ldr	r2, [pc, #284]	; (8001868 <HAL_GPIO_Init+0x2cc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x1ce>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a46      	ldr	r2, [pc, #280]	; (800186c <HAL_GPIO_Init+0x2d0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x1ca>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_GPIO_Init+0x2d4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x1c6>
 800175e:	2304      	movs	r3, #4
 8001760:	e008      	b.n	8001774 <HAL_GPIO_Init+0x1d8>
 8001762:	2305      	movs	r3, #5
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x1d8>
 8001766:	2303      	movs	r3, #3
 8001768:	e004      	b.n	8001774 <HAL_GPIO_Init+0x1d8>
 800176a:	2302      	movs	r3, #2
 800176c:	e002      	b.n	8001774 <HAL_GPIO_Init+0x1d8>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_GPIO_Init+0x1d8>
 8001772:	2300      	movs	r3, #0
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	2103      	movs	r1, #3
 8001778:	400a      	ands	r2, r1
 800177a:	00d2      	lsls	r2, r2, #3
 800177c:	4093      	lsls	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001784:	4936      	ldr	r1, [pc, #216]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3318      	adds	r3, #24
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001792:	4b33      	ldr	r3, [pc, #204]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	035b      	lsls	r3, r3, #13
 80017aa:	4013      	ands	r3, r2
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43da      	mvns	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	039b      	lsls	r3, r3, #14
 80017d4:	4013      	ands	r3, r2
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 80017e8:	2384      	movs	r3, #132	; 0x84
 80017ea:	58d3      	ldr	r3, [r2, r3]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43da      	mvns	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	029b      	lsls	r3, r3, #10
 8001800:	4013      	ands	r3, r2
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800180c:	4914      	ldr	r1, [pc, #80]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 800180e:	2284      	movs	r2, #132	; 0x84
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	58d3      	ldr	r3, [r2, r3]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43da      	mvns	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	4013      	ands	r3, r2
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800183a:	4909      	ldr	r1, [pc, #36]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	40da      	lsrs	r2, r3
 8001850:	1e13      	subs	r3, r2, #0
 8001852:	d000      	beq.n	8001856 <HAL_GPIO_Init+0x2ba>
 8001854:	e6aa      	b.n	80015ac <HAL_GPIO_Init+0x10>
  }
}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b006      	add	sp, #24
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021800 	.word	0x40021800
 8001864:	50000400 	.word	0x50000400
 8001868:	50000800 	.word	0x50000800
 800186c:	50000c00 	.word	0x50000c00
 8001870:	50001000 	.word	0x50001000

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	0008      	movs	r0, r1
 800187e:	0011      	movs	r1, r2
 8001880:	1cbb      	adds	r3, r7, #2
 8001882:	1c02      	adds	r2, r0, #0
 8001884:	801a      	strh	r2, [r3, #0]
 8001886:	1c7b      	adds	r3, r7, #1
 8001888:	1c0a      	adds	r2, r1, #0
 800188a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800188c:	1c7b      	adds	r3, r7, #1
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001894:	1cbb      	adds	r3, r7, #2
 8001896:	881a      	ldrh	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800189c:	e003      	b.n	80018a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800189e:	1cbb      	adds	r3, r7, #2
 80018a0:	881a      	ldrh	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	000a      	movs	r2, r1
 80018b8:	1cbb      	adds	r3, r7, #2
 80018ba:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018c2:	1cbb      	adds	r3, r7, #2
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	041a      	lsls	r2, r3, #16
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	1cb9      	adds	r1, r7, #2
 80018d2:	8809      	ldrh	r1, [r1, #0]
 80018d4:	400b      	ands	r3, r1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	619a      	str	r2, [r3, #24]
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b004      	add	sp, #16
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d11f      	bne.n	8001948 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	0013      	movs	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	189b      	adds	r3, r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4912      	ldr	r1, [pc, #72]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001916:	0018      	movs	r0, r3
 8001918:	f7fe fbf4 	bl	8000104 <__udivsi3>
 800191c:	0003      	movs	r3, r0
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001922:	e008      	b.n	8001936 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3b01      	subs	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e001      	b.n	8001936 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e009      	b.n	800194a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	401a      	ands	r2, r3
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	429a      	cmp	r2, r3
 8001946:	d0ed      	beq.n	8001924 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b004      	add	sp, #16
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	40007000 	.word	0x40007000
 8001958:	fffff9ff 	.word	0xfffff9ff
 800195c:	20000014 	.word	0x20000014
 8001960:	000f4240 	.word	0x000f4240

08001964 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <LL_RCC_GetAPB1Prescaler+0x14>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	23e0      	movs	r3, #224	; 0xe0
 800196e:	01db      	lsls	r3, r3, #7
 8001970:	4013      	ands	r3, r2
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f000 fb50 	bl	8002030 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	d100      	bne.n	800199c <HAL_RCC_OscConfig+0x20>
 800199a:	e07c      	b.n	8001a96 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199c:	4bc3      	ldr	r3, [pc, #780]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2238      	movs	r2, #56	; 0x38
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a6:	4bc1      	ldr	r3, [pc, #772]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2203      	movs	r2, #3
 80019ac:	4013      	ands	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d102      	bne.n	80019bc <HAL_RCC_OscConfig+0x40>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d002      	beq.n	80019c2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d10b      	bne.n	80019da <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c2:	4bba      	ldr	r3, [pc, #744]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	029b      	lsls	r3, r3, #10
 80019ca:	4013      	ands	r3, r2
 80019cc:	d062      	beq.n	8001a94 <HAL_RCC_OscConfig+0x118>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d15e      	bne.n	8001a94 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e32a      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	025b      	lsls	r3, r3, #9
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_OscConfig+0x7a>
 80019e6:	4bb1      	ldr	r3, [pc, #708]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4bb0      	ldr	r3, [pc, #704]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	0249      	lsls	r1, r1, #9
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e020      	b.n	8001a38 <HAL_RCC_OscConfig+0xbc>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	23a0      	movs	r3, #160	; 0xa0
 80019fc:	02db      	lsls	r3, r3, #11
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d10e      	bne.n	8001a20 <HAL_RCC_OscConfig+0xa4>
 8001a02:	4baa      	ldr	r3, [pc, #680]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4ba9      	ldr	r3, [pc, #676]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	02c9      	lsls	r1, r1, #11
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4ba6      	ldr	r3, [pc, #664]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4ba5      	ldr	r3, [pc, #660]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	0249      	lsls	r1, r1, #9
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xbc>
 8001a20:	4ba2      	ldr	r3, [pc, #648]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4ba1      	ldr	r3, [pc, #644]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a26:	49a2      	ldr	r1, [pc, #648]	; (8001cb0 <HAL_RCC_OscConfig+0x334>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4b9f      	ldr	r3, [pc, #636]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b9e      	ldr	r3, [pc, #632]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a32:	49a0      	ldr	r1, [pc, #640]	; (8001cb4 <HAL_RCC_OscConfig+0x338>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d014      	beq.n	8001a6a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f922 	bl	8000c88 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f91d 	bl	8000c88 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e2e9      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5c:	4b93      	ldr	r3, [pc, #588]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	029b      	lsls	r3, r3, #10
 8001a64:	4013      	ands	r3, r2
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0xce>
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f90d 	bl	8000c88 <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff f908 	bl	8000c88 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e2d4      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a86:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	029b      	lsls	r3, r3, #10
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0xf8>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x126>
 8001aa0:	e099      	b.n	8001bd6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa2:	4b82      	ldr	r3, [pc, #520]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2238      	movs	r2, #56	; 0x38
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aac:	4b7f      	ldr	r3, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x146>
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d135      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac8:	4b78      	ldr	r3, [pc, #480]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x164>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e2a7      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b72      	ldr	r3, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a74      	ldr	r2, [pc, #464]	; (8001cb8 <HAL_RCC_OscConfig+0x33c>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	021a      	lsls	r2, r3, #8
 8001af0:	4b6e      	ldr	r3, [pc, #440]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d112      	bne.n	8001b22 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001afc:	4b6b      	ldr	r3, [pc, #428]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6e      	ldr	r2, [pc, #440]	; (8001cbc <HAL_RCC_OscConfig+0x340>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b10:	4b66      	ldr	r3, [pc, #408]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0adb      	lsrs	r3, r3, #11
 8001b16:	2207      	movs	r2, #7
 8001b18:	4013      	ands	r3, r2
 8001b1a:	4a69      	ldr	r2, [pc, #420]	; (8001cc0 <HAL_RCC_OscConfig+0x344>)
 8001b1c:	40da      	lsrs	r2, r3
 8001b1e:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <HAL_RCC_OscConfig+0x348>)
 8001b20:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b22:	4b69      	ldr	r3, [pc, #420]	; (8001cc8 <HAL_RCC_OscConfig+0x34c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff f852 	bl	8000bd0 <HAL_InitTick>
 8001b2c:	1e03      	subs	r3, r0, #0
 8001b2e:	d051      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e27d      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d030      	beq.n	8001b9e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b3c:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5e      	ldr	r2, [pc, #376]	; (8001cbc <HAL_RCC_OscConfig+0x340>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	4b58      	ldr	r3, [pc, #352]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b50:	4b56      	ldr	r3, [pc, #344]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b55      	ldr	r3, [pc, #340]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	0049      	lsls	r1, r1, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f893 	bl	8000c88 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff f88e 	bl	8000c88 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e25a      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4013      	ands	r3, r2
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a4b      	ldr	r2, [pc, #300]	; (8001cb8 <HAL_RCC_OscConfig+0x33c>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	021a      	lsls	r2, r3, #8
 8001b96:	4b45      	ldr	r3, [pc, #276]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	e01b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b43      	ldr	r3, [pc, #268]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4b42      	ldr	r3, [pc, #264]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001ba4:	4949      	ldr	r1, [pc, #292]	; (8001ccc <HAL_RCC_OscConfig+0x350>)
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f86d 	bl	8000c88 <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff f868 	bl	8000c88 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e234      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x238>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2208      	movs	r2, #8
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d047      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2238      	movs	r2, #56	; 0x38
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b18      	cmp	r3, #24
 8001bea:	d10a      	bne.n	8001c02 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d03c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2f4>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d138      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e216      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d019      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001c0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001c10:	2101      	movs	r1, #1
 8001c12:	430a      	orrs	r2, r1
 8001c14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f837 	bl	8000c88 <HAL_GetTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff f832 	bl	8000c88 <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1fe      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	2202      	movs	r2, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d0f1      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2a4>
 8001c3c:	e018      	b.n	8001c70 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001c40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	438a      	bics	r2, r1
 8001c48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f81d 	bl	8000c88 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff f818 	bl	8000c88 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1e4      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d1f1      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2204      	movs	r2, #4
 8001c76:	4013      	ands	r3, r2
 8001c78:	d100      	bne.n	8001c7c <HAL_RCC_OscConfig+0x300>
 8001c7a:	e0c7      	b.n	8001e0c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7c:	231f      	movs	r3, #31
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2238      	movs	r2, #56	; 0x38
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	d11f      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_OscConfig+0x330>)
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	2202      	movs	r2, #2
 8001c96:	4013      	ands	r3, r2
 8001c98:	d100      	bne.n	8001c9c <HAL_RCC_OscConfig+0x320>
 8001c9a:	e0b7      	b.n	8001e0c <HAL_RCC_OscConfig+0x490>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d000      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x32a>
 8001ca4:	e0b2      	b.n	8001e0c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1c2      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	fffeffff 	.word	0xfffeffff
 8001cb4:	fffbffff 	.word	0xfffbffff
 8001cb8:	ffff80ff 	.word	0xffff80ff
 8001cbc:	ffffc7ff 	.word	0xffffc7ff
 8001cc0:	00f42400 	.word	0x00f42400
 8001cc4:	20000014 	.word	0x20000014
 8001cc8:	20000018 	.word	0x20000018
 8001ccc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cd0:	4bb5      	ldr	r3, [pc, #724]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	055b      	lsls	r3, r3, #21
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x364>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x366>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d011      	beq.n	8001d0a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4bb0      	ldr	r3, [pc, #704]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cea:	4baf      	ldr	r3, [pc, #700]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0549      	lsls	r1, r1, #21
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cf4:	4bac      	ldr	r3, [pc, #688]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	055b      	lsls	r3, r3, #21
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d02:	231f      	movs	r3, #31
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0a:	4ba8      	ldr	r3, [pc, #672]	; (8001fac <HAL_RCC_OscConfig+0x630>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	d11a      	bne.n	8001d4c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d16:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <HAL_RCC_OscConfig+0x630>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4ba4      	ldr	r3, [pc, #656]	; (8001fac <HAL_RCC_OscConfig+0x630>)
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0049      	lsls	r1, r1, #1
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d24:	f7fe ffb0 	bl	8000c88 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7fe ffab 	bl	8000c88 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e177      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d40:	4b9a      	ldr	r3, [pc, #616]	; (8001fac <HAL_RCC_OscConfig+0x630>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3e6>
 8001d54:	4b94      	ldr	r3, [pc, #592]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d58:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x420>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x408>
 8001d6a:	4b8f      	ldr	r3, [pc, #572]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d6e:	4b8e      	ldr	r3, [pc, #568]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d70:	2104      	movs	r1, #4
 8001d72:	430a      	orrs	r2, r1
 8001d74:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d76:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d7a:	4b8b      	ldr	r3, [pc, #556]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0x420>
 8001d84:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d88:	4b87      	ldr	r3, [pc, #540]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d90:	4b85      	ldr	r3, [pc, #532]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d94:	4b84      	ldr	r3, [pc, #528]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001d96:	2104      	movs	r1, #4
 8001d98:	438a      	bics	r2, r1
 8001d9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d014      	beq.n	8001dce <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe ff70 	bl	8000c88 <HAL_GetTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dac:	e009      	b.n	8001dc2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7fe ff6b 	bl	8000c88 <HAL_GetTick>
 8001db2:	0002      	movs	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4a7d      	ldr	r2, [pc, #500]	; (8001fb0 <HAL_RCC_OscConfig+0x634>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e136      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc2:	4b79      	ldr	r3, [pc, #484]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x432>
 8001dcc:	e013      	b.n	8001df6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7fe ff5b 	bl	8000c88 <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd6:	e009      	b.n	8001dec <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7fe ff56 	bl	8000c88 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4a73      	ldr	r2, [pc, #460]	; (8001fb0 <HAL_RCC_OscConfig+0x634>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e121      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dec:	4b6e      	ldr	r3, [pc, #440]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001df6:	231f      	movs	r3, #31
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b69      	ldr	r3, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e04:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001e06:	496b      	ldr	r1, [pc, #428]	; (8001fb4 <HAL_RCC_OscConfig+0x638>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2220      	movs	r2, #32
 8001e12:	4013      	ands	r3, r2
 8001e14:	d039      	beq.n	8001e8a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	03c9      	lsls	r1, r1, #15
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7fe ff2c 	bl	8000c88 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e36:	f7fe ff27 	bl	8000c88 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0f3      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e48:	4b57      	ldr	r3, [pc, #348]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	4013      	ands	r3, r2
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4ba>
 8001e54:	e019      	b.n	8001e8a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e56:	4b54      	ldr	r3, [pc, #336]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001e5c:	4956      	ldr	r1, [pc, #344]	; (8001fb8 <HAL_RCC_OscConfig+0x63c>)
 8001e5e:	400a      	ands	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7fe ff11 	bl	8000c88 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6c:	f7fe ff0c 	bl	8000c88 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0d8      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d100      	bne.n	8001e94 <HAL_RCC_OscConfig+0x518>
 8001e92:	e0cc      	b.n	800202e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e94:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2238      	movs	r2, #56	; 0x38
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b10      	cmp	r3, #16
 8001e9e:	d100      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x526>
 8001ea0:	e07b      	b.n	8001f9a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d156      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001eb0:	4942      	ldr	r1, [pc, #264]	; (8001fbc <HAL_RCC_OscConfig+0x640>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7fe fee7 	bl	8000c88 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe fee2 	bl	8000c88 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0ae      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed2:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	049b      	lsls	r3, r3, #18
 8001eda:	4013      	ands	r3, r2
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	4a37      	ldr	r2, [pc, #220]	; (8001fc0 <HAL_RCC_OscConfig+0x644>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	0449      	lsls	r1, r1, #17
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f20:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	0549      	lsls	r1, r1, #21
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7fe feab 	bl	8000c88 <HAL_GetTick>
 8001f32:	0003      	movs	r3, r0
 8001f34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7fe fea6 	bl	8000c88 <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e072      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	049b      	lsls	r3, r3, #18
 8001f52:	4013      	ands	r3, r2
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x5bc>
 8001f56:	e06a      	b.n	800202e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f5e:	4917      	ldr	r1, [pc, #92]	; (8001fbc <HAL_RCC_OscConfig+0x640>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe fe90 	bl	8000c88 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe fe8b 	bl	8000c88 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e057      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	049b      	lsls	r3, r3, #18
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_OscConfig+0x62c>)
 8001f92:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <HAL_RCC_OscConfig+0x648>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	e049      	b.n	800202e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d112      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e044      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	00001388 	.word	0x00001388
 8001fb4:	efffffff 	.word	0xefffffff
 8001fb8:	ffbfffff 	.word	0xffbfffff
 8001fbc:	feffffff 	.word	0xfeffffff
 8001fc0:	11c1808c 	.word	0x11c1808c
 8001fc4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x6bc>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d126      	bne.n	800202a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2270      	movs	r2, #112	; 0x70
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11f      	bne.n	800202a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	23fe      	movs	r3, #254	; 0xfe
 8001fee:	01db      	lsls	r3, r3, #7
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d116      	bne.n	800202a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	23f8      	movs	r3, #248	; 0xf8
 8002000:	039b      	lsls	r3, r3, #14
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d10e      	bne.n	800202a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	23e0      	movs	r3, #224	; 0xe0
 8002010:	051b      	lsls	r3, r3, #20
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	0f5b      	lsrs	r3, r3, #29
 8002020:	075a      	lsls	r2, r3, #29
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b008      	add	sp, #32
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0e9      	b.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b76      	ldr	r3, [pc, #472]	; (800222c <HAL_RCC_ClockConfig+0x1f0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2207      	movs	r2, #7
 8002056:	4013      	ands	r3, r2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d91e      	bls.n	800209c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b73      	ldr	r3, [pc, #460]	; (800222c <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2207      	movs	r2, #7
 8002064:	4393      	bics	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_RCC_ClockConfig+0x1f0>)
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002070:	f7fe fe0a 	bl	8000c88 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002078:	e009      	b.n	800208e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207a:	f7fe fe05 	bl	8000c88 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	4a6a      	ldr	r2, [pc, #424]	; (8002230 <HAL_RCC_ClockConfig+0x1f4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0ca      	b.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800208e:	4b67      	ldr	r3, [pc, #412]	; (800222c <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2207      	movs	r2, #7
 8002094:	4013      	ands	r3, r2
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d1ee      	bne.n	800207a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d015      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2204      	movs	r2, #4
 80020ac:	4013      	ands	r3, r2
 80020ae:	d006      	beq.n	80020be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020b0:	4b60      	ldr	r3, [pc, #384]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 80020b6:	21e0      	movs	r1, #224	; 0xe0
 80020b8:	01c9      	lsls	r1, r1, #7
 80020ba:	430a      	orrs	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4a5d      	ldr	r2, [pc, #372]	; (8002238 <HAL_RCC_ClockConfig+0x1fc>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d057      	beq.n	800218c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e4:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	029b      	lsls	r3, r3, #10
 80020ec:	4013      	ands	r3, r2
 80020ee:	d12b      	bne.n	8002148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e097      	b.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d107      	bne.n	800210c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fc:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	049b      	lsls	r3, r3, #18
 8002104:	4013      	ands	r3, r2
 8002106:	d11f      	bne.n	8002148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e08b      	b.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002114:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4013      	ands	r3, r2
 800211e:	d113      	bne.n	8002148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e07f      	b.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d106      	bne.n	800213a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800212c:	4b41      	ldr	r3, [pc, #260]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 800212e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002130:	2202      	movs	r2, #2
 8002132:	4013      	ands	r3, r2
 8002134:	d108      	bne.n	8002148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e074      	b.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	2202      	movs	r2, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e06d      	b.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002148:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2207      	movs	r2, #7
 800214e:	4393      	bics	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4b37      	ldr	r3, [pc, #220]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 8002158:	430a      	orrs	r2, r1
 800215a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800215c:	f7fe fd94 	bl	8000c88 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002164:	e009      	b.n	800217a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7fe fd8f 	bl	8000c88 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <HAL_RCC_ClockConfig+0x1f4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e054      	b.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2238      	movs	r2, #56	; 0x38
 8002180:	401a      	ands	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	429a      	cmp	r2, r3
 800218a:	d1ec      	bne.n	8002166 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2207      	movs	r2, #7
 8002192:	4013      	ands	r3, r2
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d21e      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2207      	movs	r2, #7
 80021a0:	4393      	bics	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fd6c 	bl	8000c88 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021b4:	e009      	b.n	80021ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b6:	f7fe fd67 	bl	8000c88 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	4a1b      	ldr	r2, [pc, #108]	; (8002230 <HAL_RCC_ClockConfig+0x1f4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e02c      	b.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2207      	movs	r2, #7
 80021d0:	4013      	ands	r3, r2
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1ee      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2204      	movs	r2, #4
 80021de:	4013      	ands	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	4a15      	ldr	r2, [pc, #84]	; (800223c <HAL_RCC_ClockConfig+0x200>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021f6:	f000 f829 	bl	800224c <HAL_RCC_GetSysClockFreq>
 80021fa:	0001      	movs	r1, r0
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_ClockConfig+0x1f8>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	220f      	movs	r2, #15
 8002204:	401a      	ands	r2, r3
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_RCC_ClockConfig+0x204>)
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	58d3      	ldr	r3, [r2, r3]
 800220c:	221f      	movs	r2, #31
 800220e:	4013      	ands	r3, r2
 8002210:	000a      	movs	r2, r1
 8002212:	40da      	lsrs	r2, r3
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_ClockConfig+0x208>)
 8002216:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_ClockConfig+0x20c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0018      	movs	r0, r3
 800221e:	f7fe fcd7 	bl	8000bd0 <HAL_InitTick>
 8002222:	0003      	movs	r3, r0
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b004      	add	sp, #16
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40022000 	.word	0x40022000
 8002230:	00001388 	.word	0x00001388
 8002234:	40021000 	.word	0x40021000
 8002238:	fffff0ff 	.word	0xfffff0ff
 800223c:	ffff8fff 	.word	0xffff8fff
 8002240:	08004380 	.word	0x08004380
 8002244:	20000014 	.word	0x20000014
 8002248:	20000018 	.word	0x20000018

0800224c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002252:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2238      	movs	r2, #56	; 0x38
 8002258:	4013      	ands	r3, r2
 800225a:	d10f      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800225c:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0adb      	lsrs	r3, r3, #11
 8002262:	2207      	movs	r2, #7
 8002264:	4013      	ands	r3, r2
 8002266:	2201      	movs	r2, #1
 8002268:	409a      	lsls	r2, r3
 800226a:	0013      	movs	r3, r2
 800226c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800226e:	6839      	ldr	r1, [r7, #0]
 8002270:	4835      	ldr	r0, [pc, #212]	; (8002348 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002272:	f7fd ff47 	bl	8000104 <__udivsi3>
 8002276:	0003      	movs	r3, r0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	e05d      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800227c:	4b31      	ldr	r3, [pc, #196]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2238      	movs	r2, #56	; 0x38
 8002282:	4013      	ands	r3, r2
 8002284:	2b08      	cmp	r3, #8
 8002286:	d102      	bne.n	800228e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_RCC_GetSysClockFreq+0x100>)
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	e054      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800228e:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2238      	movs	r2, #56	; 0x38
 8002294:	4013      	ands	r3, r2
 8002296:	2b10      	cmp	r3, #16
 8002298:	d138      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800229a:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2203      	movs	r2, #3
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	2207      	movs	r2, #7
 80022ac:	4013      	ands	r3, r2
 80022ae:	3301      	adds	r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d10d      	bne.n	80022d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	4824      	ldr	r0, [pc, #144]	; (800234c <HAL_RCC_GetSysClockFreq+0x100>)
 80022bc:	f7fd ff22 	bl	8000104 <__udivsi3>
 80022c0:	0003      	movs	r3, r0
 80022c2:	0019      	movs	r1, r3
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	227f      	movs	r2, #127	; 0x7f
 80022cc:	4013      	ands	r3, r2
 80022ce:	434b      	muls	r3, r1
 80022d0:	617b      	str	r3, [r7, #20]
        break;
 80022d2:	e00d      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	481c      	ldr	r0, [pc, #112]	; (8002348 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022d8:	f7fd ff14 	bl	8000104 <__udivsi3>
 80022dc:	0003      	movs	r3, r0
 80022de:	0019      	movs	r1, r3
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	227f      	movs	r2, #127	; 0x7f
 80022e8:	4013      	ands	r3, r2
 80022ea:	434b      	muls	r3, r1
 80022ec:	617b      	str	r3, [r7, #20]
        break;
 80022ee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0f5b      	lsrs	r3, r3, #29
 80022f6:	2207      	movs	r2, #7
 80022f8:	4013      	ands	r3, r2
 80022fa:	3301      	adds	r3, #1
 80022fc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	6978      	ldr	r0, [r7, #20]
 8002302:	f7fd feff 	bl	8000104 <__udivsi3>
 8002306:	0003      	movs	r3, r0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e015      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2238      	movs	r2, #56	; 0x38
 8002312:	4013      	ands	r3, r2
 8002314:	2b20      	cmp	r3, #32
 8002316:	d103      	bne.n	8002320 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2238      	movs	r2, #56	; 0x38
 8002326:	4013      	ands	r3, r2
 8002328:	2b18      	cmp	r3, #24
 800232a:	d103      	bne.n	8002334 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800232c:	23fa      	movs	r3, #250	; 0xfa
 800232e:	01db      	lsls	r3, r3, #7
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e001      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002338:	693b      	ldr	r3, [r7, #16]
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b006      	add	sp, #24
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	40021000 	.word	0x40021000
 8002348:	00f42400 	.word	0x00f42400
 800234c:	007a1200 	.word	0x007a1200

08002350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_RCC_GetHCLKFreq+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	20000014 	.word	0x20000014

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b5b0      	push	{r4, r5, r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002368:	f7ff fff2 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 800236c:	0004      	movs	r4, r0
 800236e:	f7ff faf9 	bl	8001964 <LL_RCC_GetAPB1Prescaler>
 8002372:	0003      	movs	r3, r0
 8002374:	0b1a      	lsrs	r2, r3, #12
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	58d3      	ldr	r3, [r2, r3]
 800237c:	221f      	movs	r2, #31
 800237e:	4013      	ands	r3, r2
 8002380:	40dc      	lsrs	r4, r3
 8002382:	0023      	movs	r3, r4
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	bdb0      	pop	{r4, r5, r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	080043c0 	.word	0x080043c0

08002390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002398:	2313      	movs	r3, #19
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a0:	2312      	movs	r3, #18
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	029b      	lsls	r3, r3, #10
 80023b0:	4013      	ands	r3, r2
 80023b2:	d100      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80023b4:	e0ad      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b6:	2011      	movs	r0, #17
 80023b8:	183b      	adds	r3, r7, r0
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	055b      	lsls	r3, r3, #21
 80023c6:	4013      	ands	r3, r2
 80023c8:	d110      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b44      	ldr	r3, [pc, #272]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	0549      	lsls	r1, r1, #21
 80023d4:	430a      	orrs	r2, r1
 80023d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80023d8:	4b40      	ldr	r3, [pc, #256]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	055b      	lsls	r3, r3, #21
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	183b      	adds	r3, r7, r0
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ec:	4b3c      	ldr	r3, [pc, #240]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	0049      	lsls	r1, r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023fa:	f7fe fc45 	bl	8000c88 <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002402:	e00b      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002404:	f7fe fc40 	bl	8000c88 <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d904      	bls.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002412:	2313      	movs	r3, #19
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2203      	movs	r2, #3
 8002418:	701a      	strb	r2, [r3, #0]
        break;
 800241a:	e005      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800241c:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4013      	ands	r3, r2
 8002426:	d0ed      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002428:	2313      	movs	r3, #19
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d15e      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002432:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002434:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002436:	23c0      	movs	r3, #192	; 0xc0
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4013      	ands	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d019      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	429a      	cmp	r2, r3
 800244c:	d014      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800244e:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002454:	4013      	ands	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002458:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800245a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800245c:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0249      	lsls	r1, r1, #9
 8002462:	430a      	orrs	r2, r1
 8002464:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800246c:	491e      	ldr	r1, [pc, #120]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800246e:	400a      	ands	r2, r1
 8002470:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d016      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fc02 	bl	8000c88 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002488:	e00c      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fbfd 	bl	8000c88 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d904      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800249a:	2313      	movs	r3, #19
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	2203      	movs	r2, #3
 80024a0:	701a      	strb	r2, [r3, #0]
            break;
 80024a2:	e004      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	2202      	movs	r2, #2
 80024aa:	4013      	ands	r3, r2
 80024ac:	d0ed      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80024ae:	2313      	movs	r3, #19
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80024be:	4013      	ands	r3, r2
 80024c0:	0019      	movs	r1, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024c8:	430a      	orrs	r2, r1
 80024ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80024cc:	e016      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ce:	2312      	movs	r3, #18
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	2213      	movs	r2, #19
 80024d4:	18ba      	adds	r2, r7, r2
 80024d6:	7812      	ldrb	r2, [r2, #0]
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	e00f      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
 80024e4:	fffffcff 	.word	0xfffffcff
 80024e8:	fffeffff 	.word	0xfffeffff
 80024ec:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f0:	2312      	movs	r3, #18
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2213      	movs	r2, #19
 80024f6:	18ba      	adds	r2, r7, r2
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024fc:	2311      	movs	r3, #17
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4bb6      	ldr	r3, [pc, #728]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800250a:	4bb5      	ldr	r3, [pc, #724]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250c:	49b5      	ldr	r1, [pc, #724]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800250e:	400a      	ands	r2, r1
 8002510:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800251c:	4bb0      	ldr	r3, [pc, #704]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	2203      	movs	r2, #3
 8002522:	4393      	bics	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4bad      	ldr	r3, [pc, #692]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252c:	430a      	orrs	r2, r1
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2202      	movs	r2, #2
 8002536:	4013      	ands	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800253a:	4ba9      	ldr	r3, [pc, #676]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	220c      	movs	r2, #12
 8002540:	4393      	bics	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	4ba5      	ldr	r3, [pc, #660]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800254a:	430a      	orrs	r2, r1
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	4013      	ands	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002558:	4ba1      	ldr	r3, [pc, #644]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	2230      	movs	r2, #48	; 0x30
 800255e:	4393      	bics	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	4b9e      	ldr	r3, [pc, #632]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002568:	430a      	orrs	r2, r1
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2210      	movs	r2, #16
 8002572:	4013      	ands	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002576:	4b9a      	ldr	r3, [pc, #616]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	4a9b      	ldr	r2, [pc, #620]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	4b96      	ldr	r3, [pc, #600]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002586:	430a      	orrs	r2, r1
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	015b      	lsls	r3, r3, #5
 8002592:	4013      	ands	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002596:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	4a94      	ldr	r2, [pc, #592]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800259c:	4013      	ands	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	4b8e      	ldr	r3, [pc, #568]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4013      	ands	r3, r2
 80025b4:	d009      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025b6:	4b8a      	ldr	r3, [pc, #552]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	4a8d      	ldr	r2, [pc, #564]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c4:	4b86      	ldr	r3, [pc, #536]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c6:	430a      	orrs	r2, r1
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4013      	ands	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025d6:	4b82      	ldr	r3, [pc, #520]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	4a86      	ldr	r2, [pc, #536]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80025dc:	4013      	ands	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	4b7e      	ldr	r3, [pc, #504]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2220      	movs	r2, #32
 80025f0:	4013      	ands	r3, r2
 80025f2:	d009      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f4:	4b7a      	ldr	r3, [pc, #488]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	4a7f      	ldr	r2, [pc, #508]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	4b77      	ldr	r3, [pc, #476]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002604:	430a      	orrs	r2, r1
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2240      	movs	r2, #64	; 0x40
 800260e:	4013      	ands	r3, r2
 8002610:	d009      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002612:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	4a79      	ldr	r2, [pc, #484]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002618:	4013      	ands	r3, r2
 800261a:	0019      	movs	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002622:	430a      	orrs	r2, r1
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	01db      	lsls	r3, r3, #7
 800262e:	4013      	ands	r3, r2
 8002630:	d015      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002632:	4b6b      	ldr	r3, [pc, #428]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	0899      	lsrs	r1, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263e:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002640:	430a      	orrs	r2, r1
 8002642:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	05db      	lsls	r3, r3, #23
 800264c:	429a      	cmp	r2, r3
 800264e:	d106      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002650:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4b62      	ldr	r3, [pc, #392]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	0249      	lsls	r1, r1, #9
 800265a:	430a      	orrs	r2, r1
 800265c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	031b      	lsls	r3, r3, #12
 8002666:	4013      	ands	r3, r2
 8002668:	d009      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800266a:	4b5d      	ldr	r3, [pc, #372]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	2240      	movs	r2, #64	; 0x40
 8002670:	4393      	bics	r3, r2
 8002672:	0019      	movs	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267a:	430a      	orrs	r2, r1
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	039b      	lsls	r3, r3, #14
 8002686:	4013      	ands	r3, r2
 8002688:	d016      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800268a:	4b55      	ldr	r3, [pc, #340]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	4a5c      	ldr	r2, [pc, #368]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002690:	4013      	ands	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002698:	4b51      	ldr	r3, [pc, #324]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800269a:	430a      	orrs	r2, r1
 800269c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	03db      	lsls	r3, r3, #15
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d106      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026aa:	4b4d      	ldr	r3, [pc, #308]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	0449      	lsls	r1, r1, #17
 80026b4:	430a      	orrs	r2, r1
 80026b6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	03db      	lsls	r3, r3, #15
 80026c0:	4013      	ands	r3, r2
 80026c2:	d016      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026c4:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	4a4e      	ldr	r2, [pc, #312]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026d2:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026d4:	430a      	orrs	r2, r1
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	045b      	lsls	r3, r3, #17
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d106      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026e4:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	0449      	lsls	r1, r1, #17
 80026ee:	430a      	orrs	r2, r1
 80026f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	4013      	ands	r3, r2
 80026fc:	d014      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	2203      	movs	r2, #3
 8002704:	4393      	bics	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800270e:	430a      	orrs	r2, r1
 8002710:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d106      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0249      	lsls	r1, r1, #9
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	019b      	lsls	r3, r3, #6
 8002730:	4013      	ands	r3, r2
 8002732:	d014      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002734:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	220c      	movs	r2, #12
 800273a:	4393      	bics	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002744:	430a      	orrs	r2, r1
 8002746:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b04      	cmp	r3, #4
 800274e:	d106      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002750:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	0249      	lsls	r1, r1, #9
 800275a:	430a      	orrs	r2, r1
 800275c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	045b      	lsls	r3, r3, #17
 8002766:	4013      	ands	r3, r2
 8002768:	d016      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002770:	4013      	ands	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800277a:	430a      	orrs	r2, r1
 800277c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	429a      	cmp	r2, r3
 8002788:	d106      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0449      	lsls	r1, r1, #17
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	049b      	lsls	r3, r3, #18
 80027a0:	4013      	ands	r3, r2
 80027a2:	d016      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027b4:	430a      	orrs	r2, r1
 80027b6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	0449      	lsls	r1, r1, #17
 80027ce:	430a      	orrs	r2, r1
 80027d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80027d2:	2312      	movs	r3, #18
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	781b      	ldrb	r3, [r3, #0]
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b006      	add	sp, #24
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000
 80027e4:	efffffff 	.word	0xefffffff
 80027e8:	fffff3ff 	.word	0xfffff3ff
 80027ec:	fffffcff 	.word	0xfffffcff
 80027f0:	fff3ffff 	.word	0xfff3ffff
 80027f4:	ffcfffff 	.word	0xffcfffff
 80027f8:	ffffcfff 	.word	0xffffcfff
 80027fc:	ffff3fff 	.word	0xffff3fff
 8002800:	ffbfffff 	.word	0xffbfffff
 8002804:	feffffff 	.word	0xfeffffff

08002808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e046      	b.n	80028a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2284      	movs	r2, #132	; 0x84
 800281e:	589b      	ldr	r3, [r3, r2]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	0018      	movs	r0, r3
 8002830:	f7fe f87e 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2284      	movs	r2, #132	; 0x84
 8002838:	2124      	movs	r1, #36	; 0x24
 800283a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	438a      	bics	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fc8a 	bl	8003168 <UART_SetConfig>
 8002854:	0003      	movs	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e024      	b.n	80028a8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 ffd3 	bl	8003814 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	490d      	ldr	r1, [pc, #52]	; (80028b0 <HAL_UART_Init+0xa8>)
 800287a:	400a      	ands	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	212a      	movs	r1, #42	; 0x2a
 800288a:	438a      	bics	r2, r1
 800288c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f001 f86b 	bl	800397c <UART_CheckIdleState>
 80028a6:	0003      	movs	r3, r0
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	ffffb7ff 	.word	0xffffb7ff

080028b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	1dbb      	adds	r3, r7, #6
 80028c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2284      	movs	r2, #132	; 0x84
 80028c8:	589b      	ldr	r3, [r3, r2]
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d000      	beq.n	80028d0 <HAL_UART_Transmit+0x1c>
 80028ce:	e097      	b.n	8002a00 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_UART_Transmit+0x2a>
 80028d6:	1dbb      	adds	r3, r7, #6
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e08f      	b.n	8002a02 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	015b      	lsls	r3, r3, #5
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d109      	bne.n	8002902 <HAL_UART_Transmit+0x4e>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2201      	movs	r2, #1
 80028fa:	4013      	ands	r3, r2
 80028fc:	d001      	beq.n	8002902 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2280      	movs	r2, #128	; 0x80
 8002906:	5c9b      	ldrb	r3, [r3, r2]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_UART_Transmit+0x5c>
 800290c:	2302      	movs	r3, #2
 800290e:	e078      	b.n	8002a02 <HAL_UART_Transmit+0x14e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	2101      	movs	r1, #1
 8002916:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	228c      	movs	r2, #140	; 0x8c
 800291c:	2100      	movs	r1, #0
 800291e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2284      	movs	r2, #132	; 0x84
 8002924:	2121      	movs	r1, #33	; 0x21
 8002926:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002928:	f7fe f9ae 	bl	8000c88 <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1dba      	adds	r2, r7, #6
 8002934:	2154      	movs	r1, #84	; 0x54
 8002936:	8812      	ldrh	r2, [r2, #0]
 8002938:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1dba      	adds	r2, r7, #6
 800293e:	2156      	movs	r1, #86	; 0x56
 8002940:	8812      	ldrh	r2, [r2, #0]
 8002942:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	015b      	lsls	r3, r3, #5
 800294c:	429a      	cmp	r2, r3
 800294e:	d108      	bne.n	8002962 <HAL_UART_Transmit+0xae>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	e003      	b.n	800296a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	2100      	movs	r1, #0
 8002970:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002972:	e02c      	b.n	80029ce <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	0013      	movs	r3, r2
 800297e:	2200      	movs	r2, #0
 8002980:	2180      	movs	r1, #128	; 0x80
 8002982:	f001 f845 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 8002986:	1e03      	subs	r3, r0, #0
 8002988:	d001      	beq.n	800298e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e039      	b.n	8002a02 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	001a      	movs	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	05d2      	lsls	r2, r2, #23
 80029a0:	0dd2      	lsrs	r2, r2, #23
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	3302      	adds	r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	e007      	b.n	80029bc <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2256      	movs	r2, #86	; 0x56
 80029c0:	5a9b      	ldrh	r3, [r3, r2]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b299      	uxth	r1, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2256      	movs	r2, #86	; 0x56
 80029cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2256      	movs	r2, #86	; 0x56
 80029d2:	5a9b      	ldrh	r3, [r3, r2]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1cc      	bne.n	8002974 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	0013      	movs	r3, r2
 80029e4:	2200      	movs	r2, #0
 80029e6:	2140      	movs	r1, #64	; 0x40
 80029e8:	f001 f812 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e006      	b.n	8002a02 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2284      	movs	r2, #132	; 0x84
 80029f8:	2120      	movs	r1, #32
 80029fa:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e000      	b.n	8002a02 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002a00:	2302      	movs	r3, #2
  }
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b008      	add	sp, #32
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	1dbb      	adds	r3, r7, #6
 8002a18:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2288      	movs	r2, #136	; 0x88
 8002a1e:	589b      	ldr	r3, [r3, r2]
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d15a      	bne.n	8002ada <HAL_UART_Receive_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_UART_Receive_DMA+0x26>
 8002a2a:	1dbb      	adds	r3, r7, #6
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e052      	b.n	8002adc <HAL_UART_Receive_DMA+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	015b      	lsls	r3, r3, #5
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d109      	bne.n	8002a56 <HAL_UART_Receive_DMA+0x4a>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d001      	beq.n	8002a56 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e042      	b.n	8002adc <HAL_UART_Receive_DMA+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	5c9b      	ldrb	r3, [r3, r2]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_UART_Receive_DMA+0x58>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e03b      	b.n	8002adc <HAL_UART_Receive_DMA+0xd0>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_UART_Receive_DMA+0xd8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d025      	beq.n	8002ac8 <HAL_UART_Receive_DMA+0xbc>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_UART_Receive_DMA+0xdc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d020      	beq.n	8002ac8 <HAL_UART_Receive_DMA+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	4013      	ands	r3, r2
 8002a92:	d019      	beq.n	8002ac8 <HAL_UART_Receive_DMA+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a94:	f3ef 8310 	mrs	r3, PRIMASK
 8002a98:	613b      	str	r3, [r7, #16]
  return(result);
 8002a9a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f383 8810 	msr	PRIMASK, r3
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	04c9      	lsls	r1, r1, #19
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	f383 8810 	msr	PRIMASK, r3
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ac8:	1dbb      	adds	r3, r7, #6
 8002aca:	881a      	ldrh	r2, [r3, #0]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f001 f865 	bl	8003ba0 <UART_Start_Receive_DMA>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	e000      	b.n	8002adc <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
  }
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b008      	add	sp, #32
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40008000 	.word	0x40008000
 8002ae8:	40008400 	.word	0x40008400

08002aec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aec:	b5b0      	push	{r4, r5, r7, lr}
 8002aee:	b0aa      	sub	sp, #168	; 0xa8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	22a4      	movs	r2, #164	; 0xa4
 8002afc:	18b9      	adds	r1, r7, r2
 8002afe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	20a0      	movs	r0, #160	; 0xa0
 8002b08:	1839      	adds	r1, r7, r0
 8002b0a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	249c      	movs	r4, #156	; 0x9c
 8002b14:	1939      	adds	r1, r7, r4
 8002b16:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b18:	0011      	movs	r1, r2
 8002b1a:	18bb      	adds	r3, r7, r2
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4aa0      	ldr	r2, [pc, #640]	; (8002da0 <HAL_UART_IRQHandler+0x2b4>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	2298      	movs	r2, #152	; 0x98
 8002b24:	18bd      	adds	r5, r7, r2
 8002b26:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002b28:	18bb      	adds	r3, r7, r2
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11a      	bne.n	8002b66 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2220      	movs	r2, #32
 8002b36:	4013      	ands	r3, r2
 8002b38:	d015      	beq.n	8002b66 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b3a:	183b      	adds	r3, r7, r0
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	4013      	ands	r3, r2
 8002b42:	d105      	bne.n	8002b50 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	055b      	lsls	r3, r3, #21
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d00a      	beq.n	8002b66 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d100      	bne.n	8002b5a <HAL_UART_IRQHandler+0x6e>
 8002b58:	e2cf      	b.n	80030fa <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	0010      	movs	r0, r2
 8002b62:	4798      	blx	r3
      }
      return;
 8002b64:	e2c9      	b.n	80030fa <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b66:	2398      	movs	r3, #152	; 0x98
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d100      	bne.n	8002b72 <HAL_UART_IRQHandler+0x86>
 8002b70:	e11e      	b.n	8002db0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002b72:	239c      	movs	r3, #156	; 0x9c
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a8a      	ldr	r2, [pc, #552]	; (8002da4 <HAL_UART_IRQHandler+0x2b8>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d106      	bne.n	8002b8c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002b7e:	23a0      	movs	r3, #160	; 0xa0
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a88      	ldr	r2, [pc, #544]	; (8002da8 <HAL_UART_IRQHandler+0x2bc>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	d100      	bne.n	8002b8c <HAL_UART_IRQHandler+0xa0>
 8002b8a:	e111      	b.n	8002db0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b8c:	23a4      	movs	r3, #164	; 0xa4
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2201      	movs	r2, #1
 8002b94:	4013      	ands	r3, r2
 8002b96:	d012      	beq.n	8002bbe <HAL_UART_IRQHandler+0xd2>
 8002b98:	23a0      	movs	r3, #160	; 0xa0
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d00b      	beq.n	8002bbe <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2201      	movs	r2, #1
 8002bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	228c      	movs	r2, #140	; 0x8c
 8002bb2:	589b      	ldr	r3, [r3, r2]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	218c      	movs	r1, #140	; 0x8c
 8002bbc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bbe:	23a4      	movs	r3, #164	; 0xa4
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d011      	beq.n	8002bee <HAL_UART_IRQHandler+0x102>
 8002bca:	239c      	movs	r3, #156	; 0x9c
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d00b      	beq.n	8002bee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	228c      	movs	r2, #140	; 0x8c
 8002be2:	589b      	ldr	r3, [r3, r2]
 8002be4:	2204      	movs	r2, #4
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	218c      	movs	r1, #140	; 0x8c
 8002bec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bee:	23a4      	movs	r3, #164	; 0xa4
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d011      	beq.n	8002c1e <HAL_UART_IRQHandler+0x132>
 8002bfa:	239c      	movs	r3, #156	; 0x9c
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	228c      	movs	r2, #140	; 0x8c
 8002c12:	589b      	ldr	r3, [r3, r2]
 8002c14:	2202      	movs	r2, #2
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	218c      	movs	r1, #140	; 0x8c
 8002c1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c1e:	23a4      	movs	r3, #164	; 0xa4
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2208      	movs	r2, #8
 8002c26:	4013      	ands	r3, r2
 8002c28:	d017      	beq.n	8002c5a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c2a:	23a0      	movs	r3, #160	; 0xa0
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2220      	movs	r2, #32
 8002c32:	4013      	ands	r3, r2
 8002c34:	d105      	bne.n	8002c42 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002c36:	239c      	movs	r3, #156	; 0x9c
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a59      	ldr	r2, [pc, #356]	; (8002da4 <HAL_UART_IRQHandler+0x2b8>)
 8002c3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c40:	d00b      	beq.n	8002c5a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2208      	movs	r2, #8
 8002c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	228c      	movs	r2, #140	; 0x8c
 8002c4e:	589b      	ldr	r3, [r3, r2]
 8002c50:	2208      	movs	r2, #8
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	218c      	movs	r1, #140	; 0x8c
 8002c58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c5a:	23a4      	movs	r3, #164	; 0xa4
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4013      	ands	r3, r2
 8002c66:	d013      	beq.n	8002c90 <HAL_UART_IRQHandler+0x1a4>
 8002c68:	23a0      	movs	r3, #160	; 0xa0
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	04db      	lsls	r3, r3, #19
 8002c72:	4013      	ands	r3, r2
 8002c74:	d00c      	beq.n	8002c90 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	228c      	movs	r2, #140	; 0x8c
 8002c84:	589b      	ldr	r3, [r3, r2]
 8002c86:	2220      	movs	r2, #32
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	218c      	movs	r1, #140	; 0x8c
 8002c8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	228c      	movs	r2, #140	; 0x8c
 8002c94:	589b      	ldr	r3, [r3, r2]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d100      	bne.n	8002c9c <HAL_UART_IRQHandler+0x1b0>
 8002c9a:	e230      	b.n	80030fe <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c9c:	23a4      	movs	r3, #164	; 0xa4
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d015      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ca8:	23a0      	movs	r3, #160	; 0xa0
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d106      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002cb4:	239c      	movs	r3, #156	; 0x9c
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	055b      	lsls	r3, r3, #21
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d008      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	0010      	movs	r0, r2
 8002cd2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	228c      	movs	r2, #140	; 0x8c
 8002cd8:	589b      	ldr	r3, [r3, r2]
 8002cda:	2194      	movs	r1, #148	; 0x94
 8002cdc:	187a      	adds	r2, r7, r1
 8002cde:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	d004      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2228      	movs	r2, #40	; 0x28
 8002cf4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cf6:	d047      	beq.n	8002d88 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f001 f838 	bl	8003d70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2240      	movs	r2, #64	; 0x40
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d137      	bne.n	8002d7e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d12:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d16:	2090      	movs	r0, #144	; 0x90
 8002d18:	183a      	adds	r2, r7, r0
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d22:	f383 8810 	msr	PRIMASK, r3
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2140      	movs	r1, #64	; 0x40
 8002d34:	438a      	bics	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	183b      	adds	r3, r7, r0
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d52:	4a16      	ldr	r2, [pc, #88]	; (8002dac <HAL_UART_IRQHandler+0x2c0>)
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f7fe fa48 	bl	80011f0 <HAL_DMA_Abort_IT>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d01a      	beq.n	8002d9a <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d6e:	0018      	movs	r0, r3
 8002d70:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d72:	e012      	b.n	8002d9a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 f9e2 	bl	8003140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	e00d      	b.n	8002d9a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f9dd 	bl	8003140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d86:	e008      	b.n	8002d9a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 f9d8 	bl	8003140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	228c      	movs	r2, #140	; 0x8c
 8002d94:	2100      	movs	r1, #0
 8002d96:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d98:	e1b1      	b.n	80030fe <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9a:	46c0      	nop			; (mov r8, r8)
    return;
 8002d9c:	e1af      	b.n	80030fe <HAL_UART_IRQHandler+0x612>
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	0000080f 	.word	0x0000080f
 8002da4:	10000001 	.word	0x10000001
 8002da8:	04000120 	.word	0x04000120
 8002dac:	08004027 	.word	0x08004027

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d000      	beq.n	8002dba <HAL_UART_IRQHandler+0x2ce>
 8002db8:	e135      	b.n	8003026 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002dba:	23a4      	movs	r3, #164	; 0xa4
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d100      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x2dc>
 8002dc6:	e12e      	b.n	8003026 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002dc8:	23a0      	movs	r3, #160	; 0xa0
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2210      	movs	r2, #16
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d100      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x2ea>
 8002dd4:	e127      	b.n	8003026 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2210      	movs	r2, #16
 8002ddc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d000      	beq.n	8002dee <HAL_UART_IRQHandler+0x302>
 8002dec:	e09e      	b.n	8002f2c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	217e      	movs	r1, #126	; 0x7e
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d100      	bne.n	8002e06 <HAL_UART_IRQHandler+0x31a>
 8002e04:	e17d      	b.n	8003102 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	225c      	movs	r2, #92	; 0x5c
 8002e0a:	5a9b      	ldrh	r3, [r3, r2]
 8002e0c:	187a      	adds	r2, r7, r1
 8002e0e:	8812      	ldrh	r2, [r2, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d300      	bcc.n	8002e16 <HAL_UART_IRQHandler+0x32a>
 8002e14:	e175      	b.n	8003102 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	187a      	adds	r2, r7, r1
 8002e1a:	215e      	movs	r1, #94	; 0x5e
 8002e1c:	8812      	ldrh	r2, [r2, #0]
 8002e1e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d16f      	bne.n	8002f0e <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e36:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e38:	2301      	movs	r3, #1
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3e:	f383 8810 	msr	PRIMASK, r3
}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	49b1      	ldr	r1, [pc, #708]	; (8003114 <HAL_UART_IRQHandler+0x628>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	f383 8810 	msr	PRIMASK, r3
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e60:	f3ef 8310 	mrs	r3, PRIMASK
 8002e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e68:	677b      	str	r3, [r7, #116]	; 0x74
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e70:	f383 8810 	msr	PRIMASK, r3
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	438a      	bics	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8c:	f383 8810 	msr	PRIMASK, r3
}
 8002e90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e92:	f3ef 8310 	mrs	r3, PRIMASK
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea2:	f383 8810 	msr	PRIMASK, r3
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2140      	movs	r1, #64	; 0x40
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebe:	f383 8810 	msr	PRIMASK, r3
}
 8002ec2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2288      	movs	r2, #136	; 0x88
 8002ec8:	2120      	movs	r1, #32
 8002eca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002edc:	2301      	movs	r3, #1
 8002ede:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efe:	f383 8810 	msr	PRIMASK, r3
}
 8002f02:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7fe f911 	bl	8001130 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	225c      	movs	r2, #92	; 0x5c
 8002f12:	5a9a      	ldrh	r2, [r3, r2]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	215e      	movs	r1, #94	; 0x5e
 8002f18:	5a5b      	ldrh	r3, [r3, r1]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0011      	movs	r1, r2
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f913 	bl	8003150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f2a:	e0ea      	b.n	8003102 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	225c      	movs	r2, #92	; 0x5c
 8002f30:	5a99      	ldrh	r1, [r3, r2]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	225e      	movs	r2, #94	; 0x5e
 8002f36:	5a9b      	ldrh	r3, [r3, r2]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	208e      	movs	r0, #142	; 0x8e
 8002f3c:	183b      	adds	r3, r7, r0
 8002f3e:	1a8a      	subs	r2, r1, r2
 8002f40:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	225e      	movs	r2, #94	; 0x5e
 8002f46:	5a9b      	ldrh	r3, [r3, r2]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d100      	bne.n	8002f50 <HAL_UART_IRQHandler+0x464>
 8002f4e:	e0da      	b.n	8003106 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002f50:	183b      	adds	r3, r7, r0
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d100      	bne.n	8002f5a <HAL_UART_IRQHandler+0x46e>
 8002f58:	e0d5      	b.n	8003106 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f60:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f62:	2488      	movs	r4, #136	; 0x88
 8002f64:	193a      	adds	r2, r7, r4
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4966      	ldr	r1, [pc, #408]	; (8003118 <HAL_UART_IRQHandler+0x62c>)
 8002f80:	400a      	ands	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f383 8810 	msr	PRIMASK, r3
}
 8002f90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f92:	f3ef 8310 	mrs	r3, PRIMASK
 8002f96:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f98:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f9a:	2484      	movs	r4, #132	; 0x84
 8002f9c:	193a      	adds	r2, r7, r4
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f383 8810 	msr	PRIMASK, r3
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4959      	ldr	r1, [pc, #356]	; (800311c <HAL_UART_IRQHandler+0x630>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	193b      	adds	r3, r7, r4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	f383 8810 	msr	PRIMASK, r3
}
 8002fc8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2288      	movs	r2, #136	; 0x88
 8002fce:	2120      	movs	r1, #32
 8002fd0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fde:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe6:	2480      	movs	r4, #128	; 0x80
 8002fe8:	193a      	adds	r2, r7, r4
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	2301      	movs	r3, #1
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2110      	movs	r1, #16
 8003004:	438a      	bics	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	193b      	adds	r3, r7, r4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003016:	183b      	adds	r3, r7, r0
 8003018:	881a      	ldrh	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0011      	movs	r1, r2
 800301e:	0018      	movs	r0, r3
 8003020:	f000 f896 	bl	8003150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003024:	e06f      	b.n	8003106 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003026:	23a4      	movs	r3, #164	; 0xa4
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	035b      	lsls	r3, r3, #13
 8003030:	4013      	ands	r3, r2
 8003032:	d010      	beq.n	8003056 <HAL_UART_IRQHandler+0x56a>
 8003034:	239c      	movs	r3, #156	; 0x9c
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	03db      	lsls	r3, r3, #15
 800303e:	4013      	ands	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2280      	movs	r2, #128	; 0x80
 8003048:	0352      	lsls	r2, r2, #13
 800304a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f001 f82c 	bl	80040ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003054:	e05a      	b.n	800310c <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003056:	23a4      	movs	r3, #164	; 0xa4
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2280      	movs	r2, #128	; 0x80
 800305e:	4013      	ands	r3, r2
 8003060:	d016      	beq.n	8003090 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003062:	23a0      	movs	r3, #160	; 0xa0
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	4013      	ands	r3, r2
 800306c:	d106      	bne.n	800307c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800306e:	239c      	movs	r3, #156	; 0x9c
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	4013      	ands	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	2b00      	cmp	r3, #0
 8003082:	d042      	beq.n	800310a <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	0010      	movs	r0, r2
 800308c:	4798      	blx	r3
    }
    return;
 800308e:	e03c      	b.n	800310a <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003090:	23a4      	movs	r3, #164	; 0xa4
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	4013      	ands	r3, r2
 800309a:	d00a      	beq.n	80030b2 <HAL_UART_IRQHandler+0x5c6>
 800309c:	23a0      	movs	r3, #160	; 0xa0
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	4013      	ands	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 ffd2 	bl	8004054 <UART_EndTransmit_IT>
    return;
 80030b0:	e02c      	b.n	800310c <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80030b2:	23a4      	movs	r3, #164	; 0xa4
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	4013      	ands	r3, r2
 80030be:	d00b      	beq.n	80030d8 <HAL_UART_IRQHandler+0x5ec>
 80030c0:	23a0      	movs	r3, #160	; 0xa0
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	05db      	lsls	r3, r3, #23
 80030ca:	4013      	ands	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f000 fffb 	bl	80040cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030d6:	e019      	b.n	800310c <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80030d8:	23a4      	movs	r3, #164	; 0xa4
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	045b      	lsls	r3, r3, #17
 80030e2:	4013      	ands	r3, r2
 80030e4:	d012      	beq.n	800310c <HAL_UART_IRQHandler+0x620>
 80030e6:	23a0      	movs	r3, #160	; 0xa0
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da0d      	bge.n	800310c <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 ffe2 	bl	80040bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030f8:	e008      	b.n	800310c <HAL_UART_IRQHandler+0x620>
      return;
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	e006      	b.n	800310c <HAL_UART_IRQHandler+0x620>
    return;
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	e004      	b.n	800310c <HAL_UART_IRQHandler+0x620>
      return;
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	e002      	b.n	800310c <HAL_UART_IRQHandler+0x620>
      return;
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	e000      	b.n	800310c <HAL_UART_IRQHandler+0x620>
    return;
 800310a:	46c0      	nop			; (mov r8, r8)
  }
}
 800310c:	46bd      	mov	sp, r7
 800310e:	b02a      	add	sp, #168	; 0xa8
 8003110:	bdb0      	pop	{r4, r5, r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	fffffeff 	.word	0xfffffeff
 8003118:	fffffedf 	.word	0xfffffedf
 800311c:	effffffe 	.word	0xeffffffe

08003120 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	000a      	movs	r2, r1
 800315a:	1cbb      	adds	r3, r7, #2
 800315c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b002      	add	sp, #8
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003168:	b5b0      	push	{r4, r5, r7, lr}
 800316a:	b090      	sub	sp, #64	; 0x40
 800316c:	af00      	add	r7, sp, #0
 800316e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003170:	231a      	movs	r3, #26
 8003172:	2220      	movs	r2, #32
 8003174:	189b      	adds	r3, r3, r2
 8003176:	19db      	adds	r3, r3, r7
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	431a      	orrs	r2, r3
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	431a      	orrs	r2, r3
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4313      	orrs	r3, r2
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4ac1      	ldr	r2, [pc, #772]	; (80034a0 <UART_SetConfig+0x338>)
 800319c:	4013      	ands	r3, r2
 800319e:	0019      	movs	r1, r3
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a6:	430b      	orrs	r3, r1
 80031a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4abc      	ldr	r2, [pc, #752]	; (80034a4 <UART_SetConfig+0x33c>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0018      	movs	r0, r3
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	68d9      	ldr	r1, [r3, #12]
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	0003      	movs	r3, r0
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4ab6      	ldr	r2, [pc, #728]	; (80034a8 <UART_SetConfig+0x340>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d009      	beq.n	80031e8 <UART_SetConfig+0x80>
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4ab4      	ldr	r2, [pc, #720]	; (80034ac <UART_SetConfig+0x344>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031e4:	4313      	orrs	r3, r2
 80031e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4ab0      	ldr	r2, [pc, #704]	; (80034b0 <UART_SetConfig+0x348>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fa:	430b      	orrs	r3, r1
 80031fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	220f      	movs	r2, #15
 8003206:	4393      	bics	r3, r2
 8003208:	0018      	movs	r0, r3
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	0003      	movs	r3, r0
 8003214:	430b      	orrs	r3, r1
 8003216:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4aa5      	ldr	r2, [pc, #660]	; (80034b4 <UART_SetConfig+0x34c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d131      	bne.n	8003286 <UART_SetConfig+0x11e>
 8003222:	4ba5      	ldr	r3, [pc, #660]	; (80034b8 <UART_SetConfig+0x350>)
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	2203      	movs	r2, #3
 8003228:	4013      	ands	r3, r2
 800322a:	2b03      	cmp	r3, #3
 800322c:	d01d      	beq.n	800326a <UART_SetConfig+0x102>
 800322e:	d823      	bhi.n	8003278 <UART_SetConfig+0x110>
 8003230:	2b02      	cmp	r3, #2
 8003232:	d00c      	beq.n	800324e <UART_SetConfig+0xe6>
 8003234:	d820      	bhi.n	8003278 <UART_SetConfig+0x110>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <UART_SetConfig+0xd8>
 800323a:	2b01      	cmp	r3, #1
 800323c:	d00e      	beq.n	800325c <UART_SetConfig+0xf4>
 800323e:	e01b      	b.n	8003278 <UART_SetConfig+0x110>
 8003240:	231b      	movs	r3, #27
 8003242:	2220      	movs	r2, #32
 8003244:	189b      	adds	r3, r3, r2
 8003246:	19db      	adds	r3, r3, r7
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e154      	b.n	80034f8 <UART_SetConfig+0x390>
 800324e:	231b      	movs	r3, #27
 8003250:	2220      	movs	r2, #32
 8003252:	189b      	adds	r3, r3, r2
 8003254:	19db      	adds	r3, r3, r7
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e14d      	b.n	80034f8 <UART_SetConfig+0x390>
 800325c:	231b      	movs	r3, #27
 800325e:	2220      	movs	r2, #32
 8003260:	189b      	adds	r3, r3, r2
 8003262:	19db      	adds	r3, r3, r7
 8003264:	2204      	movs	r2, #4
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e146      	b.n	80034f8 <UART_SetConfig+0x390>
 800326a:	231b      	movs	r3, #27
 800326c:	2220      	movs	r2, #32
 800326e:	189b      	adds	r3, r3, r2
 8003270:	19db      	adds	r3, r3, r7
 8003272:	2208      	movs	r2, #8
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e13f      	b.n	80034f8 <UART_SetConfig+0x390>
 8003278:	231b      	movs	r3, #27
 800327a:	2220      	movs	r2, #32
 800327c:	189b      	adds	r3, r3, r2
 800327e:	19db      	adds	r3, r3, r7
 8003280:	2210      	movs	r2, #16
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e138      	b.n	80034f8 <UART_SetConfig+0x390>
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a8c      	ldr	r2, [pc, #560]	; (80034bc <UART_SetConfig+0x354>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d131      	bne.n	80032f4 <UART_SetConfig+0x18c>
 8003290:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <UART_SetConfig+0x350>)
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	220c      	movs	r2, #12
 8003296:	4013      	ands	r3, r2
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d01d      	beq.n	80032d8 <UART_SetConfig+0x170>
 800329c:	d823      	bhi.n	80032e6 <UART_SetConfig+0x17e>
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d00c      	beq.n	80032bc <UART_SetConfig+0x154>
 80032a2:	d820      	bhi.n	80032e6 <UART_SetConfig+0x17e>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <UART_SetConfig+0x146>
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d00e      	beq.n	80032ca <UART_SetConfig+0x162>
 80032ac:	e01b      	b.n	80032e6 <UART_SetConfig+0x17e>
 80032ae:	231b      	movs	r3, #27
 80032b0:	2220      	movs	r2, #32
 80032b2:	189b      	adds	r3, r3, r2
 80032b4:	19db      	adds	r3, r3, r7
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e11d      	b.n	80034f8 <UART_SetConfig+0x390>
 80032bc:	231b      	movs	r3, #27
 80032be:	2220      	movs	r2, #32
 80032c0:	189b      	adds	r3, r3, r2
 80032c2:	19db      	adds	r3, r3, r7
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e116      	b.n	80034f8 <UART_SetConfig+0x390>
 80032ca:	231b      	movs	r3, #27
 80032cc:	2220      	movs	r2, #32
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	19db      	adds	r3, r3, r7
 80032d2:	2204      	movs	r2, #4
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	e10f      	b.n	80034f8 <UART_SetConfig+0x390>
 80032d8:	231b      	movs	r3, #27
 80032da:	2220      	movs	r2, #32
 80032dc:	189b      	adds	r3, r3, r2
 80032de:	19db      	adds	r3, r3, r7
 80032e0:	2208      	movs	r2, #8
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e108      	b.n	80034f8 <UART_SetConfig+0x390>
 80032e6:	231b      	movs	r3, #27
 80032e8:	2220      	movs	r2, #32
 80032ea:	189b      	adds	r3, r3, r2
 80032ec:	19db      	adds	r3, r3, r7
 80032ee:	2210      	movs	r2, #16
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e101      	b.n	80034f8 <UART_SetConfig+0x390>
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a71      	ldr	r2, [pc, #452]	; (80034c0 <UART_SetConfig+0x358>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d131      	bne.n	8003362 <UART_SetConfig+0x1fa>
 80032fe:	4b6e      	ldr	r3, [pc, #440]	; (80034b8 <UART_SetConfig+0x350>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	2230      	movs	r2, #48	; 0x30
 8003304:	4013      	ands	r3, r2
 8003306:	2b30      	cmp	r3, #48	; 0x30
 8003308:	d01d      	beq.n	8003346 <UART_SetConfig+0x1de>
 800330a:	d823      	bhi.n	8003354 <UART_SetConfig+0x1ec>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d00c      	beq.n	800332a <UART_SetConfig+0x1c2>
 8003310:	d820      	bhi.n	8003354 <UART_SetConfig+0x1ec>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <UART_SetConfig+0x1b4>
 8003316:	2b10      	cmp	r3, #16
 8003318:	d00e      	beq.n	8003338 <UART_SetConfig+0x1d0>
 800331a:	e01b      	b.n	8003354 <UART_SetConfig+0x1ec>
 800331c:	231b      	movs	r3, #27
 800331e:	2220      	movs	r2, #32
 8003320:	189b      	adds	r3, r3, r2
 8003322:	19db      	adds	r3, r3, r7
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e0e6      	b.n	80034f8 <UART_SetConfig+0x390>
 800332a:	231b      	movs	r3, #27
 800332c:	2220      	movs	r2, #32
 800332e:	189b      	adds	r3, r3, r2
 8003330:	19db      	adds	r3, r3, r7
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e0df      	b.n	80034f8 <UART_SetConfig+0x390>
 8003338:	231b      	movs	r3, #27
 800333a:	2220      	movs	r2, #32
 800333c:	189b      	adds	r3, r3, r2
 800333e:	19db      	adds	r3, r3, r7
 8003340:	2204      	movs	r2, #4
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e0d8      	b.n	80034f8 <UART_SetConfig+0x390>
 8003346:	231b      	movs	r3, #27
 8003348:	2220      	movs	r2, #32
 800334a:	189b      	adds	r3, r3, r2
 800334c:	19db      	adds	r3, r3, r7
 800334e:	2208      	movs	r2, #8
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e0d1      	b.n	80034f8 <UART_SetConfig+0x390>
 8003354:	231b      	movs	r3, #27
 8003356:	2220      	movs	r2, #32
 8003358:	189b      	adds	r3, r3, r2
 800335a:	19db      	adds	r3, r3, r7
 800335c:	2210      	movs	r2, #16
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e0ca      	b.n	80034f8 <UART_SetConfig+0x390>
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a57      	ldr	r2, [pc, #348]	; (80034c4 <UART_SetConfig+0x35c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d106      	bne.n	800337a <UART_SetConfig+0x212>
 800336c:	231b      	movs	r3, #27
 800336e:	2220      	movs	r2, #32
 8003370:	189b      	adds	r3, r3, r2
 8003372:	19db      	adds	r3, r3, r7
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	e0be      	b.n	80034f8 <UART_SetConfig+0x390>
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <UART_SetConfig+0x360>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d106      	bne.n	8003392 <UART_SetConfig+0x22a>
 8003384:	231b      	movs	r3, #27
 8003386:	2220      	movs	r2, #32
 8003388:	189b      	adds	r3, r3, r2
 800338a:	19db      	adds	r3, r3, r7
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e0b2      	b.n	80034f8 <UART_SetConfig+0x390>
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a4d      	ldr	r2, [pc, #308]	; (80034cc <UART_SetConfig+0x364>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d106      	bne.n	80033aa <UART_SetConfig+0x242>
 800339c:	231b      	movs	r3, #27
 800339e:	2220      	movs	r2, #32
 80033a0:	189b      	adds	r3, r3, r2
 80033a2:	19db      	adds	r3, r3, r7
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e0a6      	b.n	80034f8 <UART_SetConfig+0x390>
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a3e      	ldr	r2, [pc, #248]	; (80034a8 <UART_SetConfig+0x340>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d13e      	bne.n	8003432 <UART_SetConfig+0x2ca>
 80033b4:	4b40      	ldr	r3, [pc, #256]	; (80034b8 <UART_SetConfig+0x350>)
 80033b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033b8:	23c0      	movs	r3, #192	; 0xc0
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	22c0      	movs	r2, #192	; 0xc0
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d027      	beq.n	8003416 <UART_SetConfig+0x2ae>
 80033c6:	22c0      	movs	r2, #192	; 0xc0
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d82a      	bhi.n	8003424 <UART_SetConfig+0x2bc>
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d011      	beq.n	80033fa <UART_SetConfig+0x292>
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	0112      	lsls	r2, r2, #4
 80033da:	4293      	cmp	r3, r2
 80033dc:	d822      	bhi.n	8003424 <UART_SetConfig+0x2bc>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <UART_SetConfig+0x284>
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	00d2      	lsls	r2, r2, #3
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <UART_SetConfig+0x2a0>
 80033ea:	e01b      	b.n	8003424 <UART_SetConfig+0x2bc>
 80033ec:	231b      	movs	r3, #27
 80033ee:	2220      	movs	r2, #32
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e07e      	b.n	80034f8 <UART_SetConfig+0x390>
 80033fa:	231b      	movs	r3, #27
 80033fc:	2220      	movs	r2, #32
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	19db      	adds	r3, r3, r7
 8003402:	2202      	movs	r2, #2
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e077      	b.n	80034f8 <UART_SetConfig+0x390>
 8003408:	231b      	movs	r3, #27
 800340a:	2220      	movs	r2, #32
 800340c:	189b      	adds	r3, r3, r2
 800340e:	19db      	adds	r3, r3, r7
 8003410:	2204      	movs	r2, #4
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e070      	b.n	80034f8 <UART_SetConfig+0x390>
 8003416:	231b      	movs	r3, #27
 8003418:	2220      	movs	r2, #32
 800341a:	189b      	adds	r3, r3, r2
 800341c:	19db      	adds	r3, r3, r7
 800341e:	2208      	movs	r2, #8
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e069      	b.n	80034f8 <UART_SetConfig+0x390>
 8003424:	231b      	movs	r3, #27
 8003426:	2220      	movs	r2, #32
 8003428:	189b      	adds	r3, r3, r2
 800342a:	19db      	adds	r3, r3, r7
 800342c:	2210      	movs	r2, #16
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	e062      	b.n	80034f8 <UART_SetConfig+0x390>
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <UART_SetConfig+0x344>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d157      	bne.n	80034ec <UART_SetConfig+0x384>
 800343c:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <UART_SetConfig+0x350>)
 800343e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003440:	23c0      	movs	r3, #192	; 0xc0
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4013      	ands	r3, r2
 8003446:	22c0      	movs	r2, #192	; 0xc0
 8003448:	0092      	lsls	r2, r2, #2
 800344a:	4293      	cmp	r3, r2
 800344c:	d040      	beq.n	80034d0 <UART_SetConfig+0x368>
 800344e:	22c0      	movs	r2, #192	; 0xc0
 8003450:	0092      	lsls	r2, r2, #2
 8003452:	4293      	cmp	r3, r2
 8003454:	d843      	bhi.n	80034de <UART_SetConfig+0x376>
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	0092      	lsls	r2, r2, #2
 800345a:	4293      	cmp	r3, r2
 800345c:	d011      	beq.n	8003482 <UART_SetConfig+0x31a>
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	0092      	lsls	r2, r2, #2
 8003462:	4293      	cmp	r3, r2
 8003464:	d83b      	bhi.n	80034de <UART_SetConfig+0x376>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <UART_SetConfig+0x30c>
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	0052      	lsls	r2, r2, #1
 800346e:	4293      	cmp	r3, r2
 8003470:	d00e      	beq.n	8003490 <UART_SetConfig+0x328>
 8003472:	e034      	b.n	80034de <UART_SetConfig+0x376>
 8003474:	231b      	movs	r3, #27
 8003476:	2220      	movs	r2, #32
 8003478:	189b      	adds	r3, r3, r2
 800347a:	19db      	adds	r3, r3, r7
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e03a      	b.n	80034f8 <UART_SetConfig+0x390>
 8003482:	231b      	movs	r3, #27
 8003484:	2220      	movs	r2, #32
 8003486:	189b      	adds	r3, r3, r2
 8003488:	19db      	adds	r3, r3, r7
 800348a:	2202      	movs	r2, #2
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e033      	b.n	80034f8 <UART_SetConfig+0x390>
 8003490:	231b      	movs	r3, #27
 8003492:	2220      	movs	r2, #32
 8003494:	189b      	adds	r3, r3, r2
 8003496:	19db      	adds	r3, r3, r7
 8003498:	2204      	movs	r2, #4
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e02c      	b.n	80034f8 <UART_SetConfig+0x390>
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	cfff69f3 	.word	0xcfff69f3
 80034a4:	ffffcfff 	.word	0xffffcfff
 80034a8:	40008000 	.word	0x40008000
 80034ac:	40008400 	.word	0x40008400
 80034b0:	11fff4ff 	.word	0x11fff4ff
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40004400 	.word	0x40004400
 80034c0:	40004800 	.word	0x40004800
 80034c4:	40004c00 	.word	0x40004c00
 80034c8:	40005000 	.word	0x40005000
 80034cc:	40013c00 	.word	0x40013c00
 80034d0:	231b      	movs	r3, #27
 80034d2:	2220      	movs	r2, #32
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	19db      	adds	r3, r3, r7
 80034d8:	2208      	movs	r2, #8
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e00c      	b.n	80034f8 <UART_SetConfig+0x390>
 80034de:	231b      	movs	r3, #27
 80034e0:	2220      	movs	r2, #32
 80034e2:	189b      	adds	r3, r3, r2
 80034e4:	19db      	adds	r3, r3, r7
 80034e6:	2210      	movs	r2, #16
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e005      	b.n	80034f8 <UART_SetConfig+0x390>
 80034ec:	231b      	movs	r3, #27
 80034ee:	2220      	movs	r2, #32
 80034f0:	189b      	adds	r3, r3, r2
 80034f2:	19db      	adds	r3, r3, r7
 80034f4:	2210      	movs	r2, #16
 80034f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4ac1      	ldr	r2, [pc, #772]	; (8003804 <UART_SetConfig+0x69c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d005      	beq.n	800350e <UART_SetConfig+0x3a6>
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4ac0      	ldr	r2, [pc, #768]	; (8003808 <UART_SetConfig+0x6a0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d000      	beq.n	800350e <UART_SetConfig+0x3a6>
 800350c:	e093      	b.n	8003636 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800350e:	231b      	movs	r3, #27
 8003510:	2220      	movs	r2, #32
 8003512:	189b      	adds	r3, r3, r2
 8003514:	19db      	adds	r3, r3, r7
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d015      	beq.n	8003548 <UART_SetConfig+0x3e0>
 800351c:	dc18      	bgt.n	8003550 <UART_SetConfig+0x3e8>
 800351e:	2b04      	cmp	r3, #4
 8003520:	d00d      	beq.n	800353e <UART_SetConfig+0x3d6>
 8003522:	dc15      	bgt.n	8003550 <UART_SetConfig+0x3e8>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <UART_SetConfig+0x3c6>
 8003528:	2b02      	cmp	r3, #2
 800352a:	d005      	beq.n	8003538 <UART_SetConfig+0x3d0>
 800352c:	e010      	b.n	8003550 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800352e:	f7fe ff19 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8003532:	0003      	movs	r3, r0
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003536:	e014      	b.n	8003562 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003538:	4bb4      	ldr	r3, [pc, #720]	; (800380c <UART_SetConfig+0x6a4>)
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800353c:	e011      	b.n	8003562 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353e:	f7fe fe85 	bl	800224c <HAL_RCC_GetSysClockFreq>
 8003542:	0003      	movs	r3, r0
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003546:	e00c      	b.n	8003562 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800354e:	e008      	b.n	8003562 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003554:	231a      	movs	r3, #26
 8003556:	2220      	movs	r2, #32
 8003558:	189b      	adds	r3, r3, r2
 800355a:	19db      	adds	r3, r3, r7
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]
        break;
 8003560:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003564:	2b00      	cmp	r3, #0
 8003566:	d100      	bne.n	800356a <UART_SetConfig+0x402>
 8003568:	e135      	b.n	80037d6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800356e:	4ba8      	ldr	r3, [pc, #672]	; (8003810 <UART_SetConfig+0x6a8>)
 8003570:	0052      	lsls	r2, r2, #1
 8003572:	5ad3      	ldrh	r3, [r2, r3]
 8003574:	0019      	movs	r1, r3
 8003576:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003578:	f7fc fdc4 	bl	8000104 <__udivsi3>
 800357c:	0003      	movs	r3, r0
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	0013      	movs	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	189b      	adds	r3, r3, r2
 800358a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800358c:	429a      	cmp	r2, r3
 800358e:	d305      	bcc.n	800359c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003598:	429a      	cmp	r2, r3
 800359a:	d906      	bls.n	80035aa <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800359c:	231a      	movs	r3, #26
 800359e:	2220      	movs	r2, #32
 80035a0:	189b      	adds	r3, r3, r2
 80035a2:	19db      	adds	r3, r3, r7
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e044      	b.n	8003634 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b6:	4b96      	ldr	r3, [pc, #600]	; (8003810 <UART_SetConfig+0x6a8>)
 80035b8:	0052      	lsls	r2, r2, #1
 80035ba:	5ad3      	ldrh	r3, [r2, r3]
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	69b8      	ldr	r0, [r7, #24]
 80035c8:	69f9      	ldr	r1, [r7, #28]
 80035ca:	f7fc ff11 	bl	80003f0 <__aeabi_uldivmod>
 80035ce:	0002      	movs	r2, r0
 80035d0:	000b      	movs	r3, r1
 80035d2:	0e11      	lsrs	r1, r2, #24
 80035d4:	021d      	lsls	r5, r3, #8
 80035d6:	430d      	orrs	r5, r1
 80035d8:	0214      	lsls	r4, r2, #8
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68b8      	ldr	r0, [r7, #8]
 80035e8:	68f9      	ldr	r1, [r7, #12]
 80035ea:	1900      	adds	r0, r0, r4
 80035ec:	4169      	adcs	r1, r5
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	2300      	movs	r3, #0
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f7fc fef8 	bl	80003f0 <__aeabi_uldivmod>
 8003600:	0002      	movs	r2, r0
 8003602:	000b      	movs	r3, r1
 8003604:	0013      	movs	r3, r2
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360a:	23c0      	movs	r3, #192	; 0xc0
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	429a      	cmp	r2, r3
 8003610:	d309      	bcc.n	8003626 <UART_SetConfig+0x4be>
 8003612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	035b      	lsls	r3, r3, #13
 8003618:	429a      	cmp	r2, r3
 800361a:	d204      	bcs.n	8003626 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e006      	b.n	8003634 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003626:	231a      	movs	r3, #26
 8003628:	2220      	movs	r2, #32
 800362a:	189b      	adds	r3, r3, r2
 800362c:	19db      	adds	r3, r3, r7
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003632:	e0d0      	b.n	80037d6 <UART_SetConfig+0x66e>
 8003634:	e0cf      	b.n	80037d6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	429a      	cmp	r2, r3
 8003640:	d000      	beq.n	8003644 <UART_SetConfig+0x4dc>
 8003642:	e070      	b.n	8003726 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003644:	231b      	movs	r3, #27
 8003646:	2220      	movs	r2, #32
 8003648:	189b      	adds	r3, r3, r2
 800364a:	19db      	adds	r3, r3, r7
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b08      	cmp	r3, #8
 8003650:	d015      	beq.n	800367e <UART_SetConfig+0x516>
 8003652:	dc18      	bgt.n	8003686 <UART_SetConfig+0x51e>
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00d      	beq.n	8003674 <UART_SetConfig+0x50c>
 8003658:	dc15      	bgt.n	8003686 <UART_SetConfig+0x51e>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <UART_SetConfig+0x4fc>
 800365e:	2b02      	cmp	r3, #2
 8003660:	d005      	beq.n	800366e <UART_SetConfig+0x506>
 8003662:	e010      	b.n	8003686 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003664:	f7fe fe7e 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8003668:	0003      	movs	r3, r0
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800366c:	e014      	b.n	8003698 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800366e:	4b67      	ldr	r3, [pc, #412]	; (800380c <UART_SetConfig+0x6a4>)
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003672:	e011      	b.n	8003698 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003674:	f7fe fdea 	bl	800224c <HAL_RCC_GetSysClockFreq>
 8003678:	0003      	movs	r3, r0
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800367c:	e00c      	b.n	8003698 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003684:	e008      	b.n	8003698 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800368a:	231a      	movs	r3, #26
 800368c:	2220      	movs	r2, #32
 800368e:	189b      	adds	r3, r3, r2
 8003690:	19db      	adds	r3, r3, r7
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
        break;
 8003696:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369a:	2b00      	cmp	r3, #0
 800369c:	d100      	bne.n	80036a0 <UART_SetConfig+0x538>
 800369e:	e09a      	b.n	80037d6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a4:	4b5a      	ldr	r3, [pc, #360]	; (8003810 <UART_SetConfig+0x6a8>)
 80036a6:	0052      	lsls	r2, r2, #1
 80036a8:	5ad3      	ldrh	r3, [r2, r3]
 80036aa:	0019      	movs	r1, r3
 80036ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036ae:	f7fc fd29 	bl	8000104 <__udivsi3>
 80036b2:	0003      	movs	r3, r0
 80036b4:	005a      	lsls	r2, r3, #1
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	18d2      	adds	r2, r2, r3
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	0019      	movs	r1, r3
 80036c4:	0010      	movs	r0, r2
 80036c6:	f7fc fd1d 	bl	8000104 <__udivsi3>
 80036ca:	0003      	movs	r3, r0
 80036cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	2b0f      	cmp	r3, #15
 80036d2:	d921      	bls.n	8003718 <UART_SetConfig+0x5b0>
 80036d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	025b      	lsls	r3, r3, #9
 80036da:	429a      	cmp	r2, r3
 80036dc:	d21c      	bcs.n	8003718 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	200e      	movs	r0, #14
 80036e4:	2420      	movs	r4, #32
 80036e6:	1903      	adds	r3, r0, r4
 80036e8:	19db      	adds	r3, r3, r7
 80036ea:	210f      	movs	r1, #15
 80036ec:	438a      	bics	r2, r1
 80036ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2207      	movs	r2, #7
 80036f8:	4013      	ands	r3, r2
 80036fa:	b299      	uxth	r1, r3
 80036fc:	1903      	adds	r3, r0, r4
 80036fe:	19db      	adds	r3, r3, r7
 8003700:	1902      	adds	r2, r0, r4
 8003702:	19d2      	adds	r2, r2, r7
 8003704:	8812      	ldrh	r2, [r2, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1902      	adds	r2, r0, r4
 8003710:	19d2      	adds	r2, r2, r7
 8003712:	8812      	ldrh	r2, [r2, #0]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	e05e      	b.n	80037d6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003718:	231a      	movs	r3, #26
 800371a:	2220      	movs	r2, #32
 800371c:	189b      	adds	r3, r3, r2
 800371e:	19db      	adds	r3, r3, r7
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e057      	b.n	80037d6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003726:	231b      	movs	r3, #27
 8003728:	2220      	movs	r2, #32
 800372a:	189b      	adds	r3, r3, r2
 800372c:	19db      	adds	r3, r3, r7
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d015      	beq.n	8003760 <UART_SetConfig+0x5f8>
 8003734:	dc18      	bgt.n	8003768 <UART_SetConfig+0x600>
 8003736:	2b04      	cmp	r3, #4
 8003738:	d00d      	beq.n	8003756 <UART_SetConfig+0x5ee>
 800373a:	dc15      	bgt.n	8003768 <UART_SetConfig+0x600>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <UART_SetConfig+0x5de>
 8003740:	2b02      	cmp	r3, #2
 8003742:	d005      	beq.n	8003750 <UART_SetConfig+0x5e8>
 8003744:	e010      	b.n	8003768 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003746:	f7fe fe0d 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 800374a:	0003      	movs	r3, r0
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800374e:	e014      	b.n	800377a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003750:	4b2e      	ldr	r3, [pc, #184]	; (800380c <UART_SetConfig+0x6a4>)
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003754:	e011      	b.n	800377a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003756:	f7fe fd79 	bl	800224c <HAL_RCC_GetSysClockFreq>
 800375a:	0003      	movs	r3, r0
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800375e:	e00c      	b.n	800377a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003766:	e008      	b.n	800377a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800376c:	231a      	movs	r3, #26
 800376e:	2220      	movs	r2, #32
 8003770:	189b      	adds	r3, r3, r2
 8003772:	19db      	adds	r3, r3, r7
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
        break;
 8003778:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02a      	beq.n	80037d6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003784:	4b22      	ldr	r3, [pc, #136]	; (8003810 <UART_SetConfig+0x6a8>)
 8003786:	0052      	lsls	r2, r2, #1
 8003788:	5ad3      	ldrh	r3, [r2, r3]
 800378a:	0019      	movs	r1, r3
 800378c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800378e:	f7fc fcb9 	bl	8000104 <__udivsi3>
 8003792:	0003      	movs	r3, r0
 8003794:	001a      	movs	r2, r3
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	18d2      	adds	r2, r2, r3
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	0019      	movs	r1, r3
 80037a4:	0010      	movs	r0, r2
 80037a6:	f7fc fcad 	bl	8000104 <__udivsi3>
 80037aa:	0003      	movs	r3, r0
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	2b0f      	cmp	r3, #15
 80037b2:	d90a      	bls.n	80037ca <UART_SetConfig+0x662>
 80037b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	025b      	lsls	r3, r3, #9
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d205      	bcs.n	80037ca <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	e005      	b.n	80037d6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80037ca:	231a      	movs	r3, #26
 80037cc:	2220      	movs	r2, #32
 80037ce:	189b      	adds	r3, r3, r2
 80037d0:	19db      	adds	r3, r3, r7
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	226a      	movs	r2, #106	; 0x6a
 80037da:	2101      	movs	r1, #1
 80037dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	2268      	movs	r2, #104	; 0x68
 80037e2:	2101      	movs	r1, #1
 80037e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	2200      	movs	r2, #0
 80037ea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	2200      	movs	r2, #0
 80037f0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037f2:	231a      	movs	r3, #26
 80037f4:	2220      	movs	r2, #32
 80037f6:	189b      	adds	r3, r3, r2
 80037f8:	19db      	adds	r3, r3, r7
 80037fa:	781b      	ldrb	r3, [r3, #0]
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b010      	add	sp, #64	; 0x40
 8003802:	bdb0      	pop	{r4, r5, r7, pc}
 8003804:	40008000 	.word	0x40008000
 8003808:	40008400 	.word	0x40008400
 800380c:	00f42400 	.word	0x00f42400
 8003810:	080043e0 	.word	0x080043e0

08003814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	2201      	movs	r2, #1
 8003822:	4013      	ands	r3, r2
 8003824:	d00b      	beq.n	800383e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a4a      	ldr	r2, [pc, #296]	; (8003958 <UART_AdvFeatureConfig+0x144>)
 800382e:	4013      	ands	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	2202      	movs	r2, #2
 8003844:	4013      	ands	r3, r2
 8003846:	d00b      	beq.n	8003860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4a43      	ldr	r2, [pc, #268]	; (800395c <UART_AdvFeatureConfig+0x148>)
 8003850:	4013      	ands	r3, r2
 8003852:	0019      	movs	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	2204      	movs	r2, #4
 8003866:	4013      	ands	r3, r2
 8003868:	d00b      	beq.n	8003882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a3b      	ldr	r2, [pc, #236]	; (8003960 <UART_AdvFeatureConfig+0x14c>)
 8003872:	4013      	ands	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	2208      	movs	r2, #8
 8003888:	4013      	ands	r3, r2
 800388a:	d00b      	beq.n	80038a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4a34      	ldr	r2, [pc, #208]	; (8003964 <UART_AdvFeatureConfig+0x150>)
 8003894:	4013      	ands	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	2210      	movs	r2, #16
 80038aa:	4013      	ands	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a2c      	ldr	r2, [pc, #176]	; (8003968 <UART_AdvFeatureConfig+0x154>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	2220      	movs	r2, #32
 80038cc:	4013      	ands	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4a25      	ldr	r2, [pc, #148]	; (800396c <UART_AdvFeatureConfig+0x158>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	2240      	movs	r2, #64	; 0x40
 80038ee:	4013      	ands	r3, r2
 80038f0:	d01d      	beq.n	800392e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <UART_AdvFeatureConfig+0x15c>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	0019      	movs	r1, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	035b      	lsls	r3, r3, #13
 8003912:	429a      	cmp	r2, r3
 8003914:	d10b      	bne.n	800392e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a15      	ldr	r2, [pc, #84]	; (8003974 <UART_AdvFeatureConfig+0x160>)
 800391e:	4013      	ands	r3, r2
 8003920:	0019      	movs	r1, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	2280      	movs	r2, #128	; 0x80
 8003934:	4013      	ands	r3, r2
 8003936:	d00b      	beq.n	8003950 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <UART_AdvFeatureConfig+0x164>)
 8003940:	4013      	ands	r3, r2
 8003942:	0019      	movs	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  }
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}
 8003958:	fffdffff 	.word	0xfffdffff
 800395c:	fffeffff 	.word	0xfffeffff
 8003960:	fffbffff 	.word	0xfffbffff
 8003964:	ffff7fff 	.word	0xffff7fff
 8003968:	ffffefff 	.word	0xffffefff
 800396c:	ffffdfff 	.word	0xffffdfff
 8003970:	ffefffff 	.word	0xffefffff
 8003974:	ff9fffff 	.word	0xff9fffff
 8003978:	fff7ffff 	.word	0xfff7ffff

0800397c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	228c      	movs	r2, #140	; 0x8c
 8003988:	2100      	movs	r1, #0
 800398a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800398c:	f7fd f97c 	bl	8000c88 <HAL_GetTick>
 8003990:	0003      	movs	r3, r0
 8003992:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2208      	movs	r2, #8
 800399c:	4013      	ands	r3, r2
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d10c      	bne.n	80039bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	0391      	lsls	r1, r2, #14
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <UART_CheckIdleState+0x90>)
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f000 f82e 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d001      	beq.n	80039bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e023      	b.n	8003a04 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2204      	movs	r2, #4
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d10c      	bne.n	80039e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	03d1      	lsls	r1, r2, #15
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <UART_CheckIdleState+0x90>)
 80039d4:	9200      	str	r2, [sp, #0]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f000 f81a 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 80039dc:	1e03      	subs	r3, r0, #0
 80039de:	d001      	beq.n	80039e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e00f      	b.n	8003a04 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2284      	movs	r2, #132	; 0x84
 80039e8:	2120      	movs	r1, #32
 80039ea:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2288      	movs	r2, #136	; 0x88
 80039f0:	2120      	movs	r1, #32
 80039f2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2280      	movs	r2, #128	; 0x80
 80039fe:	2100      	movs	r1, #0
 8003a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b004      	add	sp, #16
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	01ffffff 	.word	0x01ffffff

08003a10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b094      	sub	sp, #80	; 0x50
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	1dfb      	adds	r3, r7, #7
 8003a1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a20:	e0a7      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a24:	3301      	adds	r3, #1
 8003a26:	d100      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a28:	e0a3      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2a:	f7fd f92d 	bl	8000c88 <HAL_GetTick>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d13f      	bne.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a40:	f3ef 8310 	mrs	r3, PRIMASK
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a48:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	f383 8810 	msr	PRIMASK, r3
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	494e      	ldr	r1, [pc, #312]	; (8003b9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a62:	400a      	ands	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	f383 8810 	msr	PRIMASK, r3
}
 8003a70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a72:	f3ef 8310 	mrs	r3, PRIMASK
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2101      	movs	r1, #1
 8003a94:	438a      	bics	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9e:	f383 8810 	msr	PRIMASK, r3
}
 8003aa2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2284      	movs	r2, #132	; 0x84
 8003aa8:	2120      	movs	r1, #32
 8003aaa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2288      	movs	r2, #136	; 0x88
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2280      	movs	r2, #128	; 0x80
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e069      	b.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d052      	beq.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69da      	ldr	r2, [r3, #28]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d148      	bne.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	0112      	lsls	r2, r2, #4
 8003ae8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aea:	f3ef 8310 	mrs	r3, PRIMASK
 8003aee:	613b      	str	r3, [r7, #16]
  return(result);
 8003af0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af4:	2301      	movs	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f383 8810 	msr	PRIMASK, r3
}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4924      	ldr	r1, [pc, #144]	; (8003b9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f383 8810 	msr	PRIMASK, r3
}
 8003b1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b20:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b22:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b26:	2301      	movs	r3, #1
 8003b28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f383 8810 	msr	PRIMASK, r3
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	438a      	bics	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	f383 8810 	msr	PRIMASK, r3
}
 8003b4c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2284      	movs	r2, #132	; 0x84
 8003b52:	2120      	movs	r1, #32
 8003b54:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2288      	movs	r2, #136	; 0x88
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	228c      	movs	r2, #140	; 0x8c
 8003b62:	2120      	movs	r1, #32
 8003b64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2280      	movs	r2, #128	; 0x80
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e010      	b.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	425a      	negs	r2, r3
 8003b82:	4153      	adcs	r3, r2
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	001a      	movs	r2, r3
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d100      	bne.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x182>
 8003b90:	e747      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b014      	add	sp, #80	; 0x50
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	fffffe5f 	.word	0xfffffe5f

08003ba0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b090      	sub	sp, #64	; 0x40
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	1dbb      	adds	r3, r7, #6
 8003bac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1dba      	adds	r2, r7, #6
 8003bb8:	215c      	movs	r1, #92	; 0x5c
 8003bba:	8812      	ldrh	r2, [r2, #0]
 8003bbc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	228c      	movs	r2, #140	; 0x8c
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2288      	movs	r2, #136	; 0x88
 8003bca:	2122      	movs	r1, #34	; 0x22
 8003bcc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02c      	beq.n	8003c30 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bda:	4a42      	ldr	r2, [pc, #264]	; (8003ce4 <UART_Start_Receive_DMA+0x144>)
 8003bdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be2:	4a41      	ldr	r2, [pc, #260]	; (8003ce8 <UART_Start_Receive_DMA+0x148>)
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bea:	4a40      	ldr	r2, [pc, #256]	; (8003cec <UART_Start_Receive_DMA+0x14c>)
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3324      	adds	r3, #36	; 0x24
 8003c00:	0019      	movs	r1, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	001a      	movs	r2, r3
 8003c08:	1dbb      	adds	r3, r7, #6
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	f7fd fa0a 	bl	8001024 <HAL_DMA_Start_IT>
 8003c10:	1e03      	subs	r3, r0, #0
 8003c12:	d00d      	beq.n	8003c30 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	228c      	movs	r2, #140	; 0x8c
 8003c18:	2110      	movs	r1, #16
 8003c1a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	2100      	movs	r1, #0
 8003c22:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2288      	movs	r2, #136	; 0x88
 8003c28:	2120      	movs	r1, #32
 8003c2a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e054      	b.n	8003cda <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	2100      	movs	r1, #0
 8003c36:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d019      	beq.n	8003c74 <UART_Start_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c40:	f3ef 8310 	mrs	r3, PRIMASK
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	f383 8810 	msr	PRIMASK, r3
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	0049      	lsls	r1, r1, #1
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	f383 8810 	msr	PRIMASK, r3
}
 8003c72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c74:	f3ef 8310 	mrs	r3, PRIMASK
 8003c78:	613b      	str	r3, [r7, #16]
  return(result);
 8003c7a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c7e:	2301      	movs	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2101      	movs	r1, #1
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8003caa:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cac:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	f383 8810 	msr	PRIMASK, r3
}
 8003cd6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b010      	add	sp, #64	; 0x40
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	08003e3d 	.word	0x08003e3d
 8003ce8:	08003f65 	.word	0x08003f65
 8003cec:	08003fa1 	.word	0x08003fa1

08003cf0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	2301      	movs	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f383 8810 	msr	PRIMASK, r3
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	21c0      	movs	r1, #192	; 0xc0
 8003d1a:	438a      	bics	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2e:	617b      	str	r3, [r7, #20]
  return(result);
 8003d30:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	2301      	movs	r3, #1
 8003d36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f383 8810 	msr	PRIMASK, r3
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4908      	ldr	r1, [pc, #32]	; (8003d6c <UART_EndTxTransfer+0x7c>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2284      	movs	r2, #132	; 0x84
 8003d60:	2120      	movs	r1, #32
 8003d62:	5099      	str	r1, [r3, r2]
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b00a      	add	sp, #40	; 0x28
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	ff7fffff 	.word	0xff7fffff

08003d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08e      	sub	sp, #56	; 0x38
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d78:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
 8003d82:	2301      	movs	r3, #1
 8003d84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f383 8810 	msr	PRIMASK, r3
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4926      	ldr	r1, [pc, #152]	; (8003e34 <UART_EndRxTransfer+0xc4>)
 8003d9a:	400a      	ands	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f383 8810 	msr	PRIMASK, r3
}
 8003da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003daa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dae:	623b      	str	r3, [r7, #32]
  return(result);
 8003db0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30
 8003db4:	2301      	movs	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	f383 8810 	msr	PRIMASK, r3
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	491b      	ldr	r1, [pc, #108]	; (8003e38 <UART_EndRxTransfer+0xc8>)
 8003dcc:	400a      	ands	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	f383 8810 	msr	PRIMASK, r3
}
 8003dda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d118      	bne.n	8003e16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de4:	f3ef 8310 	mrs	r3, PRIMASK
 8003de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dee:	2301      	movs	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f383 8810 	msr	PRIMASK, r3
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2110      	movs	r1, #16
 8003e06:	438a      	bics	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f383 8810 	msr	PRIMASK, r3
}
 8003e14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2288      	movs	r2, #136	; 0x88
 8003e1a:	2120      	movs	r1, #32
 8003e1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b00e      	add	sp, #56	; 0x38
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	fffffedf 	.word	0xfffffedf
 8003e38:	effffffe 	.word	0xeffffffe

08003e3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b094      	sub	sp, #80	; 0x50
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2220      	movs	r2, #32
 8003e52:	4013      	ands	r3, r2
 8003e54:	d16f      	bne.n	8003f36 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e58:	225e      	movs	r2, #94	; 0x5e
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e62:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e64:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e68:	2301      	movs	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f383 8810 	msr	PRIMASK, r3
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4938      	ldr	r1, [pc, #224]	; (8003f60 <UART_DMAReceiveCplt+0x124>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f383 8810 	msr	PRIMASK, r3
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e90:	f3ef 8310 	mrs	r3, PRIMASK
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	438a      	bics	r2, r1
 8003eb4:	609a      	str	r2, [r3, #8]
 8003eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eca:	643b      	str	r3, [r7, #64]	; 0x40
 8003ecc:	2301      	movs	r3, #1
 8003ece:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2140      	movs	r1, #64	; 0x40
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef6:	2288      	movs	r2, #136	; 0x88
 8003ef8:	2120      	movs	r1, #32
 8003efa:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d118      	bne.n	8003f36 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f04:	f3ef 8310 	mrs	r3, PRIMASK
 8003f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f0e:	2301      	movs	r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f383 8810 	msr	PRIMASK, r3
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2110      	movs	r1, #16
 8003f26:	438a      	bics	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f383 8810 	msr	PRIMASK, r3
}
 8003f34:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d108      	bne.n	8003f50 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f40:	225c      	movs	r2, #92	; 0x5c
 8003f42:	5a9a      	ldrh	r2, [r3, r2]
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	0011      	movs	r1, r2
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7ff f901 	bl	8003150 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f4e:	e003      	b.n	8003f58 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8003f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f52:	0018      	movs	r0, r3
 8003f54:	f7fc fb62 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b014      	add	sp, #80	; 0x50
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	fffffeff 	.word	0xfffffeff

08003f64 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d10a      	bne.n	8003f90 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	225c      	movs	r2, #92	; 0x5c
 8003f7e:	5a9b      	ldrh	r3, [r3, r2]
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	0011      	movs	r1, r2
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7ff f8e1 	bl	8003150 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f8e:	e003      	b.n	8003f98 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff f8cc 	bl	8003130 <HAL_UART_RxHalfCpltCallback>
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b004      	add	sp, #16
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2284      	movs	r2, #132	; 0x84
 8003fb2:	589b      	ldr	r3, [r3, r2]
 8003fb4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2288      	movs	r2, #136	; 0x88
 8003fba:	589b      	ldr	r3, [r3, r2]
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2280      	movs	r2, #128	; 0x80
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d10a      	bne.n	8003fe2 <UART_DMAError+0x42>
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b21      	cmp	r3, #33	; 0x21
 8003fd0:	d107      	bne.n	8003fe2 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2256      	movs	r2, #86	; 0x56
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff fe87 	bl	8003cf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d10a      	bne.n	8004006 <UART_DMAError+0x66>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b22      	cmp	r3, #34	; 0x22
 8003ff4:	d107      	bne.n	8004006 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	225e      	movs	r2, #94	; 0x5e
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	0018      	movs	r0, r3
 8004002:	f7ff feb5 	bl	8003d70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	228c      	movs	r2, #140	; 0x8c
 800400a:	589b      	ldr	r3, [r3, r2]
 800400c:	2210      	movs	r2, #16
 800400e:	431a      	orrs	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	218c      	movs	r1, #140	; 0x8c
 8004014:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff f891 	bl	8003140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b006      	add	sp, #24
 8004024:	bd80      	pop	{r7, pc}

08004026 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	225e      	movs	r2, #94	; 0x5e
 8004038:	2100      	movs	r1, #0
 800403a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2256      	movs	r2, #86	; 0x56
 8004040:	2100      	movs	r1, #0
 8004042:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	0018      	movs	r0, r3
 8004048:	f7ff f87a 	bl	8003140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	b004      	add	sp, #16
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405c:	f3ef 8310 	mrs	r3, PRIMASK
 8004060:	60bb      	str	r3, [r7, #8]
  return(result);
 8004062:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	2301      	movs	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2140      	movs	r1, #64	; 0x40
 800407e:	438a      	bics	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2284      	movs	r2, #132	; 0x84
 8004092:	2120      	movs	r1, #32
 8004094:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0018      	movs	r0, r3
 80040a0:	f7ff f83e 	bl	8003120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b006      	add	sp, #24
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b002      	add	sp, #8
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	5c9b      	ldrb	r3, [r3, r2]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e027      	b.n	8004142 <HAL_UARTEx_DisableFifoMode+0x66>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2280      	movs	r2, #128	; 0x80
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2284      	movs	r2, #132	; 0x84
 80040fe:	2124      	movs	r1, #36	; 0x24
 8004100:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	438a      	bics	r2, r1
 8004118:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <HAL_UARTEx_DisableFifoMode+0x70>)
 800411e:	4013      	ands	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2284      	movs	r2, #132	; 0x84
 8004134:	2120      	movs	r1, #32
 8004136:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	b004      	add	sp, #16
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	dfffffff 	.word	0xdfffffff

08004150 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	5c9b      	ldrb	r3, [r3, r2]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004164:	2302      	movs	r3, #2
 8004166:	e02e      	b.n	80041c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	2101      	movs	r1, #1
 800416e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2284      	movs	r2, #132	; 0x84
 8004174:	2124      	movs	r1, #36	; 0x24
 8004176:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2101      	movs	r1, #1
 800418c:	438a      	bics	r2, r1
 800418e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	08d9      	lsrs	r1, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 f854 	bl	8004254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2284      	movs	r2, #132	; 0x84
 80041b8:	2120      	movs	r1, #32
 80041ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	2100      	movs	r1, #0
 80041c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b004      	add	sp, #16
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2280      	movs	r2, #128	; 0x80
 80041de:	5c9b      	ldrb	r3, [r3, r2]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e02f      	b.n	8004248 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	2101      	movs	r1, #1
 80041ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2284      	movs	r2, #132	; 0x84
 80041f4:	2124      	movs	r1, #36	; 0x24
 80041f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2101      	movs	r1, #1
 800420c:	438a      	bics	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004218:	4013      	ands	r3, r2
 800421a:	0019      	movs	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0018      	movs	r0, r3
 800422a:	f000 f813 	bl	8004254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2284      	movs	r2, #132	; 0x84
 800423a:	2120      	movs	r1, #32
 800423c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2280      	movs	r2, #128	; 0x80
 8004242:	2100      	movs	r1, #0
 8004244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b004      	add	sp, #16
 800424e:	bd80      	pop	{r7, pc}
 8004250:	f1ffffff 	.word	0xf1ffffff

08004254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	226a      	movs	r2, #106	; 0x6a
 8004268:	2101      	movs	r1, #1
 800426a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2268      	movs	r2, #104	; 0x68
 8004270:	2101      	movs	r1, #1
 8004272:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004274:	e043      	b.n	80042fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004276:	260f      	movs	r6, #15
 8004278:	19bb      	adds	r3, r7, r6
 800427a:	2208      	movs	r2, #8
 800427c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800427e:	200e      	movs	r0, #14
 8004280:	183b      	adds	r3, r7, r0
 8004282:	2208      	movs	r2, #8
 8004284:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	0e5b      	lsrs	r3, r3, #25
 800428e:	b2da      	uxtb	r2, r3
 8004290:	240d      	movs	r4, #13
 8004292:	193b      	adds	r3, r7, r4
 8004294:	2107      	movs	r1, #7
 8004296:	400a      	ands	r2, r1
 8004298:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	0f5b      	lsrs	r3, r3, #29
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	250c      	movs	r5, #12
 80042a6:	197b      	adds	r3, r7, r5
 80042a8:	2107      	movs	r1, #7
 80042aa:	400a      	ands	r2, r1
 80042ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042ae:	183b      	adds	r3, r7, r0
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	197a      	adds	r2, r7, r5
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	4914      	ldr	r1, [pc, #80]	; (8004308 <UARTEx_SetNbDataToProcess+0xb4>)
 80042b8:	5c8a      	ldrb	r2, [r1, r2]
 80042ba:	435a      	muls	r2, r3
 80042bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80042be:	197b      	adds	r3, r7, r5
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <UARTEx_SetNbDataToProcess+0xb8>)
 80042c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042c6:	0019      	movs	r1, r3
 80042c8:	f7fb ffa6 	bl	8000218 <__divsi3>
 80042cc:	0003      	movs	r3, r0
 80042ce:	b299      	uxth	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	226a      	movs	r2, #106	; 0x6a
 80042d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042d6:	19bb      	adds	r3, r7, r6
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	193a      	adds	r2, r7, r4
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	490a      	ldr	r1, [pc, #40]	; (8004308 <UARTEx_SetNbDataToProcess+0xb4>)
 80042e0:	5c8a      	ldrb	r2, [r1, r2]
 80042e2:	435a      	muls	r2, r3
 80042e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80042e6:	193b      	adds	r3, r7, r4
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	4a08      	ldr	r2, [pc, #32]	; (800430c <UARTEx_SetNbDataToProcess+0xb8>)
 80042ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042ee:	0019      	movs	r1, r3
 80042f0:	f7fb ff92 	bl	8000218 <__divsi3>
 80042f4:	0003      	movs	r3, r0
 80042f6:	b299      	uxth	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2268      	movs	r2, #104	; 0x68
 80042fc:	5299      	strh	r1, [r3, r2]
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b005      	add	sp, #20
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	080043f8 	.word	0x080043f8
 800430c:	08004400 	.word	0x08004400

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	2600      	movs	r6, #0
 8004314:	4d0c      	ldr	r5, [pc, #48]	; (8004348 <__libc_init_array+0x38>)
 8004316:	4c0d      	ldr	r4, [pc, #52]	; (800434c <__libc_init_array+0x3c>)
 8004318:	1b64      	subs	r4, r4, r5
 800431a:	10a4      	asrs	r4, r4, #2
 800431c:	42a6      	cmp	r6, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	2600      	movs	r6, #0
 8004322:	f000 f821 	bl	8004368 <_init>
 8004326:	4d0a      	ldr	r5, [pc, #40]	; (8004350 <__libc_init_array+0x40>)
 8004328:	4c0a      	ldr	r4, [pc, #40]	; (8004354 <__libc_init_array+0x44>)
 800432a:	1b64      	subs	r4, r4, r5
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	42a6      	cmp	r6, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	00b3      	lsls	r3, r6, #2
 8004336:	58eb      	ldr	r3, [r5, r3]
 8004338:	4798      	blx	r3
 800433a:	3601      	adds	r6, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	00b3      	lsls	r3, r6, #2
 8004340:	58eb      	ldr	r3, [r5, r3]
 8004342:	4798      	blx	r3
 8004344:	3601      	adds	r6, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	08004410 	.word	0x08004410
 800434c:	08004410 	.word	0x08004410
 8004350:	08004410 	.word	0x08004410
 8004354:	08004414 	.word	0x08004414

08004358 <memset>:
 8004358:	0003      	movs	r3, r0
 800435a:	1882      	adds	r2, r0, r2
 800435c:	4293      	cmp	r3, r2
 800435e:	d100      	bne.n	8004362 <memset+0xa>
 8004360:	4770      	bx	lr
 8004362:	7019      	strb	r1, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	e7f9      	b.n	800435c <memset+0x4>

08004368 <_init>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr

08004374 <_fini>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr
