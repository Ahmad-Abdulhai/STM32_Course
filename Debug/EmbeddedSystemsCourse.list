
EmbeddedSystemsCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f8  080043f8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004400  08004400  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000020  08004428  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08004428  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8a0  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd9  00000000  00000000  0002c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b474  00000000  00000000  0002f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be40  00000000  00000000  0004ac44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b05bf  00000000  00000000  00056a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000206c  00000000  00000000  00107094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000020 	.word	0x20000020
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004358 	.word	0x08004358

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000024 	.word	0x20000024
 8000100:	08004358 	.word	0x08004358

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_RxCpltCallback>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
/*Receiving data interrupt callback
 * Once all the bytes have been received, an interrupt will trigger and the RX complete callback will be called.*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_UART_RxCpltCallback+0x24>)
 8000628:	429a      	cmp	r2, r3
 800062a:	d105      	bne.n	8000638 <HAL_UART_RxCpltCallback+0x1c>
		/*Transmitting OK message after receiving 20 bytes */
		HAL_UART_Transmit(&huart2, txData, sizeof(txData), 200);
 800062c:	4905      	ldr	r1, [pc, #20]	; (8000644 <HAL_UART_RxCpltCallback+0x28>)
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <HAL_UART_RxCpltCallback+0x24>)
 8000630:	23c8      	movs	r3, #200	; 0xc8
 8000632:	2214      	movs	r2, #20
 8000634:	f002 f936 	bl	80028a4 <HAL_UART_Transmit>
	}
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000003c 	.word	0x2000003c
 8000644:	20000000 	.word	0x20000000

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fa98 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f820 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f8f0 	bl	8000838 <MX_GPIO_Init>
  MX_DMA_Init();
 8000658:	f000 f8c8 	bl	80007ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f878 	bl	8000750 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	/*Received data via UART2 in DMA [CIRCULAR buffer] mode*/
	HAL_UART_Receive_DMA(&huart2, rxData,RX_DATA_BUFFER);
 8000660:	4909      	ldr	r1, [pc, #36]	; (8000688 <main+0x40>)
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <main+0x44>)
 8000664:	2214      	movs	r2, #20
 8000666:	0018      	movs	r0, r3
 8000668:	f002 f9c8 	bl	80029fc <HAL_UART_Receive_DMA>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/*Toggle PC13 LED on board*/
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	019b      	lsls	r3, r3, #6
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <main+0x48>)
 8000672:	0019      	movs	r1, r3
 8000674:	0010      	movs	r0, r2
 8000676:	f001 f912 	bl	800189e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800067a:	23fa      	movs	r3, #250	; 0xfa
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fb04 	bl	8000c8c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000684:	e7f2      	b.n	800066c <main+0x24>
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	2000018c 	.word	0x2000018c
 800068c:	2000003c 	.word	0x2000003c
 8000690:	50000800 	.word	0x50000800

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b095      	sub	sp, #84	; 0x54
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2414      	movs	r4, #20
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	233c      	movs	r3, #60	; 0x3c
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 fe4f 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2310      	movs	r3, #16
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f003 fe48 	bl	8004348 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 f909 	bl	80018d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2202      	movs	r2, #2
 80006c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d0:	0021      	movs	r1, r4
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2240      	movs	r2, #64	; 0x40
 80006dc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2202      	movs	r2, #2
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2209      	movs	r2, #9
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	0292      	lsls	r2, r2, #10
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	0492      	lsls	r2, r2, #18
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	05d2      	lsls	r2, r2, #23
 800070c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	187b      	adds	r3, r7, r1
 8000710:	0018      	movs	r0, r3
 8000712:	f001 f92b 	bl	800196c <HAL_RCC_OscConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800071a:	f000 f8d3 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2202      	movs	r2, #2
 8000728:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2101      	movs	r1, #1
 800073a:	0018      	movs	r0, r3
 800073c:	f001 fc76 	bl	800202c <HAL_RCC_ClockConfig>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000744:	f000 f8be 	bl	80008c4 <Error_Handler>
  }
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b015      	add	sp, #84	; 0x54
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 8000756:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <MX_USART2_UART_Init+0x98>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 800075c:	22e1      	movs	r2, #225	; 0xe1
 800075e:	0252      	lsls	r2, r2, #9
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 800079a:	0018      	movs	r0, r3
 800079c:	f002 f82c 	bl	80027f8 <HAL_UART_Init>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a4:	f000 f88e 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f003 fcc7 	bl	8004140 <HAL_UARTEx_SetTxFifoThreshold>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007b6:	f000 f885 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 80007bc:	2100      	movs	r1, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f003 fcfe 	bl	80041c0 <HAL_UARTEx_SetRxFifoThreshold>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007c8:	f000 f87c 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f003 fc7c 	bl	80040cc <HAL_UARTEx_DisableFifoMode>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007d8:	f000 f874 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	2000003c 	.word	0x2000003c
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_DMA_Init+0x48>)
 80007f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_DMA_Init+0x48>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	639a      	str	r2, [r3, #56]	; 0x38
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_DMA_Init+0x48>)
 8000800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2009      	movs	r0, #9
 8000810:	f000 fb22 	bl	8000e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000814:	2009      	movs	r0, #9
 8000816:	f000 fb34 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200a      	movs	r0, #10
 8000820:	f000 fb1a 	bl	8000e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000824:	200a      	movs	r0, #10
 8000826:	f000 fb2c 	bl	8000e82 <HAL_NVIC_EnableIRQ>

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40021000 	.word	0x40021000

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	240c      	movs	r4, #12
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	2314      	movs	r3, #20
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 fd7d 	bl	8004348 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_GPIO_Init+0x84>)
 8000850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_GPIO_Init+0x84>)
 8000854:	2104      	movs	r1, #4
 8000856:	430a      	orrs	r2, r1
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_GPIO_Init+0x84>)
 800085c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085e:	2204      	movs	r2, #4
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_GPIO_Init+0x84>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_GPIO_Init+0x84>)
 800086c:	2101      	movs	r1, #1
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0x84>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000876:	2201      	movs	r2, #1
 8000878:	4013      	ands	r3, r2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	019b      	lsls	r3, r3, #6
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <MX_GPIO_Init+0x88>)
 8000884:	2200      	movs	r2, #0
 8000886:	0019      	movs	r1, r3
 8000888:	f000 ffec 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0192      	lsls	r2, r2, #6
 8000892:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2201      	movs	r2, #1
 8000898:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <MX_GPIO_Init+0x88>)
 80008aa:	0019      	movs	r1, r3
 80008ac:	0010      	movs	r0, r2
 80008ae:	f000 fe6d 	bl	800158c <HAL_GPIO_Init>

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b009      	add	sp, #36	; 0x24
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40021000 	.word	0x40021000
 80008c0:	50000800 	.word	0x50000800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_MspInit+0x4c>)
 80008d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_MspInit+0x4c>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_MspInit+0x4c>)
 80008f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_MspInit+0x4c>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0549      	lsls	r1, r1, #21
 80008f8:	430a      	orrs	r2, r1
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_MspInit+0x4c>)
 80008fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	055b      	lsls	r3, r3, #21
 8000904:	4013      	ands	r3, r2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800090a:	23c0      	movs	r3, #192	; 0xc0
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	0018      	movs	r0, r3
 8000910:	f000 f9e0 	bl	8000cd4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b09d      	sub	sp, #116	; 0x74
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	235c      	movs	r3, #92	; 0x5c
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	0018      	movs	r0, r3
 800092e:	2314      	movs	r3, #20
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f003 fd08 	bl	8004348 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	2410      	movs	r4, #16
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	234c      	movs	r3, #76	; 0x4c
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f003 fd00 	bl	8004348 <memset>
  if(huart->Instance==USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a50      	ldr	r2, [pc, #320]	; (8000a90 <HAL_UART_MspInit+0x170>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d000      	beq.n	8000954 <HAL_UART_MspInit+0x34>
 8000952:	e098      	b.n	8000a86 <HAL_UART_MspInit+0x166>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2202      	movs	r2, #2
 8000958:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000960:	193b      	adds	r3, r7, r4
 8000962:	0018      	movs	r0, r3
 8000964:	f001 fd0c 	bl	8002380 <HAL_RCCEx_PeriphCLKConfig>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800096c:	f7ff ffaa 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000970:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <HAL_UART_MspInit+0x174>)
 8000972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000974:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <HAL_UART_MspInit+0x174>)
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	0289      	lsls	r1, r1, #10
 800097a:	430a      	orrs	r2, r1
 800097c:	63da      	str	r2, [r3, #60]	; 0x3c
 800097e:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <HAL_UART_MspInit+0x174>)
 8000980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	029b      	lsls	r3, r3, #10
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <HAL_UART_MspInit+0x174>)
 800098e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000990:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <HAL_UART_MspInit+0x174>)
 8000992:	2101      	movs	r1, #1
 8000994:	430a      	orrs	r2, r1
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
 8000998:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <HAL_UART_MspInit+0x174>)
 800099a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099c:	2201      	movs	r2, #1
 800099e:	4013      	ands	r3, r2
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a4:	215c      	movs	r1, #92	; 0x5c
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	220c      	movs	r2, #12
 80009aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2202      	movs	r2, #2
 80009b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2201      	movs	r2, #1
 80009c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	187a      	adds	r2, r7, r1
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	0011      	movs	r1, r2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fddd 	bl	800158c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <HAL_UART_MspInit+0x178>)
 80009d4:	4a31      	ldr	r2, [pc, #196]	; (8000a9c <HAL_UART_MspInit+0x17c>)
 80009d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80009d8:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <HAL_UART_MspInit+0x178>)
 80009da:	2235      	movs	r2, #53	; 0x35
 80009dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009de:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <HAL_UART_MspInit+0x178>)
 80009e0:	2210      	movs	r2, #16
 80009e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e4:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <HAL_UART_MspInit+0x178>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ea:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <HAL_UART_MspInit+0x178>)
 80009ec:	2280      	movs	r2, #128	; 0x80
 80009ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <HAL_UART_MspInit+0x178>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f6:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <HAL_UART_MspInit+0x178>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <HAL_UART_MspInit+0x178>)
 80009fe:	2220      	movs	r2, #32
 8000a00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <HAL_UART_MspInit+0x178>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a08:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <HAL_UART_MspInit+0x178>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fa56 	bl	8000ebc <HAL_DMA_Init>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000a14:	f7ff ff56 	bl	80008c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a1f      	ldr	r2, [pc, #124]	; (8000a98 <HAL_UART_MspInit+0x178>)
 8000a1c:	679a      	str	r2, [r3, #120]	; 0x78
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <HAL_UART_MspInit+0x178>)
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <HAL_UART_MspInit+0x184>)
 8000a28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a2c:	2234      	movs	r2, #52	; 0x34
 8000a2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a50:	2220      	movs	r2, #32
 8000a52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fa2d 	bl	8000ebc <HAL_DMA_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_UART_MspInit+0x14a>
    {
      Error_Handler();
 8000a66:	f7ff ff2d 	bl	80008c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a6e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_UART_MspInit+0x180>)
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	201c      	movs	r0, #28
 8000a7c:	f000 f9ec 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000a80:	201c      	movs	r0, #28
 8000a82:	f000 f9fe 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b01d      	add	sp, #116	; 0x74
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40021000 	.word	0x40021000
 8000a98:	200000cc 	.word	0x200000cc
 8000a9c:	40020008 	.word	0x40020008
 8000aa0:	2000012c 	.word	0x2000012c
 8000aa4:	4002001c 	.word	0x4002001c

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f8c2 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <DMA1_Channel1_IRQHandler+0x14>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 fbe6 	bl	80012b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	200000cc 	.word	0x200000cc

08000af0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fbda 	bl	80012b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	2000012c 	.word	0x2000012c

08000b08 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <USART2_LPUART2_IRQHandler+0x14>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 ffe4 	bl	8002adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	2000003c 	.word	0x2000003c

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b30:	f7ff fff6 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b5a:	f003 fbd1 	bl	8004300 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b5e:	f7ff fd73 	bl	8000648 <main>

08000b62 <LoopForever>:

LoopForever:
  b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   r0, =_estack
 8000b64:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b70:	08004408 	.word	0x08004408
  ldr r2, =_sbss
 8000b74:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b78:	200001a4 	.word	0x200001a4

08000b7c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_COMP_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_Init+0x3c>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Init+0x3c>)
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	0049      	lsls	r1, r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 f810 	bl	8000bc0 <HAL_InitTick>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	e001      	b.n	8000bb0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff fe90 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	230f      	movs	r3, #15
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_InitTick+0x88>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d02b      	beq.n	8000c30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <HAL_InitTick+0x8c>)
 8000bda:	681c      	ldr	r4, [r3, #0]
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_InitTick+0x88>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	0019      	movs	r1, r3
 8000be2:	23fa      	movs	r3, #250	; 0xfa
 8000be4:	0098      	lsls	r0, r3, #2
 8000be6:	f7ff fa8d 	bl	8000104 <__udivsi3>
 8000bea:	0003      	movs	r3, r0
 8000bec:	0019      	movs	r1, r3
 8000bee:	0020      	movs	r0, r4
 8000bf0:	f7ff fa88 	bl	8000104 <__udivsi3>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 f953 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d112      	bne.n	8000c26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d80a      	bhi.n	8000c1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f922 	bl	8000e58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_InitTick+0x90>)
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e00d      	b.n	8000c38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e008      	b.n	8000c38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c26:	230f      	movs	r3, #15
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e003      	b.n	8000c38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c30:	230f      	movs	r3, #15
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	781b      	ldrb	r3, [r3, #0]
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b005      	add	sp, #20
 8000c44:	bd90      	pop	{r4, r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	2000001c 	.word	0x2000001c
 8000c4c:	20000014 	.word	0x20000014
 8000c50:	20000018 	.word	0x20000018

08000c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x1c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x20>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	18d2      	adds	r2, r2, r3
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_IncTick+0x20>)
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	2000001c 	.word	0x2000001c
 8000c74:	200001a0 	.word	0x200001a0

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <HAL_GetTick+0x10>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	200001a0 	.word	0x200001a0

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff fff0 	bl	8000c78 <HAL_GetTick>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	001a      	movs	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	189b      	adds	r3, r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	f7ff ffe0 	bl	8000c78 <HAL_GetTick>
 8000cb8:	0002      	movs	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b004      	add	sp, #16
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	2000001c 	.word	0x2000001c

08000cd4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	601a      	str	r2, [r3, #0]
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	fffff9ff 	.word	0xfffff9ff

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	0002      	movs	r2, r0
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b7f      	cmp	r3, #127	; 0x7f
 8000d12:	d809      	bhi.n	8000d28 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	001a      	movs	r2, r3
 8000d1a:	231f      	movs	r3, #31
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_EnableIRQ+0x30>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	4091      	lsls	r1, r2
 8000d24:	000a      	movs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b002      	add	sp, #8
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b7f      	cmp	r3, #127	; 0x7f
 8000d48:	d828      	bhi.n	8000d9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <__NVIC_SetPriority+0xd4>)
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	33c0      	adds	r3, #192	; 0xc0
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	589b      	ldr	r3, [r3, r2]
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	0011      	movs	r1, r2
 8000d60:	2203      	movs	r2, #3
 8000d62:	400a      	ands	r2, r1
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	21ff      	movs	r1, #255	; 0xff
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	401a      	ands	r2, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	4003      	ands	r3, r0
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	481f      	ldr	r0, [pc, #124]	; (8000e08 <__NVIC_SetPriority+0xd4>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	430a      	orrs	r2, r1
 8000d94:	33c0      	adds	r3, #192	; 0xc0
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d9a:	e031      	b.n	8000e00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <__NVIC_SetPriority+0xd8>)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0019      	movs	r1, r3
 8000da4:	230f      	movs	r3, #15
 8000da6:	400b      	ands	r3, r1
 8000da8:	3b08      	subs	r3, #8
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3306      	adds	r3, #6
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	18d3      	adds	r3, r2, r3
 8000db2:	3304      	adds	r3, #4
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1dfa      	adds	r2, r7, #7
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	0011      	movs	r1, r2
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	00d2      	lsls	r2, r2, #3
 8000dc2:	21ff      	movs	r1, #255	; 0xff
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	43d2      	mvns	r2, r2
 8000dca:	401a      	ands	r2, r3
 8000dcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	22ff      	movs	r2, #255	; 0xff
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0018      	movs	r0, r3
 8000ddc:	2303      	movs	r3, #3
 8000dde:	4003      	ands	r3, r0
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <__NVIC_SetPriority+0xd8>)
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	001c      	movs	r4, r3
 8000dec:	230f      	movs	r3, #15
 8000dee:	4023      	ands	r3, r4
 8000df0:	3b08      	subs	r3, #8
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	430a      	orrs	r2, r1
 8000df6:	3306      	adds	r3, #6
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	18c3      	adds	r3, r0, r3
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b003      	add	sp, #12
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	045b      	lsls	r3, r3, #17
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d301      	bcc.n	8000e28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e24:	2301      	movs	r3, #1
 8000e26:	e010      	b.n	8000e4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <SysTick_Config+0x44>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	3a01      	subs	r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e30:	2301      	movs	r3, #1
 8000e32:	425b      	negs	r3, r3
 8000e34:	2103      	movs	r1, #3
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff ff7c 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x44>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x44>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	210f      	movs	r1, #15
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	1c02      	adds	r2, r0, #0
 8000e68:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	0002      	movs	r2, r0
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ff33 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ffaf 	bl	8000e10 <SysTick_Config>
 8000eb2:	0003      	movs	r3, r0
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e091      	b.n	8000ff2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <HAL_DMA_Init+0x140>)
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d810      	bhi.n	8000efc <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a48      	ldr	r2, [pc, #288]	; (8001000 <HAL_DMA_Init+0x144>)
 8000ee0:	4694      	mov	ip, r2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	2114      	movs	r1, #20
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff f90c 	bl	8000104 <__udivsi3>
 8000eec:	0003      	movs	r3, r0
 8000eee:	009a      	lsls	r2, r3, #2
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a43      	ldr	r2, [pc, #268]	; (8001004 <HAL_DMA_Init+0x148>)
 8000ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8000efa:	e00f      	b.n	8000f1c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a41      	ldr	r2, [pc, #260]	; (8001008 <HAL_DMA_Init+0x14c>)
 8000f02:	4694      	mov	ip, r2
 8000f04:	4463      	add	r3, ip
 8000f06:	2114      	movs	r1, #20
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff f8fb 	bl	8000104 <__udivsi3>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	009a      	lsls	r2, r3, #2
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a3c      	ldr	r2, [pc, #240]	; (800100c <HAL_DMA_Init+0x150>)
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2225      	movs	r2, #37	; 0x25
 8000f20:	2102      	movs	r1, #2
 8000f22:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4938      	ldr	r1, [pc, #224]	; (8001010 <HAL_DMA_Init+0x154>)
 8000f30:	400a      	ands	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6819      	ldr	r1, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 fa9f 	bl	80014b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	01db      	lsls	r3, r3, #7
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d102      	bne.n	8000f84 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8c:	217f      	movs	r1, #127	; 0x7f
 8000f8e:	400a      	ands	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f9a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d011      	beq.n	8000fc8 <HAL_DMA_Init+0x10c>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d80d      	bhi.n	8000fc8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f000 fac8 	bl	8001544 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	e008      	b.n	8000fda <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2225      	movs	r2, #37	; 0x25
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2224      	movs	r2, #36	; 0x24
 8000fec:	2100      	movs	r1, #0
 8000fee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	40020407 	.word	0x40020407
 8001000:	bffdfff8 	.word	0xbffdfff8
 8001004:	40020000 	.word	0x40020000
 8001008:	bffdfbf8 	.word	0xbffdfbf8
 800100c:	40020400 	.word	0x40020400
 8001010:	ffff800f 	.word	0xffff800f

08001014 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001022:	2317      	movs	r3, #23
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2224      	movs	r2, #36	; 0x24
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_DMA_Start_IT+0x24>
 8001034:	2302      	movs	r3, #2
 8001036:	e06f      	b.n	8001118 <HAL_DMA_Start_IT+0x104>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	2101      	movs	r1, #1
 800103e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2225      	movs	r2, #37	; 0x25
 8001044:	5c9b      	ldrb	r3, [r3, r2]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d157      	bne.n	80010fc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2225      	movs	r2, #37	; 0x25
 8001050:	2102      	movs	r1, #2
 8001052:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	438a      	bics	r2, r1
 8001068:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f9e1 	bl	8001438 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	2b00      	cmp	r3, #0
 800107c:	d008      	beq.n	8001090 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	210e      	movs	r1, #14
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e00f      	b.n	80010b0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2104      	movs	r1, #4
 800109c:	438a      	bics	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	210a      	movs	r1, #10
 80010ac:	430a      	orrs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	025b      	lsls	r3, r3, #9
 80010ba:	4013      	ands	r3, r2
 80010bc:	d008      	beq.n	80010d0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0049      	lsls	r1, r1, #1
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	0049      	lsls	r1, r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e00a      	b.n	8001112 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2224      	movs	r2, #36	; 0x24
 8001106:	2100      	movs	r1, #0
 8001108:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800110a:	2317      	movs	r3, #23
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001112:	2317      	movs	r3, #23
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	781b      	ldrb	r3, [r3, #0]
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b006      	add	sp, #24
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e04f      	b.n	80011d2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2225      	movs	r2, #37	; 0x25
 8001136:	5c9b      	ldrb	r3, [r3, r2]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d008      	beq.n	8001150 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2204      	movs	r2, #4
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2224      	movs	r2, #36	; 0x24
 8001148:	2100      	movs	r1, #0
 800114a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e040      	b.n	80011d2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	210e      	movs	r1, #14
 800115c:	438a      	bics	r2, r1
 800115e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116a:	491c      	ldr	r1, [pc, #112]	; (80011dc <HAL_DMA_Abort+0xbc>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2101      	movs	r1, #1
 800117c:	438a      	bics	r2, r1
 800117e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001184:	221c      	movs	r2, #28
 8001186:	401a      	ands	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	2101      	movs	r1, #1
 800118e:	4091      	lsls	r1, r2
 8001190:	000a      	movs	r2, r1
 8001192:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800119c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00c      	beq.n	80011c0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	490a      	ldr	r1, [pc, #40]	; (80011dc <HAL_DMA_Abort+0xbc>)
 80011b2:	400a      	ands	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2225      	movs	r2, #37	; 0x25
 80011c4:	2101      	movs	r1, #1
 80011c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	fffffeff 	.word	0xfffffeff

080011e0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e8:	210f      	movs	r1, #15
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2225      	movs	r2, #37	; 0x25
 80011f4:	5c9b      	ldrb	r3, [r3, r2]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d006      	beq.n	800120a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2204      	movs	r2, #4
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	e048      	b.n	800129c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	210e      	movs	r1, #14
 8001216:	438a      	bics	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	438a      	bics	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001234:	491d      	ldr	r1, [pc, #116]	; (80012ac <HAL_DMA_Abort_IT+0xcc>)
 8001236:	400a      	ands	r2, r1
 8001238:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	221c      	movs	r2, #28
 8001240:	401a      	ands	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	2101      	movs	r1, #1
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001256:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00c      	beq.n	800127a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126a:	4910      	ldr	r1, [pc, #64]	; (80012ac <HAL_DMA_Abort_IT+0xcc>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001278:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2225      	movs	r2, #37	; 0x25
 800127e:	2101      	movs	r1, #1
 8001280:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2224      	movs	r2, #36	; 0x24
 8001286:	2100      	movs	r1, #0
 8001288:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128e:	2b00      	cmp	r3, #0
 8001290:	d004      	beq.n	800129c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	0010      	movs	r0, r2
 800129a:	4798      	blx	r3
    }
  }
  return status;
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	fffffeff 	.word	0xfffffeff

080012b0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	221c      	movs	r2, #28
 80012ce:	4013      	ands	r3, r2
 80012d0:	2204      	movs	r2, #4
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4013      	ands	r3, r2
 80012da:	d026      	beq.n	800132a <HAL_DMA_IRQHandler+0x7a>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2204      	movs	r2, #4
 80012e0:	4013      	ands	r3, r2
 80012e2:	d022      	beq.n	800132a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2220      	movs	r2, #32
 80012ec:	4013      	ands	r3, r2
 80012ee:	d107      	bne.n	8001300 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2104      	movs	r1, #4
 80012fc:	438a      	bics	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	221c      	movs	r2, #28
 8001306:	401a      	ands	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	2104      	movs	r1, #4
 800130e:	4091      	lsls	r1, r2
 8001310:	000a      	movs	r2, r1
 8001312:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	2b00      	cmp	r3, #0
 800131a:	d100      	bne.n	800131e <HAL_DMA_IRQHandler+0x6e>
 800131c:	e080      	b.n	8001420 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	0010      	movs	r0, r2
 8001326:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001328:	e07a      	b.n	8001420 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	221c      	movs	r2, #28
 8001330:	4013      	ands	r3, r2
 8001332:	2202      	movs	r2, #2
 8001334:	409a      	lsls	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	d03c      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x108>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2202      	movs	r2, #2
 8001342:	4013      	ands	r3, r2
 8001344:	d038      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2220      	movs	r2, #32
 800134e:	4013      	ands	r3, r2
 8001350:	d10b      	bne.n	800136a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	210a      	movs	r1, #10
 800135e:	438a      	bics	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2225      	movs	r2, #37	; 0x25
 8001366:	2101      	movs	r1, #1
 8001368:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	001a      	movs	r2, r3
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_DMA_IRQHandler+0x17c>)
 8001372:	429a      	cmp	r2, r3
 8001374:	d909      	bls.n	800138a <HAL_DMA_IRQHandler+0xda>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	221c      	movs	r2, #28
 800137c:	401a      	ands	r2, r3
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <HAL_DMA_IRQHandler+0x180>)
 8001380:	2102      	movs	r1, #2
 8001382:	4091      	lsls	r1, r2
 8001384:	000a      	movs	r2, r1
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	e008      	b.n	800139c <HAL_DMA_IRQHandler+0xec>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	221c      	movs	r2, #28
 8001390:	401a      	ands	r2, r3
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <HAL_DMA_IRQHandler+0x184>)
 8001394:	2102      	movs	r1, #2
 8001396:	4091      	lsls	r1, r2
 8001398:	000a      	movs	r2, r1
 800139a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2224      	movs	r2, #36	; 0x24
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d039      	beq.n	8001420 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	0010      	movs	r0, r2
 80013b4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80013b6:	e033      	b.n	8001420 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	221c      	movs	r2, #28
 80013be:	4013      	ands	r3, r2
 80013c0:	2208      	movs	r2, #8
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4013      	ands	r3, r2
 80013ca:	d02a      	beq.n	8001422 <HAL_DMA_IRQHandler+0x172>
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2208      	movs	r2, #8
 80013d0:	4013      	ands	r3, r2
 80013d2:	d026      	beq.n	8001422 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	210e      	movs	r1, #14
 80013e0:	438a      	bics	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	221c      	movs	r2, #28
 80013ea:	401a      	ands	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	2101      	movs	r1, #1
 80013f2:	4091      	lsls	r1, r2
 80013f4:	000a      	movs	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2225      	movs	r2, #37	; 0x25
 8001402:	2101      	movs	r1, #1
 8001404:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2224      	movs	r2, #36	; 0x24
 800140a:	2100      	movs	r1, #0
 800140c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	0010      	movs	r0, r2
 800141e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46c0      	nop			; (mov r8, r8)
}
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40020080 	.word	0x40020080
 8001430:	40020400 	.word	0x40020400
 8001434:	40020000 	.word	0x40020000

08001438 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800144e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001460:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	221c      	movs	r2, #28
 8001468:	401a      	ands	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	2101      	movs	r1, #1
 8001470:	4091      	lsls	r1, r2
 8001472:	000a      	movs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b10      	cmp	r3, #16
 8001484:	d108      	bne.n	8001498 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001496:	e007      	b.n	80014a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	60da      	str	r2, [r3, #12]
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b004      	add	sp, #16
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	001a      	movs	r2, r3
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d814      	bhi.n	80014ee <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80014ce:	189a      	adds	r2, r3, r2
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	001a      	movs	r2, r3
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	4013      	ands	r3, r2
 80014de:	3b08      	subs	r3, #8
 80014e0:	2114      	movs	r1, #20
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7fe fe0e 	bl	8000104 <__udivsi3>
 80014e8:	0003      	movs	r3, r0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e014      	b.n	8001518 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4a11      	ldr	r2, [pc, #68]	; (800153c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80014f8:	189a      	adds	r2, r3, r2
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	001a      	movs	r2, r3
 8001504:	23ff      	movs	r3, #255	; 0xff
 8001506:	4013      	ands	r3, r2
 8001508:	3b08      	subs	r3, #8
 800150a:	2114      	movs	r1, #20
 800150c:	0018      	movs	r0, r3
 800150e:	f7fe fdf9 	bl	8000104 <__udivsi3>
 8001512:	0003      	movs	r3, r0
 8001514:	3307      	adds	r3, #7
 8001516:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800151c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	221f      	movs	r2, #31
 8001522:	4013      	ands	r3, r2
 8001524:	2201      	movs	r2, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b004      	add	sp, #16
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40020407 	.word	0x40020407
 8001538:	40020800 	.word	0x40020800
 800153c:	4002081c 	.word	0x4002081c
 8001540:	40020880 	.word	0x40020880

08001544 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	227f      	movs	r2, #127	; 0x7f
 8001552:	4013      	ands	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800155a:	4694      	mov	ip, r2
 800155c:	4463      	add	r3, ip
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	001a      	movs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800156a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3b01      	subs	r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	4013      	ands	r3, r2
 8001574:	2201      	movs	r2, #1
 8001576:	409a      	lsls	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b004      	add	sp, #16
 8001582:	bd80      	pop	{r7, pc}
 8001584:	1000823f 	.word	0x1000823f
 8001588:	40020940 	.word	0x40020940

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159a:	e14d      	b.n	8001838 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4091      	lsls	r1, r2
 80015a6:	000a      	movs	r2, r1
 80015a8:	4013      	ands	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d100      	bne.n	80015b4 <HAL_GPIO_Init+0x28>
 80015b2:	e13e      	b.n	8001832 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2203      	movs	r2, #3
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d005      	beq.n	80015cc <HAL_GPIO_Init+0x40>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	409a      	lsls	r2, r3
 80015da:	0013      	movs	r3, r2
 80015dc:	43da      	mvns	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	409a      	lsls	r2, r3
 80015ee:	0013      	movs	r3, r2
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	43da      	mvns	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	2201      	movs	r2, #1
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2203      	movs	r2, #3
 8001634:	4013      	ands	r3, r2
 8001636:	2b03      	cmp	r3, #3
 8001638:	d017      	beq.n	800166a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	409a      	lsls	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	43da      	mvns	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2203      	movs	r2, #3
 8001670:	4013      	ands	r3, r2
 8001672:	2b02      	cmp	r3, #2
 8001674:	d123      	bne.n	80016be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	08da      	lsrs	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	58d3      	ldr	r3, [r2, r3]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2207      	movs	r2, #7
 8001688:	4013      	ands	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	43da      	mvns	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2107      	movs	r1, #7
 80016a2:	400b      	ands	r3, r1
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	0092      	lsls	r2, r2, #2
 80016ba:	6939      	ldr	r1, [r7, #16]
 80016bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	43da      	mvns	r2, r3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2203      	movs	r2, #3
 80016dc:	401a      	ands	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	409a      	lsls	r2, r3
 80016e4:	0013      	movs	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	23c0      	movs	r3, #192	; 0xc0
 80016f8:	029b      	lsls	r3, r3, #10
 80016fa:	4013      	ands	r3, r2
 80016fc:	d100      	bne.n	8001700 <HAL_GPIO_Init+0x174>
 80016fe:	e098      	b.n	8001832 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001700:	4a53      	ldr	r2, [pc, #332]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3318      	adds	r3, #24
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	589b      	ldr	r3, [r3, r2]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2203      	movs	r2, #3
 8001712:	4013      	ands	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	220f      	movs	r2, #15
 8001718:	409a      	lsls	r2, r3
 800171a:	0013      	movs	r3, r2
 800171c:	43da      	mvns	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	23a0      	movs	r3, #160	; 0xa0
 8001728:	05db      	lsls	r3, r3, #23
 800172a:	429a      	cmp	r2, r3
 800172c:	d019      	beq.n	8001762 <HAL_GPIO_Init+0x1d6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a48      	ldr	r2, [pc, #288]	; (8001854 <HAL_GPIO_Init+0x2c8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0x1d2>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a47      	ldr	r2, [pc, #284]	; (8001858 <HAL_GPIO_Init+0x2cc>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x1ce>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a46      	ldr	r2, [pc, #280]	; (800185c <HAL_GPIO_Init+0x2d0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x1ca>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a45      	ldr	r2, [pc, #276]	; (8001860 <HAL_GPIO_Init+0x2d4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x1c6>
 800174e:	2304      	movs	r3, #4
 8001750:	e008      	b.n	8001764 <HAL_GPIO_Init+0x1d8>
 8001752:	2305      	movs	r3, #5
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x1d8>
 8001756:	2303      	movs	r3, #3
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x1d8>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x1d8>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x1d8>
 8001762:	2300      	movs	r3, #0
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	2103      	movs	r1, #3
 8001768:	400a      	ands	r2, r1
 800176a:	00d2      	lsls	r2, r2, #3
 800176c:	4093      	lsls	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001774:	4936      	ldr	r1, [pc, #216]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3318      	adds	r3, #24
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43da      	mvns	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	035b      	lsls	r3, r3, #13
 800179a:	4013      	ands	r3, r2
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43da      	mvns	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	039b      	lsls	r3, r3, #14
 80017c4:	4013      	ands	r3, r2
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017d6:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 80017d8:	2384      	movs	r3, #132	; 0x84
 80017da:	58d3      	ldr	r3, [r2, r3]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43da      	mvns	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017fc:	4914      	ldr	r1, [pc, #80]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 80017fe:	2284      	movs	r2, #132	; 0x84
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	58d3      	ldr	r3, [r2, r3]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43da      	mvns	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4013      	ands	r3, r2
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800182a:	4909      	ldr	r1, [pc, #36]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	40da      	lsrs	r2, r3
 8001840:	1e13      	subs	r3, r2, #0
 8001842:	d000      	beq.n	8001846 <HAL_GPIO_Init+0x2ba>
 8001844:	e6aa      	b.n	800159c <HAL_GPIO_Init+0x10>
  }
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b006      	add	sp, #24
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021800 	.word	0x40021800
 8001854:	50000400 	.word	0x50000400
 8001858:	50000800 	.word	0x50000800
 800185c:	50000c00 	.word	0x50000c00
 8001860:	50001000 	.word	0x50001000

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	0008      	movs	r0, r1
 800186e:	0011      	movs	r1, r2
 8001870:	1cbb      	adds	r3, r7, #2
 8001872:	1c02      	adds	r2, r0, #0
 8001874:	801a      	strh	r2, [r3, #0]
 8001876:	1c7b      	adds	r3, r7, #1
 8001878:	1c0a      	adds	r2, r1, #0
 800187a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800187c:	1c7b      	adds	r3, r7, #1
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001884:	1cbb      	adds	r3, r7, #2
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800188e:	1cbb      	adds	r3, r7, #2
 8001890:	881a      	ldrh	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b002      	add	sp, #8
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	000a      	movs	r2, r1
 80018a8:	1cbb      	adds	r3, r7, #2
 80018aa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018b2:	1cbb      	adds	r3, r7, #2
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	041a      	lsls	r2, r3, #16
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	1cb9      	adds	r1, r7, #2
 80018c2:	8809      	ldrh	r1, [r1, #0]
 80018c4:	400b      	ands	r3, r1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	619a      	str	r2, [r3, #24]
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b004      	add	sp, #16
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d11f      	bne.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	0013      	movs	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	189b      	adds	r3, r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4912      	ldr	r1, [pc, #72]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001906:	0018      	movs	r0, r3
 8001908:	f7fe fbfc 	bl	8000104 <__udivsi3>
 800190c:	0003      	movs	r3, r0
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001912:	e008      	b.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3b01      	subs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e001      	b.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e009      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	401a      	ands	r2, r3
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	429a      	cmp	r2, r3
 8001936:	d0ed      	beq.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b004      	add	sp, #16
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40007000 	.word	0x40007000
 8001948:	fffff9ff 	.word	0xfffff9ff
 800194c:	20000014 	.word	0x20000014
 8001950:	000f4240 	.word	0x000f4240

08001954 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <LL_RCC_GetAPB1Prescaler+0x14>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	23e0      	movs	r3, #224	; 0xe0
 800195e:	01db      	lsls	r3, r3, #7
 8001960:	4013      	ands	r3, r2
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	f000 fb50 	bl	8002020 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	4013      	ands	r3, r2
 8001988:	d100      	bne.n	800198c <HAL_RCC_OscConfig+0x20>
 800198a:	e07c      	b.n	8001a86 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198c:	4bc3      	ldr	r3, [pc, #780]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2238      	movs	r2, #56	; 0x38
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001996:	4bc1      	ldr	r3, [pc, #772]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2203      	movs	r2, #3
 800199c:	4013      	ands	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d102      	bne.n	80019ac <HAL_RCC_OscConfig+0x40>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d002      	beq.n	80019b2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d10b      	bne.n	80019ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4bba      	ldr	r3, [pc, #744]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d062      	beq.n	8001a84 <HAL_RCC_OscConfig+0x118>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d15e      	bne.n	8001a84 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e32a      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	025b      	lsls	r3, r3, #9
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_OscConfig+0x7a>
 80019d6:	4bb1      	ldr	r3, [pc, #708]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4bb0      	ldr	r3, [pc, #704]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	0249      	lsls	r1, r1, #9
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e020      	b.n	8001a28 <HAL_RCC_OscConfig+0xbc>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	23a0      	movs	r3, #160	; 0xa0
 80019ec:	02db      	lsls	r3, r3, #11
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d10e      	bne.n	8001a10 <HAL_RCC_OscConfig+0xa4>
 80019f2:	4baa      	ldr	r3, [pc, #680]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4ba9      	ldr	r3, [pc, #676]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	02c9      	lsls	r1, r1, #11
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	4ba6      	ldr	r3, [pc, #664]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4ba5      	ldr	r3, [pc, #660]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0249      	lsls	r1, r1, #9
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0xbc>
 8001a10:	4ba2      	ldr	r3, [pc, #648]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4ba1      	ldr	r3, [pc, #644]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a16:	49a2      	ldr	r1, [pc, #648]	; (8001ca0 <HAL_RCC_OscConfig+0x334>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4b9f      	ldr	r3, [pc, #636]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b9e      	ldr	r3, [pc, #632]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a22:	49a0      	ldr	r1, [pc, #640]	; (8001ca4 <HAL_RCC_OscConfig+0x338>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d014      	beq.n	8001a5a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f922 	bl	8000c78 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f91d 	bl	8000c78 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b64      	cmp	r3, #100	; 0x64
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e2e9      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4c:	4b93      	ldr	r3, [pc, #588]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	4013      	ands	r3, r2
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0xce>
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f90d 	bl	8000c78 <HAL_GetTick>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff f908 	bl	8000c78 <HAL_GetTick>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e2d4      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a76:	4b89      	ldr	r3, [pc, #548]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	029b      	lsls	r3, r3, #10
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0xf8>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <HAL_RCC_OscConfig+0x126>
 8001a90:	e099      	b.n	8001bc6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2238      	movs	r2, #56	; 0x38
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9c:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x146>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d135      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab8:	4b78      	ldr	r3, [pc, #480]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x164>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2a7      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b72      	ldr	r3, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a74      	ldr	r2, [pc, #464]	; (8001ca8 <HAL_RCC_OscConfig+0x33c>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	021a      	lsls	r2, r3, #8
 8001ae0:	4b6e      	ldr	r3, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d112      	bne.n	8001b12 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001aec:	4b6b      	ldr	r3, [pc, #428]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6e      	ldr	r2, [pc, #440]	; (8001cac <HAL_RCC_OscConfig+0x340>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b00:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0adb      	lsrs	r3, r3, #11
 8001b06:	2207      	movs	r2, #7
 8001b08:	4013      	ands	r3, r2
 8001b0a:	4a69      	ldr	r2, [pc, #420]	; (8001cb0 <HAL_RCC_OscConfig+0x344>)
 8001b0c:	40da      	lsrs	r2, r3
 8001b0e:	4b69      	ldr	r3, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x348>)
 8001b10:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b12:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x34c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7ff f852 	bl	8000bc0 <HAL_InitTick>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	d051      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e27d      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d030      	beq.n	8001b8e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b2c:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a5e      	ldr	r2, [pc, #376]	; (8001cac <HAL_RCC_OscConfig+0x340>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	4b58      	ldr	r3, [pc, #352]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b55      	ldr	r3, [pc, #340]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	0049      	lsls	r1, r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f893 	bl	8000c78 <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff f88e 	bl	8000c78 <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e25a      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6a:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4013      	ands	r3, r2
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <HAL_RCC_OscConfig+0x33c>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	021a      	lsls	r2, r3, #8
 8001b86:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	e01b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b94:	4949      	ldr	r1, [pc, #292]	; (8001cbc <HAL_RCC_OscConfig+0x350>)
 8001b96:	400a      	ands	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f86d 	bl	8000c78 <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7ff f868 	bl	8000c78 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e234      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb6:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x238>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d047      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bd0:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2238      	movs	r2, #56	; 0x38
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b18      	cmp	r3, #24
 8001bda:	d10a      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d03c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2f4>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d138      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e216      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d019      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001bfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff f837 	bl	8000c78 <HAL_GetTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff f832 	bl	8000c78 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1fe      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d0f1      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2a4>
 8001c2c:	e018      	b.n	8001c60 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001c30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001c34:	2101      	movs	r1, #1
 8001c36:	438a      	bics	r2, r1
 8001c38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f81d 	bl	8000c78 <HAL_GetTick>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff f818 	bl	8000c78 <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1e4      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d1f1      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2204      	movs	r2, #4
 8001c66:	4013      	ands	r3, r2
 8001c68:	d100      	bne.n	8001c6c <HAL_RCC_OscConfig+0x300>
 8001c6a:	e0c7      	b.n	8001dfc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6c:	231f      	movs	r3, #31
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2238      	movs	r2, #56	; 0x38
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d11f      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d100      	bne.n	8001c8c <HAL_RCC_OscConfig+0x320>
 8001c8a:	e0b7      	b.n	8001dfc <HAL_RCC_OscConfig+0x490>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d000      	beq.n	8001c96 <HAL_RCC_OscConfig+0x32a>
 8001c94:	e0b2      	b.n	8001dfc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1c2      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	fffeffff 	.word	0xfffeffff
 8001ca4:	fffbffff 	.word	0xfffbffff
 8001ca8:	ffff80ff 	.word	0xffff80ff
 8001cac:	ffffc7ff 	.word	0xffffc7ff
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	20000014 	.word	0x20000014
 8001cb8:	20000018 	.word	0x20000018
 8001cbc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cc0:	4bb5      	ldr	r3, [pc, #724]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	055b      	lsls	r3, r3, #21
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x364>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x366>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d011      	beq.n	8001cfa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4bb0      	ldr	r3, [pc, #704]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cda:	4baf      	ldr	r3, [pc, #700]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	0549      	lsls	r1, r1, #21
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ce4:	4bac      	ldr	r3, [pc, #688]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	055b      	lsls	r3, r3, #21
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001cf2:	231f      	movs	r3, #31
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfa:	4ba8      	ldr	r3, [pc, #672]	; (8001f9c <HAL_RCC_OscConfig+0x630>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	d11a      	bne.n	8001d3c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d06:	4ba5      	ldr	r3, [pc, #660]	; (8001f9c <HAL_RCC_OscConfig+0x630>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4ba4      	ldr	r3, [pc, #656]	; (8001f9c <HAL_RCC_OscConfig+0x630>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0049      	lsls	r1, r1, #1
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d14:	f7fe ffb0 	bl	8000c78 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7fe ffab 	bl	8000c78 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e177      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d30:	4b9a      	ldr	r3, [pc, #616]	; (8001f9c <HAL_RCC_OscConfig+0x630>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3e6>
 8001d44:	4b94      	ldr	r3, [pc, #592]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d48:	4b93      	ldr	r3, [pc, #588]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x420>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x408>
 8001d5a:	4b8f      	ldr	r3, [pc, #572]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d5e:	4b8e      	ldr	r3, [pc, #568]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d60:	2104      	movs	r1, #4
 8001d62:	430a      	orrs	r2, r1
 8001d64:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d66:	4b8c      	ldr	r3, [pc, #560]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0x420>
 8001d74:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d78:	4b87      	ldr	r3, [pc, #540]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d80:	4b85      	ldr	r3, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d84:	4b84      	ldr	r3, [pc, #528]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001d86:	2104      	movs	r1, #4
 8001d88:	438a      	bics	r2, r1
 8001d8a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d014      	beq.n	8001dbe <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7fe ff70 	bl	8000c78 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9c:	e009      	b.n	8001db2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe ff6b 	bl	8000c78 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	4a7d      	ldr	r2, [pc, #500]	; (8001fa0 <HAL_RCC_OscConfig+0x634>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e136      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db2:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x432>
 8001dbc:	e013      	b.n	8001de6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7fe ff5b 	bl	8000c78 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc6:	e009      	b.n	8001ddc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7fe ff56 	bl	8000c78 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	4a73      	ldr	r2, [pc, #460]	; (8001fa0 <HAL_RCC_OscConfig+0x634>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e121      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ddc:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2202      	movs	r2, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001de6:	231f      	movs	r3, #31
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001df0:	4b69      	ldr	r3, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001df6:	496b      	ldr	r1, [pc, #428]	; (8001fa4 <HAL_RCC_OscConfig+0x638>)
 8001df8:	400a      	ands	r2, r1
 8001dfa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2220      	movs	r2, #32
 8001e02:	4013      	ands	r3, r2
 8001e04:	d039      	beq.n	8001e7a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01b      	beq.n	8001e46 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e0e:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	03c9      	lsls	r1, r1, #15
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7fe ff2c 	bl	8000c78 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e26:	f7fe ff27 	bl	8000c78 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0f3      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e38:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	041b      	lsls	r3, r3, #16
 8001e40:	4013      	ands	r3, r2
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x4ba>
 8001e44:	e019      	b.n	8001e7a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e46:	4b54      	ldr	r3, [pc, #336]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001e4c:	4956      	ldr	r1, [pc, #344]	; (8001fa8 <HAL_RCC_OscConfig+0x63c>)
 8001e4e:	400a      	ands	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7fe ff11 	bl	8000c78 <HAL_GetTick>
 8001e56:	0003      	movs	r3, r0
 8001e58:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e5c:	f7fe ff0c 	bl	8000c78 <HAL_GetTick>
 8001e60:	0002      	movs	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e0d8      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	4013      	ands	r3, r2
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d100      	bne.n	8001e84 <HAL_RCC_OscConfig+0x518>
 8001e82:	e0cc      	b.n	800201e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e84:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2238      	movs	r2, #56	; 0x38
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d100      	bne.n	8001e92 <HAL_RCC_OscConfig+0x526>
 8001e90:	e07b      	b.n	8001f8a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d156      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001ea0:	4942      	ldr	r1, [pc, #264]	; (8001fac <HAL_RCC_OscConfig+0x640>)
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fee7 	bl	8000c78 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7fe fee2 	bl	8000c78 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0ae      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	4b35      	ldr	r3, [pc, #212]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	049b      	lsls	r3, r3, #18
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ece:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4a37      	ldr	r2, [pc, #220]	; (8001fb0 <HAL_RCC_OscConfig+0x644>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	431a      	orrs	r2, r3
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0449      	lsls	r1, r1, #17
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	0549      	lsls	r1, r1, #21
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe feab 	bl	8000c78 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe fea6 	bl	8000c78 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e072      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	049b      	lsls	r3, r3, #18
 8001f42:	4013      	ands	r3, r2
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x5bc>
 8001f46:	e06a      	b.n	800201e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f4e:	4917      	ldr	r1, [pc, #92]	; (8001fac <HAL_RCC_OscConfig+0x640>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe fe90 	bl	8000c78 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe fe8b 	bl	8000c78 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e057      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	049b      	lsls	r3, r3, #18
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_OscConfig+0x62c>)
 8001f82:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <HAL_RCC_OscConfig+0x648>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	e049      	b.n	800201e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d112      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e044      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	00001388 	.word	0x00001388
 8001fa4:	efffffff 	.word	0xefffffff
 8001fa8:	ffbfffff 	.word	0xffbfffff
 8001fac:	feffffff 	.word	0xfeffffff
 8001fb0:	11c1808c 	.word	0x11c1808c
 8001fb4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x6bc>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d126      	bne.n	800201a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2270      	movs	r2, #112	; 0x70
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d11f      	bne.n	800201a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	23fe      	movs	r3, #254	; 0xfe
 8001fde:	01db      	lsls	r3, r3, #7
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d116      	bne.n	800201a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	23f8      	movs	r3, #248	; 0xf8
 8001ff0:	039b      	lsls	r3, r3, #14
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d10e      	bne.n	800201a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	23e0      	movs	r3, #224	; 0xe0
 8002000:	051b      	lsls	r3, r3, #20
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	0f5b      	lsrs	r3, r3, #29
 8002010:	075a      	lsls	r2, r3, #29
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b008      	add	sp, #32
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0e9      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002040:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2207      	movs	r2, #7
 8002046:	4013      	ands	r3, r2
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d91e      	bls.n	800208c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b73      	ldr	r3, [pc, #460]	; (800221c <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2207      	movs	r2, #7
 8002054:	4393      	bics	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	4b70      	ldr	r3, [pc, #448]	; (800221c <HAL_RCC_ClockConfig+0x1f0>)
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002060:	f7fe fe0a 	bl	8000c78 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002068:	e009      	b.n	800207e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206a:	f7fe fe05 	bl	8000c78 <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	4a6a      	ldr	r2, [pc, #424]	; (8002220 <HAL_RCC_ClockConfig+0x1f4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0ca      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2207      	movs	r2, #7
 8002084:	4013      	ands	r3, r2
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d1ee      	bne.n	800206a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2202      	movs	r2, #2
 8002092:	4013      	ands	r3, r2
 8002094:	d015      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2204      	movs	r2, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d006      	beq.n	80020ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020a0:	4b60      	ldr	r3, [pc, #384]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 80020a6:	21e0      	movs	r1, #224	; 0xe0
 80020a8:	01c9      	lsls	r1, r1, #7
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ae:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4a5d      	ldr	r2, [pc, #372]	; (8002228 <HAL_RCC_ClockConfig+0x1fc>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	d057      	beq.n	800217c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	029b      	lsls	r3, r3, #10
 80020dc:	4013      	ands	r3, r2
 80020de:	d12b      	bne.n	8002138 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e097      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ec:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	049b      	lsls	r3, r3, #18
 80020f4:	4013      	ands	r3, r2
 80020f6:	d11f      	bne.n	8002138 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e08b      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002104:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4013      	ands	r3, r2
 800210e:	d113      	bne.n	8002138 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e07f      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d106      	bne.n	800212a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d108      	bne.n	8002138 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e074      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212a:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	2202      	movs	r2, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e06d      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002138:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2207      	movs	r2, #7
 800213e:	4393      	bics	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4b37      	ldr	r3, [pc, #220]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800214c:	f7fe fd94 	bl	8000c78 <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002154:	e009      	b.n	800216a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002156:	f7fe fd8f 	bl	8000c78 <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <HAL_RCC_ClockConfig+0x1f4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e054      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2238      	movs	r2, #56	; 0x38
 8002170:	401a      	ands	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	429a      	cmp	r2, r3
 800217a:	d1ec      	bne.n	8002156 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_ClockConfig+0x1f0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2207      	movs	r2, #7
 8002182:	4013      	ands	r3, r2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d21e      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_ClockConfig+0x1f0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2207      	movs	r2, #7
 8002190:	4393      	bics	r3, r2
 8002192:	0019      	movs	r1, r3
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_RCC_ClockConfig+0x1f0>)
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800219c:	f7fe fd6c 	bl	8000c78 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021a4:	e009      	b.n	80021ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a6:	f7fe fd67 	bl	8000c78 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_RCC_ClockConfig+0x1f4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e02c      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2207      	movs	r2, #7
 80021c0:	4013      	ands	r3, r2
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2204      	movs	r2, #4
 80021ce:	4013      	ands	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4a15      	ldr	r2, [pc, #84]	; (800222c <HAL_RCC_ClockConfig+0x200>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021e6:	f000 f829 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021ea:	0001      	movs	r1, r0
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCC_ClockConfig+0x1f8>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	220f      	movs	r2, #15
 80021f4:	401a      	ands	r2, r3
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_RCC_ClockConfig+0x204>)
 80021f8:	0092      	lsls	r2, r2, #2
 80021fa:	58d3      	ldr	r3, [r2, r3]
 80021fc:	221f      	movs	r2, #31
 80021fe:	4013      	ands	r3, r2
 8002200:	000a      	movs	r2, r1
 8002202:	40da      	lsrs	r2, r3
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_ClockConfig+0x208>)
 8002206:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_ClockConfig+0x20c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0018      	movs	r0, r3
 800220e:	f7fe fcd7 	bl	8000bc0 <HAL_InitTick>
 8002212:	0003      	movs	r3, r0
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b004      	add	sp, #16
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40022000 	.word	0x40022000
 8002220:	00001388 	.word	0x00001388
 8002224:	40021000 	.word	0x40021000
 8002228:	fffff0ff 	.word	0xfffff0ff
 800222c:	ffff8fff 	.word	0xffff8fff
 8002230:	08004370 	.word	0x08004370
 8002234:	20000014 	.word	0x20000014
 8002238:	20000018 	.word	0x20000018

0800223c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002242:	4b3c      	ldr	r3, [pc, #240]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2238      	movs	r2, #56	; 0x38
 8002248:	4013      	ands	r3, r2
 800224a:	d10f      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0adb      	lsrs	r3, r3, #11
 8002252:	2207      	movs	r2, #7
 8002254:	4013      	ands	r3, r2
 8002256:	2201      	movs	r2, #1
 8002258:	409a      	lsls	r2, r3
 800225a:	0013      	movs	r3, r2
 800225c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	4835      	ldr	r0, [pc, #212]	; (8002338 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002262:	f7fd ff4f 	bl	8000104 <__udivsi3>
 8002266:	0003      	movs	r3, r0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	e05d      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2238      	movs	r2, #56	; 0x38
 8002272:	4013      	ands	r3, r2
 8002274:	2b08      	cmp	r3, #8
 8002276:	d102      	bne.n	800227e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <HAL_RCC_GetSysClockFreq+0x100>)
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e054      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2238      	movs	r2, #56	; 0x38
 8002284:	4013      	ands	r3, r2
 8002286:	2b10      	cmp	r3, #16
 8002288:	d138      	bne.n	80022fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2203      	movs	r2, #3
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	2207      	movs	r2, #7
 800229c:	4013      	ands	r3, r2
 800229e:	3301      	adds	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d10d      	bne.n	80022c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	4824      	ldr	r0, [pc, #144]	; (800233c <HAL_RCC_GetSysClockFreq+0x100>)
 80022ac:	f7fd ff2a 	bl	8000104 <__udivsi3>
 80022b0:	0003      	movs	r3, r0
 80022b2:	0019      	movs	r1, r3
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	227f      	movs	r2, #127	; 0x7f
 80022bc:	4013      	ands	r3, r2
 80022be:	434b      	muls	r3, r1
 80022c0:	617b      	str	r3, [r7, #20]
        break;
 80022c2:	e00d      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	481c      	ldr	r0, [pc, #112]	; (8002338 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022c8:	f7fd ff1c 	bl	8000104 <__udivsi3>
 80022cc:	0003      	movs	r3, r0
 80022ce:	0019      	movs	r1, r3
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	227f      	movs	r2, #127	; 0x7f
 80022d8:	4013      	ands	r3, r2
 80022da:	434b      	muls	r3, r1
 80022dc:	617b      	str	r3, [r7, #20]
        break;
 80022de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0f5b      	lsrs	r3, r3, #29
 80022e6:	2207      	movs	r2, #7
 80022e8:	4013      	ands	r3, r2
 80022ea:	3301      	adds	r3, #1
 80022ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	6978      	ldr	r0, [r7, #20]
 80022f2:	f7fd ff07 	bl	8000104 <__udivsi3>
 80022f6:	0003      	movs	r3, r0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	e015      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2238      	movs	r2, #56	; 0x38
 8002302:	4013      	ands	r3, r2
 8002304:	2b20      	cmp	r3, #32
 8002306:	d103      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2238      	movs	r2, #56	; 0x38
 8002316:	4013      	ands	r3, r2
 8002318:	2b18      	cmp	r3, #24
 800231a:	d103      	bne.n	8002324 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800231c:	23fa      	movs	r3, #250	; 0xfa
 800231e:	01db      	lsls	r3, r3, #7
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	e001      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002328:	693b      	ldr	r3, [r7, #16]
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b006      	add	sp, #24
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	40021000 	.word	0x40021000
 8002338:	00f42400 	.word	0x00f42400
 800233c:	007a1200 	.word	0x007a1200

08002340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <HAL_RCC_GetHCLKFreq+0x10>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	20000014 	.word	0x20000014

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b5b0      	push	{r4, r5, r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002358:	f7ff fff2 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 800235c:	0004      	movs	r4, r0
 800235e:	f7ff faf9 	bl	8001954 <LL_RCC_GetAPB1Prescaler>
 8002362:	0003      	movs	r3, r0
 8002364:	0b1a      	lsrs	r2, r3, #12
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002368:	0092      	lsls	r2, r2, #2
 800236a:	58d3      	ldr	r3, [r2, r3]
 800236c:	221f      	movs	r2, #31
 800236e:	4013      	ands	r3, r2
 8002370:	40dc      	lsrs	r4, r3
 8002372:	0023      	movs	r3, r4
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	bdb0      	pop	{r4, r5, r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	080043b0 	.word	0x080043b0

08002380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002388:	2313      	movs	r3, #19
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002390:	2312      	movs	r3, #18
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	4013      	ands	r3, r2
 80023a2:	d100      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80023a4:	e0ad      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2011      	movs	r0, #17
 80023a8:	183b      	adds	r3, r7, r0
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	055b      	lsls	r3, r3, #21
 80023b6:	4013      	ands	r3, r2
 80023b8:	d110      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	4b44      	ldr	r3, [pc, #272]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023be:	4b43      	ldr	r3, [pc, #268]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	0549      	lsls	r1, r1, #21
 80023c4:	430a      	orrs	r2, r1
 80023c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80023c8:	4b40      	ldr	r3, [pc, #256]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	055b      	lsls	r3, r3, #21
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	183b      	adds	r3, r7, r0
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023dc:	4b3c      	ldr	r3, [pc, #240]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	0049      	lsls	r1, r1, #1
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023ea:	f7fe fc45 	bl	8000c78 <HAL_GetTick>
 80023ee:	0003      	movs	r3, r0
 80023f0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023f2:	e00b      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f4:	f7fe fc40 	bl	8000c78 <HAL_GetTick>
 80023f8:	0002      	movs	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d904      	bls.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002402:	2313      	movs	r3, #19
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2203      	movs	r2, #3
 8002408:	701a      	strb	r2, [r3, #0]
        break;
 800240a:	e005      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800240c:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4013      	ands	r3, r2
 8002416:	d0ed      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002418:	2313      	movs	r3, #19
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d15e      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002422:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002424:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002426:	23c0      	movs	r3, #192	; 0xc0
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4013      	ands	r3, r2
 800242c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d019      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	429a      	cmp	r2, r3
 800243c:	d014      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002444:	4013      	ands	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002448:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800244a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0249      	lsls	r1, r1, #9
 8002452:	430a      	orrs	r2, r1
 8002454:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002458:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800245c:	491e      	ldr	r1, [pc, #120]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800245e:	400a      	ands	r2, r1
 8002460:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2201      	movs	r2, #1
 800246c:	4013      	ands	r3, r2
 800246e:	d016      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fc02 	bl	8000c78 <HAL_GetTick>
 8002474:	0003      	movs	r3, r0
 8002476:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002478:	e00c      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fe fbfd 	bl	8000c78 <HAL_GetTick>
 800247e:	0002      	movs	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	4a15      	ldr	r2, [pc, #84]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d904      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800248a:	2313      	movs	r3, #19
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	2203      	movs	r2, #3
 8002490:	701a      	strb	r2, [r3, #0]
            break;
 8002492:	e004      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d0ed      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800249e:	2313      	movs	r3, #19
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80024bc:	e016      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024be:	2312      	movs	r3, #18
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2213      	movs	r2, #19
 80024c4:	18ba      	adds	r2, r7, r2
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	e00f      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	fffffcff 	.word	0xfffffcff
 80024d8:	fffeffff 	.word	0xfffeffff
 80024dc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e0:	2312      	movs	r3, #18
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2213      	movs	r2, #19
 80024e6:	18ba      	adds	r2, r7, r2
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ec:	2311      	movs	r3, #17
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4bb6      	ldr	r3, [pc, #728]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024fa:	4bb5      	ldr	r3, [pc, #724]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024fc:	49b5      	ldr	r1, [pc, #724]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80024fe:	400a      	ands	r2, r1
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250c:	4bb0      	ldr	r3, [pc, #704]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	2203      	movs	r2, #3
 8002512:	4393      	bics	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4bad      	ldr	r3, [pc, #692]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251c:	430a      	orrs	r2, r1
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800252a:	4ba9      	ldr	r3, [pc, #676]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	220c      	movs	r2, #12
 8002530:	4393      	bics	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	4ba5      	ldr	r3, [pc, #660]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253a:	430a      	orrs	r2, r1
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2204      	movs	r2, #4
 8002544:	4013      	ands	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002548:	4ba1      	ldr	r3, [pc, #644]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	2230      	movs	r2, #48	; 0x30
 800254e:	4393      	bics	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b9e      	ldr	r3, [pc, #632]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002558:	430a      	orrs	r2, r1
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2210      	movs	r2, #16
 8002562:	4013      	ands	r3, r2
 8002564:	d009      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002566:	4b9a      	ldr	r3, [pc, #616]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	4a9b      	ldr	r2, [pc, #620]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	4b96      	ldr	r3, [pc, #600]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002576:	430a      	orrs	r2, r1
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	4013      	ands	r3, r2
 8002584:	d009      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002586:	4b92      	ldr	r3, [pc, #584]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	4a94      	ldr	r2, [pc, #592]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800258c:	4013      	ands	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	4b8e      	ldr	r3, [pc, #568]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002596:	430a      	orrs	r2, r1
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a6:	4b8a      	ldr	r3, [pc, #552]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	4a8d      	ldr	r2, [pc, #564]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025b4:	4b86      	ldr	r3, [pc, #536]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b6:	430a      	orrs	r2, r1
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4013      	ands	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	4a86      	ldr	r2, [pc, #536]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d4:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2220      	movs	r2, #32
 80025e0:	4013      	ands	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e4:	4b7a      	ldr	r3, [pc, #488]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	4a7f      	ldr	r2, [pc, #508]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	4b77      	ldr	r3, [pc, #476]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2240      	movs	r2, #64	; 0x40
 80025fe:	4013      	ands	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002602:	4b73      	ldr	r3, [pc, #460]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	4a79      	ldr	r2, [pc, #484]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002608:	4013      	ands	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002612:	430a      	orrs	r2, r1
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	01db      	lsls	r3, r3, #7
 800261e:	4013      	ands	r3, r2
 8002620:	d015      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002622:	4b6b      	ldr	r3, [pc, #428]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	0899      	lsrs	r1, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262e:	4b68      	ldr	r3, [pc, #416]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002630:	430a      	orrs	r2, r1
 8002632:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	05db      	lsls	r3, r3, #23
 800263c:	429a      	cmp	r2, r3
 800263e:	d106      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002640:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	4b62      	ldr	r3, [pc, #392]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0249      	lsls	r1, r1, #9
 800264a:	430a      	orrs	r2, r1
 800264c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	031b      	lsls	r3, r3, #12
 8002656:	4013      	ands	r3, r2
 8002658:	d009      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	4393      	bics	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800266a:	430a      	orrs	r2, r1
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	039b      	lsls	r3, r3, #14
 8002676:	4013      	ands	r3, r2
 8002678:	d016      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800267a:	4b55      	ldr	r3, [pc, #340]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	4a5c      	ldr	r2, [pc, #368]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002680:	4013      	ands	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002688:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800268a:	430a      	orrs	r2, r1
 800268c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	03db      	lsls	r3, r3, #15
 8002696:	429a      	cmp	r2, r3
 8002698:	d106      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800269a:	4b4d      	ldr	r3, [pc, #308]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026a0:	2180      	movs	r1, #128	; 0x80
 80026a2:	0449      	lsls	r1, r1, #17
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	03db      	lsls	r3, r3, #15
 80026b0:	4013      	ands	r3, r2
 80026b2:	d016      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026b4:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	4a4e      	ldr	r2, [pc, #312]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	0019      	movs	r1, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026c2:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026c4:	430a      	orrs	r2, r1
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	045b      	lsls	r3, r3, #17
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d106      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026d4:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	0449      	lsls	r1, r1, #17
 80026de:	430a      	orrs	r2, r1
 80026e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4013      	ands	r3, r2
 80026ec:	d014      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026ee:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	2203      	movs	r2, #3
 80026f4:	4393      	bics	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026fe:	430a      	orrs	r2, r1
 8002700:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d106      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	0249      	lsls	r1, r1, #9
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	019b      	lsls	r3, r3, #6
 8002720:	4013      	ands	r3, r2
 8002722:	d014      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	220c      	movs	r2, #12
 800272a:	4393      	bics	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002732:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002734:	430a      	orrs	r2, r1
 8002736:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2b04      	cmp	r3, #4
 800273e:	d106      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	0249      	lsls	r1, r1, #9
 800274a:	430a      	orrs	r2, r1
 800274c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	045b      	lsls	r3, r3, #17
 8002756:	4013      	ands	r3, r2
 8002758:	d016      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800276a:	430a      	orrs	r2, r1
 800276c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	019b      	lsls	r3, r3, #6
 8002776:	429a      	cmp	r2, r3
 8002778:	d106      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0449      	lsls	r1, r1, #17
 8002784:	430a      	orrs	r2, r1
 8002786:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	049b      	lsls	r3, r3, #18
 8002790:	4013      	ands	r3, r2
 8002792:	d016      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027a4:	430a      	orrs	r2, r1
 80027a6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d106      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027ba:	2180      	movs	r1, #128	; 0x80
 80027bc:	0449      	lsls	r1, r1, #17
 80027be:	430a      	orrs	r2, r1
 80027c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80027c2:	2312      	movs	r3, #18
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	781b      	ldrb	r3, [r3, #0]
}
 80027c8:	0018      	movs	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b006      	add	sp, #24
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	efffffff 	.word	0xefffffff
 80027d8:	fffff3ff 	.word	0xfffff3ff
 80027dc:	fffffcff 	.word	0xfffffcff
 80027e0:	fff3ffff 	.word	0xfff3ffff
 80027e4:	ffcfffff 	.word	0xffcfffff
 80027e8:	ffffcfff 	.word	0xffffcfff
 80027ec:	ffff3fff 	.word	0xffff3fff
 80027f0:	ffbfffff 	.word	0xffbfffff
 80027f4:	feffffff 	.word	0xfeffffff

080027f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e046      	b.n	8002898 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2284      	movs	r2, #132	; 0x84
 800280e:	589b      	ldr	r3, [r3, r2]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0018      	movs	r0, r3
 8002820:	f7fe f87e 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2284      	movs	r2, #132	; 0x84
 8002828:	2124      	movs	r1, #36	; 0x24
 800282a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2101      	movs	r1, #1
 8002838:	438a      	bics	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fc8a 	bl	8003158 <UART_SetConfig>
 8002844:	0003      	movs	r3, r0
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e024      	b.n	8002898 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f000 ffd3 	bl	8003804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	490d      	ldr	r1, [pc, #52]	; (80028a0 <HAL_UART_Init+0xa8>)
 800286a:	400a      	ands	r2, r1
 800286c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	212a      	movs	r1, #42	; 0x2a
 800287a:	438a      	bics	r2, r1
 800287c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0018      	movs	r0, r3
 8002892:	f001 f86b 	bl	800396c <UART_CheckIdleState>
 8002896:	0003      	movs	r3, r0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	ffffb7ff 	.word	0xffffb7ff

080028a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	1dbb      	adds	r3, r7, #6
 80028b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2284      	movs	r2, #132	; 0x84
 80028b8:	589b      	ldr	r3, [r3, r2]
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d000      	beq.n	80028c0 <HAL_UART_Transmit+0x1c>
 80028be:	e097      	b.n	80029f0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_UART_Transmit+0x2a>
 80028c6:	1dbb      	adds	r3, r7, #6
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e08f      	b.n	80029f2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	015b      	lsls	r3, r3, #5
 80028da:	429a      	cmp	r2, r3
 80028dc:	d109      	bne.n	80028f2 <HAL_UART_Transmit+0x4e>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2201      	movs	r2, #1
 80028ea:	4013      	ands	r3, r2
 80028ec:	d001      	beq.n	80028f2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07f      	b.n	80029f2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2280      	movs	r2, #128	; 0x80
 80028f6:	5c9b      	ldrb	r3, [r3, r2]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_UART_Transmit+0x5c>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e078      	b.n	80029f2 <HAL_UART_Transmit+0x14e>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	2101      	movs	r1, #1
 8002906:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	228c      	movs	r2, #140	; 0x8c
 800290c:	2100      	movs	r1, #0
 800290e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2284      	movs	r2, #132	; 0x84
 8002914:	2121      	movs	r1, #33	; 0x21
 8002916:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002918:	f7fe f9ae 	bl	8000c78 <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1dba      	adds	r2, r7, #6
 8002924:	2154      	movs	r1, #84	; 0x54
 8002926:	8812      	ldrh	r2, [r2, #0]
 8002928:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1dba      	adds	r2, r7, #6
 800292e:	2156      	movs	r1, #86	; 0x56
 8002930:	8812      	ldrh	r2, [r2, #0]
 8002932:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	015b      	lsls	r3, r3, #5
 800293c:	429a      	cmp	r2, r3
 800293e:	d108      	bne.n	8002952 <HAL_UART_Transmit+0xae>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	e003      	b.n	800295a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002962:	e02c      	b.n	80029be <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	0013      	movs	r3, r2
 800296e:	2200      	movs	r2, #0
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	f001 f845 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d001      	beq.n	800297e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e039      	b.n	80029f2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	001a      	movs	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	05d2      	lsls	r2, r2, #23
 8002990:	0dd2      	lsrs	r2, r2, #23
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	3302      	adds	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e007      	b.n	80029ac <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3301      	adds	r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2256      	movs	r2, #86	; 0x56
 80029b0:	5a9b      	ldrh	r3, [r3, r2]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b299      	uxth	r1, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2256      	movs	r2, #86	; 0x56
 80029bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2256      	movs	r2, #86	; 0x56
 80029c2:	5a9b      	ldrh	r3, [r3, r2]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1cc      	bne.n	8002964 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	0013      	movs	r3, r2
 80029d4:	2200      	movs	r2, #0
 80029d6:	2140      	movs	r1, #64	; 0x40
 80029d8:	f001 f812 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e006      	b.n	80029f2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2284      	movs	r2, #132	; 0x84
 80029e8:	2120      	movs	r1, #32
 80029ea:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b008      	add	sp, #32
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	1dbb      	adds	r3, r7, #6
 8002a08:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2288      	movs	r2, #136	; 0x88
 8002a0e:	589b      	ldr	r3, [r3, r2]
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d15a      	bne.n	8002aca <HAL_UART_Receive_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_UART_Receive_DMA+0x26>
 8002a1a:	1dbb      	adds	r3, r7, #6
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e052      	b.n	8002acc <HAL_UART_Receive_DMA+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	015b      	lsls	r3, r3, #5
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d109      	bne.n	8002a46 <HAL_UART_Receive_DMA+0x4a>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d001      	beq.n	8002a46 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e042      	b.n	8002acc <HAL_UART_Receive_DMA+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	5c9b      	ldrb	r3, [r3, r2]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_UART_Receive_DMA+0x58>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e03b      	b.n	8002acc <HAL_UART_Receive_DMA+0xd0>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	2101      	movs	r1, #1
 8002a5a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_UART_Receive_DMA+0xd8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d025      	beq.n	8002ab8 <HAL_UART_Receive_DMA+0xbc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_UART_Receive_DMA+0xdc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d020      	beq.n	8002ab8 <HAL_UART_Receive_DMA+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	4013      	ands	r3, r2
 8002a82:	d019      	beq.n	8002ab8 <HAL_UART_Receive_DMA+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a84:	f3ef 8310 	mrs	r3, PRIMASK
 8002a88:	613b      	str	r3, [r7, #16]
  return(result);
 8002a8a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	04c9      	lsls	r1, r1, #19
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f383 8810 	msr	PRIMASK, r3
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ab8:	1dbb      	adds	r3, r7, #6
 8002aba:	881a      	ldrh	r2, [r3, #0]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f001 f865 	bl	8003b90 <UART_Start_Receive_DMA>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	e000      	b.n	8002acc <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b008      	add	sp, #32
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40008000 	.word	0x40008000
 8002ad8:	40008400 	.word	0x40008400

08002adc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002adc:	b5b0      	push	{r4, r5, r7, lr}
 8002ade:	b0aa      	sub	sp, #168	; 0xa8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	22a4      	movs	r2, #164	; 0xa4
 8002aec:	18b9      	adds	r1, r7, r2
 8002aee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	20a0      	movs	r0, #160	; 0xa0
 8002af8:	1839      	adds	r1, r7, r0
 8002afa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	249c      	movs	r4, #156	; 0x9c
 8002b04:	1939      	adds	r1, r7, r4
 8002b06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b08:	0011      	movs	r1, r2
 8002b0a:	18bb      	adds	r3, r7, r2
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4aa0      	ldr	r2, [pc, #640]	; (8002d90 <HAL_UART_IRQHandler+0x2b4>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	2298      	movs	r2, #152	; 0x98
 8002b14:	18bd      	adds	r5, r7, r2
 8002b16:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002b18:	18bb      	adds	r3, r7, r2
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d11a      	bne.n	8002b56 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2220      	movs	r2, #32
 8002b26:	4013      	ands	r3, r2
 8002b28:	d015      	beq.n	8002b56 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b2a:	183b      	adds	r3, r7, r0
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	4013      	ands	r3, r2
 8002b32:	d105      	bne.n	8002b40 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	055b      	lsls	r3, r3, #21
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d00a      	beq.n	8002b56 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d100      	bne.n	8002b4a <HAL_UART_IRQHandler+0x6e>
 8002b48:	e2cf      	b.n	80030ea <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	0010      	movs	r0, r2
 8002b52:	4798      	blx	r3
      }
      return;
 8002b54:	e2c9      	b.n	80030ea <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b56:	2398      	movs	r3, #152	; 0x98
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d100      	bne.n	8002b62 <HAL_UART_IRQHandler+0x86>
 8002b60:	e11e      	b.n	8002da0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002b62:	239c      	movs	r3, #156	; 0x9c
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a8a      	ldr	r2, [pc, #552]	; (8002d94 <HAL_UART_IRQHandler+0x2b8>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002b6e:	23a0      	movs	r3, #160	; 0xa0
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a88      	ldr	r2, [pc, #544]	; (8002d98 <HAL_UART_IRQHandler+0x2bc>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	d100      	bne.n	8002b7c <HAL_UART_IRQHandler+0xa0>
 8002b7a:	e111      	b.n	8002da0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b7c:	23a4      	movs	r3, #164	; 0xa4
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4013      	ands	r3, r2
 8002b86:	d012      	beq.n	8002bae <HAL_UART_IRQHandler+0xd2>
 8002b88:	23a0      	movs	r3, #160	; 0xa0
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4013      	ands	r3, r2
 8002b94:	d00b      	beq.n	8002bae <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	228c      	movs	r2, #140	; 0x8c
 8002ba2:	589b      	ldr	r3, [r3, r2]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	218c      	movs	r1, #140	; 0x8c
 8002bac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bae:	23a4      	movs	r3, #164	; 0xa4
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d011      	beq.n	8002bde <HAL_UART_IRQHandler+0x102>
 8002bba:	239c      	movs	r3, #156	; 0x9c
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d00b      	beq.n	8002bde <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	228c      	movs	r2, #140	; 0x8c
 8002bd2:	589b      	ldr	r3, [r3, r2]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	218c      	movs	r1, #140	; 0x8c
 8002bdc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bde:	23a4      	movs	r3, #164	; 0xa4
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2204      	movs	r2, #4
 8002be6:	4013      	ands	r3, r2
 8002be8:	d011      	beq.n	8002c0e <HAL_UART_IRQHandler+0x132>
 8002bea:	239c      	movs	r3, #156	; 0x9c
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d00b      	beq.n	8002c0e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	228c      	movs	r2, #140	; 0x8c
 8002c02:	589b      	ldr	r3, [r3, r2]
 8002c04:	2202      	movs	r2, #2
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	218c      	movs	r1, #140	; 0x8c
 8002c0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c0e:	23a4      	movs	r3, #164	; 0xa4
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2208      	movs	r2, #8
 8002c16:	4013      	ands	r3, r2
 8002c18:	d017      	beq.n	8002c4a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c1a:	23a0      	movs	r3, #160	; 0xa0
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2220      	movs	r2, #32
 8002c22:	4013      	ands	r3, r2
 8002c24:	d105      	bne.n	8002c32 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002c26:	239c      	movs	r3, #156	; 0x9c
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a59      	ldr	r2, [pc, #356]	; (8002d94 <HAL_UART_IRQHandler+0x2b8>)
 8002c2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c30:	d00b      	beq.n	8002c4a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2208      	movs	r2, #8
 8002c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	228c      	movs	r2, #140	; 0x8c
 8002c3e:	589b      	ldr	r3, [r3, r2]
 8002c40:	2208      	movs	r2, #8
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	218c      	movs	r1, #140	; 0x8c
 8002c48:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c4a:	23a4      	movs	r3, #164	; 0xa4
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	4013      	ands	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_UART_IRQHandler+0x1a4>
 8002c58:	23a0      	movs	r3, #160	; 0xa0
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	04db      	lsls	r3, r3, #19
 8002c62:	4013      	ands	r3, r2
 8002c64:	d00c      	beq.n	8002c80 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	228c      	movs	r2, #140	; 0x8c
 8002c74:	589b      	ldr	r3, [r3, r2]
 8002c76:	2220      	movs	r2, #32
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	218c      	movs	r1, #140	; 0x8c
 8002c7e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	228c      	movs	r2, #140	; 0x8c
 8002c84:	589b      	ldr	r3, [r3, r2]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d100      	bne.n	8002c8c <HAL_UART_IRQHandler+0x1b0>
 8002c8a:	e230      	b.n	80030ee <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c8c:	23a4      	movs	r3, #164	; 0xa4
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2220      	movs	r2, #32
 8002c94:	4013      	ands	r3, r2
 8002c96:	d015      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c98:	23a0      	movs	r3, #160	; 0xa0
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d106      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ca4:	239c      	movs	r3, #156	; 0x9c
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	055b      	lsls	r3, r3, #21
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d008      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	228c      	movs	r2, #140	; 0x8c
 8002cc8:	589b      	ldr	r3, [r3, r2]
 8002cca:	2194      	movs	r1, #148	; 0x94
 8002ccc:	187a      	adds	r2, r7, r1
 8002cce:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d004      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2228      	movs	r2, #40	; 0x28
 8002ce4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ce6:	d047      	beq.n	8002d78 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 f838 	bl	8003d60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d137      	bne.n	8002d6e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002d02:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d06:	2090      	movs	r0, #144	; 0x90
 8002d08:	183a      	adds	r2, r7, r0
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2140      	movs	r1, #64	; 0x40
 8002d24:	438a      	bics	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	183b      	adds	r3, r7, r0
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d30:	f383 8810 	msr	PRIMASK, r3
}
 8002d34:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d012      	beq.n	8002d64 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_UART_IRQHandler+0x2c0>)
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7fe fa48 	bl	80011e0 <HAL_DMA_Abort_IT>
 8002d50:	1e03      	subs	r3, r0, #0
 8002d52:	d01a      	beq.n	8002d8a <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5e:	0018      	movs	r0, r3
 8002d60:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d62:	e012      	b.n	8002d8a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 f9e2 	bl	8003130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	e00d      	b.n	8002d8a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 f9dd 	bl	8003130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d76:	e008      	b.n	8002d8a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f9d8 	bl	8003130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	228c      	movs	r2, #140	; 0x8c
 8002d84:	2100      	movs	r1, #0
 8002d86:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d88:	e1b1      	b.n	80030ee <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d8a:	46c0      	nop			; (mov r8, r8)
    return;
 8002d8c:	e1af      	b.n	80030ee <HAL_UART_IRQHandler+0x612>
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	0000080f 	.word	0x0000080f
 8002d94:	10000001 	.word	0x10000001
 8002d98:	04000120 	.word	0x04000120
 8002d9c:	08004017 	.word	0x08004017

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d000      	beq.n	8002daa <HAL_UART_IRQHandler+0x2ce>
 8002da8:	e135      	b.n	8003016 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002daa:	23a4      	movs	r3, #164	; 0xa4
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2210      	movs	r2, #16
 8002db2:	4013      	ands	r3, r2
 8002db4:	d100      	bne.n	8002db8 <HAL_UART_IRQHandler+0x2dc>
 8002db6:	e12e      	b.n	8003016 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002db8:	23a0      	movs	r3, #160	; 0xa0
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x2ea>
 8002dc4:	e127      	b.n	8003016 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2210      	movs	r2, #16
 8002dcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2240      	movs	r2, #64	; 0x40
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d000      	beq.n	8002dde <HAL_UART_IRQHandler+0x302>
 8002ddc:	e09e      	b.n	8002f1c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	217e      	movs	r1, #126	; 0x7e
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d100      	bne.n	8002df6 <HAL_UART_IRQHandler+0x31a>
 8002df4:	e17d      	b.n	80030f2 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	225c      	movs	r2, #92	; 0x5c
 8002dfa:	5a9b      	ldrh	r3, [r3, r2]
 8002dfc:	187a      	adds	r2, r7, r1
 8002dfe:	8812      	ldrh	r2, [r2, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d300      	bcc.n	8002e06 <HAL_UART_IRQHandler+0x32a>
 8002e04:	e175      	b.n	80030f2 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	187a      	adds	r2, r7, r1
 8002e0a:	215e      	movs	r1, #94	; 0x5e
 8002e0c:	8812      	ldrh	r2, [r2, #0]
 8002e0e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d16f      	bne.n	8002efe <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e26:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e28:	2301      	movs	r3, #1
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2e:	f383 8810 	msr	PRIMASK, r3
}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	49b1      	ldr	r1, [pc, #708]	; (8003104 <HAL_UART_IRQHandler+0x628>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	f383 8810 	msr	PRIMASK, r3
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e50:	f3ef 8310 	mrs	r3, PRIMASK
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e58:	677b      	str	r3, [r7, #116]	; 0x74
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e60:	f383 8810 	msr	PRIMASK, r3
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	438a      	bics	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7c:	f383 8810 	msr	PRIMASK, r3
}
 8002e80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e82:	f3ef 8310 	mrs	r3, PRIMASK
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2140      	movs	r1, #64	; 0x40
 8002ea4:	438a      	bics	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eaa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eae:	f383 8810 	msr	PRIMASK, r3
}
 8002eb2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2288      	movs	r2, #136	; 0x88
 8002eb8:	2120      	movs	r1, #32
 8002eba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ecc:	2301      	movs	r3, #1
 8002ece:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed2:	f383 8810 	msr	PRIMASK, r3
}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2110      	movs	r1, #16
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eee:	f383 8810 	msr	PRIMASK, r3
}
 8002ef2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7fe f911 	bl	8001120 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	225c      	movs	r2, #92	; 0x5c
 8002f02:	5a9a      	ldrh	r2, [r3, r2]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	215e      	movs	r1, #94	; 0x5e
 8002f08:	5a5b      	ldrh	r3, [r3, r1]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 f913 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f1a:	e0ea      	b.n	80030f2 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	225c      	movs	r2, #92	; 0x5c
 8002f20:	5a99      	ldrh	r1, [r3, r2]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	225e      	movs	r2, #94	; 0x5e
 8002f26:	5a9b      	ldrh	r3, [r3, r2]
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	208e      	movs	r0, #142	; 0x8e
 8002f2c:	183b      	adds	r3, r7, r0
 8002f2e:	1a8a      	subs	r2, r1, r2
 8002f30:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	225e      	movs	r2, #94	; 0x5e
 8002f36:	5a9b      	ldrh	r3, [r3, r2]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d100      	bne.n	8002f40 <HAL_UART_IRQHandler+0x464>
 8002f3e:	e0da      	b.n	80030f6 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002f40:	183b      	adds	r3, r7, r0
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d100      	bne.n	8002f4a <HAL_UART_IRQHandler+0x46e>
 8002f48:	e0d5      	b.n	80030f6 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f50:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f52:	2488      	movs	r4, #136	; 0x88
 8002f54:	193a      	adds	r2, r7, r4
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	2301      	movs	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f383 8810 	msr	PRIMASK, r3
}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4966      	ldr	r1, [pc, #408]	; (8003108 <HAL_UART_IRQHandler+0x62c>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f383 8810 	msr	PRIMASK, r3
}
 8002f80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f82:	f3ef 8310 	mrs	r3, PRIMASK
 8002f86:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f88:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f8a:	2484      	movs	r4, #132	; 0x84
 8002f8c:	193a      	adds	r2, r7, r4
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	2301      	movs	r3, #1
 8002f92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f383 8810 	msr	PRIMASK, r3
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4959      	ldr	r1, [pc, #356]	; (800310c <HAL_UART_IRQHandler+0x630>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	193b      	adds	r3, r7, r4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	f383 8810 	msr	PRIMASK, r3
}
 8002fb8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2288      	movs	r2, #136	; 0x88
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fce:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd6:	2480      	movs	r4, #128	; 0x80
 8002fd8:	193a      	adds	r2, r7, r4
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	2301      	movs	r3, #1
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2110      	movs	r1, #16
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	f383 8810 	msr	PRIMASK, r3
}
 8003004:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003006:	183b      	adds	r3, r7, r0
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0011      	movs	r1, r2
 800300e:	0018      	movs	r0, r3
 8003010:	f000 f896 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003014:	e06f      	b.n	80030f6 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003016:	23a4      	movs	r3, #164	; 0xa4
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	035b      	lsls	r3, r3, #13
 8003020:	4013      	ands	r3, r2
 8003022:	d010      	beq.n	8003046 <HAL_UART_IRQHandler+0x56a>
 8003024:	239c      	movs	r3, #156	; 0x9c
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	03db      	lsls	r3, r3, #15
 800302e:	4013      	ands	r3, r2
 8003030:	d009      	beq.n	8003046 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	0352      	lsls	r2, r2, #13
 800303a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0018      	movs	r0, r3
 8003040:	f001 f82c 	bl	800409c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003044:	e05a      	b.n	80030fc <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003046:	23a4      	movs	r3, #164	; 0xa4
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2280      	movs	r2, #128	; 0x80
 800304e:	4013      	ands	r3, r2
 8003050:	d016      	beq.n	8003080 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003052:	23a0      	movs	r3, #160	; 0xa0
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	4013      	ands	r3, r2
 800305c:	d106      	bne.n	800306c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800305e:	239c      	movs	r3, #156	; 0x9c
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	041b      	lsls	r3, r3, #16
 8003068:	4013      	ands	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003070:	2b00      	cmp	r3, #0
 8003072:	d042      	beq.n	80030fa <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	0010      	movs	r0, r2
 800307c:	4798      	blx	r3
    }
    return;
 800307e:	e03c      	b.n	80030fa <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003080:	23a4      	movs	r3, #164	; 0xa4
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2240      	movs	r2, #64	; 0x40
 8003088:	4013      	ands	r3, r2
 800308a:	d00a      	beq.n	80030a2 <HAL_UART_IRQHandler+0x5c6>
 800308c:	23a0      	movs	r3, #160	; 0xa0
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	4013      	ands	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 ffd2 	bl	8004044 <UART_EndTransmit_IT>
    return;
 80030a0:	e02c      	b.n	80030fc <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80030a2:	23a4      	movs	r3, #164	; 0xa4
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	4013      	ands	r3, r2
 80030ae:	d00b      	beq.n	80030c8 <HAL_UART_IRQHandler+0x5ec>
 80030b0:	23a0      	movs	r3, #160	; 0xa0
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	05db      	lsls	r3, r3, #23
 80030ba:	4013      	ands	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 fffb 	bl	80040bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030c6:	e019      	b.n	80030fc <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80030c8:	23a4      	movs	r3, #164	; 0xa4
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	045b      	lsls	r3, r3, #17
 80030d2:	4013      	ands	r3, r2
 80030d4:	d012      	beq.n	80030fc <HAL_UART_IRQHandler+0x620>
 80030d6:	23a0      	movs	r3, #160	; 0xa0
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	da0d      	bge.n	80030fc <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 ffe2 	bl	80040ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030e8:	e008      	b.n	80030fc <HAL_UART_IRQHandler+0x620>
      return;
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	e006      	b.n	80030fc <HAL_UART_IRQHandler+0x620>
    return;
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	e004      	b.n	80030fc <HAL_UART_IRQHandler+0x620>
      return;
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	e002      	b.n	80030fc <HAL_UART_IRQHandler+0x620>
      return;
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	e000      	b.n	80030fc <HAL_UART_IRQHandler+0x620>
    return;
 80030fa:	46c0      	nop			; (mov r8, r8)
  }
}
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b02a      	add	sp, #168	; 0xa8
 8003100:	bdb0      	pop	{r4, r5, r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	fffffeff 	.word	0xfffffeff
 8003108:	fffffedf 	.word	0xfffffedf
 800310c:	effffffe 	.word	0xeffffffe

08003110 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	000a      	movs	r2, r1
 800314a:	1cbb      	adds	r3, r7, #2
 800314c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	b002      	add	sp, #8
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	b5b0      	push	{r4, r5, r7, lr}
 800315a:	b090      	sub	sp, #64	; 0x40
 800315c:	af00      	add	r7, sp, #0
 800315e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003160:	231a      	movs	r3, #26
 8003162:	2220      	movs	r2, #32
 8003164:	189b      	adds	r3, r3, r2
 8003166:	19db      	adds	r3, r3, r7
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	431a      	orrs	r2, r3
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4313      	orrs	r3, r2
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4ac1      	ldr	r2, [pc, #772]	; (8003490 <UART_SetConfig+0x338>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003196:	430b      	orrs	r3, r1
 8003198:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4abc      	ldr	r2, [pc, #752]	; (8003494 <UART_SetConfig+0x33c>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	0018      	movs	r0, r3
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	68d9      	ldr	r1, [r3, #12]
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	0003      	movs	r3, r0
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4ab6      	ldr	r2, [pc, #728]	; (8003498 <UART_SetConfig+0x340>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d009      	beq.n	80031d8 <UART_SetConfig+0x80>
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4ab4      	ldr	r2, [pc, #720]	; (800349c <UART_SetConfig+0x344>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031d4:	4313      	orrs	r3, r2
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4ab0      	ldr	r2, [pc, #704]	; (80034a0 <UART_SetConfig+0x348>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ea:	430b      	orrs	r3, r1
 80031ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	220f      	movs	r2, #15
 80031f6:	4393      	bics	r3, r2
 80031f8:	0018      	movs	r0, r3
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	0003      	movs	r3, r0
 8003204:	430b      	orrs	r3, r1
 8003206:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4aa5      	ldr	r2, [pc, #660]	; (80034a4 <UART_SetConfig+0x34c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d131      	bne.n	8003276 <UART_SetConfig+0x11e>
 8003212:	4ba5      	ldr	r3, [pc, #660]	; (80034a8 <UART_SetConfig+0x350>)
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	2203      	movs	r2, #3
 8003218:	4013      	ands	r3, r2
 800321a:	2b03      	cmp	r3, #3
 800321c:	d01d      	beq.n	800325a <UART_SetConfig+0x102>
 800321e:	d823      	bhi.n	8003268 <UART_SetConfig+0x110>
 8003220:	2b02      	cmp	r3, #2
 8003222:	d00c      	beq.n	800323e <UART_SetConfig+0xe6>
 8003224:	d820      	bhi.n	8003268 <UART_SetConfig+0x110>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <UART_SetConfig+0xd8>
 800322a:	2b01      	cmp	r3, #1
 800322c:	d00e      	beq.n	800324c <UART_SetConfig+0xf4>
 800322e:	e01b      	b.n	8003268 <UART_SetConfig+0x110>
 8003230:	231b      	movs	r3, #27
 8003232:	2220      	movs	r2, #32
 8003234:	189b      	adds	r3, r3, r2
 8003236:	19db      	adds	r3, r3, r7
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e154      	b.n	80034e8 <UART_SetConfig+0x390>
 800323e:	231b      	movs	r3, #27
 8003240:	2220      	movs	r2, #32
 8003242:	189b      	adds	r3, r3, r2
 8003244:	19db      	adds	r3, r3, r7
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e14d      	b.n	80034e8 <UART_SetConfig+0x390>
 800324c:	231b      	movs	r3, #27
 800324e:	2220      	movs	r2, #32
 8003250:	189b      	adds	r3, r3, r2
 8003252:	19db      	adds	r3, r3, r7
 8003254:	2204      	movs	r2, #4
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e146      	b.n	80034e8 <UART_SetConfig+0x390>
 800325a:	231b      	movs	r3, #27
 800325c:	2220      	movs	r2, #32
 800325e:	189b      	adds	r3, r3, r2
 8003260:	19db      	adds	r3, r3, r7
 8003262:	2208      	movs	r2, #8
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e13f      	b.n	80034e8 <UART_SetConfig+0x390>
 8003268:	231b      	movs	r3, #27
 800326a:	2220      	movs	r2, #32
 800326c:	189b      	adds	r3, r3, r2
 800326e:	19db      	adds	r3, r3, r7
 8003270:	2210      	movs	r2, #16
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e138      	b.n	80034e8 <UART_SetConfig+0x390>
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a8c      	ldr	r2, [pc, #560]	; (80034ac <UART_SetConfig+0x354>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d131      	bne.n	80032e4 <UART_SetConfig+0x18c>
 8003280:	4b89      	ldr	r3, [pc, #548]	; (80034a8 <UART_SetConfig+0x350>)
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	220c      	movs	r2, #12
 8003286:	4013      	ands	r3, r2
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d01d      	beq.n	80032c8 <UART_SetConfig+0x170>
 800328c:	d823      	bhi.n	80032d6 <UART_SetConfig+0x17e>
 800328e:	2b08      	cmp	r3, #8
 8003290:	d00c      	beq.n	80032ac <UART_SetConfig+0x154>
 8003292:	d820      	bhi.n	80032d6 <UART_SetConfig+0x17e>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <UART_SetConfig+0x146>
 8003298:	2b04      	cmp	r3, #4
 800329a:	d00e      	beq.n	80032ba <UART_SetConfig+0x162>
 800329c:	e01b      	b.n	80032d6 <UART_SetConfig+0x17e>
 800329e:	231b      	movs	r3, #27
 80032a0:	2220      	movs	r2, #32
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	19db      	adds	r3, r3, r7
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e11d      	b.n	80034e8 <UART_SetConfig+0x390>
 80032ac:	231b      	movs	r3, #27
 80032ae:	2220      	movs	r2, #32
 80032b0:	189b      	adds	r3, r3, r2
 80032b2:	19db      	adds	r3, r3, r7
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e116      	b.n	80034e8 <UART_SetConfig+0x390>
 80032ba:	231b      	movs	r3, #27
 80032bc:	2220      	movs	r2, #32
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	19db      	adds	r3, r3, r7
 80032c2:	2204      	movs	r2, #4
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e10f      	b.n	80034e8 <UART_SetConfig+0x390>
 80032c8:	231b      	movs	r3, #27
 80032ca:	2220      	movs	r2, #32
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	19db      	adds	r3, r3, r7
 80032d0:	2208      	movs	r2, #8
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	e108      	b.n	80034e8 <UART_SetConfig+0x390>
 80032d6:	231b      	movs	r3, #27
 80032d8:	2220      	movs	r2, #32
 80032da:	189b      	adds	r3, r3, r2
 80032dc:	19db      	adds	r3, r3, r7
 80032de:	2210      	movs	r2, #16
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e101      	b.n	80034e8 <UART_SetConfig+0x390>
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a71      	ldr	r2, [pc, #452]	; (80034b0 <UART_SetConfig+0x358>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d131      	bne.n	8003352 <UART_SetConfig+0x1fa>
 80032ee:	4b6e      	ldr	r3, [pc, #440]	; (80034a8 <UART_SetConfig+0x350>)
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	2230      	movs	r2, #48	; 0x30
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b30      	cmp	r3, #48	; 0x30
 80032f8:	d01d      	beq.n	8003336 <UART_SetConfig+0x1de>
 80032fa:	d823      	bhi.n	8003344 <UART_SetConfig+0x1ec>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d00c      	beq.n	800331a <UART_SetConfig+0x1c2>
 8003300:	d820      	bhi.n	8003344 <UART_SetConfig+0x1ec>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <UART_SetConfig+0x1b4>
 8003306:	2b10      	cmp	r3, #16
 8003308:	d00e      	beq.n	8003328 <UART_SetConfig+0x1d0>
 800330a:	e01b      	b.n	8003344 <UART_SetConfig+0x1ec>
 800330c:	231b      	movs	r3, #27
 800330e:	2220      	movs	r2, #32
 8003310:	189b      	adds	r3, r3, r2
 8003312:	19db      	adds	r3, r3, r7
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e0e6      	b.n	80034e8 <UART_SetConfig+0x390>
 800331a:	231b      	movs	r3, #27
 800331c:	2220      	movs	r2, #32
 800331e:	189b      	adds	r3, r3, r2
 8003320:	19db      	adds	r3, r3, r7
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e0df      	b.n	80034e8 <UART_SetConfig+0x390>
 8003328:	231b      	movs	r3, #27
 800332a:	2220      	movs	r2, #32
 800332c:	189b      	adds	r3, r3, r2
 800332e:	19db      	adds	r3, r3, r7
 8003330:	2204      	movs	r2, #4
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e0d8      	b.n	80034e8 <UART_SetConfig+0x390>
 8003336:	231b      	movs	r3, #27
 8003338:	2220      	movs	r2, #32
 800333a:	189b      	adds	r3, r3, r2
 800333c:	19db      	adds	r3, r3, r7
 800333e:	2208      	movs	r2, #8
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e0d1      	b.n	80034e8 <UART_SetConfig+0x390>
 8003344:	231b      	movs	r3, #27
 8003346:	2220      	movs	r2, #32
 8003348:	189b      	adds	r3, r3, r2
 800334a:	19db      	adds	r3, r3, r7
 800334c:	2210      	movs	r2, #16
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e0ca      	b.n	80034e8 <UART_SetConfig+0x390>
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a57      	ldr	r2, [pc, #348]	; (80034b4 <UART_SetConfig+0x35c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d106      	bne.n	800336a <UART_SetConfig+0x212>
 800335c:	231b      	movs	r3, #27
 800335e:	2220      	movs	r2, #32
 8003360:	189b      	adds	r3, r3, r2
 8003362:	19db      	adds	r3, r3, r7
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e0be      	b.n	80034e8 <UART_SetConfig+0x390>
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a52      	ldr	r2, [pc, #328]	; (80034b8 <UART_SetConfig+0x360>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d106      	bne.n	8003382 <UART_SetConfig+0x22a>
 8003374:	231b      	movs	r3, #27
 8003376:	2220      	movs	r2, #32
 8003378:	189b      	adds	r3, r3, r2
 800337a:	19db      	adds	r3, r3, r7
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e0b2      	b.n	80034e8 <UART_SetConfig+0x390>
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a4d      	ldr	r2, [pc, #308]	; (80034bc <UART_SetConfig+0x364>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d106      	bne.n	800339a <UART_SetConfig+0x242>
 800338c:	231b      	movs	r3, #27
 800338e:	2220      	movs	r2, #32
 8003390:	189b      	adds	r3, r3, r2
 8003392:	19db      	adds	r3, r3, r7
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e0a6      	b.n	80034e8 <UART_SetConfig+0x390>
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a3e      	ldr	r2, [pc, #248]	; (8003498 <UART_SetConfig+0x340>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d13e      	bne.n	8003422 <UART_SetConfig+0x2ca>
 80033a4:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <UART_SetConfig+0x350>)
 80033a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033a8:	23c0      	movs	r3, #192	; 0xc0
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4013      	ands	r3, r2
 80033ae:	22c0      	movs	r2, #192	; 0xc0
 80033b0:	0112      	lsls	r2, r2, #4
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d027      	beq.n	8003406 <UART_SetConfig+0x2ae>
 80033b6:	22c0      	movs	r2, #192	; 0xc0
 80033b8:	0112      	lsls	r2, r2, #4
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d82a      	bhi.n	8003414 <UART_SetConfig+0x2bc>
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d011      	beq.n	80033ea <UART_SetConfig+0x292>
 80033c6:	2280      	movs	r2, #128	; 0x80
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d822      	bhi.n	8003414 <UART_SetConfig+0x2bc>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <UART_SetConfig+0x284>
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	00d2      	lsls	r2, r2, #3
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <UART_SetConfig+0x2a0>
 80033da:	e01b      	b.n	8003414 <UART_SetConfig+0x2bc>
 80033dc:	231b      	movs	r3, #27
 80033de:	2220      	movs	r2, #32
 80033e0:	189b      	adds	r3, r3, r2
 80033e2:	19db      	adds	r3, r3, r7
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	e07e      	b.n	80034e8 <UART_SetConfig+0x390>
 80033ea:	231b      	movs	r3, #27
 80033ec:	2220      	movs	r2, #32
 80033ee:	189b      	adds	r3, r3, r2
 80033f0:	19db      	adds	r3, r3, r7
 80033f2:	2202      	movs	r2, #2
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e077      	b.n	80034e8 <UART_SetConfig+0x390>
 80033f8:	231b      	movs	r3, #27
 80033fa:	2220      	movs	r2, #32
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	2204      	movs	r2, #4
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e070      	b.n	80034e8 <UART_SetConfig+0x390>
 8003406:	231b      	movs	r3, #27
 8003408:	2220      	movs	r2, #32
 800340a:	189b      	adds	r3, r3, r2
 800340c:	19db      	adds	r3, r3, r7
 800340e:	2208      	movs	r2, #8
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e069      	b.n	80034e8 <UART_SetConfig+0x390>
 8003414:	231b      	movs	r3, #27
 8003416:	2220      	movs	r2, #32
 8003418:	189b      	adds	r3, r3, r2
 800341a:	19db      	adds	r3, r3, r7
 800341c:	2210      	movs	r2, #16
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e062      	b.n	80034e8 <UART_SetConfig+0x390>
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <UART_SetConfig+0x344>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d157      	bne.n	80034dc <UART_SetConfig+0x384>
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <UART_SetConfig+0x350>)
 800342e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003430:	23c0      	movs	r3, #192	; 0xc0
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4013      	ands	r3, r2
 8003436:	22c0      	movs	r2, #192	; 0xc0
 8003438:	0092      	lsls	r2, r2, #2
 800343a:	4293      	cmp	r3, r2
 800343c:	d040      	beq.n	80034c0 <UART_SetConfig+0x368>
 800343e:	22c0      	movs	r2, #192	; 0xc0
 8003440:	0092      	lsls	r2, r2, #2
 8003442:	4293      	cmp	r3, r2
 8003444:	d843      	bhi.n	80034ce <UART_SetConfig+0x376>
 8003446:	2280      	movs	r2, #128	; 0x80
 8003448:	0092      	lsls	r2, r2, #2
 800344a:	4293      	cmp	r3, r2
 800344c:	d011      	beq.n	8003472 <UART_SetConfig+0x31a>
 800344e:	2280      	movs	r2, #128	; 0x80
 8003450:	0092      	lsls	r2, r2, #2
 8003452:	4293      	cmp	r3, r2
 8003454:	d83b      	bhi.n	80034ce <UART_SetConfig+0x376>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <UART_SetConfig+0x30c>
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	0052      	lsls	r2, r2, #1
 800345e:	4293      	cmp	r3, r2
 8003460:	d00e      	beq.n	8003480 <UART_SetConfig+0x328>
 8003462:	e034      	b.n	80034ce <UART_SetConfig+0x376>
 8003464:	231b      	movs	r3, #27
 8003466:	2220      	movs	r2, #32
 8003468:	189b      	adds	r3, r3, r2
 800346a:	19db      	adds	r3, r3, r7
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e03a      	b.n	80034e8 <UART_SetConfig+0x390>
 8003472:	231b      	movs	r3, #27
 8003474:	2220      	movs	r2, #32
 8003476:	189b      	adds	r3, r3, r2
 8003478:	19db      	adds	r3, r3, r7
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e033      	b.n	80034e8 <UART_SetConfig+0x390>
 8003480:	231b      	movs	r3, #27
 8003482:	2220      	movs	r2, #32
 8003484:	189b      	adds	r3, r3, r2
 8003486:	19db      	adds	r3, r3, r7
 8003488:	2204      	movs	r2, #4
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	e02c      	b.n	80034e8 <UART_SetConfig+0x390>
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	cfff69f3 	.word	0xcfff69f3
 8003494:	ffffcfff 	.word	0xffffcfff
 8003498:	40008000 	.word	0x40008000
 800349c:	40008400 	.word	0x40008400
 80034a0:	11fff4ff 	.word	0x11fff4ff
 80034a4:	40013800 	.word	0x40013800
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40004400 	.word	0x40004400
 80034b0:	40004800 	.word	0x40004800
 80034b4:	40004c00 	.word	0x40004c00
 80034b8:	40005000 	.word	0x40005000
 80034bc:	40013c00 	.word	0x40013c00
 80034c0:	231b      	movs	r3, #27
 80034c2:	2220      	movs	r2, #32
 80034c4:	189b      	adds	r3, r3, r2
 80034c6:	19db      	adds	r3, r3, r7
 80034c8:	2208      	movs	r2, #8
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e00c      	b.n	80034e8 <UART_SetConfig+0x390>
 80034ce:	231b      	movs	r3, #27
 80034d0:	2220      	movs	r2, #32
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	19db      	adds	r3, r3, r7
 80034d6:	2210      	movs	r2, #16
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	e005      	b.n	80034e8 <UART_SetConfig+0x390>
 80034dc:	231b      	movs	r3, #27
 80034de:	2220      	movs	r2, #32
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	19db      	adds	r3, r3, r7
 80034e4:	2210      	movs	r2, #16
 80034e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4ac1      	ldr	r2, [pc, #772]	; (80037f4 <UART_SetConfig+0x69c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d005      	beq.n	80034fe <UART_SetConfig+0x3a6>
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4ac0      	ldr	r2, [pc, #768]	; (80037f8 <UART_SetConfig+0x6a0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d000      	beq.n	80034fe <UART_SetConfig+0x3a6>
 80034fc:	e093      	b.n	8003626 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034fe:	231b      	movs	r3, #27
 8003500:	2220      	movs	r2, #32
 8003502:	189b      	adds	r3, r3, r2
 8003504:	19db      	adds	r3, r3, r7
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d015      	beq.n	8003538 <UART_SetConfig+0x3e0>
 800350c:	dc18      	bgt.n	8003540 <UART_SetConfig+0x3e8>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d00d      	beq.n	800352e <UART_SetConfig+0x3d6>
 8003512:	dc15      	bgt.n	8003540 <UART_SetConfig+0x3e8>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <UART_SetConfig+0x3c6>
 8003518:	2b02      	cmp	r3, #2
 800351a:	d005      	beq.n	8003528 <UART_SetConfig+0x3d0>
 800351c:	e010      	b.n	8003540 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800351e:	f7fe ff19 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003522:	0003      	movs	r3, r0
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003526:	e014      	b.n	8003552 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003528:	4bb4      	ldr	r3, [pc, #720]	; (80037fc <UART_SetConfig+0x6a4>)
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800352c:	e011      	b.n	8003552 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352e:	f7fe fe85 	bl	800223c <HAL_RCC_GetSysClockFreq>
 8003532:	0003      	movs	r3, r0
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003536:	e00c      	b.n	8003552 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800353e:	e008      	b.n	8003552 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003544:	231a      	movs	r3, #26
 8003546:	2220      	movs	r2, #32
 8003548:	189b      	adds	r3, r3, r2
 800354a:	19db      	adds	r3, r3, r7
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
        break;
 8003550:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003554:	2b00      	cmp	r3, #0
 8003556:	d100      	bne.n	800355a <UART_SetConfig+0x402>
 8003558:	e135      	b.n	80037c6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800355e:	4ba8      	ldr	r3, [pc, #672]	; (8003800 <UART_SetConfig+0x6a8>)
 8003560:	0052      	lsls	r2, r2, #1
 8003562:	5ad3      	ldrh	r3, [r2, r3]
 8003564:	0019      	movs	r1, r3
 8003566:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003568:	f7fc fdcc 	bl	8000104 <__udivsi3>
 800356c:	0003      	movs	r3, r0
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	0013      	movs	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	189b      	adds	r3, r3, r2
 800357a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800357c:	429a      	cmp	r2, r3
 800357e:	d305      	bcc.n	800358c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003588:	429a      	cmp	r2, r3
 800358a:	d906      	bls.n	800359a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800358c:	231a      	movs	r3, #26
 800358e:	2220      	movs	r2, #32
 8003590:	189b      	adds	r3, r3, r2
 8003592:	19db      	adds	r3, r3, r7
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	e044      	b.n	8003624 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a6:	4b96      	ldr	r3, [pc, #600]	; (8003800 <UART_SetConfig+0x6a8>)
 80035a8:	0052      	lsls	r2, r2, #1
 80035aa:	5ad3      	ldrh	r3, [r2, r3]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	69b8      	ldr	r0, [r7, #24]
 80035b8:	69f9      	ldr	r1, [r7, #28]
 80035ba:	f7fc ff19 	bl	80003f0 <__aeabi_uldivmod>
 80035be:	0002      	movs	r2, r0
 80035c0:	000b      	movs	r3, r1
 80035c2:	0e11      	lsrs	r1, r2, #24
 80035c4:	021d      	lsls	r5, r3, #8
 80035c6:	430d      	orrs	r5, r1
 80035c8:	0214      	lsls	r4, r2, #8
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68b8      	ldr	r0, [r7, #8]
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	1900      	adds	r0, r0, r4
 80035dc:	4169      	adcs	r1, r5
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	2300      	movs	r3, #0
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f7fc ff00 	bl	80003f0 <__aeabi_uldivmod>
 80035f0:	0002      	movs	r2, r0
 80035f2:	000b      	movs	r3, r1
 80035f4:	0013      	movs	r3, r2
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fa:	23c0      	movs	r3, #192	; 0xc0
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	429a      	cmp	r2, r3
 8003600:	d309      	bcc.n	8003616 <UART_SetConfig+0x4be>
 8003602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	035b      	lsls	r3, r3, #13
 8003608:	429a      	cmp	r2, r3
 800360a:	d204      	bcs.n	8003616 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	e006      	b.n	8003624 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003616:	231a      	movs	r3, #26
 8003618:	2220      	movs	r2, #32
 800361a:	189b      	adds	r3, r3, r2
 800361c:	19db      	adds	r3, r3, r7
 800361e:	2201      	movs	r2, #1
 8003620:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003622:	e0d0      	b.n	80037c6 <UART_SetConfig+0x66e>
 8003624:	e0cf      	b.n	80037c6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	429a      	cmp	r2, r3
 8003630:	d000      	beq.n	8003634 <UART_SetConfig+0x4dc>
 8003632:	e070      	b.n	8003716 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003634:	231b      	movs	r3, #27
 8003636:	2220      	movs	r2, #32
 8003638:	189b      	adds	r3, r3, r2
 800363a:	19db      	adds	r3, r3, r7
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d015      	beq.n	800366e <UART_SetConfig+0x516>
 8003642:	dc18      	bgt.n	8003676 <UART_SetConfig+0x51e>
 8003644:	2b04      	cmp	r3, #4
 8003646:	d00d      	beq.n	8003664 <UART_SetConfig+0x50c>
 8003648:	dc15      	bgt.n	8003676 <UART_SetConfig+0x51e>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <UART_SetConfig+0x4fc>
 800364e:	2b02      	cmp	r3, #2
 8003650:	d005      	beq.n	800365e <UART_SetConfig+0x506>
 8003652:	e010      	b.n	8003676 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003654:	f7fe fe7e 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003658:	0003      	movs	r3, r0
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800365c:	e014      	b.n	8003688 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800365e:	4b67      	ldr	r3, [pc, #412]	; (80037fc <UART_SetConfig+0x6a4>)
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003662:	e011      	b.n	8003688 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003664:	f7fe fdea 	bl	800223c <HAL_RCC_GetSysClockFreq>
 8003668:	0003      	movs	r3, r0
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800366c:	e00c      	b.n	8003688 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003674:	e008      	b.n	8003688 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800367a:	231a      	movs	r3, #26
 800367c:	2220      	movs	r2, #32
 800367e:	189b      	adds	r3, r3, r2
 8003680:	19db      	adds	r3, r3, r7
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
        break;
 8003686:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368a:	2b00      	cmp	r3, #0
 800368c:	d100      	bne.n	8003690 <UART_SetConfig+0x538>
 800368e:	e09a      	b.n	80037c6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003694:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <UART_SetConfig+0x6a8>)
 8003696:	0052      	lsls	r2, r2, #1
 8003698:	5ad3      	ldrh	r3, [r2, r3]
 800369a:	0019      	movs	r1, r3
 800369c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800369e:	f7fc fd31 	bl	8000104 <__udivsi3>
 80036a2:	0003      	movs	r3, r0
 80036a4:	005a      	lsls	r2, r3, #1
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	18d2      	adds	r2, r2, r3
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	0019      	movs	r1, r3
 80036b4:	0010      	movs	r0, r2
 80036b6:	f7fc fd25 	bl	8000104 <__udivsi3>
 80036ba:	0003      	movs	r3, r0
 80036bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d921      	bls.n	8003708 <UART_SetConfig+0x5b0>
 80036c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	025b      	lsls	r3, r3, #9
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d21c      	bcs.n	8003708 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	200e      	movs	r0, #14
 80036d4:	2420      	movs	r4, #32
 80036d6:	1903      	adds	r3, r0, r4
 80036d8:	19db      	adds	r3, r3, r7
 80036da:	210f      	movs	r1, #15
 80036dc:	438a      	bics	r2, r1
 80036de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2207      	movs	r2, #7
 80036e8:	4013      	ands	r3, r2
 80036ea:	b299      	uxth	r1, r3
 80036ec:	1903      	adds	r3, r0, r4
 80036ee:	19db      	adds	r3, r3, r7
 80036f0:	1902      	adds	r2, r0, r4
 80036f2:	19d2      	adds	r2, r2, r7
 80036f4:	8812      	ldrh	r2, [r2, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1902      	adds	r2, r0, r4
 8003700:	19d2      	adds	r2, r2, r7
 8003702:	8812      	ldrh	r2, [r2, #0]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	e05e      	b.n	80037c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003708:	231a      	movs	r3, #26
 800370a:	2220      	movs	r2, #32
 800370c:	189b      	adds	r3, r3, r2
 800370e:	19db      	adds	r3, r3, r7
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e057      	b.n	80037c6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003716:	231b      	movs	r3, #27
 8003718:	2220      	movs	r2, #32
 800371a:	189b      	adds	r3, r3, r2
 800371c:	19db      	adds	r3, r3, r7
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d015      	beq.n	8003750 <UART_SetConfig+0x5f8>
 8003724:	dc18      	bgt.n	8003758 <UART_SetConfig+0x600>
 8003726:	2b04      	cmp	r3, #4
 8003728:	d00d      	beq.n	8003746 <UART_SetConfig+0x5ee>
 800372a:	dc15      	bgt.n	8003758 <UART_SetConfig+0x600>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <UART_SetConfig+0x5de>
 8003730:	2b02      	cmp	r3, #2
 8003732:	d005      	beq.n	8003740 <UART_SetConfig+0x5e8>
 8003734:	e010      	b.n	8003758 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003736:	f7fe fe0d 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 800373a:	0003      	movs	r3, r0
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800373e:	e014      	b.n	800376a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <UART_SetConfig+0x6a4>)
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003744:	e011      	b.n	800376a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003746:	f7fe fd79 	bl	800223c <HAL_RCC_GetSysClockFreq>
 800374a:	0003      	movs	r3, r0
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800374e:	e00c      	b.n	800376a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003756:	e008      	b.n	800376a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800375c:	231a      	movs	r3, #26
 800375e:	2220      	movs	r2, #32
 8003760:	189b      	adds	r3, r3, r2
 8003762:	19db      	adds	r3, r3, r7
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
        break;
 8003768:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800376a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02a      	beq.n	80037c6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003774:	4b22      	ldr	r3, [pc, #136]	; (8003800 <UART_SetConfig+0x6a8>)
 8003776:	0052      	lsls	r2, r2, #1
 8003778:	5ad3      	ldrh	r3, [r2, r3]
 800377a:	0019      	movs	r1, r3
 800377c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800377e:	f7fc fcc1 	bl	8000104 <__udivsi3>
 8003782:	0003      	movs	r3, r0
 8003784:	001a      	movs	r2, r3
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	18d2      	adds	r2, r2, r3
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	0019      	movs	r1, r3
 8003794:	0010      	movs	r0, r2
 8003796:	f7fc fcb5 	bl	8000104 <__udivsi3>
 800379a:	0003      	movs	r3, r0
 800379c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	2b0f      	cmp	r3, #15
 80037a2:	d90a      	bls.n	80037ba <UART_SetConfig+0x662>
 80037a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	025b      	lsls	r3, r3, #9
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d205      	bcs.n	80037ba <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60da      	str	r2, [r3, #12]
 80037b8:	e005      	b.n	80037c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80037ba:	231a      	movs	r3, #26
 80037bc:	2220      	movs	r2, #32
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	19db      	adds	r3, r3, r7
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	226a      	movs	r2, #106	; 0x6a
 80037ca:	2101      	movs	r1, #1
 80037cc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	2268      	movs	r2, #104	; 0x68
 80037d2:	2101      	movs	r1, #1
 80037d4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	2200      	movs	r2, #0
 80037da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	2200      	movs	r2, #0
 80037e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037e2:	231a      	movs	r3, #26
 80037e4:	2220      	movs	r2, #32
 80037e6:	189b      	adds	r3, r3, r2
 80037e8:	19db      	adds	r3, r3, r7
 80037ea:	781b      	ldrb	r3, [r3, #0]
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b010      	add	sp, #64	; 0x40
 80037f2:	bdb0      	pop	{r4, r5, r7, pc}
 80037f4:	40008000 	.word	0x40008000
 80037f8:	40008400 	.word	0x40008400
 80037fc:	00f42400 	.word	0x00f42400
 8003800:	080043d0 	.word	0x080043d0

08003804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	2201      	movs	r2, #1
 8003812:	4013      	ands	r3, r2
 8003814:	d00b      	beq.n	800382e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a4a      	ldr	r2, [pc, #296]	; (8003948 <UART_AdvFeatureConfig+0x144>)
 800381e:	4013      	ands	r3, r2
 8003820:	0019      	movs	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	2202      	movs	r2, #2
 8003834:	4013      	ands	r3, r2
 8003836:	d00b      	beq.n	8003850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4a43      	ldr	r2, [pc, #268]	; (800394c <UART_AdvFeatureConfig+0x148>)
 8003840:	4013      	ands	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	2204      	movs	r2, #4
 8003856:	4013      	ands	r3, r2
 8003858:	d00b      	beq.n	8003872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <UART_AdvFeatureConfig+0x14c>)
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	2208      	movs	r2, #8
 8003878:	4013      	ands	r3, r2
 800387a:	d00b      	beq.n	8003894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a34      	ldr	r2, [pc, #208]	; (8003954 <UART_AdvFeatureConfig+0x150>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	2210      	movs	r2, #16
 800389a:	4013      	ands	r3, r2
 800389c:	d00b      	beq.n	80038b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4a2c      	ldr	r2, [pc, #176]	; (8003958 <UART_AdvFeatureConfig+0x154>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	2220      	movs	r2, #32
 80038bc:	4013      	ands	r3, r2
 80038be:	d00b      	beq.n	80038d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	4a25      	ldr	r2, [pc, #148]	; (800395c <UART_AdvFeatureConfig+0x158>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	0019      	movs	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	2240      	movs	r2, #64	; 0x40
 80038de:	4013      	ands	r3, r2
 80038e0:	d01d      	beq.n	800391e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <UART_AdvFeatureConfig+0x15c>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	0019      	movs	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	035b      	lsls	r3, r3, #13
 8003902:	429a      	cmp	r2, r3
 8003904:	d10b      	bne.n	800391e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <UART_AdvFeatureConfig+0x160>)
 800390e:	4013      	ands	r3, r2
 8003910:	0019      	movs	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	4013      	ands	r3, r2
 8003926:	d00b      	beq.n	8003940 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <UART_AdvFeatureConfig+0x164>)
 8003930:	4013      	ands	r3, r2
 8003932:	0019      	movs	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  }
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}
 8003948:	fffdffff 	.word	0xfffdffff
 800394c:	fffeffff 	.word	0xfffeffff
 8003950:	fffbffff 	.word	0xfffbffff
 8003954:	ffff7fff 	.word	0xffff7fff
 8003958:	ffffefff 	.word	0xffffefff
 800395c:	ffffdfff 	.word	0xffffdfff
 8003960:	ffefffff 	.word	0xffefffff
 8003964:	ff9fffff 	.word	0xff9fffff
 8003968:	fff7ffff 	.word	0xfff7ffff

0800396c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	228c      	movs	r2, #140	; 0x8c
 8003978:	2100      	movs	r1, #0
 800397a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800397c:	f7fd f97c 	bl	8000c78 <HAL_GetTick>
 8003980:	0003      	movs	r3, r0
 8003982:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2208      	movs	r2, #8
 800398c:	4013      	ands	r3, r2
 800398e:	2b08      	cmp	r3, #8
 8003990:	d10c      	bne.n	80039ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	0391      	lsls	r1, r2, #14
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4a18      	ldr	r2, [pc, #96]	; (80039fc <UART_CheckIdleState+0x90>)
 800399c:	9200      	str	r2, [sp, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	f000 f82e 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 80039a4:	1e03      	subs	r3, r0, #0
 80039a6:	d001      	beq.n	80039ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e023      	b.n	80039f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2204      	movs	r2, #4
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d10c      	bne.n	80039d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	03d1      	lsls	r1, r2, #15
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <UART_CheckIdleState+0x90>)
 80039c4:	9200      	str	r2, [sp, #0]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f000 f81a 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d001      	beq.n	80039d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e00f      	b.n	80039f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2284      	movs	r2, #132	; 0x84
 80039d8:	2120      	movs	r1, #32
 80039da:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2288      	movs	r2, #136	; 0x88
 80039e0:	2120      	movs	r1, #32
 80039e2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	2100      	movs	r1, #0
 80039f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	0018      	movs	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b004      	add	sp, #16
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	01ffffff 	.word	0x01ffffff

08003a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b094      	sub	sp, #80	; 0x50
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	1dfb      	adds	r3, r7, #7
 8003a0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a10:	e0a7      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a14:	3301      	adds	r3, #1
 8003a16:	d100      	bne.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a18:	e0a3      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fd f92d 	bl	8000c78 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d13f      	bne.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a30:	f3ef 8310 	mrs	r3, PRIMASK
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a38:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	f383 8810 	msr	PRIMASK, r3
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	494e      	ldr	r1, [pc, #312]	; (8003b8c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a52:	400a      	ands	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a62:	f3ef 8310 	mrs	r3, PRIMASK
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	f383 8810 	msr	PRIMASK, r3
}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2101      	movs	r1, #1
 8003a84:	438a      	bics	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2284      	movs	r2, #132	; 0x84
 8003a98:	2120      	movs	r1, #32
 8003a9a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2288      	movs	r2, #136	; 0x88
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e069      	b.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d052      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d148      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ada:	f3ef 8310 	mrs	r3, PRIMASK
 8003ade:	613b      	str	r3, [r7, #16]
  return(result);
 8003ae0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f383 8810 	msr	PRIMASK, r3
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4924      	ldr	r1, [pc, #144]	; (8003b8c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f383 8810 	msr	PRIMASK, r3
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b10:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b12:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b16:	2301      	movs	r3, #1
 8003b18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	f383 8810 	msr	PRIMASK, r3
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	438a      	bics	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]
 8003b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2284      	movs	r2, #132	; 0x84
 8003b42:	2120      	movs	r1, #32
 8003b44:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2288      	movs	r2, #136	; 0x88
 8003b4a:	2120      	movs	r1, #32
 8003b4c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	228c      	movs	r2, #140	; 0x8c
 8003b52:	2120      	movs	r1, #32
 8003b54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e010      	b.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	425a      	negs	r2, r3
 8003b72:	4153      	adcs	r3, r2
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	001a      	movs	r2, r3
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d100      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x182>
 8003b80:	e747      	b.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	0018      	movs	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b014      	add	sp, #80	; 0x50
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	fffffe5f 	.word	0xfffffe5f

08003b90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b090      	sub	sp, #64	; 0x40
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	1dbb      	adds	r3, r7, #6
 8003b9c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1dba      	adds	r2, r7, #6
 8003ba8:	215c      	movs	r1, #92	; 0x5c
 8003baa:	8812      	ldrh	r2, [r2, #0]
 8003bac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	228c      	movs	r2, #140	; 0x8c
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2288      	movs	r2, #136	; 0x88
 8003bba:	2122      	movs	r1, #34	; 0x22
 8003bbc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d02c      	beq.n	8003c20 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bca:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <UART_Start_Receive_DMA+0x144>)
 8003bcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd2:	4a41      	ldr	r2, [pc, #260]	; (8003cd8 <UART_Start_Receive_DMA+0x148>)
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bda:	4a40      	ldr	r2, [pc, #256]	; (8003cdc <UART_Start_Receive_DMA+0x14c>)
 8003bdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be2:	2200      	movs	r2, #0
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3324      	adds	r3, #36	; 0x24
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	1dbb      	adds	r3, r7, #6
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	f7fd fa0a 	bl	8001014 <HAL_DMA_Start_IT>
 8003c00:	1e03      	subs	r3, r0, #0
 8003c02:	d00d      	beq.n	8003c20 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	228c      	movs	r2, #140	; 0x8c
 8003c08:	2110      	movs	r1, #16
 8003c0a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2280      	movs	r2, #128	; 0x80
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2288      	movs	r2, #136	; 0x88
 8003c18:	2120      	movs	r1, #32
 8003c1a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e054      	b.n	8003cca <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2280      	movs	r2, #128	; 0x80
 8003c24:	2100      	movs	r1, #0
 8003c26:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d019      	beq.n	8003c64 <UART_Start_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c30:	f3ef 8310 	mrs	r3, PRIMASK
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	f383 8810 	msr	PRIMASK, r3
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2180      	movs	r1, #128	; 0x80
 8003c52:	0049      	lsls	r1, r1, #1
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	f383 8810 	msr	PRIMASK, r3
}
 8003c62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c64:	f3ef 8310 	mrs	r3, PRIMASK
 8003c68:	613b      	str	r3, [r7, #16]
  return(result);
 8003c6a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c6e:	2301      	movs	r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f383 8810 	msr	PRIMASK, r3
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2101      	movs	r1, #1
 8003c86:	430a      	orrs	r2, r1
 8003c88:	609a      	str	r2, [r3, #8]
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f383 8810 	msr	PRIMASK, r3
}
 8003c94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c96:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c9c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2140      	movs	r1, #64	; 0x40
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	f383 8810 	msr	PRIMASK, r3
}
 8003cc6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b010      	add	sp, #64	; 0x40
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	08003e2d 	.word	0x08003e2d
 8003cd8:	08003f55 	.word	0x08003f55
 8003cdc:	08003f91 	.word	0x08003f91

08003ce0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cec:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cee:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	21c0      	movs	r1, #192	; 0xc0
 8003d0a:	438a      	bics	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f383 8810 	msr	PRIMASK, r3
}
 8003d18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d1e:	617b      	str	r3, [r7, #20]
  return(result);
 8003d20:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003d22:	623b      	str	r3, [r7, #32]
 8003d24:	2301      	movs	r3, #1
 8003d26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f383 8810 	msr	PRIMASK, r3
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4908      	ldr	r1, [pc, #32]	; (8003d5c <UART_EndTxTransfer+0x7c>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f383 8810 	msr	PRIMASK, r3
}
 8003d4a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2284      	movs	r2, #132	; 0x84
 8003d50:	2120      	movs	r1, #32
 8003d52:	5099      	str	r1, [r3, r2]
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b00a      	add	sp, #40	; 0x28
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	ff7fffff 	.word	0xff7fffff

08003d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08e      	sub	sp, #56	; 0x38
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d68:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
 8003d72:	2301      	movs	r3, #1
 8003d74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4926      	ldr	r1, [pc, #152]	; (8003e24 <UART_EndRxTransfer+0xc4>)
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f383 8810 	msr	PRIMASK, r3
}
 8003d98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9e:	623b      	str	r3, [r7, #32]
  return(result);
 8003da0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003da2:	633b      	str	r3, [r7, #48]	; 0x30
 8003da4:	2301      	movs	r3, #1
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	f383 8810 	msr	PRIMASK, r3
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	491b      	ldr	r1, [pc, #108]	; (8003e28 <UART_EndRxTransfer+0xc8>)
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	f383 8810 	msr	PRIMASK, r3
}
 8003dca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d118      	bne.n	8003e06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dda:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dde:	2301      	movs	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f383 8810 	msr	PRIMASK, r3
}
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2110      	movs	r1, #16
 8003df6:	438a      	bics	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f383 8810 	msr	PRIMASK, r3
}
 8003e04:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2288      	movs	r2, #136	; 0x88
 8003e0a:	2120      	movs	r1, #32
 8003e0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b00e      	add	sp, #56	; 0x38
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	fffffedf 	.word	0xfffffedf
 8003e28:	effffffe 	.word	0xeffffffe

08003e2c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b094      	sub	sp, #80	; 0x50
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2220      	movs	r2, #32
 8003e42:	4013      	ands	r3, r2
 8003e44:	d16f      	bne.n	8003f26 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e48:	225e      	movs	r2, #94	; 0x5e
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e52:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e54:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e58:	2301      	movs	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f383 8810 	msr	PRIMASK, r3
}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4938      	ldr	r1, [pc, #224]	; (8003f50 <UART_DMAReceiveCplt+0x124>)
 8003e70:	400a      	ands	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f383 8810 	msr	PRIMASK, r3
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e80:	f3ef 8310 	mrs	r3, PRIMASK
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	f383 8810 	msr	PRIMASK, r3
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eba:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec2:	f383 8810 	msr	PRIMASK, r3
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2140      	movs	r1, #64	; 0x40
 8003ed4:	438a      	bics	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	f383 8810 	msr	PRIMASK, r3
}
 8003ee2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee6:	2288      	movs	r2, #136	; 0x88
 8003ee8:	2120      	movs	r1, #32
 8003eea:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d118      	bne.n	8003f26 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003efa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efe:	2301      	movs	r3, #1
 8003f00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f383 8810 	msr	PRIMASK, r3
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2110      	movs	r1, #16
 8003f16:	438a      	bics	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f383 8810 	msr	PRIMASK, r3
}
 8003f24:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d108      	bne.n	8003f40 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f30:	225c      	movs	r2, #92	; 0x5c
 8003f32:	5a9a      	ldrh	r2, [r3, r2]
 8003f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f36:	0011      	movs	r1, r2
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff f901 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f3e:	e003      	b.n	8003f48 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8003f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fc fb6a 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b014      	add	sp, #80	; 0x50
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	fffffeff 	.word	0xfffffeff

08003f54 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d10a      	bne.n	8003f80 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	225c      	movs	r2, #92	; 0x5c
 8003f6e:	5a9b      	ldrh	r3, [r3, r2]
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff f8e1 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f7e:	e003      	b.n	8003f88 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	0018      	movs	r0, r3
 8003f84:	f7ff f8cc 	bl	8003120 <HAL_UART_RxHalfCpltCallback>
}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b004      	add	sp, #16
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2284      	movs	r2, #132	; 0x84
 8003fa2:	589b      	ldr	r3, [r3, r2]
 8003fa4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2288      	movs	r2, #136	; 0x88
 8003faa:	589b      	ldr	r3, [r3, r2]
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2280      	movs	r2, #128	; 0x80
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b80      	cmp	r3, #128	; 0x80
 8003fba:	d10a      	bne.n	8003fd2 <UART_DMAError+0x42>
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b21      	cmp	r3, #33	; 0x21
 8003fc0:	d107      	bne.n	8003fd2 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2256      	movs	r2, #86	; 0x56
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7ff fe87 	bl	8003ce0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2240      	movs	r2, #64	; 0x40
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d10a      	bne.n	8003ff6 <UART_DMAError+0x66>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b22      	cmp	r3, #34	; 0x22
 8003fe4:	d107      	bne.n	8003ff6 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	225e      	movs	r2, #94	; 0x5e
 8003fea:	2100      	movs	r1, #0
 8003fec:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff feb5 	bl	8003d60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	228c      	movs	r2, #140	; 0x8c
 8003ffa:	589b      	ldr	r3, [r3, r2]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	431a      	orrs	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	218c      	movs	r1, #140	; 0x8c
 8004004:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff f891 	bl	8003130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b006      	add	sp, #24
 8004014:	bd80      	pop	{r7, pc}

08004016 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	225e      	movs	r2, #94	; 0x5e
 8004028:	2100      	movs	r1, #0
 800402a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2256      	movs	r2, #86	; 0x56
 8004030:	2100      	movs	r1, #0
 8004032:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	0018      	movs	r0, r3
 8004038:	f7ff f87a 	bl	8003130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b004      	add	sp, #16
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404c:	f3ef 8310 	mrs	r3, PRIMASK
 8004050:	60bb      	str	r3, [r7, #8]
  return(result);
 8004052:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	2301      	movs	r3, #1
 8004058:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f383 8810 	msr	PRIMASK, r3
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2140      	movs	r1, #64	; 0x40
 800406e:	438a      	bics	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f383 8810 	msr	PRIMASK, r3
}
 800407c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2284      	movs	r2, #132	; 0x84
 8004082:	2120      	movs	r1, #32
 8004084:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff f83e 	bl	8003110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b006      	add	sp, #24
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b002      	add	sp, #8
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2280      	movs	r2, #128	; 0x80
 80040d8:	5c9b      	ldrb	r3, [r3, r2]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80040de:	2302      	movs	r3, #2
 80040e0:	e027      	b.n	8004132 <HAL_UARTEx_DisableFifoMode+0x66>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2284      	movs	r2, #132	; 0x84
 80040ee:	2124      	movs	r1, #36	; 0x24
 80040f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2101      	movs	r1, #1
 8004106:	438a      	bics	r2, r1
 8004108:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a0b      	ldr	r2, [pc, #44]	; (800413c <HAL_UARTEx_DisableFifoMode+0x70>)
 800410e:	4013      	ands	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2284      	movs	r2, #132	; 0x84
 8004124:	2120      	movs	r1, #32
 8004126:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	2100      	movs	r1, #0
 800412e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b004      	add	sp, #16
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	dfffffff 	.word	0xdfffffff

08004140 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	5c9b      	ldrb	r3, [r3, r2]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004154:	2302      	movs	r3, #2
 8004156:	e02e      	b.n	80041b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	2101      	movs	r1, #1
 800415e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2284      	movs	r2, #132	; 0x84
 8004164:	2124      	movs	r1, #36	; 0x24
 8004166:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2101      	movs	r1, #1
 800417c:	438a      	bics	r2, r1
 800417e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	08d9      	lsrs	r1, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 f854 	bl	8004244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2284      	movs	r2, #132	; 0x84
 80041a8:	2120      	movs	r1, #32
 80041aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2280      	movs	r2, #128	; 0x80
 80041b0:	2100      	movs	r1, #0
 80041b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b004      	add	sp, #16
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2280      	movs	r2, #128	; 0x80
 80041ce:	5c9b      	ldrb	r3, [r3, r2]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e02f      	b.n	8004238 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2284      	movs	r2, #132	; 0x84
 80041e4:	2124      	movs	r1, #36	; 0x24
 80041e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2101      	movs	r1, #1
 80041fc:	438a      	bics	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004208:	4013      	ands	r3, r2
 800420a:	0019      	movs	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 f813 	bl	8004244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2284      	movs	r2, #132	; 0x84
 800422a:	2120      	movs	r1, #32
 800422c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	2100      	movs	r1, #0
 8004234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	0018      	movs	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	b004      	add	sp, #16
 800423e:	bd80      	pop	{r7, pc}
 8004240:	f1ffffff 	.word	0xf1ffffff

08004244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004250:	2b00      	cmp	r3, #0
 8004252:	d108      	bne.n	8004266 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	226a      	movs	r2, #106	; 0x6a
 8004258:	2101      	movs	r1, #1
 800425a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2268      	movs	r2, #104	; 0x68
 8004260:	2101      	movs	r1, #1
 8004262:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004264:	e043      	b.n	80042ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004266:	260f      	movs	r6, #15
 8004268:	19bb      	adds	r3, r7, r6
 800426a:	2208      	movs	r2, #8
 800426c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800426e:	200e      	movs	r0, #14
 8004270:	183b      	adds	r3, r7, r0
 8004272:	2208      	movs	r2, #8
 8004274:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	0e5b      	lsrs	r3, r3, #25
 800427e:	b2da      	uxtb	r2, r3
 8004280:	240d      	movs	r4, #13
 8004282:	193b      	adds	r3, r7, r4
 8004284:	2107      	movs	r1, #7
 8004286:	400a      	ands	r2, r1
 8004288:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	0f5b      	lsrs	r3, r3, #29
 8004292:	b2da      	uxtb	r2, r3
 8004294:	250c      	movs	r5, #12
 8004296:	197b      	adds	r3, r7, r5
 8004298:	2107      	movs	r1, #7
 800429a:	400a      	ands	r2, r1
 800429c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800429e:	183b      	adds	r3, r7, r0
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	197a      	adds	r2, r7, r5
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	4914      	ldr	r1, [pc, #80]	; (80042f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80042a8:	5c8a      	ldrb	r2, [r1, r2]
 80042aa:	435a      	muls	r2, r3
 80042ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80042ae:	197b      	adds	r3, r7, r5
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	4a12      	ldr	r2, [pc, #72]	; (80042fc <UARTEx_SetNbDataToProcess+0xb8>)
 80042b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042b6:	0019      	movs	r1, r3
 80042b8:	f7fb ffae 	bl	8000218 <__divsi3>
 80042bc:	0003      	movs	r3, r0
 80042be:	b299      	uxth	r1, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	226a      	movs	r2, #106	; 0x6a
 80042c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042c6:	19bb      	adds	r3, r7, r6
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	193a      	adds	r2, r7, r4
 80042cc:	7812      	ldrb	r2, [r2, #0]
 80042ce:	490a      	ldr	r1, [pc, #40]	; (80042f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80042d0:	5c8a      	ldrb	r2, [r1, r2]
 80042d2:	435a      	muls	r2, r3
 80042d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80042d6:	193b      	adds	r3, r7, r4
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	4a08      	ldr	r2, [pc, #32]	; (80042fc <UARTEx_SetNbDataToProcess+0xb8>)
 80042dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042de:	0019      	movs	r1, r3
 80042e0:	f7fb ff9a 	bl	8000218 <__divsi3>
 80042e4:	0003      	movs	r3, r0
 80042e6:	b299      	uxth	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2268      	movs	r2, #104	; 0x68
 80042ec:	5299      	strh	r1, [r3, r2]
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b005      	add	sp, #20
 80042f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	080043e8 	.word	0x080043e8
 80042fc:	080043f0 	.word	0x080043f0

08004300 <__libc_init_array>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	2600      	movs	r6, #0
 8004304:	4d0c      	ldr	r5, [pc, #48]	; (8004338 <__libc_init_array+0x38>)
 8004306:	4c0d      	ldr	r4, [pc, #52]	; (800433c <__libc_init_array+0x3c>)
 8004308:	1b64      	subs	r4, r4, r5
 800430a:	10a4      	asrs	r4, r4, #2
 800430c:	42a6      	cmp	r6, r4
 800430e:	d109      	bne.n	8004324 <__libc_init_array+0x24>
 8004310:	2600      	movs	r6, #0
 8004312:	f000 f821 	bl	8004358 <_init>
 8004316:	4d0a      	ldr	r5, [pc, #40]	; (8004340 <__libc_init_array+0x40>)
 8004318:	4c0a      	ldr	r4, [pc, #40]	; (8004344 <__libc_init_array+0x44>)
 800431a:	1b64      	subs	r4, r4, r5
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	42a6      	cmp	r6, r4
 8004320:	d105      	bne.n	800432e <__libc_init_array+0x2e>
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	00b3      	lsls	r3, r6, #2
 8004326:	58eb      	ldr	r3, [r5, r3]
 8004328:	4798      	blx	r3
 800432a:	3601      	adds	r6, #1
 800432c:	e7ee      	b.n	800430c <__libc_init_array+0xc>
 800432e:	00b3      	lsls	r3, r6, #2
 8004330:	58eb      	ldr	r3, [r5, r3]
 8004332:	4798      	blx	r3
 8004334:	3601      	adds	r6, #1
 8004336:	e7f2      	b.n	800431e <__libc_init_array+0x1e>
 8004338:	08004400 	.word	0x08004400
 800433c:	08004400 	.word	0x08004400
 8004340:	08004400 	.word	0x08004400
 8004344:	08004404 	.word	0x08004404

08004348 <memset>:
 8004348:	0003      	movs	r3, r0
 800434a:	1882      	adds	r2, r0, r2
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	7019      	strb	r1, [r3, #0]
 8004354:	3301      	adds	r3, #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <_init>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr

08004364 <_fini>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr
